[{"c": "Abbrev", "d": "\nCalculates the set of unambiguous abbreviations for a given set of strings.\nrequire 'abbrev'\nrequire 'pp'\n\npp Abbrev.abbrev(['ruby'])\n#=>  {\"ruby\"=>\"ruby\", \"rub\"=>\"ruby\", \"ru\"=>\"ruby\", \"r\"=>\"ruby\"}\n\npp Abbrev.abbrev(%w{ ruby rules })\n\nGenerates:\n{ \"ruby\"  =>  \"ruby\",\n  \"rub\"   =>  \"ruby\",\n  \"rules\" =>  \"rules\",\n  \"rule\"  =>  \"rules\",\n  \"rul\"   =>  \"rules\" }\n\nIt also provides an array core extension, Array#abbrev.\npp %w{ summer winter }.abbrev\n\nGenerates:\n{ \"summer\"  => \"summer\",\n  \"summe\"   => \"summer\",\n  \"summ\"    => \"summer\",\n  \"sum\"     => \"summer\",\n  \"su\"      => \"summer\",\n  \"s\"       => \"summer\",\n  \"winter\"  => \"winter\",\n  \"winte\"   => \"winter\",\n  \"wint\"    => \"winter\",\n  \"win\"     => \"winter\",\n  \"wi\"      => \"winter\",\n  \"w\"       => \"winter\" }\n\n"}, {"c": "ACL", "d": "\nSimple Access Control Lists.\nAccess control lists are composed of \u00e2\u20ac\u0153allow\u00e2\u20ac and \u00e2\u20ac\u0153deny\u00e2\u20ac halves to control\naccess.  Use \u00e2\u20ac\u0153all\u00e2\u20ac or \u00e2\u20ac\u0153*\u00e2\u20ac to match any address.  To match a specific\naddress use any address or address mask that IPAddr can understand.\nExample:\nlist = %w[\n  deny all\n  allow 192.168.1.1\n  allow ::ffff:192.168.1.2\n  allow 192.168.1.3\n]\n\n# From Socket#peeraddr, see also ACL#allow_socket?\naddr = [\"AF_INET\", 10, \"lc630\", \"192.168.1.3\"]\n\nacl = ACL.new\np acl.allow_addr?(addr) # => true\n\nacl = ACL.new(list, ACL::DENY_ALLOW)\np acl.allow_addr?(addr) # => true\n\n"}, {"c": "Addrinfo", "d": "\nThe Addrinfo class maps struct\naddrinfo to ruby.  This structure identifies an Internet host and a\nservice.\n"}, {"c": "ARGF", "d": "\nARGF is a stream designed for use in scripts that process\nfiles given as command-line arguments or passed in via STDIN.\nThe arguments passed to your script are stored in the ARGV\nArray, one argument per element. ARGF assumes that any\narguments that aren't filenames have been removed from\nARGV. For example:\n$ ruby argf.rb --verbose file1 file2\n\nARGV  #=> [\"--verbose\", \"file1\", \"file2\"]\noption = ARGV.shift #=> \"--verbose\"\nARGV  #=> [\"file1\", \"file2\"]\nYou can now use ARGF to work with a concatenation of each of\nthese named files. For instance, ARGF.read will return the\ncontents of file1 followed by the contents of file2.\nAfter a file in ARGV has been read ARGF removes\nit from the Array. Thus, after all files have been read ARGV\nwill be empty.\nYou can manipulate ARGV yourself to control what\nARGF operates on. If you remove a file from ARGV,\nit is ignored by ARGF; if you add files to ARGV,\nthey are treated as if they were named on the command line. For example:\nARGV.replace [\"file1\"]\nARGF.readlines # Returns the contents of file1 as an Array\nARGV           #=> []\nARGV.replace [\"file2\", \"file3\"]\nARGF.read      # Returns the contents of file2 and file3\n\nIf ARGV is empty, ARGF acts as if it contained\nSTDIN, i.e. the data piped to your script. For example:\n$ echo \"glark\" | ruby -e 'p ARGF.read'\n\"glark\\n\"\n"}, {"c": "ArgumentError", "d": "\nRaised when the arguments are wrong and there isn't a more specific Exception class.\nEx: passing the wrong number of arguments\n[1, 2, 3].first(4, 5)\n\nraises the exception:\nArgumentError: wrong number of arguments (given 2, expected 1)\nEx: passing an argument that is not acceptable:\n[1, 2, 3].first(-4)\n\nraises the exception:\nArgumentError: negative array size\n"}, {"c": "Array", "d": "\nArrays are ordered, integer-indexed collections of any object.\nArray indexing starts at 0, as in C or Java.  A negative index is assumed\nto be relative to the end of the array\u00e2\u20ac\u201dthat is, an index of -1 indicates\nthe last element of the array, -2 is the next to last element in the array,\nand so on.\nCreating Arrays\u00b6 \u2191\nA new array can be created by using the literal constructor\n[].  Arrays can contain different types of objects.  For\nexample, the array below contains an Integer, a\nString and a Float:\nary = [1, \"two\", 3.0] #=> [1, \"two\", 3.0]\n\nAn array can also be created by explicitly calling ::new with zero, one (the initial size\nof the Array) or two arguments (the initial size and a default object).\nary = Array.new    #=> []\nArray.new(3)       #=> [nil, nil, nil]\nArray.new(3, true) #=> [true, true, true]\n\nNote that the second argument populates the array with references to the\nsame object.  Therefore, it is only recommended in cases when you need to\ninstantiate arrays with natively immutable objects such as Symbols,\nnumbers, true or false.\nTo create an array with separate objects a block can be passed instead.\nThis method is safe to use with mutable objects such as hashes, strings or\nother arrays:\nArray.new(4) { Hash.new }  #=> [{}, {}, {}, {}]\nArray.new(4) {|i| i.to_s } #=> [\"0\", \"1\", \"2\", \"3\"]\n\nThis is also a quick way to build up multi-dimensional arrays:\nempty_table = Array.new(3) { Array.new(3) }\n#=> [[nil, nil, nil], [nil, nil, nil], [nil, nil, nil]]\n\nAn array can also be created by using the Array() method, provided by\nKernel, which tries to call to_ary, then to_a on its argument.\nArray({:a => \"a\", :b => \"b\"}) #=> [[:a, \"a\"], [:b, \"b\"]]\n\nExample Usage\u00b6 \u2191\nIn addition to the methods it mixes in through the Enumerable module, the Array class has\nproprietary methods for accessing, searching and otherwise manipulating\narrays.\nSome of the more common ones are illustrated below.\nAccessing Elements\u00b6 \u2191\nElements in an array can be retrieved using the #[] method.  It can take a single\ninteger argument (a numeric index), a pair of arguments (start and length)\nor a range. Negative indices start counting from the end, with -1 being the\nlast element.\narr = [1, 2, 3, 4, 5, 6]\narr[2]    #=> 3\narr[100]  #=> nil\narr[-3]   #=> 4\narr[2, 3] #=> [3, 4, 5]\narr[1..4] #=> [2, 3, 4, 5]\narr[1..-3] #=> [2, 3, 4]\n\nAnother way to access a particular array element is by using the at method\narr.at(0) #=> 1\n\nThe slice method works in an\nidentical manner to #[].\nTo raise an error for indices outside of the array bounds or else to\nprovide a default value when that happens, you can use fetch.\narr = ['a', 'b', 'c', 'd', 'e', 'f']\narr.fetch(100) #=> IndexError: index 100 outside of array bounds: -6...6\narr.fetch(100, \"oops\") #=> \"oops\"\n\nThe special methods first and last will return the first and last\nelements of an array, respectively.\narr.first #=> 1\narr.last  #=> 6\n\nTo return the first n elements of an array, use take\narr.take(3) #=> [1, 2, 3]\n\ndrop does the opposite of take, by returning the elements after\nn elements have been dropped:\narr.drop(3) #=> [4, 5, 6]\n\nObtaining Information about an Array\u00b6 \u2191\nArrays keep track of their own length at all times.  To query an array\nabout the number of elements it contains, use length, count or size.\nbrowsers = ['Chrome', 'Firefox', 'Safari', 'Opera', 'IE']\nbrowsers.length #=> 5\nbrowsers.count #=> 5\n\nTo check whether an array contains any elements at all\nbrowsers.empty? #=> false\n\nTo check whether a particular item is included in the array\nbrowsers.include?('Konqueror') #=> false\n\nAdding Items to Arrays\u00b6 \u2191\nItems can be added to the end of an array by using either push or <<\narr = [1, 2, 3, 4]\narr.push(5) #=> [1, 2, 3, 4, 5]\narr << 6    #=> [1, 2, 3, 4, 5, 6]\n\nunshift will add a new item to\nthe beginning of an array.\narr.unshift(0) #=> [0, 1, 2, 3, 4, 5, 6]\n\nWith insert you can add a new\nelement to an array at any position.\narr.insert(3, 'apple')  #=> [0, 1, 2, 'apple', 3, 4, 5, 6]\n\nUsing the insert method, you can\nalso insert multiple values at once:\narr.insert(3, 'orange', 'pear', 'grapefruit')\n#=> [0, 1, 2, \"orange\", \"pear\", \"grapefruit\", \"apple\", 3, 4, 5, 6]\n\nRemoving Items from an Array\u00b6 \u2191\nThe method pop removes the last\nelement in an array and returns it:\narr =  [1, 2, 3, 4, 5, 6]\narr.pop #=> 6\narr #=> [1, 2, 3, 4, 5]\n\nTo retrieve and at the same time remove the first item, use shift:\narr.shift #=> 1\narr #=> [2, 3, 4, 5]\n\nTo delete an element at a particular index:\narr.delete_at(2) #=> 4\narr #=> [2, 3, 5]\n\nTo delete a particular element anywhere in an array, use delete:\narr = [1, 2, 2, 3]\narr.delete(2) #=> 2\narr #=> [1,3]\n\nA useful method if you need to remove nil values from an array\nis compact:\narr = ['foo', 0, nil, 'bar', 7, 'baz', nil]\narr.compact  #=> ['foo', 0, 'bar', 7, 'baz']\narr          #=> ['foo', 0, nil, 'bar', 7, 'baz', nil]\narr.compact! #=> ['foo', 0, 'bar', 7, 'baz']\narr          #=> ['foo', 0, 'bar', 7, 'baz']\n\nAnother common need is to remove duplicate elements from an array.\nIt has the non-destructive uniq, and\ndestructive method uniq!\narr = [2, 5, 6, 556, 6, 6, 8, 9, 0, 123, 556]\narr.uniq #=> [2, 5, 6, 556, 8, 9, 0, 123]\n\nIterating over Arrays\u00b6 \u2191\nLike all classes that include the Enumerable\nmodule, Array has an each method, which defines what elements should be\niterated over and how.  In case of Array's each, all elements in the Array\ninstance are yielded to the supplied block in sequence.\nNote that this operation leaves the array unchanged.\narr = [1, 2, 3, 4, 5]\narr.each { |a| print a -= 10, \" \" }\n# prints: -9 -8 -7 -6 -5\n#=> [1, 2, 3, 4, 5]\n\nAnother sometimes useful iterator is reverse_each which will iterate\nover the elements in the array in reverse order.\nwords = %w[first second third fourth fifth sixth]\nstr = \"\"\nwords.reverse_each { |word| str += \"#{word} \" }\np str #=> \"sixth fifth fourth third second first \"\n\nThe map method can be used to create\na new array based on the original array, but with the values modified by\nthe supplied block:\narr.map { |a| 2*a }   #=> [2, 4, 6, 8, 10]\narr                   #=> [1, 2, 3, 4, 5]\narr.map! { |a| a**2 } #=> [1, 4, 9, 16, 25]\narr                   #=> [1, 4, 9, 16, 25]\n\nSelecting Items from an Array\u00b6 \u2191\nElements can be selected from an array according to criteria defined in a\nblock.  The selection can happen in a destructive or a non-destructive\nmanner.  While the destructive operations will modify the array they were\ncalled on, the non-destructive methods usually return a new array with the\nselected elements, but leave the original array unchanged.\nNon-destructive Selection\u00b6 \u2191\narr = [1, 2, 3, 4, 5, 6]\narr.select { |a| a > 3 }     #=> [4, 5, 6]\narr.reject { |a| a < 3 }     #=> [3, 4, 5, 6]\narr.drop_while { |a| a < 4 } #=> [4, 5, 6]\narr                          #=> [1, 2, 3, 4, 5, 6]\n\nDestructive Selection\u00b6 \u2191\nselect! and reject! are the corresponding\ndestructive methods to select and\nreject\nSimilar to select vs. reject, delete_if and keep_if have the exact opposite\nresult when supplied with the same block:\narr.delete_if { |a| a < 4 } #=> [4, 5, 6]\narr                         #=> [4, 5, 6]\n\narr = [1, 2, 3, 4, 5, 6]\narr.keep_if { |a| a < 4 } #=> [1, 2, 3]\narr                       #=> [1, 2, 3]\n\n"}, {"c": "Base64", "d": "\nThe Base64 module provides for the encoding\n(#encode64, strict_encode64, urlsafe_encode64) and\ndecoding (#decode64, strict_decode64, urlsafe_decode64) of\nbinary data using a Base64 representation.\nExample\u00b6 \u2191\nA simple encoding and decoding.\nrequire \"base64\"\n\nenc   = Base64.encode64('Send reinforcements')\n                    # -> \"U2VuZCByZWluZm9yY2VtZW50cw==\\n\"\nplain = Base64.decode64(enc)\n                    # -> \"Send reinforcements\"\n\nThe purpose of using base64 to encode data is that it translates any binary\ndata into purely printable characters.\n"}, {"c": "BasicObject", "d": "\nBasicObject is the parent class of all\nclasses in Ruby.  It's an explicit blank class.\nBasicObject can be used for creating object\nhierarchies independent of Ruby's object hierarchy, proxy objects like\nthe Delegator class, or other uses where\nnamespace pollution from Ruby's methods and classes must be avoided.\nTo avoid polluting BasicObject for other\nusers an appropriately named subclass of BasicObject should be created instead of\ndirectly modifying BasicObject:\nclass MyObjectSystem < BasicObject\nend\n\nBasicObject does not include Kernel (for\nmethods like puts) and BasicObject is outside of the namespace of the\nstandard library so common classes will not be found without using a full\nclass path.\nA variety of strategies can be used to provide useful portions of the\nstandard library to subclasses of BasicObject.  A subclass could include\nKernel to obtain puts, exit, etc.  A\ncustom Kernel-like module could be created and included or delegation can\nbe used via method_missing:\nclass MyObjectSystem < BasicObject\n  DELEGATE = [:puts, :p]\n\n  def method_missing(name, *args, &block)\n    super unless DELEGATE.include? name\n    ::Kernel.send(name, *args, &block)\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    DELEGATE.include?(name) or super\n  end\nend\n\nAccess to classes and modules from the Ruby standard library can be\nobtained in a BasicObject subclass by\nreferencing the desired constant from the root like ::File or\n::Enumerator. Like method_missing,\nconst_missing can be used to delegate constant lookup to\nObject:\nclass MyObjectSystem < BasicObject\n  def self.const_missing(name)\n    ::Object.const_get(name)\n  end\nend\n\n"}, {"c": "BasicSocket", "d": "\nBasicSocket is the super class for all the\nSocket classes.\n"}, {"c": "Benchmark", "d": "\nThe Benchmark module provides methods to\nmeasure and report the time used to execute Ruby code.\n\nMeasure the time to construct the string given by the expression\n\"a\"*1_000_000_000:\nrequire 'benchmark'\n\nputs Benchmark.measure { \"a\"*1_000_000_000 }\n\nOn my machine (OSX 10.8.3 on i5 1.7 GHz) this generates:\n0.350000   0.400000   0.750000 (  0.835234)\nThis report shows the user CPU time, system CPU time, the sum of the user\nand system CPU times, and the elapsed real time. The unit of time is\nseconds.\n\nDo some experiments sequentially using the bm method:\nrequire 'benchmark'\n\nn = 5000000\nBenchmark.bm do |x|\n  x.report { for i in 1..n; a = \"1\"; end }\n  x.report { n.times do   ; a = \"1\"; end }\n  x.report { 1.upto(n) do ; a = \"1\"; end }\nend\n\nThe result:\n    user     system      total        real\n1.010000   0.000000   1.010000 (  1.014479)\n1.000000   0.000000   1.000000 (  0.998261)\n0.980000   0.000000   0.980000 (  0.981335)\n\nContinuing the previous example, put a label in each report:\nrequire 'benchmark'\n\nn = 5000000\nBenchmark.bm(7) do |x|\n  x.report(\"for:\")   { for i in 1..n; a = \"1\"; end }\n  x.report(\"times:\") { n.times do   ; a = \"1\"; end }\n  x.report(\"upto:\")  { 1.upto(n) do ; a = \"1\"; end }\nend\n\n\nThe result:\n              user     system      total        real\nfor:      1.010000   0.000000   1.010000 (  1.015688)\ntimes:    1.000000   0.000000   1.000000 (  1.003611)\nupto:     1.030000   0.000000   1.030000 (  1.028098)\n\nThe times for some benchmarks depend on the order in which items are run. \nThese differences are due to the cost of memory allocation and garbage\ncollection. To avoid these discrepancies, the bmbm method is provided.  For\nexample, to compare ways to sort an array of floats:\nrequire 'benchmark'\n\narray = (1..1000000).map { rand }\n\nBenchmark.bmbm do |x|\n  x.report(\"sort!\") { array.dup.sort! }\n  x.report(\"sort\")  { array.dup.sort  }\nend\n\nThe result:\nRehearsal -----------------------------------------\nsort!   1.490000   0.010000   1.500000 (  1.490520)\nsort    1.460000   0.000000   1.460000 (  1.463025)\n-------------------------------- total: 2.960000sec\n\n            user     system      total        real\nsort!   1.460000   0.000000   1.460000 (  1.460465)\nsort    1.450000   0.010000   1.460000 (  1.448327)\n\nReport statistics of sequential experiments with unique labels, using the\nbenchmark method:\nrequire 'benchmark'\ninclude Benchmark         # we need the CAPTION and FORMAT constants\n\nn = 5000000\nBenchmark.benchmark(CAPTION, 7, FORMAT, \">total:\", \">avg:\") do |x|\n  tf = x.report(\"for:\")   { for i in 1..n; a = \"1\"; end }\n  tt = x.report(\"times:\") { n.times do   ; a = \"1\"; end }\n  tu = x.report(\"upto:\")  { 1.upto(n) do ; a = \"1\"; end }\n  [tf+tt+tu, (tf+tt+tu)/3]\nend\n\nThe result:\n             user     system      total        real\nfor:      0.950000   0.000000   0.950000 (  0.952039)\ntimes:    0.980000   0.000000   0.980000 (  0.984938)\nupto:     0.950000   0.000000   0.950000 (  0.946787)\n>total:   2.880000   0.000000   2.880000 (  2.883764)\n>avg:     0.960000   0.000000   0.960000 (  0.961255)\n\n"}, {"c": "BigDecimal", "d": "\nBigDecimal provides arbitrary-precision\nfloating point decimal arithmetic.\nIntroduction\u00b6 \u2191\nRuby provides built-in support for arbitrary precision integer arithmetic.\nFor example:\n42**13  #=>   1265437718438866624512\n\nBigDecimal provides similar support for very\nlarge or very accurate floating point numbers.\nDecimal arithmetic is also useful for general calculation, because it\nprovides the correct answers people expect\u00e2\u20ac\u201cwhereas normal binary floating\npoint arithmetic often introduces subtle errors because of the conversion\nbetween base 10 and base 2.\nFor example, try:\nsum = 0\n10_000.times do\n  sum = sum + 0.0001\nend\nprint sum #=> 0.9999999999999062\n\nand contrast with the output from:\nrequire 'bigdecimal'\n\nsum = BigDecimal(\"0\")\n10_000.times do\n  sum = sum + BigDecimal(\"0.0001\")\nend\nprint sum #=> 0.1E1\n\nSimilarly:\n(BigDecimal(\"1.2\") - BigDecimal(\"1.0\")) == BigDecimal(\"0.2\") #=> true\n\n(1.2 - 1.0) == 0.2 #=> false\n\nSpecial features of accurate decimal arithmetic\u00b6 \u2191\nBecause BigDecimal is more accurate than\nnormal binary floating point arithmetic, it requires some special values.\nInfinity\u00b6 \u2191\nBigDecimal sometimes needs to return\ninfinity, for example if you divide a value by zero.\nBigDecimal(\"1.0\") / BigDecimal(\"0.0\")  #=> Infinity\nBigDecimal(\"-1.0\") / BigDecimal(\"0.0\")  #=> -Infinity\n\nYou can represent infinite numbers to BigDecimal using the strings\n'Infinity', '+Infinity' and\n'-Infinity' (case-sensitive)\nNot a Number\u00b6 \u2191\nWhen a computation results in an undefined value, the special value\nNaN (for 'not a number') is returned.\nExample:\nBigDecimal(\"0.0\") / BigDecimal(\"0.0\") #=> NaN\n\nYou can also create undefined values.\nNaN is never considered to be the same as any other value, even NaN itself:\nn = BigDecimal('NaN')\nn == 0.0 #=> false\nn == n #=> false\n\nPositive and negative zero\u00b6 \u2191\nIf a computation results in a value which is too small to be represented as\na BigDecimal within the currently specified\nlimits of precision, zero must be returned.\nIf the value which is too small to be represented is negative, a BigDecimal value of negative zero is returned.\nBigDecimal(\"1.0\") / BigDecimal(\"-Infinity\") #=> -0.0\n\nIf the value is positive, a value of positive zero is returned.\nBigDecimal(\"1.0\") / BigDecimal(\"Infinity\") #=> 0.0\n\n(See ::mode for how to specify\nlimits of precision.)\nNote that -0.0 and 0.0 are considered to be the\nsame for the purposes of comparison.\nNote also that in mathematics, there is no particular concept of negative\nor positive zero; true mathematical zero has no sign.\nbigdecimal/util\u00b6 \u2191\nWhen you require bigdecimal/util, the to_d method will be available on\nBigDecimal and the native Integer, Float, Rational, and String classes:\nrequire 'bigdecimal/util'\n\n42.to_d         # => 0.42e2\n0.5.to_d        # => 0.5e0\n(2/3r).to_d(3)  # => 0.667e0\n\"0.5\".to_d      # => 0.5e0\n\nLicense\u00b6 \u2191\nCopyright (C) 2002 by Shigeo Kobayashi <shigeo@tinyforest.gr.jp>.\nBigDecimal is released under the Ruby and\n2-clause BSD licenses. See LICENSE.txt for details.\nMaintained by mrkn <mrkn@mrkn.jp> and ruby-core members.\nDocumented by zzak <zachary@zacharyscott.net>, mathew\n<meta@pobox.com>, and many other contributors.\n"}, {"c": "BigMath", "d": "\nProvides mathematical functions.\nExample:\nrequire \"bigdecimal/math\"\n\ninclude BigMath\n\na = BigDecimal((PI(100)/2).to_s)\nputs sin(a,100) # => 0.99999999999999999999......e0\n\n"}, {"c": "Binding", "d": "\nObjects of class Binding encapsulate the execution context at\nsome particular place in the code and retain this context for future use.\nThe variables, methods, value of self, and possibly an\niterator block that can be accessed in this context are all retained.\nBinding objects can be created using Kernel#binding, and are\nmade available to the callback of Kernel#set_trace_func.\nThese binding objects can be passed as the second argument of the\nKernel#eval method, establishing an environment for the\nevaluation.\nclass Demo\n  def initialize(n)\n    @secret = n\n  end\n  def get_binding\n    binding\n  end\nend\n\nk1 = Demo.new(99)\nb1 = k1.get_binding\nk2 = Demo.new(-3)\nb2 = k2.get_binding\n\neval(\"@secret\", b1)   #=> 99\neval(\"@secret\", b2)   #=> -3\neval(\"@secret\")       #=> nil\n\nBinding objects have no class-specific methods.\n"}, {"c": "CGI", "d": "\nOverview\u00b6 \u2191\nThe Common Gateway Interface (CGI) is a simple protocol for passing an HTTP\nrequest from a web server to a standalone program, and returning the output\nto the web browser.  Basically, a CGI program is\ncalled with the parameters of the request passed in either in the\nenvironment (GET) or via $stdin (POST), and everything it prints to $stdout\nis returned to the client.\nThis file holds the CGI class.  This class provides\nfunctionality for retrieving HTTP request parameters, managing cookies, and\ngenerating HTML output.\nThe file CGI::Session provides session\nmanagement functionality; see that class for more details.\nSee www.w3.org/CGI/ for more\ninformation on the CGI protocol.\nIntroduction\u00b6 \u2191\nCGI is a large class, providing several categories\nof methods, many of which are mixed in from other modules.  Some of the\ndocumentation is in this class, some in the modules CGI::QueryExtension and CGI::HtmlExtension.  See CGI::Cookie for specific information on handling\ncookies, and cgi/session.rb (CGI::Session) for information on sessions.\nFor queries, CGI provides methods to get at\nenvironmental variables, parameters, cookies, and multipart request data. \nFor responses, CGI provides methods for writing\noutput and generating HTML.\nRead on for more details.  Examples are provided at the bottom.\nQueries\u00b6 \u2191\nThe CGI class dynamically mixes in parameter and\ncookie-parsing functionality,  environmental variable access, and support\nfor parsing multipart requests (including uploaded files) from the CGI::QueryExtension module.\nEnvironmental Variables\u00b6 \u2191\nThe standard CGI environmental variables are\navailable as read-only attributes of a CGI object. \nThe following is a list of these variables:\nAUTH_TYPE               HTTP_HOST          REMOTE_IDENT\nCONTENT_LENGTH          HTTP_NEGOTIATE     REMOTE_USER\nCONTENT_TYPE            HTTP_PRAGMA        REQUEST_METHOD\nGATEWAY_INTERFACE       HTTP_REFERER       SCRIPT_NAME\nHTTP_ACCEPT             HTTP_USER_AGENT    SERVER_NAME\nHTTP_ACCEPT_CHARSET     PATH_INFO          SERVER_PORT\nHTTP_ACCEPT_ENCODING    PATH_TRANSLATED    SERVER_PROTOCOL\nHTTP_ACCEPT_LANGUAGE    QUERY_STRING       SERVER_SOFTWARE\nHTTP_CACHE_CONTROL      REMOTE_ADDR\nHTTP_FROM               REMOTE_HOST\n\nFor each of these variables, there is a corresponding attribute with the\nsame name, except all lower case and without a preceding HTTP_.\ncontent_length and server_port are integers; the\nrest are strings.\nParameters\u00b6 \u2191\nThe method params() returns a hash of all parameters in the request as\nname/value-list pairs, where the value-list is an Array of one or more\nvalues.  The CGI object itself also behaves as a\nhash of parameter names to values, but only returns a single value (as a\nString) for each parameter name.\nFor instance, suppose the request contains the parameter\n\u00e2\u20ac\u0153favourite_colours\u00e2\u20ac with the multiple values \u00e2\u20ac\u0153blue\u00e2\u20ac and \u00e2\u20ac\u0153green\u00e2\u20ac.  The\nfollowing behavior would occur:\ncgi.params[\"favourite_colours\"]  # => [\"blue\", \"green\"]\ncgi[\"favourite_colours\"]         # => \"blue\"\n\nIf a parameter does not exist, the former method will return an empty\narray, the latter an empty string.  The simplest way to test for existence\nof a parameter is by the has_key? method.\nCookies\u00b6 \u2191\nHTTP Cookies are automatically parsed from the request.  They are available\nfrom the cookies() accessor, which returns a hash from cookie name to CGI::Cookie object.\nMultipart requests\u00b6 \u2191\nIf a request's method is POST and its content type is\nmultipart/form-data, then it may contain uploaded files.  These are stored\nby the QueryExtension module in the\nparameters of the request.  The parameter name is the name attribute of the\nfile input field, as usual.  However, the value is not a string, but an IO object, either an IOString for small files, or a Tempfile for larger ones.  This object also has\nthe additional singleton methods:\nlocal_path()\n\nthe path of the uploaded file on the local filesystem\noriginal_filename()\n\nthe name of the file on the client computer\ncontent_type()\n\nthe content type of the file\n\nResponses\u00b6 \u2191\nThe CGI class provides methods for sending header\nand content output to the HTTP client, and mixes in methods for\nprogrammatic HTML generation from CGI::HtmlExtension and CGI::TagMaker\nmodules.  The precise version of HTML to use for HTML generation is\nspecified at object creation time.\nWriting output\u00b6 \u2191\nThe simplest way to send output to the HTTP client is using the out() method. This takes the HTTP headers\nas a hash parameter, and the body content via a block.  The headers can be\ngenerated as a string using the http_header() method.  The output\nstream can be written directly to using the print() method.\nGenerating HTML\u00b6 \u2191\nEach HTML element has a corresponding method for generating that element as\na String.  The name of this method is the same as that of the element, all\nlowercase.  The attributes of the element are passed in as a hash, and the\nbody as a no-argument block that evaluates to a String.  The HTML\ngeneration module knows which elements are always empty, and silently drops\nany passed-in body.  It also knows which elements require matching closing\ntags and which don't.  However, it does not know what attributes are\nlegal for which elements.\nThere are also some additional HTML generation methods mixed in from the CGI::HtmlExtension module.  These include\nindividual methods for the different types of form inputs, and methods for\nelements that commonly take particular attributes where the attributes can\nbe directly specified as arguments, rather than via a hash.\nUtility HTML escape and other methods like a function.\u00b6 \u2191\nThere are some utility tool defined in cgi/util.rb . And when include, you\ncan use utility methods like a function.\nExamples of use\u00b6 \u2191\nGet form values\u00b6 \u2191\nrequire \"cgi\"\ncgi = CGI.new\nvalue = cgi['field_name']   # <== value string for 'field_name'\n  # if not 'field_name' included, then return \"\".\nfields = cgi.keys            # <== array of field names\n\n# returns true if form has 'field_name'\ncgi.has_key?('field_name')\ncgi.has_key?('field_name')\ncgi.include?('field_name')\n\nCAUTION! cgi returned an Array with the old\ncgi.rb(included in Ruby 1.6)\nGet form values as hash\u00b6 \u2191\nrequire \"cgi\"\ncgi = CGI.new\nparams = cgi.params\n\ncgi.params is a hash.\ncgi.params['new_field_name'] = [\"value\"]  # add new param\ncgi.params['field_name'] = [\"new_value\"]  # change value\ncgi.params.delete('field_name')           # delete param\ncgi.params.clear                          # delete all params\n\nSave form values to file\u00b6 \u2191\nrequire \"pstore\"\ndb = PStore.new(\"query.db\")\ndb.transaction do\n  db[\"params\"] = cgi.params\nend\n\nRestore form values from file\u00b6 \u2191\nrequire \"pstore\"\ndb = PStore.new(\"query.db\")\ndb.transaction do\n  cgi.params = db[\"params\"]\nend\n\nGet multipart form values\u00b6 \u2191\nrequire \"cgi\"\ncgi = CGI.new\nvalue = cgi['field_name']   # <== value string for 'field_name'\nvalue.read                  # <== body of value\nvalue.local_path            # <== path to local file of value\nvalue.original_filename     # <== original filename of value\nvalue.content_type          # <== content_type of value\n\nand value has StringIO or Tempfile class methods.\nGet cookie values\u00b6 \u2191\nrequire \"cgi\"\ncgi = CGI.new\nvalues = cgi.cookies['name']  # <== array of 'name'\n  # if not 'name' included, then return [].\nnames = cgi.cookies.keys      # <== array of cookie names\n\nand cgi.cookies is a hash.\nGet cookie objects\u00b6 \u2191\nrequire \"cgi\"\ncgi = CGI.new\nfor name, cookie in cgi.cookies\n  cookie.expires = Time.now + 30\nend\ncgi.out(\"cookie\" => cgi.cookies) {\"string\"}\n\ncgi.cookies # { \"name1\" => cookie1, \"name2\" => cookie2, ... }\n\nrequire \"cgi\"\ncgi = CGI.new\ncgi.cookies['name'].expires = Time.now + 30\ncgi.out(\"cookie\" => cgi.cookies['name']) {\"string\"}\n\nPrint http header and html string to $DEFAULT_OUTPUT ($>)\u00b6 \u2191\nrequire \"cgi\"\ncgi = CGI.new(\"html4\")  # add HTML generation methods\ncgi.out do\n  cgi.html do\n    cgi.head do\n      cgi.title { \"TITLE\" }\n    end +\n    cgi.body do\n      cgi.form(\"ACTION\" => \"uri\") do\n        cgi.p do\n          cgi.textarea(\"get_text\") +\n          cgi.br +\n          cgi.submit\n        end\n      end +\n      cgi.pre do\n        CGI::escapeHTML(\n          \"params: #{cgi.params.inspect}\\n\" +\n          \"cookies: #{cgi.cookies.inspect}\\n\" +\n          ENV.collect do |key, value|\n            \"#{key} --> #{value}\\n\"\n          end.join(\"\")\n        )\n      end\n    end\n  end\nend\n\n# add HTML generation methods\nCGI.new(\"html3\")    # html3.2\nCGI.new(\"html4\")    # html4.01 (Strict)\nCGI.new(\"html4Tr\")  # html4.01 Transitional\nCGI.new(\"html4Fr\")  # html4.01 Frameset\nCGI.new(\"html5\")    # html5\n\nSome utility methods\u00b6 \u2191\nrequire 'cgi/util'\nCGI.escapeHTML('Usage: foo \"bar\" <baz>')\n\nSome utility methods like a function\u00b6 \u2191\nrequire 'cgi/util'\ninclude CGI::Util\nescapeHTML('Usage: foo \"bar\" <baz>')\nh('Usage: foo \"bar\" <baz>') # alias\n\n"}, {"c": "Class", "d": "\nExtends any Class to include\njson_creatable? method.\nClasses in Ruby are first-class objects\u00e2\u20ac\u201deach is an instance of class\nClass.\nTypically, you create a new class by using:\nclass Name\n # some code describing the class behavior\nend\n\nWhen a new class is created, an object of type Class is initialized and assigned to a global\nconstant (Name in this case).\nWhen Name.new is called to create a new object, the\nnew method in Class is run by default. This can\nbe demonstrated by overriding new in Class:\nclass Class\n  alias old_new new\n  def new(*args)\n    print \"Creating a new \", self.name, \"\\n\"\n    old_new(*args)\n  end\nend\n\nclass Name\nend\n\nn = Name.new\n\nproduces:\nCreating a new Name\n\nClasses, modules, and objects are interrelated. In the diagram that\nfollows, the vertical arrows represent inheritance, and the parentheses\nmetaclasses. All metaclasses are instances of the class `Class'.\n                         +---------+             +-...\n                         |         |             |\n         BasicObject-----|-->(BasicObject)-------|-...\n             ^           |         ^             |\n             |           |         |             |\n          Object---------|----->(Object)---------|-...\n             ^           |         ^             |\n             |           |         |             |\n             +-------+   |         +--------+    |\n             |       |   |         |        |    |\n             |    Module-|---------|--->(Module)-|-...\n             |       ^   |         |        ^    |\n             |       |   |         |        |    |\n             |     Class-|---------|---->(Class)-|-...\n             |       ^   |         |        ^    |\n             |       +---+         |        +----+\n             |                     |\nobj--->OtherClass---------->(OtherClass)-----------...\n"}, {"c": "ClosedQueueError", "d": "\n"}, {"c": "CMath", "d": "\nTrigonometric and transcendental functions for complex numbers.\u00b6 \u2191\nCMath is a library that provides trigonometric and\ntranscendental functions for complex numbers. The functions in this module\naccept integers, floating-point numbers or complex numbers as arguments.\nNote that the selection of functions is similar, but not identical, to that\nin module math. The reason for having two modules is that some users\naren't interested in complex numbers, and perhaps don't even know\nwhat they are. They would rather have Math.sqrt raise an exception than return\na complex number.\nFor more information you can see Complex class.\nUsage\u00b6 \u2191\nTo start using this library, simply require cmath library:\nrequire \"cmath\"\n\n"}, {"c": "Comparable", "d": "\nThe Comparable mixin is used by classes whose objects may be\nordered. The class must define the <=> operator, which\ncompares the receiver against another object, returning -1, 0, or +1\ndepending on whether the receiver is less than, equal to, or greater than\nthe other object. If the other object is not comparable then the\n<=> operator should return nil. Comparable\nuses <=> to implement the conventional comparison\noperators (<, <=, ==,\n>=, and >) and the method\nbetween?.\nclass SizeMatters\n  include Comparable\n  attr :str\n  def <=>(other)\n    str.size <=> other.str.size\n  end\n  def initialize(str)\n    @str = str\n  end\n  def inspect\n    @str\n  end\nend\n\ns1 = SizeMatters.new(\"Z\")\ns2 = SizeMatters.new(\"YY\")\ns3 = SizeMatters.new(\"XXX\")\ns4 = SizeMatters.new(\"WWWW\")\ns5 = SizeMatters.new(\"VVVVV\")\n\ns1 < s2                       #=> true\ns4.between?(s1, s3)           #=> false\ns4.between?(s3, s5)           #=> true\n[ s3, s2, s5, s4, s1 ].sort   #=> [Z, YY, XXX, WWWW, VVVVV]\n\n"}, {"c": "Complex", "d": "\nA complex number can be represented as a paired real number with imaginary\nunit; a+bi.  Where a is real part, b is imaginary part and i is imaginary\nunit.  Real a equals complex a+0i mathematically.\nComplex object can be created as literal, and\nalso by using Kernel#Complex, ::rect, ::polar or #to_c method.\n2+1i                 #=> (2+1i)\nComplex(1)           #=> (1+0i)\nComplex(2, 3)        #=> (2+3i)\nComplex.polar(2, 3)  #=> (-1.9799849932008908+0.2822400161197344i)\n3.to_c               #=> (3+0i)\n\nYou can also create complex object from floating-point numbers or strings.\nComplex(0.3)         #=> (0.3+0i)\nComplex('0.3-0.5i')  #=> (0.3-0.5i)\nComplex('2/3+3/4i')  #=> ((2/3)+(3/4)*i)\nComplex('1@2')       #=> (-0.4161468365471424+0.9092974268256817i)\n\n0.3.to_c             #=> (0.3+0i)\n'0.3-0.5i'.to_c      #=> (0.3-0.5i)\n'2/3+3/4i'.to_c      #=> ((2/3)+(3/4)*i)\n'1@2'.to_c           #=> (-0.4161468365471424+0.9092974268256817i)\n\nA complex object is either an exact or an inexact number.\nComplex(1, 1) / 2    #=> ((1/2)+(1/2)*i)\nComplex(1, 1) / 2.0  #=> (0.5+0.5i)\n\n"}, {"c": "ConditionVariable", "d": "\nConditionVariable objects augment\nclass Mutex. Using condition variables, it is\npossible to suspend while in the middle of a critical section until a\nresource becomes available.\nExample:\nmutex = Mutex.new\nresource = ConditionVariable.new\n\na = Thread.new {\n   mutex.synchronize {\n     # Thread 'a' now needs the resource\n     resource.wait(mutex)\n     # 'a' can now have the resource\n   }\n}\n\nb = Thread.new {\n   mutex.synchronize {\n     # Thread 'b' has finished using the resource\n     resource.signal\n   }\n}\n\n"}, {"c": "Continuation", "d": "\nContinuation objects are generated by Kernel#callcc, after having\n+require+d continuation. They hold a return address and execution\ncontext, allowing a nonlocal return to the end of the callcc\nblock from anywhere within a program. Continuations are somewhat analogous\nto a structured version of C's setjmp/longjmp (although\nthey contain more state, so you might consider them closer to threads).\nFor instance:\nrequire \"continuation\"\narr = [ \"Freddie\", \"Herbie\", \"Ron\", \"Max\", \"Ringo\" ]\ncallcc{|cc| $cc = cc}\nputs(message = arr.shift)\n$cc.call unless message =~ /Max/\n\nproduces:\nFreddie\nHerbie\nRon\nMax\n\nAlso you can call callcc in other methods:\nrequire \"continuation\"\n\ndef g\n  arr = [ \"Freddie\", \"Herbie\", \"Ron\", \"Max\", \"Ringo\" ]\n  cc = callcc { |cc| cc }\n  puts arr.shift\n  return cc, arr.size\nend\n\ndef f\n  c, size = g\n  c.call(c) if size > 1\nend\n\nf\n\nThis (somewhat contrived) example allows the inner loop to abandon\nprocessing early:\nrequire \"continuation\"\ncallcc {|cont|\n  for i in 0..4\n    print \"\\n#{i}: \"\n    for j in i*5...(i+1)*5\n      cont.call() if j == 17\n      printf \"%3d\", j\n    end\n  end\n}\nputs\n\nproduces:\n0:   0  1  2  3  4\n1:   5  6  7  8  9\n2:  10 11 12 13 14\n3:  15 16\n"}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": "Coverage", "d": "\nCoverage provides coverage measurement feature\nfor Ruby. This feature is experimental, so these APIs may be changed in\nfuture.\nUsage\u00b6 \u2191\n\nrequire \u00e2\u20ac\u0153coverage\u00e2\u20ac\n\ndo ::start\n\nrequire or load Ruby source file\n\n::result will return a hash\nthat contains filename as key and coverage array as value. A coverage array\ngives, for each line, the number of line execution by the interpreter. A\nnil value means coverage is disabled for this line (lines like\nelse and end).\n\nExample\u00b6 \u2191\n[foo.rb]\ns = 0\n10.times do |x|\n  s += x\nend\n\nif s == 45\n  p :ok\nelse\n  p :ng\nend\n[EOF]\n\nrequire \"coverage\"\nCoverage.start\nrequire \"foo.rb\"\np Coverage.result  #=> {\"foo.rb\"=>[1, 1, 10, nil, nil, 1, 1, nil, 0, nil]}\n\n"}, {"c": "CSV", "d": "\nThis class provides a complete interface to CSV\nfiles and data.  It offers tools to enable you to read and write to and\nfrom Strings or IO objects, as needed.\nReading\u00b6 \u2191\nFrom a File\u00b6 \u2191\nA Line at a Time\u00b6 \u2191\nCSV.foreach(\"path/to/file.csv\") do |row|\n  # use row here...\nend\n\nAll at Once\u00b6 \u2191\narr_of_arrs = CSV.read(\"path/to/file.csv\")\n\nFrom a String\u00b6 \u2191\nA Line at a Time\u00b6 \u2191\nCSV.parse(\"CSV,data,String\") do |row|\n  # use row here...\nend\n\nAll at Once\u00b6 \u2191\narr_of_arrs = CSV.parse(\"CSV,data,String\")\n\nWriting\u00b6 \u2191\nTo a File\u00b6 \u2191\nCSV.open(\"path/to/file.csv\", \"wb\") do |csv|\n  csv << [\"row\", \"of\", \"CSV\", \"data\"]\n  csv << [\"another\", \"row\"]\n  # ...\nend\n\nTo a String\u00b6 \u2191\ncsv_string = CSV.generate do |csv|\n  csv << [\"row\", \"of\", \"CSV\", \"data\"]\n  csv << [\"another\", \"row\"]\n  # ...\nend\n\nConvert a Single Line\u00b6 \u2191\ncsv_string = [\"CSV\", \"data\"].to_csv   # to CSV\ncsv_array  = \"CSV,String\".parse_csv   # from CSV\n\nShortcut Interface\u00b6 \u2191\nCSV             { |csv_out| csv_out << %w{my data here} }  # to $stdout\nCSV(csv = \"\")   { |csv_str| csv_str << %w{my data here} }  # to a String\nCSV($stderr)    { |csv_err| csv_err << %w{my data here} }  # to $stderr\nCSV($stdin)     { |csv_in|  csv_in.each { |row| p row } }  # from $stdin\n\nAdvanced Usage\u00b6 \u2191\nWrap an IO Object\u00b6 \u2191\ncsv = CSV.new(io, options)\n# ... read (with gets() or each()) from and write (with <<) to csv here ...\n\nCSV and Character Encodings (M17n or Multilingualization)\u00b6 \u2191\nThis new CSV parser is m17n savvy.  The parser works\nin the Encoding of the IO\nor String object being read from or written to.  Your data is never\ntranscoded (unless you ask Ruby to transcode it for you) and will literally\nbe parsed in the Encoding it is in.  Thus CSV will return Arrays or Rows of Strings in the Encoding of your data.  This is accomplished by\ntranscoding the parser itself into your Encoding.\nSome transcoding must take place, of course, to accomplish this\nmultiencoding support.  For example, :col_sep,\n:row_sep, and :quote_char must be transcoded to\nmatch your data.  Hopefully this makes the entire process feel transparent,\nsince CSV's defaults should just magically work for your data. \nHowever, you can set these values manually in the target Encoding to avoid the translation.\nIt's also important to note that while all of CSV's core parser is\nnow Encoding agnostic, some features are not. \nFor example, the built-in converters will try to transcode data to UTF-8\nbefore making conversions. Again, you can provide custom converters that\nare aware of your Encodings to avoid this translation.  It's just too\nhard for me to support native conversions in all of Ruby's Encodings.\nAnyway, the practical side of this is simple:  make sure IO and String objects passed into CSV have the proper Encoding set and everything should just work. CSV methods that allow you to open IO objects (CSV::foreach(), ::open, ::read, and ::readlines) do allow you to specify\nthe Encoding.\nOne minor exception comes when generating CSV into a\nString with an Encoding that is not ASCII\ncompatible.  There's no existing data for CSV to\nuse to prepare itself and thus you will probably need to manually specify\nthe desired Encoding for most of those cases. \nIt will try to guess using the fields in a row of output though, when using\n::generate_line or\nArray#to_csv().\nI try to point out any other Encoding issues in\nthe documentation of methods as they come up.\nThis has been tested to the best of my ability with all non-\u00e2\u20ac\u0153dummy\u00e2\u20ac\nEncodings Ruby ships with.  However, it is brave new code and may have some\nbugs. Please feel free to report any issues you find with\nit.\n"}, {"c": "Data", "d": "\nThis is a deprecated class, base class for C extensions using\nData_Make_Struct or Data_Wrap_Struct.\n"}, {"c": "Date", "d": "\ndate and datetime class - Tadayoshi Funaba 1998-2011\n'date' provides two classes: Date and DateTime.\nTerms and Definitions\u00b6 \u2191\nSome terms and definitions are based on ISO 8601 and JIS X 0301.\nCalendar Date\u00b6 \u2191\nThe calendar date is a particular day of a calendar year, identified by its\nordinal number within a calendar month within that year.\nIn those classes, this is so-called \u00e2\u20ac\u0153civil\u00e2\u20ac.\nOrdinal Date\u00b6 \u2191\nThe ordinal date is a particular day of a calendar year identified by its\nordinal number within the year.\nIn those classes, this is so-called \u00e2\u20ac\u0153ordinal\u00e2\u20ac.\nWeek Date\u00b6 \u2191\nThe week date is a date identified by calendar week and day numbers.\nThe calendar week is a seven day period within a calendar year, starting on\na Monday and identified by its ordinal number within the year; the first\ncalendar week of the year is the one that includes the first Thursday of\nthat year. In the Gregorian calendar, this is equivalent to the week which\nincludes January 4.\nIn those classes, this is so-called \u00e2\u20ac\u0153commercial\u00e2\u20ac.\nJulian Day Number\u00b6 \u2191\nThe Julian day number is in elapsed days since noon (Greenwich Mean Time) on January 1, 4713 BCE (in the Julian calendar).\nIn this document, the astronomical Julian day number is the same as the\noriginal Julian day number. And the chronological Julian day number is a\nvariation of the Julian day number. Its days begin at midnight on local\ntime.\nIn this document, when the term \u00e2\u20ac\u0153Julian day number\u00e2\u20ac simply appears, it just\nrefers to \u00e2\u20ac\u0153chronological Julian day number\u00e2\u20ac, not the original.\nIn those classes, those are so-called \u00e2\u20ac\u0153ajd\u00e2\u20ac and \u00e2\u20ac\u0153jd\u00e2\u20ac.\nModified Julian Day Number\u00b6 \u2191\nThe modified Julian day number is in elapsed days since midnight\n(Coordinated Universal Time) on November 17, 1858\nCE (in the Gregorian calendar).\nIn this document, the astronomical modified Julian day number is the same\nas the original modified Julian day number. And the chronological modified\nJulian day number is a variation of the modified Julian day number. Its\ndays begin at midnight on local time.\nIn this document, when the term \u00e2\u20ac\u0153modified Julian day number\u00e2\u20ac simply\nappears, it just refers to \u00e2\u20ac\u0153chronological modified Julian day number\u00e2\u20ac, not\nthe original.\nIn those classes, those are so-called \u00e2\u20ac\u0153amjd\u00e2\u20ac and \u00e2\u20ac\u0153mjd\u00e2\u20ac.\nDate\u00b6 \u2191\nA subclass of Object that includes the Comparable module and easily handles date.\nA Date object is created with ::new, ::jd, ::ordinal, ::commercial, ::parse, ::strptime, ::today, Time#to_date, etc.\nrequire 'date'\n\nDate.new(2001,2,3)\n #=> #<Date: 2001-02-03 ...>\nDate.jd(2451944)\n #=> #<Date: 2001-02-03 ...>\nDate.ordinal(2001,34)\n #=> #<Date: 2001-02-03 ...>\nDate.commercial(2001,5,6)\n #=> #<Date: 2001-02-03 ...>\nDate.parse('2001-02-03')\n #=> #<Date: 2001-02-03 ...>\nDate.strptime('03-02-2001', '%d-%m-%Y')\n #=> #<Date: 2001-02-03 ...>\nTime.new(2001,2,3).to_date\n #=> #<Date: 2001-02-03 ...>\n\nAll date objects are immutable; hence cannot modify themselves.\nThe concept of a date object can be represented as a tuple of the day\ncount, the offset and the day of calendar reform.\nThe day count denotes the absolute position of a temporal dimension. The\noffset is relative adjustment, which determines decoded local time with the\nday count. The day of calendar reform denotes the start day of the new\nstyle. The old style of the West is the Julian calendar which was adopted\nby Caesar. The new style is the Gregorian calendar, which is the current\ncivil calendar of many countries.\nThe day count is virtually the astronomical Julian day number. The offset\nin this class is usually zero, and cannot be specified directly.\nA Date object can be created with an optional\nargument, the day of calendar reform as a Julian day number, which should\nbe 2298874 to 2426355 or negative/positive infinity. The default value is\nDate::ITALY (2299161=1582-10-15). See also sample/cal.rb.\n$ ruby sample/cal.rb -c it 10 1582\n    October 1582\n S  M Tu  W Th  F  S\n    1  2  3  4 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n\n$ ruby sample/cal.rb -c gb  9 1752\n   September 1752\n S  M Tu  W Th  F  S\n       1  2 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\nA Date object has various methods. See each\nreference.\nd = Date.parse('3rd Feb 2001')\n                             #=> #<Date: 2001-02-03 ...>\nd.year                       #=> 2001\nd.mon                        #=> 2\nd.mday                       #=> 3\nd.wday                       #=> 6\nd += 1                       #=> #<Date: 2001-02-04 ...>\nd.strftime('%a %d %b %Y')    #=> \"Sun 04 Feb 2001\"\n\n"}, {"c": "DateTime", "d": "\nDateTime\u00b6 \u2191\nA subclass of Date that easily handles date, hour,\nminute, second, and offset.\nDateTime does not consider any leap seconds,\ndoes not track any summer time rules.\nA DateTime object is created with ::new, ::jd, ::ordinal, ::commercial, ::parse, ::strptime, ::now, Time#to_datetime, etc.\nrequire 'date'\n\nDateTime.new(2001,2,3,4,5,6)\n                    #=> #<DateTime: 2001-02-03T04:05:06+00:00 ...>\n\nThe last element of day, hour, minute, or second can be a fractional\nnumber. The fractional number's precision is assumed at most\nnanosecond.\nDateTime.new(2001,2,3.5)\n                    #=> #<DateTime: 2001-02-03T12:00:00+00:00 ...>\n\nAn optional argument, the offset, indicates the difference between the\nlocal time and UTC. For example, Rational(3,24) represents\nahead of 3 hours of UTC, Rational(-5,24) represents behind of\n5 hours of UTC. The offset should be -1 to +1, and its precision is assumed\nat most second. The default value is zero (equals to UTC).\nDateTime.new(2001,2,3,4,5,6,Rational(3,24))\n                    #=> #<DateTime: 2001-02-03T04:05:06+03:00 ...>\n\nThe offset also accepts string form:\nDateTime.new(2001,2,3,4,5,6,'+03:00')\n                    #=> #<DateTime: 2001-02-03T04:05:06+03:00 ...>\n\nAn optional argument, the day of calendar reform (start),\ndenotes a Julian day number, which should be 2298874 to 2426355 or\nnegative/positive infinity. The default value is Date::ITALY\n(2299161=1582-10-15).\nA DateTime object has various methods. See each\nreference.\nd = DateTime.parse('3rd Feb 2001 04:05:06+03:30')\n                    #=> #<DateTime: 2001-02-03T04:05:06+03:30 ...>\nd.hour              #=> 4\nd.min               #=> 5\nd.sec               #=> 6\nd.offset            #=> (7/48)\nd.zone              #=> \"+03:30\"\nd += Rational('1.5')\n                    #=> #<DateTime: 2001-02-04%16:05:06+03:30 ...>\nd = d.new_offset('+09:00')\n                    #=> #<DateTime: 2001-02-04%21:35:06+09:00 ...>\nd.strftime('%I:%M:%S %p')\n                    #=> \"09:35:06 PM\"\nd > DateTime.new(1999)\n                    #=> true\n\nWhen should you use DateTime and when should you use Time?\u00b6 \u2191\nIt's a common misconception that William\nShakespeare and Miguel de\nCervantes died on the same day in history - so much so that UNESCO\nnamed April 23 as World Book Day because\nof this fact. However, because England hadn't yet adopted the Gregorian\nCalendar Reform (and wouldn't until 1752)\ntheir deaths are actually 10 days apart. Since Ruby's Time class implements a proleptic\nGregorian calendar and has no concept of calendar reform there's no\nway to express this with Time objects. This is\nwhere DateTime steps in:\nshakespeare = DateTime.iso8601('1616-04-23', Date::ENGLAND)\n #=> Tue, 23 Apr 1616 00:00:00 +0000\ncervantes = DateTime.iso8601('1616-04-23', Date::ITALY)\n #=> Sat, 23 Apr 1616 00:00:00 +0000\n\nAlready you can see something is weird - the days of the week are\ndifferent. Taking this further:\ncervantes == shakespeare\n #=> false\n(shakespeare - cervantes).to_i\n #=> 10\n\nThis shows that in fact they died 10 days apart (in reality 11 days since\nCervantes died a day earlier but was buried on the 23rd). We can see the\nactual date of Shakespeare's death by using the gregorian method to convert it:\nshakespeare.gregorian\n #=> Tue, 03 May 1616 00:00:00 +0000\n\nSo there's an argument that all the celebrations that take place on the\n23rd April in Stratford-upon-Avon are actually the wrong date since England\nis now using the Gregorian calendar. You can see why when we transition\nacross the reform date boundary:\n# start off with the anniversary of Shakespeare's birth in 1751\nshakespeare = DateTime.iso8601('1751-04-23', Date::ENGLAND)\n #=> Tue, 23 Apr 1751 00:00:00 +0000\n\n# add 366 days since 1752 is a leap year and April 23 is after February 29\nshakespeare + 366\n #=> Thu, 23 Apr 1752 00:00:00 +0000\n\n# add another 365 days to take us to the anniversary in 1753\nshakespeare + 366 + 365\n #=> Fri, 04 May 1753 00:00:00 +0000\n\nAs you can see, if we're accurately tracking the number of solar years since\nShakespeare's birthday then the correct anniversary date would be the\n4th May and not the 23rd April.\nSo when should you use DateTime in Ruby and\nwhen should you use Time? Almost certainly\nyou'll want to use Time since your app is\nprobably dealing with current dates and times. However, if you need to deal\nwith dates and times in a historical context you'll want to use DateTime to avoid making the same mistakes as\nUNESCO. If you also have to deal with timezones then best of luck - just\nbear in mind that you'll probably be dealing with local solar times, since\nit wasn't until the 19th century that the introduction of the railways\nnecessitated the need for Standard\nTime and eventually timezones.\n"}, {"c": "DBM", "d": "\nIntroduction\u00b6 \u2191\nThe DBM class provides a wrapper to a Unix-style dbm or Database Manager\nlibrary.\nDbm databases do not have tables or columns; they are simple key-value data\nstores, like a Ruby Hash except not resident in\nRAM. Keys and values must be strings.\nThe exact library used depends on how Ruby was compiled. It could be any of\nthe following:\n\nThe original ndbm library is released in 4.3BSD. It is based on dbm library\nin Unix Version 7 but has different API to support multiple databases in a\nprocess.\n\nBerkeley DB versions\n1 thru 5, also known as BDB and Sleepycat DB, now owned by Oracle\nCorporation.\n\nBerkeley DB 1.x, still found in 4.4BSD derivatives (FreeBSD, OpenBSD, etc).\n\ngdbm, the GNU\nimplementation of dbm.\n\nqdbm, another open source\nreimplementation of dbm.\n\nAll of these dbm implementations have their own Ruby interfaces available,\nwhich provide richer (but varying) APIs.\nCautions\u00b6 \u2191\nBefore you decide to use DBM, there are some issues\nyou should consider:\n\nEach implementation of dbm has its own file format. Generally, dbm\nlibraries will not read each other's files. This makes dbm files a bad\nchoice for data exchange.\n\nEven running the same OS and the same dbm implementation, the database file\nformat may depend on the CPU architecture. For example, files may not be\nportable between PowerPC and 386, or between 32 and 64 bit Linux.\n\nDifferent versions of Berkeley DB use different file formats. A change to\nthe OS may therefore break DBM access to existing\nfiles.\n\nData size limits vary between implementations.\nOriginal Berkeley DB was limited to 2GB of data. Dbm libraries also\nsometimes limit the total size of a key/value pair, and the total size of\nall the keys that hash to the same value. These limits can be as little as\n512 bytes. That said, gdbm and recent versions of Berkeley DB do away with\nthese limits.\n\nGiven the above cautions, DBM is not a good choice\nfor long term storage of important data. It is probably best used as a fast\nand easy alternative to a Hash for processing large\namounts of data.\nExample\u00b6 \u2191\nrequire 'dbm'\ndb = DBM.open('rfcs', 0666, DBM::WRCREAT)\ndb['822'] = 'Standard for the Format of ARPA Internet Text Messages'\ndb['1123'] = 'Requirements for Internet Hosts - Application and Support'\ndb['3068'] = 'An Anycast Prefix for 6to4 Relay Routers'\nputs db['822']\n\n"}, {"c": "DBMError", "d": "\nException class used to return errors from the\ndbm library.\n"}, {"c": "DEBUGGER__", "d": "\nThis library provides debugging functionality to Ruby.\nTo add a debugger to your code, start by requiring debug in\nyour program:\ndef say(word)\n  require 'debug'\n  puts word\nend\n\nThis will cause Ruby to interrupt execution and show a prompt when the\nsay method is run.\nOnce you're inside the prompt, you can start debugging your program.\n(rdb:1) p word\n\"hello\"\nGetting help\u00b6 \u2191\nYou can get help at any time by pressing h.\n(rdb:1) h\nDebugger help v.-0.002b\nCommands\n  b[reak] [file:|class:]<line|method>\n  b[reak] [class.]<line|method>\n                             set breakpoint to some position\n  wat[ch] <expression>       set watchpoint to some expression\n  cat[ch] (<exception>|off)  set catchpoint to an exception\n  b[reak]                    list breakpoints\n  cat[ch]                    show catchpoint\n  del[ete][ nnn]             delete some or all breakpoints\n  disp[lay] <expression>     add expression into display expression list\n  undisp[lay][ nnn]          delete one particular or all display expressions\n  c[ont]                     run until program ends or hit breakpoint\n  s[tep][ nnn]               step (into methods) one line or till line nnn\n  n[ext][ nnn]               go over one line or till line nnn\n  w[here]                    display frames\n  f[rame]                    alias for where\n  l[ist][ (-|nn-mm)]         list program, - lists backwards\n                             nn-mm lists given lines\n  up[ nn]                    move to higher frame\n  down[ nn]                  move to lower frame\n  fin[ish]                   return to outer frame\n  tr[ace] (on|off)           set trace mode of current thread\n  tr[ace] (on|off) all       set trace mode of all threads\n  q[uit]                     exit from debugger\n  v[ar] g[lobal]             show global variables\n  v[ar] l[ocal]              show local variables\n  v[ar] i[nstance] <object>  show instance variables of object\n  v[ar] c[onst] <object>     show constants of object\n  m[ethod] i[nstance] <obj>  show methods of object\n  m[ethod] <class|module>    show instance methods of class or module\n  th[read] l[ist]            list all threads\n  th[read] c[ur[rent]]       show current thread\n  th[read] [sw[itch]] <nnn>  switch thread context to nnn\n  th[read] stop <nnn>        stop thread nnn\n  th[read] resume <nnn>      resume thread nnn\n  p expression               evaluate expression and print its value\n  h[elp]                     print this help\n  <everything else>          evaluate\nUsage\u00b6 \u2191\nThe following is a list of common functionalities that the debugger\nprovides.\nNavigating through your code\u00b6 \u2191\nIn general, a debugger is used to find bugs in your program, which often\nmeans pausing execution and inspecting variables at some point in time.\nLet's look at an example:\ndef my_method(foo)\n  require 'debug'\n  foo = get_foo if foo.nil?\n  raise if foo.nil?\nend\n\nWhen you run this program, the debugger will kick in just before the\nfoo assignment.\n(rdb:1) p foo\nnil\nIn this example, it'd be interesting to move to the next line and\ninspect the value of foo again. You can do that by pressing\nn:\n(rdb:1) n # goes to next line\n(rdb:1) p foo\nnil\nYou now know that the original value of foo was nil, and that\nit still was nil after calling get_foo.\nOther useful commands for navigating through your code are:\nc\n\nRuns the program until it either exists or encounters another breakpoint.\nYou usually press c when you are finished debugging your\nprogram and want to resume its execution.\ns\n\nSteps into method definition. In the previous example, s would\ntake you inside the method definition of get_foo.\nr\n\nRestart the program.\nq\n\nQuit the program.\n\nInspecting variables\u00b6 \u2191\nYou can use the debugger to easily inspect both local and global variables.\nWe've seen how to inspect local variables before:\n(rdb:1) p my_arg\n42\nYou can also pretty print the result of variables or expressions:\n(rdb:1) pp %w{a very long long array containing many words}\n[\"a\",\n \"very\",\n \"long\",\n ...\n]\nYou can list all local variables with +v l+:\n(rdb:1) v l\n  foo => \"hello\"\nSimilarly, you can show all global variables with +v g+:\n(rdb:1) v g\n  all global variables\nFinally, you can omit p if you simply want to evaluate a\nvariable or expression\n(rdb:1) 5**2\n25\nGoing beyond basics\u00b6 \u2191\nRuby Debug provides more advanced functionalities like switching between\nthreads, setting breakpoints and watch expressions, and more. The full list\nof commands is available at any time by pressing h.\nStaying out of trouble\u00b6 \u2191\nMake sure you remove every instance of +require 'debug'+ before\nshipping your code. Failing to do so may result in your program hanging\nunpredictably.\nDebug is not available in safe mode.\n"}, {"c": "Delegator", "d": "\nThis library provides three different ways to delegate method calls to an\nobject.  The easiest to use is SimpleDelegator.  Pass an object to the\nconstructor and all methods supported by the object will be delegated. \nThis object can be changed later.\nGoing a step further, the top level DelegateClass method allows you to\neasily setup delegation through class inheritance.  This is considerably\nmore flexible and thus probably the most common use for this library.\nFinally, if you need full control over the delegation scheme, you can\ninherit from the abstract class Delegator and\ncustomize as needed.  (If you find yourself needing this control, have a\nlook at Forwardable which is also in the standard library.  It may suit\nyour needs better.)\nSimpleDelegator's implementation serves as a nice example of the use of\nDelegator:\nclass SimpleDelegator < Delegator\n  def __getobj__\n    @delegate_sd_obj # return object we are delegating to, required\n  end\n\n  def __setobj__(obj)\n    @delegate_sd_obj = obj # change delegation object,\n                           # a feature we're providing\n  end\nend\n\nNotes\u00b6 \u2191\nBe advised, RDoc will not detect delegated methods.\n"}, {"c": "Digest", "d": "\nThis module provides a framework for message digest libraries.\nYou may want to look at OpenSSL::Digest\nas it supports more algorithms.\nA cryptographic hash function is a procedure that takes data and returns a\nfixed bit string: the hash value, also known as digest. Hash functions are also called one-way functions, it\nis easy to compute a digest from a message, but it is infeasible to\ngenerate a message from a digest.\nExamples\u00b6 \u2191\nrequire 'digest'\n\n# Compute a complete digest\nDigest::SHA256.digest 'message'       #=> \"\\xABS\\n\\x13\\xE4Y...\"\n\nsha256 = Digest::SHA256.new\nsha256.digest 'message'               #=> \"\\xABS\\n\\x13\\xE4Y...\"\n\n# Other encoding formats\nDigest::SHA256.hexdigest 'message'    #=> \"ab530a13e459...\"\nDigest::SHA256.base64digest 'message' #=> \"q1MKE+RZFJgr...\"\n\n# Compute digest by chunks\nmd5 = Digest::MD5.new\nmd5.update 'message1'\nmd5 << 'message2'                     # << is an alias for update\n\nmd5.hexdigest                         #=> \"94af09c09bb9...\"\n\n# Compute digest for a file\nsha256 = Digest::SHA256.file 'testfile'\nsha256.hexdigest\n\nAdditionally digests can be encoded in \u00e2\u20ac\u0153bubble babble\u00e2\u20ac format as a sequence\nof consonants and vowels which is more recognizable and comparable than a\nhexadecimal digest.\nrequire 'digest/bubblebabble'\n\nDigest::SHA256.bubblebabble 'message' #=> \"xopoh-fedac-fenyh-...\"\n\nSee the bubble babble specification at web.mit.edu/kenta/www/one/bubblebabble/spec/jrtrjwzi/draft-huima-01.txt.\nDigest algorithms\u00b6 \u2191\nDifferent digest algorithms (or hash functions) are available:\nMD5\n\nSee RFC 1321 The MD5 Message-Digest Algorithm\nRIPEMD-160\n\nAs Digest::RMD160. See homes.esat.kuleuven.be/~bosselae/ripemd160.html.\nSHA1\n\nSee FIPS 180 Secure Hash Standard.\nSHA2 family\n\nSee FIPS 180 Secure Hash Standard which defines the\nfollowing algorithms:\n\nSHA512\n\nSHA384\n\nSHA256\n\n\nThe latest versions of the FIPS publications can be found here: csrc.nist.gov/publications/PubsFIPS.html.\n"}, {"c": "Dir", "d": "\nObjects of class Dir are directory streams representing\ndirectories in the underlying file system. They provide a variety of ways\nto list directories and their contents. See also File.\nThe directory used in these examples contains the two regular files\n(config.h and main.rb), the parent directory\n(..), and the directory itself (.).\n"}, {"c": "DRb", "d": "\nOverview\u00b6 \u2191\ndRuby is a distributed object system for Ruby.  It is written in pure Ruby\nand uses its own protocol.  No add-in services are needed beyond those\nprovided by the Ruby runtime, such as TCP sockets.  It does not rely on or\ninteroperate with other distributed object systems such as CORBA, RMI, or\n.NET.\ndRuby allows methods to be called in one Ruby process upon a Ruby object\nlocated in another Ruby process, even on another machine. References to\nobjects can be passed between processes.  Method\narguments and return values are dumped and loaded in marshalled format. \nAll of this is done transparently to both the caller of the remote method\nand the object that it is called upon.\nAn object in a remote process is locally represented by a DRb::DRbObject instance.  This acts as a sort\nof proxy for the remote object.  Methods called upon this DRbObject instance are forwarded to its\nremote object.  This is arranged dynamically at run time.  There are no\nstatically declared interfaces for remote objects, such as CORBA's IDL.\ndRuby calls made into a process are handled by a DRb::DRbServer instance\nwithin that process.  This reconstitutes the method call, invokes it upon\nthe specified local object, and returns the value to the remote caller. \nAny object can receive calls over dRuby.  There is no need to implement a\nspecial interface, or mixin special functionality.  Nor, in the general\ncase, does an object need to explicitly register itself with a DRbServer in\norder to receive dRuby calls.\nOne process wishing to make dRuby calls upon another process must somehow\nobtain an initial reference to an object in the remote process by some\nmeans other than as the return value of a remote method call, as there is\ninitially no remote object reference it can invoke a method upon.  This is\ndone by attaching to the server by URI.  Each\nDRbServer binds itself to a URI such as\n'druby://example.com:8787'.  A DRbServer can have an object\nattached to it that acts as the server's front\nobject.  A DRbObject can\nbe explicitly created from the server's URI. \nThis DRbObject's remote object will be the server's front object. \nThis front object can then return references to other Ruby objects in the\nDRbServer's process.\nMethod calls made over dRuby behave largely the\nsame as normal Ruby method calls made within a process.  Method calls with blocks are supported, as are\nraising exceptions.  In addition to a method's standard errors, a dRuby\ncall may also raise one of the dRuby-specific errors, all of which are\nsubclasses of DRb::DRbError.\nAny type of object can be passed as an argument to a dRuby call or returned\nas its return value.  By default, such objects are dumped or marshalled at\nthe local end, then loaded or unmarshalled at the remote end.  The remote\nend therefore receives a copy of the local object, not a distributed\nreference to it; methods invoked upon this copy are executed entirely in\nthe remote process, not passed on to the local original.  This has\nsemantics similar to pass-by-value.\nHowever, if an object cannot be marshalled, a dRuby reference to it is\npassed or returned instead.  This will turn up at the remote end as a DRbObject instance.  All methods invoked upon\nthis remote proxy are forwarded to the local object, as described in the\ndiscussion of DRbObjects.  This has semantics similar to the normal Ruby\npass-by-reference.\nThe easiest way to signal that we want an otherwise marshallable object to\nbe passed or returned as a DRbObject\nreference, rather than marshalled and sent as a copy, is to include the DRb::DRbUndumped mixin module.\ndRuby supports calling remote methods with blocks.  As blocks (or rather\nthe Proc objects that represent them) are not\nmarshallable, the block executes in the local, not the remote, context. \nEach value yielded to the block is passed from the remote object to the\nlocal block, then the value returned by each block invocation is passed\nback to the remote execution context to be collected, before the collected\nvalues are finally returned to the local context as the return value of the\nmethod invocation.\nExamples of usage\u00b6 \u2191\nFor more dRuby samples, see the samples directory in the full\ndRuby distribution.\ndRuby in client/server mode\u00b6 \u2191\nThis illustrates setting up a simple client-server drb system.  Run the\nserver and client code in different terminals, starting the server code\nfirst.\nServer code\u00b6 \u2191\nrequire 'drb/drb'\n\n# The URI for the server to connect to\nURI=\"druby://localhost:8787\"\n\nclass TimeServer\n\n  def get_current_time\n    return Time.now\n  end\n\nend\n\n# The object that handles requests on the server\nFRONT_OBJECT=TimeServer.new\n\n$SAFE = 1   # disable eval() and friends\n\nDRb.start_service(URI, FRONT_OBJECT)\n# Wait for the drb server thread to finish before exiting.\nDRb.thread.join\n\nClient code\u00b6 \u2191\nrequire 'drb/drb'\n\n# The URI to connect to\nSERVER_URI=\"druby://localhost:8787\"\n\n# Start a local DRbServer to handle callbacks.\n#\n# Not necessary for this small example, but will be required\n# as soon as we pass a non-marshallable object as an argument\n# to a dRuby call.\n#\n# Note: this must be called at least once per process to take any effect.\n# This is particularly important if your application forks.\nDRb.start_service\n\ntimeserver = DRbObject.new_with_uri(SERVER_URI)\nputs timeserver.get_current_time\n\nRemote objects under dRuby\u00b6 \u2191\nThis example illustrates returning a reference to an object from a dRuby\ncall.  The Logger instances live in the server\nprocess.  References to them are returned to the client process, where\nmethods can be invoked upon them.  These methods are executed in the server\nprocess.\nServer code\u00b6 \u2191\nrequire 'drb/drb'\n\nURI=\"druby://localhost:8787\"\n\nclass Logger\n\n    # Make dRuby send Logger instances as dRuby references,\n    # not copies.\n    include DRb::DRbUndumped\n\n    def initialize(n, fname)\n        @name = n\n        @filename = fname\n    end\n\n    def log(message)\n        File.open(@filename, \"a\") do |f|\n            f.puts(\"#{Time.now}: #{@name}: #{message}\")\n        end\n    end\n\nend\n\n# We have a central object for creating and retrieving loggers.\n# This retains a local reference to all loggers created.  This\n# is so an existing logger can be looked up by name, but also\n# to prevent loggers from being garbage collected.  A dRuby\n# reference to an object is not sufficient to prevent it being\n# garbage collected!\nclass LoggerFactory\n\n    def initialize(bdir)\n        @basedir = bdir\n        @loggers = {}\n    end\n\n    def get_logger(name)\n        if !@loggers.has_key? name\n            # make the filename safe, then declare it to be so\n            fname = name.gsub(/[.\\/\\\\\\:]/, \"_\").untaint\n            @loggers[name] = Logger.new(name, @basedir + \"/\" + fname)\n        end\n        return @loggers[name]\n    end\n\nend\n\nFRONT_OBJECT=LoggerFactory.new(\"/tmp/dlog\")\n\n$SAFE = 1   # disable eval() and friends\n\nDRb.start_service(URI, FRONT_OBJECT)\nDRb.thread.join\n\nClient code\u00b6 \u2191\nrequire 'drb/drb'\n\nSERVER_URI=\"druby://localhost:8787\"\n\nDRb.start_service\n\nlog_service=DRbObject.new_with_uri(SERVER_URI)\n\n[\"loga\", \"logb\", \"logc\"].each do |logname|\n\n    logger=log_service.get_logger(logname)\n\n    logger.log(\"Hello, world!\")\n    logger.log(\"Goodbye, world!\")\n    logger.log(\"=== EOT ===\")\n\nend\n\nSecurity\u00b6 \u2191\nAs with all network services, security needs to be considered when using\ndRuby.  By allowing external access to a Ruby object, you are not only\nallowing outside clients to call the methods you have defined for that\nobject, but by default to execute arbitrary Ruby code on your server. \nConsider the following:\n# !!! UNSAFE CODE !!!\nro = DRbObject::new_with_uri(\"druby://your.server.com:8989\")\nclass << ro\n  undef :instance_eval  # force call to be passed to remote object\nend\nro.instance_eval(\"`rm -rf *`\")\n\nThe dangers posed by instance_eval and friends are such that a DRbServer\nshould generally be run with $SAFE set to at least level 1.  This will\ndisable eval() and related calls on strings passed across the wire.  The\nsample usage code given above follows this practice.\nA DRbServer can be configured with an access control list to selectively\nallow or deny access from specified IP addresses.  The main druby\ndistribution provides the ACL class for this\npurpose.  In general, this mechanism should only be used alongside, rather\nthan as a replacement for, a good firewall.\ndRuby internals\u00b6 \u2191\ndRuby is implemented using three main components: a remote method call\nmarshaller/unmarshaller; a transport protocol; and an ID-to-object mapper. \nThe latter two can be directly, and the first indirectly, replaced, in\norder to provide different behaviour and capabilities.\nMarshalling and unmarshalling of remote method calls is performed by a DRb::DRbMessage instance.  This uses the Marshal module to dump the method call before\nsending it over the transport layer, then reconstitute it at the other end.\nThere is normally no need to replace this component, and no direct way is\nprovided to do so. However, it is possible to implement an alternative\nmarshalling scheme as part of an implementation of the transport layer.\nThe transport layer is responsible for opening client and server network\nconnections and forwarding dRuby request across them. Normally, it uses DRb::DRbMessage internally to manage\nmarshalling and unmarshalling.  The transport layer is managed by DRb::DRbProtocol.  Multiple protocols can\nbe installed in DRbProtocol at the one\ntime; selection between them is determined by the scheme of a dRuby URI.  The default transport protocol is selected by the\nscheme 'druby:', and implemented by DRb::DRbTCPSocket.  This uses plain TCP/IP\nsockets for communication.  An alternative protocol, using UNIX domain\nsockets, is implemented by DRb::DRbUNIXSocket in the file\ndrb/unix.rb, and selected by the scheme 'drbunix:'.  A sample\nimplementation over HTTP can be found in the samples accompanying the main\ndRuby distribution.\nThe ID-to-object mapping component maps dRuby object ids to the objects\nthey refer to, and vice versa.  The implementation to use can be specified\nas part of a DRb::DRbServer's configuration.  The default\nimplementation is provided by DRb::DRbIdConv.  It uses an object's ObjectSpace id as its dRuby id.  This means\nthat the dRuby reference to that object only remains meaningful for the\nlifetime of the object's process and the lifetime of the object within\nthat process.  A modified implementation is provided by DRb::TimerIdConv in the file\ndrb/timeridconv.rb.  This implementation retains a local reference to all\nobjects exported over dRuby for a configurable period of time (defaulting\nto ten minutes), to prevent them being garbage-collected within this time. \nAnother sample implementation is provided in sample/name.rb in the main\ndRuby distribution.  This allows objects to specify their own id or \u00e2\u20ac\u0153name\u00e2\u20ac.\nA dRuby reference can be made persistent across processes by having each\nprocess register an object using the same dRuby name.\n"}, {"c": null, "d": ""}, {"c": "Encoding", "d": "\nAn Encoding instance represents a character\nencoding usable in Ruby. It is defined as a constant under the Encoding namespace. It has a name and optionally,\naliases:\nEncoding::ISO_8859_1.name\n#=> \"ISO-8859-1\"\n\nEncoding::ISO_8859_1.names\n#=> [\"ISO-8859-1\", \"ISO8859-1\"]\n\nRuby methods dealing with encodings return or accept Encoding instances as arguments (when a method\naccepts an Encoding instance as an argument, it\ncan be passed an Encoding name or alias\ninstead).\n\"some string\".encoding\n#=> #<Encoding:UTF-8>\n\nstring = \"some string\".encode(Encoding::ISO_8859_1)\n#=> \"some string\"\nstring.encoding\n#=> #<Encoding:ISO-8859-1>\n\n\"some string\".encode \"ISO-8859-1\"\n#=> \"some string\"\n\nEncoding::ASCII_8BIT is a special encoding that is usually\nused for a byte string, not a character string. But as the name insists,\nits characters in the range of ASCII are considered as ASCII characters.\nThis is useful when you use ASCII-8BIT characters with other ASCII\ncompatible characters.\nChanging an encoding\u00b6 \u2191\nThe associated Encoding of a String can be\nchanged in two different ways.\nFirst, it is possible to set the Encoding of a\nstring to a new Encoding without changing the\ninternal byte representation of the string, with String#force_encoding. This\nis how you can tell Ruby the correct encoding of a string.\nstring\n#=> \"R\\xC3\\xA9sum\\xC3\\xA9\"\nstring.encoding\n#=> #<Encoding:ISO-8859-1>\nstring.force_encoding(Encoding::UTF_8)\n#=> \"R\\u00E9sum\\u00E9\"\n\nSecond, it is possible to transcode a string, i.e. translate its internal\nbyte representation to another encoding. Its associated encoding is also\nset to the other encoding. See String#encode for the various forms\nof transcoding, and the Encoding::Converter class for additional\ncontrol over the transcoding process.\nstring\n#=> \"R\\u00E9sum\\u00E9\"\nstring.encoding\n#=> #<Encoding:UTF-8>\nstring = string.encode!(Encoding::ISO_8859_1)\n#=> \"R\\xE9sum\\xE9\"\nstring.encoding\n#=> #<Encoding::ISO-8859-1>\n\nScript encoding\u00b6 \u2191\nAll Ruby script code has an associated Encoding\nwhich any String literal created in the source code will be associated to.\nThe default script encoding is Encoding::UTF-8 after v2.0, but\nit can be changed by a magic comment on the first line of the source code\nfile (or second line, if there is a shebang line on the first). The comment\nmust contain the word coding or encoding,\nfollowed by a colon, space and the Encoding\nname or alias:\n# encoding: UTF-8\n\n\"some string\".encoding\n#=> #<Encoding:UTF-8>\n\nThe __ENCODING__ keyword returns the script encoding of the\nfile which the keyword is written:\n# encoding: ISO-8859-1\n\n__ENCODING__\n#=> #<Encoding:ISO-8859-1>\n\nruby -K will change the default locale encoding, but this is\nnot recommended. Ruby source files should declare its script encoding by a\nmagic comment even when they only depend on US-ASCII strings or regular\nexpressions.\nLocale encoding\u00b6 \u2191\nThe default encoding of the environment. Usually derived from locale.\nsee ::locale_charmap,\n::find('locale')\nFilesystem encoding\u00b6 \u2191\nThe default encoding of strings from the filesystem of the environment.\nThis is used for strings of file names or paths.\nsee ::find('filesystem')\nExternal encoding\u00b6 \u2191\nEach IO object has an external encoding which\nindicates the encoding that Ruby will use to read its data. By default Ruby\nsets the external encoding of an IO object to the\ndefault external encoding. The default external encoding is set by locale\nencoding or the interpreter -E option. ::default_external\nreturns the current value of the external encoding.\nENV[\"LANG\"]\n#=> \"UTF-8\"\nEncoding.default_external\n#=> #<Encoding:UTF-8>\n\n$ ruby -E ISO-8859-1 -e \"p Encoding.default_external\"\n#<Encoding:ISO-8859-1>\n\n$ LANG=C ruby -e 'p Encoding.default_external'\n#<Encoding:US-ASCII>\nThe default external encoding may also be set through ::default_external=,\nbut you should not do this as strings created before and after the change\nwill have inconsistent encodings.  Instead use ruby -E to\ninvoke ruby with the correct external encoding.\nWhen you know that the actual encoding of the data of an IO object is not the default external encoding, you can\nreset its external encoding with IO#set_encoding or set it at IO object creation (see IO.new options).\nInternal encoding\u00b6 \u2191\nTo process the data of an IO object which has an\nencoding different from its external encoding, you can set its internal\nencoding. Ruby will use this internal encoding to transcode the data when\nit is read from the IO object.\nConversely, when data is written to the IO object it\nis transcoded from the internal encoding to the external encoding of the IO object.\nThe internal encoding of an IO object can be set with\nIO#set_encoding or at IO object creation (see IO.new options).\nThe internal encoding is optional and when not set, the Ruby default\ninternal encoding is used. If not explicitly set this default internal\nencoding is nil meaning that by default, no transcoding\noccurs.\nThe default internal encoding can be set with the interpreter option\n-E. ::default_internal\nreturns the current internal encoding.\n$ ruby -e 'p Encoding.default_internal'\nnil\n\n$ ruby -E ISO-8859-1:UTF-8 -e \"p [Encoding.default_external, \\\n  Encoding.default_internal]\"\n[#<Encoding:ISO-8859-1>, #<Encoding:UTF-8>]\nThe default internal encoding may also be set through ::default_internal=,\nbut you should not do this as strings created before and after the change\nwill have inconsistent encodings.  Instead use ruby -E to\ninvoke ruby with the correct internal encoding.\nIO encoding example\u00b6 \u2191\nIn the following example a UTF-8 encoded string \u00e2\u20ac\u0153Ru00E9sumu00E9\u00e2\u20ac is\ntranscoded for output to ISO-8859-1 encoding, then read back in and\ntranscoded to UTF-8:\nstring = \"R\\u00E9sum\\u00E9\"\n\nopen(\"transcoded.txt\", \"w:ISO-8859-1\") do |io|\n  io.write(string)\nend\n\nputs \"raw text:\"\np File.binread(\"transcoded.txt\")\nputs\n\nopen(\"transcoded.txt\", \"r:ISO-8859-1:UTF-8\") do |io|\n  puts \"transcoded text:\"\n  p io.read\nend\n\nWhile writing the file, the internal encoding is not specified as it is\nonly necessary for reading.  While reading the file both the internal and\nexternal encoding must be specified to obtain the correct result.\n$ ruby t.rb\nraw text:\n\"R\\xE9sum\\xE9\"\n\ntranscoded text:\n\"R\\u00E9sum\\u00E9\"\n"}, {"c": "EncodingError", "d": "\nEncodingError is the base class for\nencoding errors.\n"}, {"c": "English", "d": "\nInclude the English library file in a Ruby\nscript, and you can reference the global variables such as VAR{$_} using\nless cryptic names, listed in the following table.% vref{tab:english}.\nWithout 'English':\n$\\ = ' -- '\n\"waterbuffalo\" =~ /buff/\nprint $', $$, \"\\n\"\n\nWith English:\nrequire \"English\"\n\n$OUTPUT_FIELD_SEPARATOR = ' -- '\n\"waterbuffalo\" =~ /buff/\nprint $POSTMATCH, $PID, \"\\n\"\n\nBelow is a full list of descriptive aliases and their associated global\nvariable:\n$ERROR_INFO\n\n$!\n$ERROR_POSITION\n\n$@\n$FS\n\n$;\n$FIELD_SEPARATOR\n\n$;\n$OFS\n\n$,\n$OUTPUT_FIELD_SEPARATOR\n\n$,\n$RS\n\n$/\n$INPUT_RECORD_SEPARATOR\n\n$/\n$ORS\n\n$\\\n$OUTPUT_RECORD_SEPARATOR\n\n$\\\n$INPUT_LINE_NUMBER\n\n$.\n$NR\n\n$.\n$LAST_READ_LINE\n\n$_\n$DEFAULT_OUTPUT\n\n$>\n$DEFAULT_INPUT\n\n$<\n$PID\n\n$$\n$PROCESS_ID\n\n$$\n$CHILD_STATUS\n\n$?\n$LAST_MATCH_INFO\n\n$~\n$IGNORECASE\n\n$=\n$ARGV\n\n$*\n$MATCH\n\n$&\n$PREMATCH\n\n$`\n$POSTMATCH\n\n$'\n$LAST_PAREN_MATCH\n\n$+\n\n"}, {"c": "Enumerable", "d": "\nThe Enumerable mixin provides collection classes with several\ntraversal and searching methods, and with the ability to sort. The class\nmust provide a method each, which yields successive members of\nthe collection. If Enumerable#max, #min, or\n#sort is used, the objects in the collection must also\nimplement a meaningful <=> operator, as these methods\nrely on an ordering between members of the collection.\n"}, {"c": "Enumerator", "d": "\nA class which allows both internal and external iteration.\nAn Enumerator can be created by the following\nmethods.\n\nKernel#to_enum\n\nKernel#enum_for\n\n::new\n\nMost methods have two forms: a block form where the contents are evaluated\nfor each item in the enumeration, and a non-block form which returns a new\nEnumerator wrapping the iteration.\nenumerator = %w(one two three).each\nputs enumerator.class # => Enumerator\n\nenumerator.each_with_object(\"foo\") do |item, obj|\n  puts \"#{obj}: #{item}\"\nend\n\n# foo: one\n# foo: two\n# foo: three\n\nenum_with_obj = enumerator.each_with_object(\"foo\")\nputs enum_with_obj.class # => Enumerator\n\nenum_with_obj.each do |item, obj|\n  puts \"#{obj}: #{item}\"\nend\n\n# foo: one\n# foo: two\n# foo: three\n\nThis allows you to chain Enumerators together.  For example, you can map a\nlist's elements to strings containing the index and the element as a\nstring via:\nputs %w[foo bar baz].map.with_index { |w, i| \"#{i}:#{w}\" }\n# => [\"0:foo\", \"1:bar\", \"2:baz\"]\n\nAn Enumerator can also be used as an external\niterator. For example, #next\nreturns the next value of the iterator or raises StopIteration if the Enumerator is at the end.\ne = [1,2,3].each   # returns an enumerator object.\nputs e.next   # => 1\nputs e.next   # => 2\nputs e.next   # => 3\nputs e.next   # raises StopIteration\n\nYou can use this to implement an internal iterator as follows:\ndef ext_each(e)\n  while true\n    begin\n      vs = e.next_values\n    rescue StopIteration\n      return $!.result\n    end\n    y = yield(*vs)\n    e.feed y\n  end\nend\n\no = Object.new\n\ndef o.each\n  puts yield\n  puts yield(1)\n  puts yield(1, 2)\n  3\nend\n\n# use o.each as an internal iterator directly.\nputs o.each {|*x| puts x; [:b, *x] }\n# => [], [:b], [1], [:b, 1], [1, 2], [:b, 1, 2], 3\n\n# convert o.each to an external iterator for\n# implementing an internal iterator.\nputs ext_each(o.to_enum) {|*x| puts x; [:b, *x] }\n# => [], [:b], [1], [:b, 1], [1, 2], [:b, 1, 2], 3\n\n"}, {"c": "ENV", "d": "\nENV is a hash-like accessor for environment\nvariables.\n"}, {"c": "EOFError", "d": "\nRaised by some IO operations when reaching the end of\nfile. Many IO methods exist in two forms,\none that returns nil when the end of file is reached, the\nother raises EOFError.\nEOFError is a subclass of IOError.\nfile = File.open(\"/etc/hosts\")\nfile.read\nfile.gets     #=> nil\nfile.readline #=> EOFError: end of file reached\n\n"}, {"c": "ERB", "d": "\nERB \u00e2\u20ac\u201c Ruby Templating\u00b6 \u2191\nIntroduction\u00b6 \u2191\nERB provides an easy to use but powerful templating\nsystem for Ruby.  Using ERB, actual Ruby code can be\nadded to any plain text document for the purposes of generating document\ninformation details and/or flow control.\nA very simple example is this:\nrequire 'erb'\n\nx = 42\ntemplate = ERB.new <<-EOF\n  The value of x is: <%= x %>\nEOF\nputs template.result(binding)\n\nPrints: The value of x is: 42\nMore complex examples are given below.\nRecognized Tags\u00b6 \u2191\nERB recognizes certain tags in the provided template\nand converts them based on the rules below:\n<% Ruby code -- inline with output %>\n<%= Ruby expression -- replace with result %>\n<%# comment -- ignored -- useful in testing %>\n% a line of Ruby code -- treated as <% line %> (optional -- see ERB.new)\n%% replaced with % if first thing on a line and % processing is used\n<%% or %%> -- replace with <% or %> respectively\nAll other text is passed through ERB filtering\nunchanged.\nOptions\u00b6 \u2191\nThere are several settings you can change when you use ERB:\n\nthe nature of the tags that are recognized;\n\nthe value of $SAFE under which the template is run;\n\nthe binding used to resolve local variables in the template.\n\nSee the ::new and #result methods for more detail.\nCharacter encodings\u00b6 \u2191\nERB (or Ruby code generated by ERB) returns a string in the same character encoding as\nthe input string.  When the input string has a magic comment, however, it\nreturns a string in the encoding specified by the magic comment.\n# -*- coding: utf-8 -*-\nrequire 'erb'\n\ntemplate = ERB.new <<EOF\n<%#-*- coding: Big5 -*-%>\n  \\_\\_ENCODING\\_\\_ is <%= \\_\\_ENCODING\\_\\_ %>.\nEOF\nputs template.result\n\nPrints: _ENCODING_ is Big5.\nExamples\u00b6 \u2191\nPlain Text\u00b6 \u2191\nERB is useful for any generic templating situation. \nNote that in this example, we use the convenient \u00e2\u20ac\u0153% at start of line\u00e2\u20ac tag,\nand we quote the template literally with %q{...} to avoid\ntrouble with the backslash.\nrequire \"erb\"\n\n# Create template.\ntemplate = %q{\n  From:  James Edward Gray II <james@grayproductions.net>\n  To:  <%= to %>\n  Subject:  Addressing Needs\n\n  <%= to[/\\w+/] %>:\n\n  Just wanted to send a quick note assuring that your needs are being\n  addressed.\n\n  I want you to know that my team will keep working on the issues,\n  especially:\n\n  <%# ignore numerous minor requests -- focus on priorities %>\n  % priorities.each do |priority|\n    * <%= priority %>\n  % end\n\n  Thanks for your patience.\n\n  James Edward Gray II\n}.gsub(/^  /, '')\n\nmessage = ERB.new(template, 0, \"%<>\")\n\n# Set up template data.\nto = \"Community Spokesman <spokesman@ruby_community.org>\"\npriorities = [ \"Run Ruby Quiz\",\n               \"Document Modules\",\n               \"Answer Questions on Ruby Talk\" ]\n\n# Produce result.\nemail = message.result\nputs email\n\nGenerates:\nFrom:  James Edward Gray II <james@grayproductions.net>\nTo:  Community Spokesman <spokesman@ruby_community.org>\nSubject:  Addressing Needs\n\nCommunity:\n\nJust wanted to send a quick note assuring that your needs are being addressed.\n\nI want you to know that my team will keep working on the issues, especially:\n\n    * Run Ruby Quiz\n    * Document Modules\n    * Answer Questions on Ruby Talk\n\nThanks for your patience.\n\nJames Edward Gray II\nRuby in HTML\u00b6 \u2191\nERB is often used in .rhtml files (HTML\nwith embedded Ruby).  Notice the need in this example to provide a special\nbinding when the template is run, so that the instance variables in the\nProduct object can be resolved.\nrequire \"erb\"\n\n# Build template data class.\nclass Product\n  def initialize( code, name, desc, cost )\n    @code = code\n    @name = name\n    @desc = desc\n    @cost = cost\n\n    @features = [ ]\n  end\n\n  def add_feature( feature )\n    @features << feature\n  end\n\n  # Support templating of member data.\n  def get_binding\n    binding\n  end\n\n  # ...\nend\n\n# Create template.\ntemplate = %{\n  <html>\n    <head><title>Ruby Toys -- <%= @name %></title></head>\n    <body>\n\n      <h1><%= @name %> (<%= @code %>)</h1>\n      <p><%= @desc %></p>\n\n      <ul>\n        <% @features.each do |f| %>\n          <li><b><%= f %></b></li>\n        <% end %>\n      </ul>\n\n      <p>\n        <% if @cost < 10 %>\n          <b>Only <%= @cost %>!!!</b>\n        <% else %>\n           Call for a price, today!\n        <% end %>\n      </p>\n\n    </body>\n  </html>\n}.gsub(/^  /, '')\n\nrhtml = ERB.new(template)\n\n# Set up template data.\ntoy = Product.new( \"TZ-1002\",\n                   \"Rubysapien\",\n                   \"Geek's Best Friend!  Responds to Ruby commands...\",\n                   999.95 )\ntoy.add_feature(\"Listens for verbal commands in the Ruby language!\")\ntoy.add_feature(\"Ignores Perl, Java, and all C variants.\")\ntoy.add_feature(\"Karate-Chop Action!!!\")\ntoy.add_feature(\"Matz signature on left leg.\")\ntoy.add_feature(\"Gem studded eyes... Rubies, of course!\")\n\n# Produce result.\nrhtml.run(toy.get_binding)\n\nGenerates (some blank lines removed):\n<html>\n  <head><title>Ruby Toys -- Rubysapien</title></head>\n  <body>\n\n    <h1>Rubysapien (TZ-1002)</h1>\n    <p>Geek's Best Friend!  Responds to Ruby commands...</p>\n\n    <ul>\n        <li><b>Listens for verbal commands in the Ruby language!</b></li>\n        <li><b>Ignores Perl, Java, and all C variants.</b></li>\n        <li><b>Karate-Chop Action!!!</b></li>\n        <li><b>Matz signature on left leg.</b></li>\n        <li><b>Gem studded eyes... Rubies, of course!</b></li>\n    </ul>\n\n    <p>\n         Call for a price, today!\n    </p>\n\n  </body>\n</html>\nNotes\u00b6 \u2191\nThere are a variety of templating solutions available in various Ruby\nprojects:\n\nERB's big brother, eRuby, works the same but is written in C for speed;\n\nAmrita (smart at producing HTML/XML);\n\ncs/Template (written in C for speed);\n\nRDoc, distributed with Ruby, uses its own template\nengine, which can be reused elsewhere;\n\nand others; search RubyGems.org or The Ruby Toolbox.\n\nRails, the web application framework, uses ERB to\ncreate views.\n"}, {"c": "Errno", "d": "\nRuby exception objects are subclasses of Exception. However,\noperating systems typically report errors using plain integers. Module Errno is created dynamically to\nmap these operating system errors to Ruby classes, with each error number\ngenerating its own subclass of SystemCallError. As the\nsubclass is created in module Errno, its name will start\nErrno::.\nThe names of the Errno:: classes depend on the environment in\nwhich Ruby runs. On a typical Unix or Windows platform, there are\nErrno classes such as Errno::EACCES,\nErrno::EAGAIN, Errno::EINTR, and so on.\nThe integer operating system error number corresponding to a particular\nerror is available as the class constant\nErrno::error::Errno.\nErrno::EACCES::Errno   #=> 13\nErrno::EAGAIN::Errno   #=> 11\nErrno::EINTR::Errno    #=> 4\n\nThe full list of operating system errors on your particular platform are\navailable as the constants of Errno.\nErrno.constants   #=> :E2BIG, :EACCES, :EADDRINUSE, :EADDRNOTAVAIL, ...\n\nSystem call error module used by webrick for cross platform compatibility.\nEPROTO\n\nprotocol error\nECONNRESET\n\nremote host reset the connection request\nECONNABORTED\n\nClient sent TCP reset (RST) before server has accepted the connection\nrequested by client.\n\n"}, {"c": "Etc", "d": "\nThe Etc module provides access to information\ntypically stored in files in the /etc directory on Unix systems.\nThe information accessible consists of the information found in the\n/etc/passwd and /etc/group files, plus information about the system's\ntemporary directory (/tmp) and configuration directory (/etc).\nThe Etc module provides a more reliable way to\naccess information about the logged in user than environment variables such\nas +$USER+.\nExample:\u00b6 \u2191\nrequire 'etc'\n\nlogin = Etc.getlogin\ninfo = Etc.getpwnam(login)\nusername = info.gecos.split(/,/).first\nputs \"Hello #{username}, I see your login name is #{login}\"\n\nNote that the methods provided by this module are not always secure. It\nshould be used for informational purposes, and not for security.\nAll operations defined in this module are class methods, so that you can\ninclude the Etc module into your class.\n"}, {"c": "Exception", "d": "\nDescendants of class Exception are used to\ncommunicate between Kernel#raise\nand rescue statements in begin ... end blocks. Exception objects carry information about the\nexception \u00e2\u20ac\u201c its type (the exception's class name), an optional\ndescriptive string, and optional traceback information.  Exception subclasses may add additional\ninformation like NameError#name.\nPrograms may make subclasses of Exception,\ntypically of StandardError or RuntimeError, to provide custom classes and\nadd additional information. See the subclass list below for defaults for\nraise and rescue.\nWhen an exception has been raised but not yet handled (in\nrescue, ensure, at_exit and\nEND blocks) the global variable $! will contain\nthe current exception and $@ contains the current\nexception's backtrace.\nIt is recommended that a library should have one subclass of StandardError or RuntimeError and have specific exception types\ninherit from it.  This allows the user to rescue a generic exception type\nto catch all exceptions the library may raise even if future versions of\nthe library add new exception subclasses.\nFor example:\nclass MyLibrary\n  class Error < RuntimeError\n  end\n\n  class WidgetError < Error\n  end\n\n  class FrobError < Error\n  end\n\nend\n\nTo handle both WidgetError and FrobError the library user can rescue\nMyLibrary::Error.\nThe built-in subclasses of Exception are:\n\nNoMemoryError\n\nScriptError\n\nLoadError\n\nNotImplementedError\n\nSyntaxError\n\n\nSecurityError\n\nSignalException\n\nInterrupt\n\n\nStandardError \u00e2\u20ac\u201c default for\nrescue\n\nArgumentError\n\nUncaughtThrowError\n\n\nEncodingError\n\nFiberError\n\nIOError\n\nEOFError\n\n\nIndexError\n\nKeyError\n\nStopIteration\n\n\nLocalJumpError\n\nNameError\n\nNoMethodError\n\n\nRangeError\n\nFloatDomainError\n\n\nRegexpError\n\nRuntimeError \u00e2\u20ac\u201c default for\nraise\n\nFrozenError\n\n\nSystemCallError\n\nErrno::*\n\n\nThreadError\n\nTypeError\n\nZeroDivisionError\n\n\nSystemExit\n\nSystemStackError\n\nfatal \u00e2\u20ac\u201c impossible to rescue\n\n"}, {"c": "Exception2MessageMapper", "d": "\nHelper module for easily defining exceptions with predefined messages.\nUsage\u00b6 \u2191\n1.\nclass Foo\n  extend Exception2MessageMapper\n  def_e2message ExistingExceptionClass, \"message...\"\n  def_exception :NewExceptionClass, \"message...\"[, superclass]\n  ...\nend\n2.\nmodule Error\n  extend Exception2MessageMapper\n  def_e2message ExistingExceptionClass, \"message...\"\n  def_exception :NewExceptionClass, \"message...\"[, superclass]\n  ...\nend\nclass Foo\n  include Error\n  ...\nend\n\nfoo = Foo.new\nfoo.Fail ....\n3.\nmodule Error\n  extend Exception2MessageMapper\n  def_e2message ExistingExceptionClass, \"message...\"\n  def_exception :NewExceptionClass, \"message...\"[, superclass]\n  ...\nend\nclass Foo\n  extend Exception2MessageMapper\n  include Error\n  ...\nend\n\nFoo.Fail NewExceptionClass, arg...\nFoo.Fail ExistingExceptionClass, arg...\n"}, {"c": "EXCEPTION_TYPE", "d": "\n"}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": "FalseClass", "d": "\nThe global value false is the only instance of class\nFalseClass and represents a logically false value in boolean\nexpressions. The class provides operators allowing false to\nparticipate correctly in logical expressions.\n"}, {"c": "fatal", "d": "\nfatal is an Exception that is raised when Ruby\nhas encountered a fatal error and must exit.  You are not able to rescue\nfatal.\n"}, {"c": "Fcntl", "d": "\nFcntl loads the constants defined in the\nsystem's <fcntl.h> C header file, and used with both the fcntl(2)\nand open(2) POSIX system calls.\nTo perform a fcntl(2) operation, use IO::fcntl.\nTo perform an open(2) operation, use IO.sysopen.\nThe set of operations and constants available depends upon specific\noperating system.  Some values listed below may not be supported on your\nsystem.\nSee your fcntl(2) man page for complete details.\nOpen /tmp/tempfile as a write-only file that is created if it doesn't\nexist:\nrequire 'fcntl'\n\nfd = IO.sysopen('/tmp/tempfile',\n                Fcntl::O_WRONLY | Fcntl::O_EXCL | Fcntl::O_CREAT)\nf = IO.open(fd)\nf.syswrite(\"TEMP DATA\")\nf.close\n\nGet the flags on file s:\nm = s.fcntl(Fcntl::F_GETFL, 0)\n\nSet the non-blocking flag on f in\naddition to the existing flags in m.\nf.fcntl(Fcntl::F_SETFL, Fcntl::O_NONBLOCK|m)\n\n"}, {"c": "Fiber", "d": "\nFibers are primitives for implementing light weight cooperative concurrency\nin Ruby. Basically they are a means of creating code blocks that can be\npaused and resumed, much like threads. The main difference is that they are\nnever preempted and that the scheduling must be done by the programmer and\nnot the VM.\nAs opposed to other stackless light weight concurrency models, each fiber\ncomes with a stack.  This enables the fiber to be paused from deeply nested\nfunction calls within the fiber block.  See the ruby(1) manpage to\nconfigure the size of the fiber stack(s).\nWhen a fiber is created it will not run automatically. Rather it must be\nexplicitly asked to run using the Fiber#resume method. The\ncode running inside the fiber can give up control by calling\nFiber.yield in which case it yields control back to caller\n(the caller of the Fiber#resume).\nUpon yielding or termination the Fiber returns the\nvalue of the last executed expression\nFor instance:\nfiber = Fiber.new do\n  Fiber.yield 1\n  2\nend\n\nputs fiber.resume\nputs fiber.resume\nputs fiber.resume\n\nproduces\n1\n2\nFiberError: dead fiber called\nThe Fiber#resume method accepts an arbitrary number of\nparameters, if it is the first call to resume then they will\nbe passed as block arguments. Otherwise they will be the return value of\nthe call to Fiber.yield\nExample:\nfiber = Fiber.new do |first|\n  second = Fiber.yield first + 2\nend\n\nputs fiber.resume 10\nputs fiber.resume 14\nputs fiber.resume 18\n\nproduces\n12\n14\nFiberError: dead fiber called\n"}, {"c": "FiberError", "d": "\nRaised when an invalid operation is attempted on a Fiber, in particular when attempting to call/resume a\ndead fiber, attempting to yield from the root fiber, or calling a fiber\nacross threads.\nfiber = Fiber.new{}\nfiber.resume #=> nil\nfiber.resume #=> FiberError: dead fiber called\n\n"}, {"c": "Fiddle", "d": "\nA libffi wrapper for Ruby.\nDescription\u00b6 \u2191\nFiddle is an extension to translate a foreign\nfunction interface (FFI) with ruby.\nIt wraps libffi, a popular C\nlibrary which provides a portable interface that allows code written in one\nlanguage to call code written in another language.\nExample\u00b6 \u2191\nHere we will use Fiddle::Function to\nwrap floor(3) from libm\nrequire 'fiddle'\n\nlibm = Fiddle.dlopen('/lib/libm.so.6')\n\nfloor = Fiddle::Function.new(\n  libm['floor'],\n  [Fiddle::TYPE_DOUBLE],\n  Fiddle::TYPE_DOUBLE\n)\n\nputs floor.call(3.14159) #=> 3.0\n\n"}, {"c": "File", "d": "\nA File is an abstraction of any file object accessible by the\nprogram and is closely associated with class IO.\nFile includes the methods of module FileTest as\nclass methods, allowing you to write (for example)\nFile.exist?(\"foo\").\nIn the description of File methods, permission\nbits are a platform-specific set of bits that indicate permissions of\na file. On Unix-based systems, permissions are viewed as a set of three\noctets, for the owner, the group, and the rest of the world. For each of\nthese entities, permissions may be set to read, write, or execute the file:\nThe permission bits 0644 (in octal) would thus be interpreted\nas read/write for owner, and read-only for group and other. Higher-order\nbits may also be used to indicate the type of file (plain, directory, pipe,\nsocket, and so on) and various other special features. If the permissions\nare for a directory, the meaning of the execute bit changes; when set the\ndirectory can be searched.\nOn non-Posix operating systems, there may be only the ability to make a\nfile read-only or read-write. In this case, the remaining permission bits\nwill be synthesized to resemble typical values. For instance, on Windows NT\nthe default permission bits are 0644, which means read/write\nfor owner, read-only for all others. The only change that can be made is to\nmake the file read-only, which is reported as 0444.\nVarious constants for the methods in File can be\nfound in File::Constants.\n"}, {"c": "FileTest", "d": "\nFileTest implements file test operations similar to those used\nin File::Stat. It exists as a standalone module, and its\nmethods are also insinuated into the File class. (Note that\nthis is not done by inclusion: the interpreter cheats).\n"}, {"c": "FileUtils", "d": "\nfileutils.rb\u00b6 \u2191\nCopyright \u00c2\u00a9 2000-2007 Minero Aoki\nThis program is free software. You can distribute/modify this program under\nthe same terms of ruby.\nmodule FileUtils\u00b6 \u2191\nNamespace for several file utility methods for copying, moving, removing,\netc.\nModule Functions\u00b6 \u2191\nrequire 'fileutils'\n\nFileUtils.cd(dir, options)\nFileUtils.cd(dir, options) {|dir| block }\nFileUtils.pwd()\nFileUtils.mkdir(dir, options)\nFileUtils.mkdir(list, options)\nFileUtils.mkdir_p(dir, options)\nFileUtils.mkdir_p(list, options)\nFileUtils.rmdir(dir, options)\nFileUtils.rmdir(list, options)\nFileUtils.ln(target, link, options)\nFileUtils.ln(targets, dir, options)\nFileUtils.ln_s(target, link, options)\nFileUtils.ln_s(targets, dir, options)\nFileUtils.ln_sf(target, link, options)\nFileUtils.cp(src, dest, options)\nFileUtils.cp(list, dir, options)\nFileUtils.cp_r(src, dest, options)\nFileUtils.cp_r(list, dir, options)\nFileUtils.mv(src, dest, options)\nFileUtils.mv(list, dir, options)\nFileUtils.rm(list, options)\nFileUtils.rm_r(list, options)\nFileUtils.rm_rf(list, options)\nFileUtils.install(src, dest, options)\nFileUtils.chmod(mode, list, options)\nFileUtils.chmod_R(mode, list, options)\nFileUtils.chown(user, group, list, options)\nFileUtils.chown_R(user, group, list, options)\nFileUtils.touch(list, options)\n\nThe options parameter is a hash of options, taken from the\nlist :force, :noop, :preserve, and\n:verbose. :noop means that no changes are made. \nThe other three are obvious. Each method documents the options that it\nhonours.\nAll methods that have the concept of a \u00e2\u20ac\u0153source\u00e2\u20ac file or directory can take\neither one file or a list of files in that argument.  See the method\ndocumentation for examples.\nThere are some `low level' methods, which do not accept any option:\nFileUtils.copy_entry(src, dest, preserve = false, dereference = false)\nFileUtils.copy_file(src, dest, preserve = false, dereference = true)\nFileUtils.copy_stream(srcstream, deststream)\nFileUtils.remove_entry(path, force = false)\nFileUtils.remove_entry_secure(path, force = false)\nFileUtils.remove_file(path, force = false)\nFileUtils.compare_file(path_a, path_b)\nFileUtils.compare_stream(stream_a, stream_b)\nFileUtils.uptodate?(file, cmp_list)\n\nmodule FileUtils::Verbose\u00b6 \u2191\nThis module has all methods of FileUtils\nmodule, but it outputs messages before acting.  This equates to passing the\n:verbose flag to methods in FileUtils.\nmodule FileUtils::NoWrite\u00b6 \u2191\nThis module has all methods of FileUtils\nmodule, but never changes files/directories.  This equates to passing the\n:noop flag to methods in FileUtils.\nmodule FileUtils::DryRun\u00b6 \u2191\nThis module has all methods of FileUtils\nmodule, but never changes files/directories.  This equates to passing the\n:noop and :verbose flags to methods in FileUtils.\n"}, {"c": "Find", "d": "\nThe Find module supports the top-down traversal of a set of\nfile paths.\nFor example, to total the size of all files under your home directory,\nignoring anything in a \u00e2\u20ac\u0153dot\u00e2\u20ac directory (e.g. $HOME/.ssh):\nrequire 'find'\n\ntotal_size = 0\n\nFind.find(ENV[\"HOME\"]) do |path|\n  if FileTest.directory?(path)\n    if File.basename(path)[0] == ?.\n      Find.prune       # Don't look any further into this directory.\n    else\n      next\n    end\n  else\n    total_size += FileTest.size(path)\n  end\nend\n\n"}, {"c": "Float", "d": "\nFloat objects represent inexact real numbers using\nthe native architecture's double-precision floating point\nrepresentation.\nFloating point has a different arithmetic and is an inexact number. So you\nshould know its esoteric system. See following:\n\ndocs.sun.com/source/806-3568/ncg_goldberg.html\n\nwiki.github.com/rdp/ruby_tutorials_core/ruby-talk-faq#wiki-floats_imprecise\n\nen.wikipedia.org/wiki/Floating_point#Accuracy_problems\n\n"}, {"c": "FloatDomainError", "d": "\nRaised when attempting to convert special float values (in particular\nInfinity or NaN) to numerical classes which\ndon't support them.\nFloat::INFINITY.to_r   #=> FloatDomainError: Infinity\n\n"}, {"c": "Forwardable", "d": "\nThe Forwardable module provides delegation of specified methods to a\ndesignated object, using the methods def_delegator and def_delegators.\nFor example, say you have a class RecordCollection which contains an array\n@records.  You could provide the lookup method\nrecord_number(), which simply calls [] on the @records array,\nlike this:\nrequire 'forwardable'\n\nclass RecordCollection\n  attr_accessor :records\n  extend Forwardable\n  def_delegator :@records, :[], :record_number\nend\n\nWe can use the lookup method like so:\nr = RecordCollection.new\nr.records = [4,5,6]\nr.record_number(0)  # => 4\n\nFurther, if you wish to provide the methods size, <<, and map, all of which\ndelegate to @records, this is how you can do it:\nclass RecordCollection # re-open RecordCollection class\n  def_delegators :@records, :size, :<<, :map\nend\n\nr = RecordCollection.new\nr.records = [1,2,3]\nr.record_number(0)   # => 1\nr.size               # => 3\nr << 4               # => [1, 2, 3, 4]\nr.map { |x| x * 2 }  # => [2, 4, 6, 8]\n\nYou can even extend regular objects with Forwardable.\nmy_hash = Hash.new\nmy_hash.extend Forwardable              # prepare object for delegation\nmy_hash.def_delegator \"STDOUT\", \"puts\"  # add delegation for STDOUT.puts()\nmy_hash.puts \"Howdy!\"\n\nAnother example\u00b6 \u2191\nWe want to rely on what has come before obviously, but with delegation we\ncan take just the methods we need and even rename them as appropriate.  In\nmany cases this is preferable to inheritance, which gives us the entire old\ninterface, even if much of it isn't needed.\nclass Queue\n  extend Forwardable\n\n  def initialize\n    @q = [ ]    # prepare delegate object\n  end\n\n  # setup preferred interface, enq() and deq()...\n  def_delegator :@q, :push, :enq\n  def_delegator :@q, :shift, :deq\n\n  # support some general Array methods that fit Queues well\n  def_delegators :@q, :clear, :first, :push, :shift, :size\nend\n\nq = Queue.new\nq.enq 1, 2, 3, 4, 5\nq.push 6\n\nq.shift    # => 1\nwhile q.size > 0\n  puts q.deq\nend\n\nq.enq \"Ruby\", \"Perl\", \"Python\"\nputs q.first\nq.clear\nputs q.first\n\nThis should output:\n2\n3\n4\n5\n6\nRuby\nnil\n\nNotes\u00b6 \u2191\nBe advised, RDoc will not detect delegated methods.\nforwardable.rb provides single-method delegation via the #def_delegator and #def_delegators\nmethods. For full-class delegation via DelegateClass, see\ndelegate.rb.\n"}, {"c": "FrozenError", "d": "\nRaised when there is an attempt to modify a frozen object.\n[1, 2, 3].freeze << 4\n\nraises the exception:\nFrozenError: can't modify frozen Array\n"}, {"c": "GC", "d": "\nThe GC module provides an interface to Ruby's\nmark and sweep garbage collection mechanism.\nSome of the underlying methods are also available via the ObjectSpace module.\nYou may obtain information about the operation of the GC through GC::Profiler.\n"}, {"c": "GDBM", "d": "\nSummary\u00b6 \u2191\nRuby extension for GNU dbm (gdbm) \u00e2\u20ac\u201c a simple database engine for storing\nkey-value pairs on disk.\nDescription\u00b6 \u2191\nGNU dbm is a library for simple databases. A database is a file that stores\nkey-value pairs. Gdbm allows the user to store, retrieve, and delete data\nby key. It furthermore allows a non-sorted traversal of all key-value\npairs. A gdbm database thus provides the same functionality as a hash. As\nwith objects of the Hash class, elements can be\naccessed with []. Furthermore, GDBM\nmixes in the Enumerable module, thus\nproviding convenient methods such as find, collect, map, etc.\nA process is allowed to open several different databases at the same time.\nA process can open a database as a \u00e2\u20ac\u0153reader\u00e2\u20ac or a \u00e2\u20ac\u0153writer\u00e2\u20ac. Whereas a reader\nhas only read-access to the database, a writer has read- and write-access.\nA database can be accessed either by any number of readers or by exactly\none writer at the same time.\nExamples\u00b6 \u2191\n\nOpening/creating a database, and filling it with some entries:\nrequire 'gdbm'\n\ngdbm = GDBM.new(\"fruitstore.db\")\ngdbm[\"ananas\"]    = \"3\"\ngdbm[\"banana\"]    = \"8\"\ngdbm[\"cranberry\"] = \"4909\"\ngdbm.close\n\n\nReading out a database:\nrequire 'gdbm'\n\ngdbm = GDBM.new(\"fruitstore.db\")\ngdbm.each_pair do |key, value|\n  print \"#{key}: #{value}\\n\"\nend\ngdbm.close\n\nproduces\nbanana: 8\nananas: 3\ncranberry: 4909\n\nLinks\u00b6 \u2191\n\nwww.gnu.org/software/gdbm/\n\n"}, {"c": "GDBMError", "d": "\n"}, {"c": "GDBMFatalError", "d": "\n"}, {"c": "Gem", "d": "\nRubyGems is the Ruby standard for publishing and managing third party\nlibraries.\nFor user documentation, see:\n\ngem help and gem help [command]\n\nRubyGems User Guide\n\nFrequently Asked Questions\n\nFor gem developer documentation see:\n\nCreating Gems\n\nGem::Specification\n\nGem::Version for version dependency notes\n\nFurther RubyGems documentation can be found at:\n\nRubyGems Guides\n\nRubyGems API\n(also available from gem server)\n\nRubyGems Plugins\u00b6 \u2191\nAs of RubyGems 1.3.2, RubyGems will load plugins installed in gems or\n$LOAD_PATH.  Plugins must be named 'rubygems_plugin' (.rb, .so,\netc) and placed at the root of your gem's require_path.  Plugins are\ndiscovered via ::find_files and\nthen loaded.\nFor an example plugin, see the Graph gem which adds a `gem\ngraph` command.\nRubyGems Defaults, Packaging\u00b6 \u2191\nRubyGems defaults are stored in lib/rubygems/defaults.rb.  If you're\npackaging RubyGems or implementing Ruby you can change RubyGems'\ndefaults.\nFor RubyGems packagers, provide lib/rubygems/defaults/operating_system.rb\nand override any defaults from lib/rubygems/defaults.rb.\nFor Ruby implementers, provide lib/rubygems/defaults/#{RUBY_ENGINE}.rb and\noverride any defaults from lib/rubygems/defaults.rb.\nIf you need RubyGems to perform extra work on install or uninstall, your\ndefaults override file can set pre/post install and uninstall hooks. See ::pre_install, ::pre_uninstall, ::post_install, ::post_uninstall.\nBugs\u00b6 \u2191\nYou can submit bugs to the RubyGems bug tracker\non GitHub\nCredits\u00b6 \u2191\nRubyGems is currently maintained by Eric Hodel.\nRubyGems was originally developed at RubyConf 2003 by:\n\nRich Kilmer  \u00e2\u20ac\u201c rich(at)infoether.com\n\nChad Fowler  \u00e2\u20ac\u201c chad(at)chadfowler.com\n\nDavid Black  \u00e2\u20ac\u201c dblack(at)wobblini.net\n\nPaul Brannan \u00e2\u20ac\u201c paul(at)atdesk.com\n\nJim Weirich   \u00e2\u20ac\u201c jim(at)weirichhouse.org\n\nContributors:\n\nGavin Sinclair     \u00e2\u20ac\u201c gsinclair(at)soyabean.com.au\n\nGeorge Marrows     \u00e2\u20ac\u201c george.marrows(at)ntlworld.com\n\nDick Davies        \u00e2\u20ac\u201c rasputnik(at)hellooperator.net\n\nMauricio Fernandez \u00e2\u20ac\u201c batsman.geo(at)yahoo.com\n\nSimon Strandgaard  \u00e2\u20ac\u201c neoneye(at)adslhome.dk\n\nDave Glasser       \u00e2\u20ac\u201c glasser(at)mit.edu\n\nPaul Duncan        \u00e2\u20ac\u201c pabs(at)pablotron.org\n\nVille Aine         \u00e2\u20ac\u201c vaine(at)cs.helsinki.fi\n\nEric Hodel         \u00e2\u20ac\u201c drbrain(at)segment7.net\n\nDaniel Berger      \u00e2\u20ac\u201c djberg96(at)gmail.com\n\nPhil Hagelberg     \u00e2\u20ac\u201c technomancy(at)gmail.com\n\nRyan Davis         \u00e2\u20ac\u201c ryand-ruby(at)zenspider.com\n\nEvan Phoenix       \u00e2\u20ac\u201c evan(at)fallingsnow.net\n\nSteve Klabnik      \u00e2\u20ac\u201c steve(at)steveklabnik.com\n\n(If your name is missing, PLEASE let us know!)\nLicense\u00b6 \u2191\nSee LICENSE.txt for permissions.\nThanks!\n-The RubyGems Team\n"}, {"c": "GetoptLong", "d": "\nThe GetoptLong class allows you to parse\ncommand line options similarly to the GNU getopt_long() C library call.\nNote, however, that GetoptLong is a pure Ruby\nimplementation.\nGetoptLong allows for POSIX-style options\nlike --file as well as single letter options like\n-f\nThe empty option -- (two minus symbols) is used to end option\nprocessing. This can be particularly important if options have optional\narguments.\nHere is a simple example of usage:\nrequire 'getoptlong'\n\nopts = GetoptLong.new(\n  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],\n  [ '--repeat', '-n', GetoptLong::REQUIRED_ARGUMENT ],\n  [ '--name', GetoptLong::OPTIONAL_ARGUMENT ]\n)\n\ndir = nil\nname = nil\nrepetitions = 1\nopts.each do |opt, arg|\n  case opt\n    when '--help'\n      puts <<-EOF\nhello [OPTION] ... DIR\n\n-h, --help:\n   show help\n\n--repeat x, -n x:\n   repeat x times\n\n--name [name]:\n   greet user by name, if name not supplied default is John\n\nDIR: The directory in which to issue the greeting.\n      EOF\n    when '--repeat'\n      repetitions = arg.to_i\n    when '--name'\n      if arg == ''\n        name = 'John'\n      else\n        name = arg\n      end\n  end\nend\n\nif ARGV.length != 1\n  puts \"Missing dir argument (try --help)\"\n  exit 0\nend\n\ndir = ARGV.shift\n\nDir.chdir(dir)\nfor i in (1..repetitions)\n  print \"Hello\"\n  if name\n    print \", #{name}\"\n  end\n  puts\nend\n\nExample command line:\nhello -n 6 --name -- /tmp\n"}, {"c": null, "d": ""}, {"c": "Hash", "d": "\nA Hash is a dictionary-like collection of unique\nkeys and their values. Also called associative arrays, they are similar to\nArrays, but where an Array uses integers as its index, a Hash allows you to use any object type.\nHashes enumerate their values in the order that the corresponding keys were\ninserted.\nA Hash can be easily created by using its implicit\nform:\ngrades = { \"Jane Doe\" => 10, \"Jim Doe\" => 6 }\n\nHashes allow an alternate syntax for keys that are symbols. Instead of\noptions = { :font_size => 10, :font_family => \"Arial\" }\n\nYou could write it as:\noptions = { font_size: 10, font_family: \"Arial\" }\n\nEach named key is a symbol you can access in hash:\noptions[:font_size]  # => 10\n\nA Hash can also be created through its ::new method:\ngrades = Hash.new\ngrades[\"Dorothy Doe\"] = 9\n\nHashes have a default value that is returned when accessing keys\nthat do not exist in the hash. If no default is set nil is\nused. You can set the default value by sending it as an argument to ::new:\ngrades = Hash.new(0)\n\nOr by using the default=\nmethod:\ngrades = {\"Timmy Doe\" => 8}\ngrades.default = 0\n\nAccessing a value in a Hash requires using its key:\nputs grades[\"Jane Doe\"] # => 0\n\nCommon Uses\u00b6 \u2191\nHashes are an easy way to represent data structures, such as\nbooks         = {}\nbooks[:matz]  = \"The Ruby Programming Language\"\nbooks[:black] = \"The Well-Grounded Rubyist\"\n\nHashes are also commonly used as a way to have named parameters in\nfunctions. Note that no brackets are used below. If a hash is the last\nargument on a method call, no braces are needed, thus creating a really\nclean interface:\nPerson.create(name: \"John Doe\", age: 27)\n\ndef self.create(params)\n  @name = params[:name]\n  @age  = params[:age]\nend\n\nHash Keys\u00b6 \u2191\nTwo objects refer to the same hash key when their hash value\nis identical and the two objects are eql? to each other.\nA user-defined class may be used as a hash key if the hash and\neql? methods are overridden to provide meaningful behavior. \nBy default, separate instances refer to separate hash keys.\nA typical implementation of hash is based on the object's\ndata while eql? is usually aliased to the overridden\n== method:\nclass Book\n  attr_reader :author, :title\n\n  def initialize(author, title)\n    @author = author\n    @title = title\n  end\n\n  def ==(other)\n    self.class === other and\n      other.author == @author and\n      other.title == @title\n  end\n\n  alias eql? ==\n\n  def hash\n    @author.hash ^ @title.hash # XOR\n  end\nend\n\nbook1 = Book.new 'matz', 'Ruby in a Nutshell'\nbook2 = Book.new 'matz', 'Ruby in a Nutshell'\n\nreviews = {}\n\nreviews[book1] = 'Great reference!'\nreviews[book2] = 'Nice and compact!'\n\nreviews.length #=> 1\n\nSee also Object#hash and Object#eql?\n"}, {"c": "HTTPMovedTemporarily", "d": "\n"}, {"c": "HTTPMultipleChoice", "d": "\n"}, {"c": "HTTPRequestURITooLarge", "d": "\n"}, {"c": null, "d": ""}, {"c": "IndexError", "d": "\nRaised when the given index is invalid.\na = [:foo, :bar]\na.fetch(0)   #=> :foo\na[4]         #=> nil\na.fetch(4)   #=> IndexError: index 4 outside of array bounds: -2...2\n\n"}, {"c": "Integer", "d": "\nHolds Integer values.  You cannot add a\nsingleton method to an Integer object, any\nattempt to do so will raise a TypeError.\n"}, {"c": "Interrupt", "d": "\nRaised with the interrupt signal is received, typically because the user\npressed on Control-C (on most posix platforms). As such, it is a subclass\nof SignalException.\nbegin\n  puts \"Press ctrl-C when you get bored\"\n  loop {}\nrescue Interrupt => e\n  puts \"Note: You will typically use Signal.trap instead.\"\nend\n\nproduces:\nPress ctrl-C when you get bored\nthen waits until it is interrupted with Control-C and then prints:\nNote: You will typically use Signal.trap instead.\n"}, {"c": "IO", "d": "\nExpect library adds the IO instance method expect, which does similar act to\ntcl's expect extension.\nIn order to use this method, you must require expect:\nrequire 'expect'\n\nPlease see expect for usage.\nThe IO class is the basis for all input and output in\nRuby. An I/O stream may be duplexed (that is, bidirectional), and\nso may use more than one native operating system stream.\nMany of the examples in this section use the File\nclass, the only standard subclass of IO. The two\nclasses are closely associated.  Like the File\nclass, the Socket library subclasses from IO (such as TCPSocket or UDPSocket).\nThe Kernel#open method can create\nan IO (or File) object for\nthese types of arguments:\n\nA plain string represents a filename suitable for the underlying operating\nsystem.\n\nA string starting with \"|\" indicates a subprocess.\nThe remainder of the string following the \"|\" is\ninvoked as a process with appropriate input/output channels connected to\nit.\n\nA string equal to \"|-\" will create another Ruby\ninstance as a subprocess.\n\nThe IO may be opened with different file modes\n(read-only, write-only) and encodings for proper conversion.  See ::new for these options.  See Kernel#open for details of the various\ncommand formats described above.\n::popen, the Open3 library, or  Process#spawn may also be used to\ncommunicate with subprocesses through an IO.\nRuby will convert pathnames between different operating system conventions\nif possible.  For instance, on a Windows system the filename\n\"/gumby/ruby/test.rb\" will be opened as\n\"\\gumby\\ruby\\test.rb\".  When specifying a\nWindows-style filename in a Ruby string, remember to escape the\nbackslashes:\n\"C:\\\\gumby\\\\ruby\\\\test.rb\"\n\nOur examples here will use the Unix-style forward slashes;\nFile::ALT_SEPARATOR can be used to get the platform-specific separator\ncharacter.\nThe global constant ARGF (also accessible as\n$<) provides an IO-like stream which allows access to all\nfiles mentioned on the command line (or STDIN if no files are mentioned).\nARGF#path and its alias ARGF#filename are provided to access\nthe name of the file currently being read.\nio/console\u00b6 \u2191\nThe io/console extension provides methods for interacting with the console.\nThe console can be accessed from ::console or the standard\ninput/output/error IO objects.\nRequiring io/console adds the following methods:\n\n::console\n\n#raw\n\n#raw!\n\n#cooked\n\n#cooked!\n\n#getch\n\n#echo=\n\n#echo?\n\n#noecho\n\n#winsize\n\n#winsize=\n\n#iflush\n\n#ioflush\n\n#oflush\n\nExample:\nrequire 'io/console'\nrows, columns = $stdout.winsize\nputs \"Your screen is #{columns} wide and #{rows} tall\"\n\n"}, {"c": "IOError", "d": "\nRaised when an IO operation fails.\nFile.open(\"/etc/hosts\") {|f| f << \"example\"}\n  #=> IOError: not opened for writing\n\nFile.open(\"/etc/hosts\") {|f| f.close; f.read }\n  #=> IOError: closed stream\n\nNote that some IO failures raise\nSystemCallErrors and these are not subclasses of IOError:\nFile.open(\"does/not/exist\")\n  #=> Errno::ENOENT: No such file or directory - does/not/exist\n\n"}, {"c": "IPAddr", "d": "\nIPAddr provides a set of methods to manipulate an\nIP address.  Both IPv4 and IPv6 are supported.\nExample\u00b6 \u2191\nrequire 'ipaddr'\n\nipaddr1 = IPAddr.new \"3ffe:505:2::1\"\n\np ipaddr1                   #=> #<IPAddr: IPv6:3ffe:0505:0002:0000:0000:0000:0000:0001/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff>\n\np ipaddr1.to_s              #=> \"3ffe:505:2::1\"\n\nipaddr2 = ipaddr1.mask(48)  #=> #<IPAddr: IPv6:3ffe:0505:0002:0000:0000:0000:0000:0000/ffff:ffff:ffff:0000:0000:0000:0000:0000>\n\np ipaddr2.to_s              #=> \"3ffe:505:2::\"\n\nipaddr3 = IPAddr.new \"192.168.2.0/24\"\n\np ipaddr3                   #=> #<IPAddr: IPv4:192.168.2.0/255.255.255.0>\n\n"}, {"c": "IPSocket", "d": "\nIPSocket is the super class of TCPSocket and UDPSocket.\n"}, {"c": "IRB", "d": "\nIRB stands for \u00e2\u20ac\u0153interactive Ruby\u00e2\u20ac and is a tool to interactively execute\nRuby expressions read from the standard input.\nThe irb command from your shell will start the interpreter.\nUsage\u00b6 \u2191\nUse of irb is easy if you know Ruby.\nWhen executing irb, prompts are displayed as follows. Then, enter the Ruby\nexpression. An input is executed when it is syntactically complete.\n$ irb\nirb(main):001:0> 1+2\n#=> 3\nirb(main):002:0> class Foo\nirb(main):003:1>  def foo\nirb(main):004:2>    print 1\nirb(main):005:2>  end\nirb(main):006:1> end\n#=> nil\nThe Readline extension module can be used with\nirb. Use of Readline is default if it's\ninstalled.\nCommand line options\u00b6 \u2191\nUsage:  irb.rb [options] [programfile] [arguments]\n  -f                Suppress read of ~/.irbrc\n  -d                Set $DEBUG to true (same as `ruby -d')\n  -r load-module    Same as `ruby -r'\n  -I path           Specify $LOAD_PATH directory\n  -U                Same as `ruby -U`\n  -E enc            Same as `ruby -E`\n  -w                Same as `ruby -w`\n  -W[level=2]       Same as `ruby -W`\n  --inspect         Use `inspect' for output (default except for bc mode)\n  --noinspect       Don't use inspect for output\n  --readline        Use Readline extension module\n  --noreadline      Don't use Readline extension module\n  --prompt prompt-mode\n  --prompt-mode prompt-mode\n                    Switch prompt mode. Pre-defined prompt modes are\n                    `default', `simple', `xmp' and `inf-ruby'\n  --inf-ruby-mode   Use prompt appropriate for inf-ruby-mode on emacs.\n                    Suppresses --readline.\n  --simple-prompt   Simple prompt mode\n  --noprompt        No prompt mode\n  --tracer          Display trace for each execution of commands.\n  --back-trace-limit n\n                    Display backtrace top n and tail n. The default\n                    value is 16.\n  --irb_debug n     Set internal debug level to n (not for popular use)\n  -v, --version     Print the version of irb\nConfiguration\u00b6 \u2191\nIRB reads from ~/.irbrc when it's invoked.\nIf ~/.irbrc doesn't exist, irb will try to\nread in the following order:\n\n.irbrc\n\nirb.rc\n\n_irbrc\n\n$irbrc\n\nThe following are alternatives to the command line options. To use them\ntype as follows in an irb session:\nIRB.conf[:IRB_NAME]=\"irb\"\nIRB.conf[:INSPECT_MODE]=nil\nIRB.conf[:IRB_RC] = nil\nIRB.conf[:BACK_TRACE_LIMIT]=16\nIRB.conf[:USE_LOADER] = false\nIRB.conf[:USE_READLINE] = nil\nIRB.conf[:USE_TRACER] = false\nIRB.conf[:IGNORE_SIGINT] = true\nIRB.conf[:IGNORE_EOF] = false\nIRB.conf[:PROMPT_MODE] = :DEFAULT\nIRB.conf[:PROMPT] = {...}\nIRB.conf[:DEBUG_LEVEL]=0\nAuto indentation\u00b6 \u2191\nTo enable auto-indent mode in irb, add the following to your\n.irbrc:\nIRB.conf[:AUTO_INDENT] = true\n\nAutocompletion\u00b6 \u2191\nTo enable autocompletion for irb, add the following to your\n.irbrc:\nrequire 'irb/completion'\n\nHistory\u00b6 \u2191\nBy default, irb disables history and will not store any commands you used.\nIf you want to enable history, add the following to your\n.irbrc:\nIRB.conf[:SAVE_HISTORY] = 1000\n\nThis will now store the last 1000 commands in ~/.irb_history.\nSee IRB::Context#save_history=\nfor more information.\nCustomizing the IRB Prompt\u00b6 \u2191\nIn order to customize the prompt, you can change the following Hash:\nIRB.conf[:PROMPT]\n\nThis example can be used in your .irbrc\nIRB.conf[:PROMPT][:MY_PROMPT] = { # name of prompt mode\n  :AUTO_INDENT => true,           # enables auto-indent mode\n  :PROMPT_I =>  \">> \",            # simple prompt\n  :PROMPT_S => nil,               # prompt for continuated strings\n  :PROMPT_C => nil,               # prompt for continuated statement\n  :RETURN => \"    ==>%s\\n\"        # format to return value\n}\n\nIRB.conf[:PROMPT_MODE] = :MY_PROMPT\n\nOr, invoke irb with the above prompt mode by:\nirb --prompt my-prompt\nConstants PROMPT_I, PROMPT_S and\nPROMPT_C specify the format. In the prompt specification, some\nspecial strings are available:\n%N    # command name which is running\n%m    # to_s of main object (self)\n%M    # inspect of main object (self)\n%l    # type of string(\", ', /, ]), `]' is inner %w[...]\n%NNi  # indent level. NN is digits and means as same as printf(\"%NNd\").\n      # It can be omitted\n%NNn  # line number.\n%%    # %\nFor instance, the default prompt mode is defined as follows:\nIRB.conf[:PROMPT_MODE][:DEFAULT] = {\n  :PROMPT_I => \"%N(%m):%03n:%i> \",\n  :PROMPT_S => \"%N(%m):%03n:%i%l \",\n  :PROMPT_C => \"%N(%m):%03n:%i* \",\n  :RETURN => \"%s\\n\" # used to printf\n}\n\nirb comes with a number of available modes:\n# :NULL:\n#   :PROMPT_I:\n#   :PROMPT_N:\n#   :PROMPT_S:\n#   :PROMPT_C:\n#   :RETURN: |\n#     %s\n# :DEFAULT:\n#   :PROMPT_I: ! '%N(%m):%03n:%i> '\n#   :PROMPT_N: ! '%N(%m):%03n:%i> '\n#   :PROMPT_S: ! '%N(%m):%03n:%i%l '\n#   :PROMPT_C: ! '%N(%m):%03n:%i* '\n#   :RETURN: |\n#     => %s\n# :CLASSIC:\n#   :PROMPT_I: ! '%N(%m):%03n:%i> '\n#   :PROMPT_N: ! '%N(%m):%03n:%i> '\n#   :PROMPT_S: ! '%N(%m):%03n:%i%l '\n#   :PROMPT_C: ! '%N(%m):%03n:%i* '\n#   :RETURN: |\n#     %s\n# :SIMPLE:\n#   :PROMPT_I: ! '>> '\n#   :PROMPT_N: ! '>> '\n#   :PROMPT_S:\n#   :PROMPT_C: ! '?> '\n#   :RETURN: |\n#     => %s\n# :INF_RUBY:\n#   :PROMPT_I: ! '%N(%m):%03n:%i> '\n#   :PROMPT_N:\n#   :PROMPT_S:\n#   :PROMPT_C:\n#   :RETURN: |\n#     %s\n#   :AUTO_INDENT: true\n# :XMP:\n#   :PROMPT_I:\n#   :PROMPT_N:\n#   :PROMPT_S:\n#   :PROMPT_C:\n#   :RETURN: |2\n#         ==>%s\n\nRestrictions\u00b6 \u2191\nBecause irb evaluates input immediately after it is syntactically complete,\nthe results may be slightly different than directly using Ruby.\nIRB Sessions\u00b6 \u2191\nIRB has a special feature, that allows you to manage many sessions at once.\nYou can create new sessions with Irb.irb, and get a list of current\nsessions with the jobs command in the prompt.\nCommands\u00b6 \u2191\nJobManager provides commands to handle\nthe current sessions:\njobs    # List of current sessions\nfg      # Switches to the session of the given number\nkill    # Kills the session with the given number\n\nThe exit command, or ::irb_exit, will quit the current\nsession and call any exit hooks with ::irb_at_exit.\nA few commands for loading files within the session are also available:\nsource\n\nLoads a given file in the current session and displays the source lines,\nsee IRB::IrbLoader#source_file\nirb_load\n\nLoads the given file similarly to Kernel#load, see IRB::IrbLoader#irb_load\nirb_require\n\nLoads the given file similarly to Kernel#require\n\nConfiguration\u00b6 \u2191\nThe command line options, or ::conf,\nspecify the default behavior of Irb.irb.\nOn the other hand, each conf in IRB is used to individually configure ::irb.\nIf a proc is set for ::conf, its will\nbe invoked after execution of that proc with the context of the current\nsession as its argument. Each session can be configured using this\nmechanism.\nSession variables\u00b6 \u2191\nThere are a few variables in every Irb session\nthat can come in handy:\n_\n\nThe value command executed, as a local variable\n__\n\nThe history of evaluated commands\n__[line_no]\n\nReturns the evaluation value at the given line number,\nline_no. If line_no is a negative, the return\nvalue line_no many lines before the most recent return value.\n\nExample using IRB Sessions\u00b6 \u2191\n# invoke a new session\nirb(main):001:0> irb\n# list open sessions\nirb.1(main):001:0> jobs\n  #0->irb on main (#<Thread:0x400fb7e4> : stop)\n  #1->irb#1 on main (#<Thread:0x40125d64> : running)\n\n# change the active session\nirb.1(main):002:0> fg 0\n# define class Foo in top-level session\nirb(main):002:0> class Foo;end\n# invoke a new session with the context of Foo\nirb(main):003:0> irb Foo\n# define Foo#foo\nirb.2(Foo):001:0> def foo\nirb.2(Foo):002:1>   print 1\nirb.2(Foo):003:1> end\n\n# change the active session\nirb.2(Foo):004:0> fg 0\n# list open sessions\nirb(main):004:0> jobs\n  #0->irb on main (#<Thread:0x400fb7e4> : running)\n  #1->irb#1 on main (#<Thread:0x40125d64> : stop)\n  #2->irb#2 on Foo (#<Thread:0x4011d54c> : stop)\n# check if Foo#foo is available\nirb(main):005:0> Foo.instance_methods #=> [:foo, ...]\n\n# change the active sesssion\nirb(main):006:0> fg 2\n# define Foo#bar in the context of Foo\nirb.2(Foo):005:0> def bar\nirb.2(Foo):006:1>  print \"bar\"\nirb.2(Foo):007:1> end\nirb.2(Foo):010:0>  Foo.instance_methods #=> [:bar, :foo, ...]\n\n# change the active session\nirb.2(Foo):011:0> fg 0\nirb(main):007:0> f = Foo.new  #=> #<Foo:0x4010af3c>\n# invoke a new session with the context of f (instance of Foo)\nirb(main):008:0> irb f\n# list open sessions\nirb.3(<Foo:0x4010af3c>):001:0> jobs\n  #0->irb on main (#<Thread:0x400fb7e4> : stop)\n  #1->irb#1 on main (#<Thread:0x40125d64> : stop)\n  #2->irb#2 on Foo (#<Thread:0x4011d54c> : stop)\n  #3->irb#3 on #<Foo:0x4010af3c> (#<Thread:0x4010a1e0> : running)\n# evaluate f.foo\nirb.3(<Foo:0x4010af3c>):002:0> foo #=> 1 => nil\n# evaluate f.bar\nirb.3(<Foo:0x4010af3c>):003:0> bar #=> bar => nil\n# kill jobs 1, 2, and 3\nirb.3(<Foo:0x4010af3c>):004:0> kill 1, 2, 3\n# list open sessions, should only include main session\nirb(main):009:0> jobs\n  #0->irb on main (#<Thread:0x400fb7e4> : running)\n# quit irb\nirb(main):010:0> exit\nDO NOT WRITE ANY MAGIC COMMENT HERE.\n"}, {"c": "Jacobian", "d": "\nrequire 'bigdecimal/jacobian'\nProvides methods to compute the Jacobian matrix\nof a set of equations at a point x. In the methods below:\nf is an Object which is used to compute the Jacobian matrix of the equations. It must provide\nthe following methods:\nf.values(x)\n\nreturns the values of all functions at x\nf.zero\n\nreturns 0.0\nf.one\n\nreturns 1.0\nf.two\n\nreturns 2.0\nf.ten\n\nreturns 10.0\nf.eps\n\nreturns the convergence criterion (epsilon value) used to determine whether\ntwo values are considered equal. If |a-b| < epsilon, the two values are\nconsidered equal.\n\nx is the point at which to compute the Jacobian.\nfx is f.values(x).\n"}, {"c": "JSON", "d": "\nJavaScript Object Notation (JSON)\u00b6 \u2191\nJSON is a lightweight data-interchange format. It\nis easy for us humans to read and write. Plus, equally simple for machines\nto generate or parse. JSON is completely language\nagnostic, making it the ideal interchange format.\nBuilt on two universally available structures:\n1. A collection of name/value pairs. Often referred to as an _object_, hash table, record, struct, keyed list, or associative array.\n2. An ordered list of values. More commonly called an _array_, vector, sequence or list.\nTo read more about JSON visit: json.org\nParsing JSON\u00b6 \u2191\nTo parse a JSON string received by another\napplication or generated within your existing application:\nrequire 'json'\n\nmy_hash = JSON.parse('{\"hello\": \"goodbye\"}')\nputs my_hash[\"hello\"] => \"goodbye\"\n\nNotice the extra quotes '' around the hash notation.\nRuby expects the argument to be a string and can't convert objects like\na hash or array.\nRuby converts your string into a hash\nGenerating JSON\u00b6 \u2191\nCreating a JSON string for communication or\nserialization is just as simple.\nrequire 'json'\n\nmy_hash = {:hello => \"goodbye\"}\nputs JSON.generate(my_hash) => \"{\\\"hello\\\":\\\"goodbye\\\"}\"\n\nOr an alternative way:\nrequire 'json'\nputs {:hello => \"goodbye\"}.to_json => \"{\\\"hello\\\":\\\"goodbye\\\"}\"\nJSON.generate only allows objects or arrays to be converted to\nJSON syntax. to_json, however, accepts\nmany Ruby classes even though it acts only as a method for serialization:\nrequire 'json'\n\n1.to_json => \"1\"\n"}, {"c": "Kconv", "d": "\nKanji Converter for Ruby.\n"}, {"c": "Kernel", "d": "\nRubyGems adds the gem method to\nallow activation of specific gem versions and overrides the require method on Kernel to make\ngems appear as if they live on the $LOAD_PATH.  See the\ndocumentation of these methods for further detail.\nThe Kernel module is included by class Object, so\nits methods are available in every Ruby object.\nThe Kernel instance methods are documented in class Object while the module methods are documented here.\nThese methods are called without a receiver and thus can be called in\nfunctional form:\nsprintf \"%.1f\", 1.234 #=> \"1.2\"\n\n"}, {"c": "KeyError", "d": "\nRaised when the specified key is not found. It is a subclass of IndexError.\nh = {\"foo\" => :bar}\nh.fetch(\"foo\") #=> :bar\nh.fetch(\"baz\") #=> KeyError: key not found: \"baz\"\n\n"}, {"c": null, "d": ""}, {"c": "LoadError", "d": "\nRaised when a file required (a Ruby script, extension library, \u00e2\u20ac\u00a6) fails to\nload.\nrequire 'this/file/does/not/exist'\n\nraises the exception:\nLoadError: no such file to load -- this/file/does/not/exist\n"}, {"c": "LocalJumpError", "d": "\nRaised when Ruby can't yield as requested.\nA typical scenario is attempting to yield when no block is given:\ndef call_block\n  yield 42\nend\ncall_block\n\nraises the exception:\nLocalJumpError: no block given (yield)\nA more subtle example:\ndef get_me_a_return\n  Proc.new { return 42 }\nend\nget_me_a_return.call\n\nraises the exception:\nLocalJumpError: unexpected return\n"}, {"c": "Logger", "d": "\nDescription\u00b6 \u2191\nThe Logger class provides a simple but\nsophisticated logging utility that you can use to output messages.\nThe messages have associated levels, such as INFO or\nERROR that indicate their importance.  You can then give the\nLogger a level, and only messages at that level\nor higher will be printed.\nThe levels are:\nUNKNOWN\n\nAn unknown message that should always be logged.\nFATAL\n\nAn unhandleable error that results in a program crash.\nERROR\n\nA handleable error condition.\nWARN\n\nA warning.\nINFO\n\nGeneric (useful) information about system operation.\nDEBUG\n\nLow-level information for developers.\n\nFor instance, in a production system, you may have your Logger set to INFO or even\nWARN. When you are developing the system, however, you\nprobably want to know about the program's internal state, and would set\nthe Logger to DEBUG.\nNote: Logger does not escape or\nsanitize any messages passed to it. Developers should be aware of when\npotentially malicious data (user-input) is passed to Logger, and manually escape the untrusted data:\nlogger.info(\"User-input: #{input.dump}\")\nlogger.info(\"User-input: %p\" % input)\n\nYou can use formatter= for\nescaping all data.\noriginal_formatter = Logger::Formatter.new\nlogger.formatter = proc { |severity, datetime, progname, msg|\n  original_formatter.call(severity, datetime, progname, msg.dump)\n}\nlogger.info(input)\n\nExample\u00b6 \u2191\nThis creates a Logger that outputs to the\nstandard output stream, with a level of WARN:\nrequire 'logger'\n\nlogger = Logger.new(STDOUT)\nlogger.level = Logger::WARN\n\nlogger.debug(\"Created logger\")\nlogger.info(\"Program started\")\nlogger.warn(\"Nothing to do!\")\n\npath = \"a_non_existent_file\"\n\nbegin\n  File.foreach(path) do |line|\n    unless line =~ /^(\\w+) = (.*)$/\n      logger.error(\"Line in wrong format: #{line.chomp}\")\n    end\n  end\nrescue => err\n  logger.fatal(\"Caught exception; exiting\")\n  logger.fatal(err)\nend\n\nBecause the Logger's level is set to WARN, only the\nwarning, error, and fatal messages are recorded.  The debug and info\nmessages are silently discarded.\nFeatures\u00b6 \u2191\nThere are several interesting features that Logger provides, like auto-rolling of log files,\nsetting the format of log messages, and specifying a program name in\nconjunction with the message.  The next section shows you how to achieve\nthese things.\nHOWTOs\u00b6 \u2191\nHow to create a logger\u00b6 \u2191\nThe options below give you various choices, in more or less increasing\ncomplexity.\n\nCreate a logger which logs messages to STDERR/STDOUT.\nlogger = Logger.new(STDERR)\nlogger = Logger.new(STDOUT)\n\n\nCreate a logger for the file which has the specified name.\nlogger = Logger.new('logfile.log')\n\n\nCreate a logger for the specified file.\nfile = File.open('foo.log', File::WRONLY | File::APPEND)\n# To create new (and to remove old) logfile, add File::CREAT like:\n# file = File.open('foo.log', File::WRONLY | File::APPEND | File::CREAT)\nlogger = Logger.new(file)\n\n\nCreate a logger which ages the logfile once it reaches a certain size.\nLeave 10 \u00e2\u20ac\u0153old\u00e2\u20ac log files where each file is about 1,024,000 bytes.\nlogger = Logger.new('foo.log', 10, 1024000)\n\n\nCreate a logger which ages the logfile daily/weekly/monthly.\nlogger = Logger.new('foo.log', 'daily')\nlogger = Logger.new('foo.log', 'weekly')\nlogger = Logger.new('foo.log', 'monthly')\n\n\nHow to log a message\u00b6 \u2191\nNotice the different methods (fatal, error,\ninfo) being used to log messages of various levels?  Other\nmethods in this family are warn and debug. \nadd is used below to log a message of an arbitrary (perhaps\ndynamic) level.\n\nMessage in a block.\nlogger.fatal { \"Argument 'foo' not given.\" }\n\n\nMessage as a string.\nlogger.error \"Argument #{@foo} mismatch.\"\n\n\nWith progname.\nlogger.info('initialize') { \"Initializing...\" }\n\n\nWith severity.\nlogger.add(Logger::FATAL) { 'Fatal error!' }\n\n\nThe block form allows you to create potentially complex log messages, but\nto delay their evaluation until and unless the message is logged.  For\nexample, if we have the following:\nlogger.debug { \"This is a \" + potentially + \" expensive operation\" }\n\nIf the logger's level is INFO or higher, no debug messages\nwill be logged, and the entire block will not even be evaluated.  Compare\nto this:\nlogger.debug(\"This is a \" + potentially + \" expensive operation\")\n\nHere, the string concatenation is done every time, even if the log level is\nnot set to show the debug message.\nHow to close a logger\u00b6 \u2191\nlogger.close\n\nSetting severity threshold\u00b6 \u2191\n\nOriginal interface.\nlogger.sev_threshold = Logger::WARN\n\n\nLog4r (somewhat) compatible interface.\nlogger.level = Logger::INFO\n\n# DEBUG < INFO < WARN < ERROR < FATAL < UNKNOWN\n\n\nSymbol or String (case insensitive)\nlogger.level = :info\nlogger.level = 'INFO'\n\n# :debug < :info < :warn < :error < :fatal < :unknown\n\n\nConstructor\nLogger.new(logdev, level: Logger::INFO)\nLogger.new(logdev, level: :info)\nLogger.new(logdev, level: 'INFO')\n\n\nFormat\u00b6 \u2191\nLog messages are rendered in the output stream in a certain format by\ndefault.  The default format and a sample are shown below:\nLog format:\nSeverityID, [DateTime #pid] SeverityLabel -- ProgName: message\nLog sample:\nI, [1999-03-03T02:34:24.895701 #19074]  INFO -- Main: info.\nYou may change the date and time format via datetime_format=.\nlogger.datetime_format = '%Y-%m-%d %H:%M:%S'\n      # e.g. \"2004-01-03 00:54:26\"\n\nor via the constructor.\nLogger.new(logdev, datetime_format: '%Y-%m-%d %H:%M:%S')\n\nOr, you may change the overall format via the formatter= method.\nlogger.formatter = proc do |severity, datetime, progname, msg|\n  \"#{datetime}: #{msg}\\n\"\nend\n# e.g. \"2005-09-22 08:51:08 +0900: hello world\"\n\nor via the constructor.\nLogger.new(logdev, formatter: proc {|severity, datetime, progname, msg|\n  \"#{datetime}: #{msg}\\n\"\n})\n\n"}, {"c": "LUSolve", "d": "\nSolves a*x = b for x, using LU decomposition.\n"}, {"c": null, "d": ""}, {"c": "MakeMakefile", "d": "\nmkmf.rb is used by Ruby C extensions to generate a Makefile which will\ncorrectly compile and link the C extension to Ruby and a third-party\nlibrary.\n"}, {"c": "Marshal", "d": "\nThe marshaling library converts collections of Ruby objects into a byte\nstream, allowing them to be stored outside the currently active script.\nThis data may subsequently be read and the original objects reconstituted.\nMarshaled data has major and minor version numbers stored along with the\nobject information. In normal use, marshaling can only load data written\nwith the same major version number and an equal or lower minor version\nnumber. If Ruby's \u00e2\u20ac\u0153verbose'' flag is set (normally using -d,\n-v, -w, or \u00e2\u20ac\u201cverbose) the major and minor numbers must match exactly. Marshal versioning is independent of Ruby's\nversion numbers. You can extract the version by reading the first two bytes\nof marshaled data.\nstr = Marshal.dump(\"thing\")\nRUBY_VERSION   #=> \"1.9.0\"\nstr[0].ord     #=> 4\nstr[1].ord     #=> 8\n\nSome objects cannot be dumped: if the objects to be dumped include\nbindings, procedure or method objects, instances of class IO, or singleton objects, a TypeError will be raised.\nIf your class has special serialization needs (for example, if you want to\nserialize in some specific format), or if it contains objects that would\notherwise not be serializable, you can implement your own serialization\nstrategy.\nThere are two methods of doing this, your object can define either\nmarshal_dump and marshal_load or _dump and _load.  marshal_dump will take\nprecedence over _dump if both are defined.  marshal_dump may result in\nsmaller Marshal strings.\nSecurity considerations\u00b6 \u2191\nBy design, ::load can deserialize\nalmost any class loaded into the Ruby process. In many cases this can lead\nto remote code execution if the Marshal data is\nloaded from an untrusted source.\nAs a result, ::load is not\nsuitable as a general purpose serialization format and you should never\nunmarshal user supplied input or other untrusted data.\nIf you need to deserialize untrusted data, use JSON\nor another serialization format that is only able to load simple,\n'primitive' types such as String, Array, Hash, etc. Never allow user input to specify arbitrary\ntypes to deserialize into.\nmarshal_dump and marshal_load\u00b6 \u2191\nWhen dumping an object the method marshal_dump will be called. marshal_dump\nmust return a result containing the information necessary for marshal_load\nto reconstitute the object.  The result can be any object.\nWhen loading an object dumped using marshal_dump the object is first\nallocated then marshal_load is called with the result from marshal_dump.\nmarshal_load must recreate the object from the information in the result.\nExample:\nclass MyObj\n  def initialize name, version, data\n    @name    = name\n    @version = version\n    @data    = data\n  end\n\n  def marshal_dump\n    [@name, @version]\n  end\n\n  def marshal_load array\n    @name, @version = array\n  end\nend\n\n_dump and _load\u00b6 \u2191\nUse _dump and _load when you need to allocate the object you're\nrestoring yourself.\nWhen dumping an object the instance method _dump is called with an Integer which indicates the maximum depth of\nobjects to dump (a value of -1 implies that you should disable depth\nchecking).  _dump must return a String containing the information necessary\nto reconstitute the object.\nThe class method _load should take a String and use it to return an object\nof the same class.\nExample:\nclass MyObj\n  def initialize name, version, data\n    @name    = name\n    @version = version\n    @data    = data\n  end\n\n  def _dump level\n    [@name, @version].join ':'\n  end\n\n  def self._load args\n    new(*args.split(':'))\n  end\nend\n\nSince ::dump outputs a string you\ncan have _dump return a Marshal string which is\nMarshal.loaded in _load for complex objects.\n"}, {"c": null, "d": ""}, {"c": "MatchData", "d": "\nMatchData is the type of the special variable $~,\nand is the type of the object returned by Regexp#match and\nRegexp.last_match. It encapsulates all the results of a\npattern match, results normally accessed through the special variables\n$&, $', $`, $1,\n$2, and so on.\n"}, {"c": "Math", "d": "\nThe Math module contains module functions for basic\ntrigonometric and transcendental functions. See class Float for a list of constants that define Ruby's\nfloating point accuracy.\nDomains and codomains are given only for real (not complex) numbers.\n"}, {"c": "Matrix", "d": "\nThe Matrix class represents a mathematical matrix. It provides\nmethods for creating matrices, operating on them arithmetically and\nalgebraically, and determining their mathematical properties such as trace,\nrank, inverse, determinant, or eigensystem.\n"}, {"c": "Method", "d": "\nMethod objects are created by\nObject#method, and are associated with a particular object\n(not just with a class). They may be used to invoke the method within the\nobject, and as a block associated with an iterator. They may also be\nunbound from one object (creating an UnboundMethod) and bound\nto another.\nclass Thing\n  def square(n)\n    n*n\n  end\nend\nthing = Thing.new\nmeth  = thing.method(:square)\n\nmeth.call(9)                 #=> 81\n[ 1, 2, 3 ].collect(&meth)   #=> [1, 4, 9]\n\n"}, {"c": "Module", "d": "\nA Module is a collection of methods and constants. The methods\nin a module may be instance methods or module methods. Instance methods\nappear as methods in a class when the module is included, module methods do\nnot. Conversely, module methods may be called without creating an\nencapsulating object, while instance methods may not. (See\nModule#module_function.)\nIn the descriptions that follow, the parameter sym refers to a\nsymbol, which is either a quoted string or a Symbol (such as\n:name).\nmodule Mod\n  include Math\n  CONST = 1\n  def meth\n    #  ...\n  end\nend\nMod.class              #=> Module\nMod.constants          #=> [:CONST, :PI, :E]\nMod.instance_methods   #=> [:meth]\n\n"}, {"c": "Monitor", "d": "\nUse the Monitor class when you want to have a\nlock object for blocks with mutual exclusion.\nrequire 'monitor'\n\nlock = Monitor.new\nlock.synchronize do\n  # exclusive access\nend\n\n"}, {"c": "MonitorMixin", "d": "\nIn concurrent programming, a monitor is an object or module intended to be\nused safely by more than one thread.  The defining characteristic of a\nmonitor is that its methods are executed with mutual exclusion.  That is,\nat each point in time, at most one thread may be executing any of its\nmethods. This mutual exclusion greatly simplifies reasoning about the\nimplementation of monitors compared to reasoning about parallel code that\nupdates a data structure.\nYou can read more about the general principles on the Wikipedia page for Monitors\nExamples\u00b6 \u2191\nSimple object.extend\u00b6 \u2191\nrequire 'monitor.rb'\n\nbuf = []\nbuf.extend(MonitorMixin)\nempty_cond = buf.new_cond\n\n# consumer\nThread.start do\n  loop do\n    buf.synchronize do\n      empty_cond.wait_while { buf.empty? }\n      print buf.shift\n    end\n  end\nend\n\n# producer\nwhile line = ARGF.gets\n  buf.synchronize do\n    buf.push(line)\n    empty_cond.signal\n  end\nend\n\nThe consumer thread waits for the producer thread to push a line to buf\nwhile buf.empty?.  The producer thread (main thread) reads a\nline from ARGF and pushes it into buf then calls\nempty_cond.signal to notify the consumer thread of new data.\nSimple Class include\u00b6 \u2191\nrequire 'monitor'\n\nclass SynchronizedArray < Array\n\n  include MonitorMixin\n\n  def initialize(*args)\n    super(*args)\n  end\n\n  alias :old_shift :shift\n  alias :old_unshift :unshift\n\n  def shift(n=1)\n    self.synchronize do\n      self.old_shift(n)\n    end\n  end\n\n  def unshift(item)\n    self.synchronize do\n      self.old_unshift(item)\n    end\n  end\n\n  # other methods ...\nend\n\nSynchronizedArray implements an Array with synchronized access\nto items. This Class is implemented as subclass of\nArray which includes the MonitorMixin\nmodule.\n"}, {"c": "Mutex", "d": "\nMutex implements a simple semaphore that can be\nused to coordinate access to shared data from multiple concurrent threads.\nExample:\nsemaphore = Mutex.new\n\na = Thread.new {\n  semaphore.synchronize {\n    # access shared resource\n  }\n}\n\nb = Thread.new {\n  semaphore.synchronize {\n    # access shared resource\n  }\n}\n\n"}, {"c": "Mutex_m", "d": "\nmutex_m.rb\u00b6 \u2191\nWhen 'mutex_m' is required, any object that extends or includes Mutex_m will be treated like a Mutex.\nStart by requiring the standard library Mutex_m:\nrequire \"mutex_m.rb\"\n\nFrom here you can extend an object with Mutex\ninstance methods:\nobj = Object.new\nobj.extend Mutex_m\n\nOr mixin Mutex_m into your module to your class\ninherit Mutex instance methods.\nclass Foo\n  include Mutex_m\n  # ...\nend\nobj = Foo.new\n# this obj can be handled like Mutex\n\n"}, {"c": "NameError", "d": "\nRaised when a given name is invalid or undefined.\nputs foo\n\nraises the exception:\nNameError: undefined local variable or method `foo' for main:Object\nSince constant names must start with a capital:\nInteger.const_set :answer, 42\n\nraises the exception:\nNameError: wrong constant name answer\n"}, {"c": "Net", "d": "\n"}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": "Newton", "d": "\nnewton.rb\nSolves the nonlinear algebraic equation system f = 0 by Newton's\nmethod. This program is not dependent on BigDecimal.\nTo call:\n  n = nlsolve(f,x)\nwhere n is the number of iterations required,\n      x is the initial value vector\n      f is an Object which is used to compute the values of the equations to be solved.\nIt must provide the following methods:\nf.values(x)\n\nreturns the values of all functions at x\nf.zero\n\nreturns 0.0\nf.one\n\nreturns 1.0\nf.two\n\nreturns 2.0\nf.ten\n\nreturns 10.0\nf.eps\n\nreturns the convergence criterion (epsilon value) used to determine whether\ntwo values are considered equal. If |a-b| < epsilon, the two values are\nconsidered equal.\n\nOn exit, x is the solution vector.\n"}, {"c": "NilClass", "d": "\nThe class of the singleton object nil.\n"}, {"c": "NKF", "d": "\nNKF - Ruby extension for Network Kanji Filter\nDescription\u00b6 \u2191\nThis is a Ruby Extension version of nkf (Network Kanji Filter). It converts\nthe first argument and returns converted result. Conversion details are\nspecified by flags as the first argument.\nNkf is a yet another kanji code converter among networks,\nhosts and terminals. It converts input kanji code to designated kanji code\nsuch as ISO-2022-JP, Shift_JIS, EUC-JP, UTF-8 or UTF-16.\nOne of the most unique faculty of nkf is the guess of the\ninput kanji encodings. It currently recognizes ISO-2022-JP, Shift_JIS,\nEUC-JP, UTF-8 and UTF-16. So users needn't set the input kanji code\nexplicitly.\nBy default, X0201 kana is converted into X0208 kana. For X0201 kana, SO/SI,\nSSO and ESC-(-I methods are supported. For automatic code detection, nkf\nassumes no X0201 kana in Shift_JIS. To accept X0201 in Shift_JIS, use\n-X, -x or -S.\nFlags\u00b6 \u2191\n-b -u\u00b6 \u2191\nOutput is buffered (DEFAULT), Output is unbuffered.\n-j -s -e -w -w16 -w32\u00b6 \u2191\nOutput code is ISO-2022-JP (7bit JIS),\nShift_JIS, EUC-JP, UTF-8N, UTF-16BE, UTF-32BE. Without this option and\ncompile option, ISO-2022-JP is assumed.\n-J -S -E -W -W16 -W32\u00b6 \u2191\nInput assumption is JIS 7 bit, Shift_JIS,\nEUC-JP, UTF-8, UTF-16, UTF-32.\n-J\u00b6 \u2191\nAssume  JIS input. It also accepts EUC-JP. This\nis the default. This flag does not exclude Shift_JIS.\n-S\u00b6 \u2191\nAssume Shift_JIS and X0201 kana input. It also accepts JIS. EUC-JP is recognized as X0201 kana. Without\n-x flag, X0201 kana (halfwidth kana) is converted into\nX0208.\n-E\u00b6 \u2191\nAssume EUC-JP input. It also accepts JIS. Same\nas -J.\n-t\u00b6 \u2191\nNo conversion.\n-i_\u00b6 \u2191\nOutput sequence to designate JIS-kanji. (DEFAULT B)\n-o_\u00b6 \u2191\nOutput sequence to designate ASCII. (DEFAULT\nB)\n-r\u00b6 \u2191\n{de/en}crypt ROT13/47\n-h \u00e2\u20ac\u201chiragana \u00e2\u20ac\u201ckatakana \u00e2\u20ac\u201ckatakana-hiragana\u00b6 \u2191\n-h1 \u00e2\u20ac\u201chiragana\n\nKatakana to Hiragana conversion.\n-h2 \u00e2\u20ac\u201ckatakana\n\nHiragana to Katakana conversion.\n-h3 \u00e2\u20ac\u201ckatakana-hiragana\n\nKatakana to Hiragana and Hiragana to Katakana conversion.\n\n-T\u00b6 \u2191\nText mode output (MS-DOS)\n-l\u00b6 \u2191\nISO8859-1 (Latin-1) support\n-f[m [- n]]\u00b6 \u2191\nFolding on m length with n margin in a line.\nWithout this option, fold length is 60 and fold margin is 10.\n-F\u00b6 \u2191\nNew line preserving line folding.\n-Z\u00b6 \u2191\nConvert X0208 alphabet (Fullwidth Alphabets) to ASCII.\n-Z -Z0\n\nConvert X0208 alphabet to ASCII.\n-Z1\n\nConverts X0208 kankaku to single ASCII space.\n-Z2\n\nConverts X0208 kankaku to double ASCII spaces.\n-Z3\n\nReplacing Fullwidth >, <, \u00e2\u20ac\u0153, & into '&gt;',\n'&lt;', '&quot;', '&amp;' as in HTML.\n\n-X -x\u00b6 \u2191\nAssume X0201 kana in MS-Kanji. With -X or without this\noption, X0201 is converted into X0208 Kana. With -x, try\nto preserve X0208 kana and do not convert X0201 kana to X0208. In JIS output, ESC-(-I is used. In EUC output, SSO is used.\n-B\u00b6 \u2191\nAssume broken JIS-Kanji input, which lost ESC. Useful when your site is\nusing old B-News Nihongo patch.\n-B1\n\nallows any char after ESC-( or ESC-$.\n-B2\n\nforces ASCII after NL.\n\n-I\u00b6 \u2191\nReplacing non iso-2022-jp char into a geta character (substitute character\nin Japanese).\n-d -c\u00b6 \u2191\nDelete r in line feed, Add r in line feed.\n-m\u00b6 \u2191\nMIME ISO-2022-JP/ISO8859-1 decode. (DEFAULT) To see ISO8859-1 (Latin-1) -l\nis necessary.\n-mB\n\nDecode MIME base64 encoded stream. Remove header or other part before\n\nconversion.\n-mQ\n\nDecode MIME quoted stream. '_' in quoted stream is converted to\nspace.\n-mN\n\nNon-strict decoding.\n\nIt allows line break in the middle of the base64 encoding.\n-m0\n\nNo MIME decode.\n\n-M\u00b6 \u2191\nMIME encode. Header style. All ASCII code and\ncontrol characters are intact. Kanji conversion is performed before\nencoding, so this cannot be used as a picture encoder.\n-MB\n\nMIME encode Base64 stream.\n-MQ\n\nPerfome quoted encoding.\n\n-l\u00b6 \u2191\nInput and output code is ISO8859-1 (Latin-1) and ISO-2022-JP.\n-s, -e and -x are not\ncompatible with this option.\n-L\u00b6 \u2191\nnew line mode Without this option, nkf doesn't convert line breaks.\n-Lu\n\nunix (LF)\n-Lw\n\nwindows (CRLF)\n-Lm\n\nmac (CR)\n\n\u00e2\u20ac\u201cfj \u00e2\u20ac\u201cunix \u00e2\u20ac\u201cmac \u00e2\u20ac\u201cmsdos \u00e2\u20ac\u201cwindows\u00b6 \u2191\nconvert for these system\n\u00e2\u20ac\u201cjis \u00e2\u20ac\u201ceuc \u00e2\u20ac\u201csjis \u00e2\u20ac\u201cmime \u00e2\u20ac\u201cbase64\u00b6 \u2191\nconvert for named code\n\u00e2\u20ac\u201cjis-input \u00e2\u20ac\u201ceuc-input \u00e2\u20ac\u201csjis-input \u00e2\u20ac\u201cmime-input \u00e2\u20ac\u201cbase64-input\u00b6 \u2191\nassume input system\n\u00e2\u20ac\u201cic=input codeset \u00e2\u20ac\u201coc=output codeset\u00b6 \u2191\nSet the input or output codeset. NKF supports following codesets and those codeset name\nare case insensitive.\nISO-2022-JP\n\na.k.a. RFC1468, 7bit JIS, JUNET\nEUC-JP (eucJP-nkf)\n\na.k.a. AT&T JIS, Japanese EUC, UJIS\neucJP-ascii\n\na.k.a. x-eucjp-open-19970715-ascii\neucJP-ms\n\na.k.a. x-eucjp-open-19970715-ms\nCP51932\n\nMicrosoft Version of EUC-JP.\nShift_JIS\n\nSJIS, MS-Kanji\nWindows-31J\n\na.k.a. CP932\nUTF-8\n\nsame as UTF-8N\nUTF-8N\n\nUTF-8 without BOM\nUTF-8-BOM\n\nUTF-8 with BOM\nUTF-16\n\nsame as UTF-16BE\nUTF-16BE\n\nUTF-16 Big Endian without BOM\nUTF-16BE-BOM\n\nUTF-16 Big Endian with BOM\nUTF-16LE\n\nUTF-16 Little Endian without BOM\nUTF-16LE-BOM\n\nUTF-16 Little Endian with BOM\nUTF-32\n\nsame as UTF-32BE\nUTF-32BE\n\nUTF-32 Big Endian without BOM\nUTF-32BE-BOM\n\nUTF-32 Big Endian with BOM\nUTF-32LE\n\nUTF-32 Little Endian without BOM\nUTF-32LE-BOM\n\nUTF-32 Little Endian with BOM\nUTF8-MAC\n\nNKDed UTF-8, a.k.a. UTF8-NFD (input only)\n\n\u00e2\u20ac\u201cfb-{skip, html, xml, perl, java, subchar}\u00b6 \u2191\nSpecify the way that nkf handles unassigned characters. Without this\noption, \u00e2\u20ac\u201cfb-skip is assumed.\n\u00e2\u20ac\u201cprefix= escape character target character ..\u00b6 \u2191\nWhen nkf converts to Shift_JIS, nkf adds a specified escape character to\nspecified 2nd byte of Shift_JIS characters. 1st byte of argument is the\nescape character and following bytes are target characters.\n\u00e2\u20ac\u201cno-cp932ext\u00b6 \u2191\nHandle the characters extended in CP932 as unassigned characters.\n\u00e2\u20ac\u201cno-best-fit-chars\u00b6 \u2191\nWhen Unicode to Encoded byte conversion, don't convert characters which\nis not round trip safe. When Unicode to Unicode conversion, with this and\n-x option, nkf can be used as UTF converter. (In other words, without this\nand -x option, nkf doesn't save some characters)\nWhen nkf convert string which related to path, you should use this opion.\n\u00e2\u20ac\u201ccap-input\u00b6 \u2191\nDecode hex encoded characters.\n\u00e2\u20ac\u201curl-input\u00b6 \u2191\nUnescape percent escaped characters.\n\u00e2\u20ac\u201c\u00b6 \u2191\nIgnore rest of -option.\n"}, {"c": "NoMemoryError", "d": "\nRaised when memory allocation fails.\n"}, {"c": "NoMethodError", "d": "\nRaised when a method is called on a receiver which doesn't have it\ndefined and also fails to respond with method_missing.\n\"hello\".to_ary\n\nraises the exception:\nNoMethodError: undefined method `to_ary' for \"hello\":String\n"}, {"c": "NotImplementedError", "d": "\nRaised when a feature is not implemented on the current platform. For\nexample, methods depending on the fsync or fork\nsystem calls may raise this exception if the underlying operating system or\nRuby runtime does not support them.\nNote that if fork raises a NotImplementedError,\nthen respond_to?(:fork) returns false.\n"}, {"c": "Numeric", "d": "\nNumeric is the class from which all higher-level\nnumeric classes should inherit.\nNumeric allows instantiation of heap-allocated\nobjects. Other core numeric classes such as Integer are implemented as immediates, which means\nthat each Integer is a single immutable object\nwhich is always passed by value.\na = 1\n1.object_id == a.object_id   #=> true\n\nThere can only ever be one instance of the integer 1, for\nexample. Ruby ensures this by preventing instantiation and duplication.\nInteger.new(1)   #=> NoMethodError: undefined method `new' for Integer:Class\n1.dup            #=> TypeError: can't dup Integer\n\nFor this reason, Numeric should be used when\ndefining other numeric classes.\nClasses which inherit from Numeric must\nimplement coerce, which returns a two-member Array containing\nan object that has been coerced into an instance of the new class and\nself (see coerce).\nInheriting classes should also implement arithmetic operator methods\n(+, -, * and /) and the\n<=> operator (see Comparable). These methods may rely on\ncoerce to ensure interoperability with instances of other\nnumeric classes.\nclass Tally < Numeric\n  def initialize(string)\n    @string = string\n  end\n\n  def to_s\n    @string\n  end\n\n  def to_i\n    @string.size\n  end\n\n  def coerce(other)\n    [self.class.new('|' * other.to_i), self]\n  end\n\n  def <=>(other)\n    to_i <=> other.to_i\n  end\n\n  def +(other)\n    self.class.new('|' * (to_i + other.to_i))\n  end\n\n  def -(other)\n    self.class.new('|' * (to_i - other.to_i))\n  end\n\n  def *(other)\n    self.class.new('|' * (to_i * other.to_i))\n  end\n\n  def /(other)\n    self.class.new('|' * (to_i / other.to_i))\n  end\nend\n\ntally = Tally.new('||')\nputs tally * 2            #=> \"||||\"\nputs tally > 1            #=> true\n\n"}, {"c": "Object", "d": "\nObject is the default root of all Ruby objects. \nObject inherits from BasicObject which allows creating alternate\nobject hierarchies.  Methods on Object are\navailable to all classes unless explicitly overridden.\nObject mixes in the Kernel module, making the\nbuilt-in kernel functions globally accessible.  Although the instance\nmethods of Object are defined by the Kernel\nmodule, we have chosen to document them here for clarity.\nWhen referencing constants in classes inheriting from Object you do not need to use the full namespace. \nFor example, referencing File inside YourClass\nwill find the top-level File class.\nIn the descriptions of Object's methods, the parameter symbol\nrefers to a symbol, which is either a quoted string or a Symbol (such as :name).\n"}, {"c": "ObjectSpace", "d": "\nThe objspace library extends the ObjectSpace\nmodule and adds several methods to get internal statistic information about\nobject/memory management.\nYou need to require 'objspace' to use this extension\nmodule.\nGenerally, you *SHOULD NOT* use this library if you do not know about the\nMRI implementation.  Mainly, this library is for (memory) profiler\ndevelopers and MRI developers who need to know about MRI memory usage.\nThe ObjectSpace module contains a number of\nroutines that interact with the garbage collection facility and allow you\nto traverse all living objects with an iterator.\nObjectSpace also provides support for object\nfinalizers, procs that will be called when a specific object is about to be\ndestroyed by garbage collection.\nrequire 'objspace'\n\na = \"A\"\nb = \"B\"\n\nObjectSpace.define_finalizer(a, proc {|id| puts \"Finalizer one on #{id}\" })\nObjectSpace.define_finalizer(b, proc {|id| puts \"Finalizer two on #{id}\" })\n\nproduces:\nFinalizer two on 537763470\nFinalizer one on 537763480\n\n"}, {"c": "Observable", "d": "\nThe Observer pattern (also known as publish/subscribe) provides a simple\nmechanism for one object to inform a set of interested third-party objects\nwhen its state changes.\nMechanism\u00b6 \u2191\nThe notifying class mixes in the Observable module, which\nprovides the methods for managing the associated observer objects.\nThe observable object must:\n\nassert that it has #changed\n\ncall #notify_observers\n\nAn observer subscribes to updates using #add_observer, which also\nspecifies the method called via notify_observers. The\ndefault method for notify_observers is\nupdate.\nExample\u00b6 \u2191\nThe following example demonstrates this nicely.  A Ticker,\nwhen run, continually receives the stock Price for its\n@symbol.  A Warner is a general observer of the\nprice, and two warners are demonstrated, a WarnLow and a\nWarnHigh, which print a warning if the price is below or above\ntheir set limits, respectively.\nThe update callback allows the warners to run without being\nexplicitly called.  The system is set up with the Ticker and\nseveral observers, and the observers do their duty without the top-level\ncode having to interfere.\nNote that the contract between publisher and subscriber (observable and\nobserver) is not declared or enforced.  The Ticker publishes a\ntime and a price, and the warners receive that.  But if you don't\nensure that your contracts are correct, nothing else can warn you.\nrequire \"observer\"\n\nclass Ticker          ### Periodically fetch a stock price.\n  include Observable\n\n  def initialize(symbol)\n    @symbol = symbol\n  end\n\n  def run\n    last_price = nil\n    loop do\n      price = Price.fetch(@symbol)\n      print \"Current price: #{price}\\n\"\n      if price != last_price\n        changed                 # notify observers\n        last_price = price\n        notify_observers(Time.now, price)\n      end\n      sleep 1\n    end\n  end\nend\n\nclass Price           ### A mock class to fetch a stock price (60 - 140).\n  def self.fetch(symbol)\n    60 + rand(80)\n  end\nend\n\nclass Warner          ### An abstract observer of Ticker objects.\n  def initialize(ticker, limit)\n    @limit = limit\n    ticker.add_observer(self)\n  end\nend\n\nclass WarnLow < Warner\n  def update(time, price)       # callback for observer\n    if price < @limit\n      print \"--- #{time.to_s}: Price below #@limit: #{price}\\n\"\n    end\n  end\nend\n\nclass WarnHigh < Warner\n  def update(time, price)       # callback for observer\n    if price > @limit\n      print \"+++ #{time.to_s}: Price above #@limit: #{price}\\n\"\n    end\n  end\nend\n\nticker = Ticker.new(\"MSFT\")\nWarnLow.new(ticker, 80)\nWarnHigh.new(ticker, 120)\nticker.run\n\nProduces:\nCurrent price: 83\nCurrent price: 75\n--- Sun Jun 09 00:10:25 CDT 2002: Price below 80: 75\nCurrent price: 90\nCurrent price: 134\n+++ Sun Jun 09 00:10:25 CDT 2002: Price above 120: 134\nCurrent price: 134\nCurrent price: 112\nCurrent price: 79\n--- Sun Jun 09 00:10:25 CDT 2002: Price below 80: 79\n"}, {"c": "OLEProperty", "d": "\nOLEProperty helper class of Property with\narguments.\n"}, {"c": "Open3", "d": "\nOpen3 grants you access to stdin, stdout, stderr\nand a thread to wait for the child process when running another program.\nYou can specify various attributes, redirections, current directory, etc.,\nof the program in the same way as for Process.spawn.\n\n#popen3 : pipes for stdin, stdout,\nstderr\n\n#popen2 : pipes for stdin, stdout\n\n#popen2e : pipes for stdin,\nmerged stdout and stderr\n\n#capture3 : give a string for\nstdin; get strings for stdout, stderr\n\n#capture2 : give a string for\nstdin; get a string for stdout\n\n#capture2e : give a string for\nstdin; get a string for merged stdout and stderr\n\n#pipeline_rw : pipes for\nfirst stdin and last stdout of a pipeline\n\n#pipeline_r : pipe for last\nstdout of a pipeline\n\n#pipeline_w : pipe for first\nstdin of a pipeline\n\n#pipeline_start : run a\npipeline without waiting\n\n#pipeline : run a pipeline and\nwait for its completion\n\n"}, {"c": "OpenSSL", "d": "\nOpenSSL provides SSL, TLS and general purpose cryptography.  It\nwraps the OpenSSL library.\nExamples\u00b6 \u2191\nAll examples assume you have loaded OpenSSL\nwith:\nrequire 'openssl'\n\nThese examples build atop each other.  For example the key created in the\nnext is used in throughout these examples.\nKeys\u00b6 \u2191\nCreating a Key\u00b6 \u2191\nThis example creates a 2048 bit RSA keypair and writes it to the current\ndirectory.\nkey = OpenSSL::PKey::RSA.new 2048\n\nopen 'private_key.pem', 'w' do |io| io.write key.to_pem end\nopen 'public_key.pem', 'w' do |io| io.write key.public_key.to_pem end\n\nExporting a Key\u00b6 \u2191\nKeys saved to disk without encryption are not secure as anyone who gets\nahold of the key may use it unless it is encrypted.  In order to securely\nexport a key you may export it with a pass phrase.\ncipher = OpenSSL::Cipher.new 'AES-128-CBC'\npass_phrase = 'my secure pass phrase goes here'\n\nkey_secure = key.export cipher, pass_phrase\n\nopen 'private.secure.pem', 'w' do |io|\n  io.write key_secure\nend\n\nOpenSSL::Cipher.ciphers\nreturns a list of available ciphers.\nLoading a Key\u00b6 \u2191\nA key can also be loaded from a file.\nkey2 = OpenSSL::PKey::RSA.new File.read 'private_key.pem'\nkey2.public? # => true\nkey2.private? # => true\n\nor\nkey3 = OpenSSL::PKey::RSA.new File.read 'public_key.pem'\nkey3.public? # => true\nkey3.private? # => false\n\nLoading an Encrypted Key\u00b6 \u2191\nOpenSSL will prompt you for your pass phrase\nwhen loading an encrypted key. If you will not be able to type in the pass\nphrase you may provide it when loading the key:\nkey4_pem = File.read 'private.secure.pem'\npass_phrase = 'my secure pass phrase goes here'\nkey4 = OpenSSL::PKey::RSA.new key4_pem, pass_phrase\n\nRSA Encryption\u00b6 \u2191\nRSA provides encryption and decryption using the public and private keys.\nYou can use a variety of padding methods depending upon the intended use of\nencrypted data.\nEncryption & Decryption\u00b6 \u2191\nAsymmetric public/private key encryption is slow and victim to attack in\ncases where it is used without padding or directly to encrypt larger chunks\nof data. Typical use cases for RSA encryption involve \u00e2\u20ac\u0153wrapping\u00e2\u20ac a\nsymmetric key with the public key of the recipient who would \u00e2\u20ac\u0153unwrap\u00e2\u20ac that\nsymmetric key again using their private key. The following illustrates a\nsimplified example of such a key transport scheme. It shouldn't be used\nin practice, though, standardized protocols should always be preferred.\nwrapped_key = key.public_encrypt key\n\nA symmetric key encrypted with the public key can only be decrypted with\nthe corresponding private key of the recipient.\noriginal_key = key.private_decrypt wrapped_key\n\nBy default PKCS#1 padding will be used, but it is also possible to use\nother forms of padding, see PKey::RSA\nfor further details.\nSignatures\u00b6 \u2191\nUsing \u00e2\u20ac\u0153private_encrypt\u00e2\u20ac to encrypt some data with the private key is\nequivalent to applying a digital signature to the data. A verifying party\nmay validate the signature by comparing the result of decrypting the\nsignature with \u00e2\u20ac\u0153public_decrypt\u00e2\u20ac to the original data. However, OpenSSL::PKey already has methods \u00e2\u20ac\u0153sign\u00e2\u20ac and\n\u00e2\u20ac\u0153verify\u00e2\u20ac that handle digital signatures in a standardized way -\n\u00e2\u20ac\u0153private_encrypt\u00e2\u20ac and \u00e2\u20ac\u0153public_decrypt\u00e2\u20ac shouldn't be used in practice.\nTo sign a document, a cryptographically secure hash of the document is\ncomputed first, which is then signed using the private key.\ndigest = OpenSSL::Digest::SHA256.new\nsignature = key.sign digest, document\n\nTo validate the signature, again a hash of the document is computed and the\nsignature is decrypted using the public key. The result is then compared to\nthe hash just computed, if they are equal the signature was valid.\ndigest = OpenSSL::Digest::SHA256.new\nif key.verify digest, signature, document\n  puts 'Valid'\nelse\n  puts 'Invalid'\nend\n\nPBKDF2 Password-based Encryption\u00b6 \u2191\nIf supported by the underlying OpenSSL version\nused, Password-based Encryption should use the features of PKCS5. If not supported or if required by\nlegacy applications, the older, less secure methods specified in RFC 2898\nare also supported (see below).\nPKCS5 supports PBKDF2 as it was specified\nin PKCS#5 v2.0.\nIt still uses a password, a salt, and additionally a number of iterations\nthat will slow the key derivation process down. The slower this is, the\nmore work it requires being able to brute-force the resulting key.\nEncryption\u00b6 \u2191\nThe strategy is to first instantiate a Cipher for encryption, and then to generate\na random IV plus a key derived from the password using PBKDF2. PKCS #5 v2.0\nrecommends at least 8 bytes for the salt, the number of iterations largely\ndepends on the hardware being used.\ncipher = OpenSSL::Cipher.new 'AES-128-CBC'\ncipher.encrypt\niv = cipher.random_iv\n\npwd = 'some hopefully not to easily guessable password'\nsalt = OpenSSL::Random.random_bytes 16\niter = 20000\nkey_len = cipher.key_len\ndigest = OpenSSL::Digest::SHA256.new\n\nkey = OpenSSL::PKCS5.pbkdf2_hmac(pwd, salt, iter, key_len, digest)\ncipher.key = key\n\nNow encrypt the data:\n\nencrypted = cipher.update document\nencrypted << cipher.final\nDecryption\u00b6 \u2191\nUse the same steps as before to derive the symmetric AES key, this time\nsetting the Cipher up for decryption.\ncipher = OpenSSL::Cipher.new 'AES-128-CBC'\ncipher.decrypt\ncipher.iv = iv # the one generated with #random_iv\n\npwd = 'some hopefully not to easily guessable password'\nsalt = ... # the one generated above\niter = 20000\nkey_len = cipher.key_len\ndigest = OpenSSL::Digest::SHA256.new\n\nkey = OpenSSL::PKCS5.pbkdf2_hmac(pwd, salt, iter, key_len, digest)\ncipher.key = key\n\nNow decrypt the data:\n\ndecrypted = cipher.update encrypted\ndecrypted << cipher.final\nPKCS #5 Password-based Encryption\u00b6 \u2191\nPKCS #5 is a password-based encryption standard documented at RFC2898.  It allows a short\npassword or passphrase to be used to create a secure encryption key. If\npossible, PBKDF2 as described above should be used if the circumstances\nallow it.\nPKCS #5 uses a Cipher, a pass phrase and\na salt to generate an encryption key.\npass_phrase = 'my secure pass phrase goes here'\nsalt = '8 octets'\n\nEncryption\u00b6 \u2191\nFirst set up the cipher for encryption\nencryptor = OpenSSL::Cipher.new 'AES-128-CBC'\nencryptor.encrypt\nencryptor.pkcs5_keyivgen pass_phrase, salt\n\nThen pass the data you want to encrypt through\nencrypted = encryptor.update 'top secret document'\nencrypted << encryptor.final\n\nDecryption\u00b6 \u2191\nUse a new Cipher instance set up for\ndecryption\ndecryptor = OpenSSL::Cipher.new 'AES-128-CBC'\ndecryptor.decrypt\ndecryptor.pkcs5_keyivgen pass_phrase, salt\n\nThen pass the data you want to decrypt through\nplain = decryptor.update encrypted\nplain << decryptor.final\n\nX509 Certificates\u00b6 \u2191\nCreating a Certificate\u00b6 \u2191\nThis example creates a self-signed certificate using an RSA key and a SHA1\nsignature.\nkey = OpenSSL::PKey::RSA.new 2048\nname = OpenSSL::X509::Name.parse 'CN=nobody/DC=example'\n\ncert = OpenSSL::X509::Certificate.new\ncert.version = 2\ncert.serial = 0\ncert.not_before = Time.now\ncert.not_after = Time.now + 3600\n\ncert.public_key = key.public_key\ncert.subject = name\n\nCertificate Extensions\u00b6 \u2191\nYou can add extensions to the certificate with\nOpenSSL::SSL::ExtensionFactory to indicate the purpose of the certificate.\nextension_factory = OpenSSL::X509::ExtensionFactory.new nil, cert\n\ncert.add_extension \\\n  extension_factory.create_extension('basicConstraints', 'CA:FALSE', true)\n\ncert.add_extension \\\n  extension_factory.create_extension(\n    'keyUsage', 'keyEncipherment,dataEncipherment,digitalSignature')\n\ncert.add_extension \\\n  extension_factory.create_extension('subjectKeyIdentifier', 'hash')\n\nThe list of supported extensions (and in some cases their possible values)\ncan be derived from the \u00e2\u20ac\u0153objects.h\u00e2\u20ac file in the OpenSSL source code.\nSigning a Certificate\u00b6 \u2191\nTo sign a certificate set the issuer and use OpenSSL::X509::Certificate#sign\nwith a digest algorithm.  This creates a self-signed cert because we're\nusing the same name and key to sign the certificate as was used to create\nthe certificate.\ncert.issuer = name\ncert.sign key, OpenSSL::Digest::SHA1.new\n\nopen 'certificate.pem', 'w' do |io| io.write cert.to_pem end\n\nLoading a Certificate\u00b6 \u2191\nLike a key, a cert can also be loaded from a file.\ncert2 = OpenSSL::X509::Certificate.new File.read 'certificate.pem'\n\nVerifying a Certificate\u00b6 \u2191\nCertificate#verify will return true when a certificate was signed with the\ngiven public key.\nraise 'certificate can not be verified' unless cert2.verify key\n\nCertificate Authority\u00b6 \u2191\nA certificate authority (CA) is a trusted third party that allows you to\nverify the ownership of unknown certificates.  The CA issues key signatures\nthat indicate it trusts the user of that key.  A user encountering the key\ncan verify the signature by using the CA's public key.\nCA Key\u00b6 \u2191\nCA keys are valuable, so we encrypt and save it to disk and make sure it is\nnot readable by other users.\nca_key = OpenSSL::PKey::RSA.new 2048\npass_phrase = 'my secure pass phrase goes here'\n\ncipher = OpenSSL::Cipher.new 'AES-128-CBC'\n\nopen 'ca_key.pem', 'w', 0400 do |io|\n  io.write ca_key.export(cipher, pass_phrase)\nend\n\nCA Certificate\u00b6 \u2191\nA CA certificate is created the same way we created a certificate above,\nbut with different extensions.\nca_name = OpenSSL::X509::Name.parse 'CN=ca/DC=example'\n\nca_cert = OpenSSL::X509::Certificate.new\nca_cert.serial = 0\nca_cert.version = 2\nca_cert.not_before = Time.now\nca_cert.not_after = Time.now + 86400\n\nca_cert.public_key = ca_key.public_key\nca_cert.subject = ca_name\nca_cert.issuer = ca_name\n\nextension_factory = OpenSSL::X509::ExtensionFactory.new\nextension_factory.subject_certificate = ca_cert\nextension_factory.issuer_certificate = ca_cert\n\nca_cert.add_extension \\\n  extension_factory.create_extension('subjectKeyIdentifier', 'hash')\n\nThis extension indicates the CA's key may be used as a CA.\nca_cert.add_extension \\\n  extension_factory.create_extension('basicConstraints', 'CA:TRUE', true)\n\nThis extension indicates the CA's key may be used to verify signatures\non both certificates and certificate revocations.\nca_cert.add_extension \\\n  extension_factory.create_extension(\n    'keyUsage', 'cRLSign,keyCertSign', true)\n\nRoot CA certificates are self-signed.\nca_cert.sign ca_key, OpenSSL::Digest::SHA1.new\n\nThe CA certificate is saved to disk so it may be distributed to all the\nusers of the keys this CA will sign.\nopen 'ca_cert.pem', 'w' do |io|\n  io.write ca_cert.to_pem\nend\n\nCertificate Signing Request\u00b6 \u2191\nThe CA signs keys through a Certificate Signing Request (CSR).  The CSR\ncontains the information necessary to identify the key.\ncsr = OpenSSL::X509::Request.new\ncsr.version = 0\ncsr.subject = name\ncsr.public_key = key.public_key\ncsr.sign key, OpenSSL::Digest::SHA1.new\n\nA CSR is saved to disk and sent to the CA for signing.\nopen 'csr.pem', 'w' do |io|\n  io.write csr.to_pem\nend\n\nCreating a Certificate from a CSR\u00b6 \u2191\nUpon receiving a CSR the CA will verify it before signing it.  A minimal\nverification would be to check the CSR's signature.\ncsr = OpenSSL::X509::Request.new File.read 'csr.pem'\n\nraise 'CSR can not be verified' unless csr.verify csr.public_key\n\nAfter verification a certificate is created, marked for various usages,\nsigned with the CA key and returned to the requester.\ncsr_cert = OpenSSL::X509::Certificate.new\ncsr_cert.serial = 0\ncsr_cert.version = 2\ncsr_cert.not_before = Time.now\ncsr_cert.not_after = Time.now + 600\n\ncsr_cert.subject = csr.subject\ncsr_cert.public_key = csr.public_key\ncsr_cert.issuer = ca_cert.subject\n\nextension_factory = OpenSSL::X509::ExtensionFactory.new\nextension_factory.subject_certificate = csr_cert\nextension_factory.issuer_certificate = ca_cert\n\ncsr_cert.add_extension \\\n  extension_factory.create_extension('basicConstraints', 'CA:FALSE')\n\ncsr_cert.add_extension \\\n  extension_factory.create_extension(\n    'keyUsage', 'keyEncipherment,dataEncipherment,digitalSignature')\n\ncsr_cert.add_extension \\\n  extension_factory.create_extension('subjectKeyIdentifier', 'hash')\n\ncsr_cert.sign ca_key, OpenSSL::Digest::SHA1.new\n\nopen 'csr_cert.pem', 'w' do |io|\n  io.write csr_cert.to_pem\nend\n\nSSL and TLS Connections\u00b6 \u2191\nUsing our created key and certificate we can create an SSL or TLS connection. An SSLContext is used to\nset up an SSL session.\ncontext = OpenSSL::SSL::SSLContext.new\n\nSSL Server\u00b6 \u2191\nAn SSL server requires the certificate and\nprivate key to communicate securely with its clients:\ncontext.cert = cert\ncontext.key = key\n\nThen create an SSLServer with a TCP server socket and the context.  Use the\nSSLServer like an ordinary TCP server.\nrequire 'socket'\n\ntcp_server = TCPServer.new 5000\nssl_server = OpenSSL::SSL::SSLServer.new tcp_server, context\n\nloop do\n  ssl_connection = ssl_server.accept\n\n  data = connection.gets\n\n  response = \"I got #{data.dump}\"\n  puts response\n\n  connection.puts \"I got #{data.dump}\"\n  connection.close\nend\n\nSSL client\u00b6 \u2191\nAn SSL client is created with a TCP socket\nand the context. SSLSocket#connect must be called to initiate the SSL handshake and start encryption.  A key and\ncertificate are not required for the client socket.\nNote that SSLSocket#close doesn't close the underlying socket by\ndefault. Set SSLSocket#sync_close to true if you\nwant.\nrequire 'socket'\n\ntcp_socket = TCPSocket.new 'localhost', 5000\nssl_client = OpenSSL::SSL::SSLSocket.new tcp_socket, context\nssl_client.sync_close = true\nssl_client.connect\n\nssl_client.puts \"hello server!\"\nputs ssl_client.gets\n\nssl_client.close # shutdown the TLS connection and close tcp_socket\n\nPeer Verification\u00b6 \u2191\nAn unverified SSL connection does not\nprovide much security.  For enhanced security the client or server can\nverify the certificate of its peer.\nThe client can be modified to verify the server's certificate against\nthe certificate authority's certificate:\ncontext.ca_file = 'ca_cert.pem'\ncontext.verify_mode = OpenSSL::SSL::VERIFY_PEER\n\nrequire 'socket'\n\ntcp_socket = TCPSocket.new 'localhost', 5000\nssl_client = OpenSSL::SSL::SSLSocket.new tcp_socket, context\nssl_client.connect\n\nssl_client.puts \"hello server!\"\nputs ssl_client.gets\n\nIf the server certificate is invalid or context.ca_file is not\nset when verifying peers an OpenSSL::SSL::SSLError will be raised.\n"}, {"c": "OpenStruct", "d": "\nAn OpenStruct is a data structure, similar to\na Hash, that allows the definition of arbitrary\nattributes with their accompanying values. This is accomplished by using\nRuby's metaprogramming to define methods on the class itself.\nExamples\u00b6 \u2191\nrequire \"ostruct\"\n\nperson = OpenStruct.new\nperson.name = \"John Smith\"\nperson.age  = 70\n\nperson.name      # => \"John Smith\"\nperson.age       # => 70\nperson.address   # => nil\n\nAn OpenStruct employs a Hash internally to store the attributes and values and\ncan even be initialized with one:\naustralia = OpenStruct.new(:country => \"Australia\", :capital => \"Canberra\")\n  # => #<OpenStruct country=\"Australia\", capital=\"Canberra\">\n\nHash keys with spaces or characters that could\nnormally not be used for method calls (e.g. ()[]*) will not be\nimmediately available on the OpenStruct\nobject as a method for retrieval or assignment, but can still be reached\nthrough the Object#send method.\nmeasurements = OpenStruct.new(\"length (in inches)\" => 24)\nmeasurements.send(\"length (in inches)\")   # => 24\n\nmessage = OpenStruct.new(:queued? => true)\nmessage.queued?                           # => true\nmessage.send(\"queued?=\", false)\nmessage.queued?                           # => false\n\nRemoving the presence of an attribute requires the execution of the #delete_field method as\nsetting the property value to nil will not remove the\nattribute.\nfirst_pet  = OpenStruct.new(:name => \"Rowdy\", :owner => \"John Smith\")\nsecond_pet = OpenStruct.new(:name => \"Rowdy\")\n\nfirst_pet.owner = nil\nfirst_pet                 # => #<OpenStruct name=\"Rowdy\", owner=nil>\nfirst_pet == second_pet   # => false\n\nfirst_pet.delete_field(:owner)\nfirst_pet                 # => #<OpenStruct name=\"Rowdy\">\nfirst_pet == second_pet   # => true\n\nImplementation\u00b6 \u2191\nAn OpenStruct utilizes Ruby's method\nlookup structure to find and define the necessary methods for properties.\nThis is accomplished through the methods method_missing and\ndefine_singleton_method.\nThis should be a consideration if there is a concern about the performance\nof the objects that are created, as there is much more overhead in the\nsetting of these properties compared to using a Hash or a Struct.\n"}, {"c": "OpenURI", "d": "\nOpenURI is an easy-to-use wrapper for Net::HTTP, Net::HTTPS and Net::FTP.\nExample\u00b6 \u2191\nIt is possible to open an http, https or ftp URL as though it were a file:\nopen(\"http://www.ruby-lang.org/\") {|f|\n  f.each_line {|line| p line}\n}\n\nThe opened file has several getter methods for its meta-information, as\nfollows, since it is extended by OpenURI::Meta.\nopen(\"http://www.ruby-lang.org/en\") {|f|\n  f.each_line {|line| p line}\n  p f.base_uri         # <URI::HTTP:0x40e6ef2 URL:http://www.ruby-lang.org/en/>\n  p f.content_type     # \"text/html\"\n  p f.charset          # \"iso-8859-1\"\n  p f.content_encoding # []\n  p f.last_modified    # Thu Dec 05 02:45:02 UTC 2002\n}\n\nAdditional header fields can be specified by an optional hash argument.\nopen(\"http://www.ruby-lang.org/en/\",\n  \"User-Agent\" => \"Ruby/#{RUBY_VERSION}\",\n  \"From\" => \"foo@bar.invalid\",\n  \"Referer\" => \"http://www.ruby-lang.org/\") {|f|\n  # ...\n}\n\nThe environment variables such as http_proxy, https_proxy and ftp_proxy are\nin effect by default. Here we disable proxy:\nopen(\"http://www.ruby-lang.org/en/\", :proxy => nil) {|f|\n  # ...\n}\n\nSee OpenURI::OpenRead#open and\nKernel#open for more on available\noptions.\nURI objects can be opened in a similar way.\nuri = URI.parse(\"http://www.ruby-lang.org/en/\")\nuri.open {|f|\n  # ...\n}\n\nURI objects can be read directly. The returned\nstring is also extended by OpenURI::Meta.\nstr = uri.read\np str.base_uri\n\nAuthor\n\nTanaka Akira <akr@m17n.org>\n\n"}, {"c": "OptionParser", "d": "\nOptionParser\u00b6 \u2191\nIntroduction\u00b6 \u2191\nOptionParser is a class for command-line\noption analysis.  It is much more advanced, yet also easier to use, than GetoptLong, and is a more Ruby-oriented\nsolution.\nFeatures\u00b6 \u2191\n\nThe argument specification and the code to handle it are written in the\nsame place.\n\nIt can output an option summary; you don't need to maintain this string\nseparately.\n\nOptional and mandatory arguments are specified very gracefully.\n\nArguments can be automatically converted to a specified class.\n\nArguments can be restricted to a certain set.\n\nAll of these features are demonstrated in the examples below.  See make_switch for full\ndocumentation.\nMinimal example\u00b6 \u2191\nrequire 'optparse'\n\noptions = {}\nOptionParser.new do |opts|\n  opts.banner = \"Usage: example.rb [options]\"\n\n  opts.on(\"-v\", \"--[no-]verbose\", \"Run verbosely\") do |v|\n    options[:verbose] = v\n  end\nend.parse!\n\np options\np ARGV\n\nGenerating Help\u00b6 \u2191\nOptionParser can be used to automatically\ngenerate help for the commands you write:\nrequire 'optparse'\n\nOptions = Struct.new(:name)\n\nclass Parser\n  def self.parse(options)\n    args = Options.new(\"world\")\n\n    opt_parser = OptionParser.new do |opts|\n      opts.banner = \"Usage: example.rb [options]\"\n\n      opts.on(\"-nNAME\", \"--name=NAME\", \"Name to say hello to\") do |n|\n        args.name = n\n      end\n\n      opts.on(\"-h\", \"--help\", \"Prints this help\") do\n        puts opts\n        exit\n      end\n    end\n\n    opt_parser.parse!(options)\n    return args\n  end\nend\noptions = Parser.parse %w[--help]\n\n#=>\n   # Usage: example.rb [options]\n   #     -n, --name=NAME                  Name to say hello to\n   #     -h, --help                       Prints this help\n\nRequired Arguments\u00b6 \u2191\nFor options that require an argument, option specification strings may\ninclude an option name in all caps. If an option is used without the\nrequired argument, an exception will be raised.\nrequire 'optparse'\n\noptions = {}\nOptionParser.new do |parser|\n  parser.on(\"-r\", \"--require LIBRARY\",\n            \"Require the LIBRARY before executing your script\") do |lib|\n    puts \"You required #{lib}!\"\n  end\nend.parse!\n\nUsed:\nbash-3.2$ ruby optparse-test.rb -r\noptparse-test.rb:9:in `<main>': missing argument: -r (OptionParser::MissingArgument)\nbash-3.2$ ruby optparse-test.rb -r my-library\nYou required my-library!\nType Coercion\u00b6 \u2191\nOptionParser supports the ability to coerce\ncommand line arguments into objects for us.\nOptionParser comes with a few ready-to-use\nkinds of  type coercion. They are:\n\nDate  \u00e2\u20ac\u201c Anything accepted by\nDate.parse\n\nDateTime \u00e2\u20ac\u201c Anything accepted by\nDateTime.parse\n\nTime \u00e2\u20ac\u201c Anything accepted by\nTime.httpdate or Time.parse\n\nURI  \u00e2\u20ac\u201c Anything accepted by URI.parse\n\nShellwords \u00e2\u20ac\u201c Anything accepted by\nShellwords.shellwords\n\nString \u00e2\u20ac\u201c Any non-empty string\n\nInteger \u00e2\u20ac\u201c Any integer. Will convert octal. (e.g.\n124, -3, 040)\n\nFloat \u00e2\u20ac\u201c Any float. (e.g. 10, 3.14, -100E+13)\n\nNumeric \u00e2\u20ac\u201c Any integer, float, or rational (1,\n3.4, 1/3)\n\nDecimalInteger \u00e2\u20ac\u201c Like\nInteger, but no octal format.\n\nOctalInteger \u00e2\u20ac\u201c Like\nInteger, but no decimal format.\n\nDecimalNumeric \u00e2\u20ac\u201c Decimal\ninteger or float.\n\nTrueClass \u00e2\u20ac\u201c  Accepts '+, yes, true, -, no,\nfalse' and defaults as true\n\nFalseClass \u00e2\u20ac\u201c Same as TrueClass,\nbut defaults to false\n\nArray \u00e2\u20ac\u201c Strings separated by ',' (e.g. 1,2,3)\n\nRegexp \u00e2\u20ac\u201c Regular expressions. Also includes\noptions.\n\nWe can also add our own coercions, which we will cover soon.\nUsing Built-in Conversions\u00b6 \u2191\nAs an example, the built-in Time conversion is used. The other\nbuilt-in conversions behave in the same way. OptionParser will attempt to parse the\nargument as a Time. If it succeeds, that time will be passed\nto the handler block. Otherwise, an exception will be raised.\nrequire 'optparse'\nrequire 'optparse/time'\nOptionParser.new do |parser|\n  parser.on(\"-t\", \"--time [TIME]\", Time, \"Begin execution at given time\") do |time|\n    p time\n  end\nend.parse!\n\nUsed:\nbash-3.2$ ruby optparse-test.rb  -t nonsense\n... invalid argument: -t nonsense (OptionParser::InvalidArgument)\nfrom ... time.rb:5:in `block in <top (required)>'\nfrom optparse-test.rb:31:in `<main>'\nbash-3.2$ ruby optparse-test.rb  -t 10-11-12\n2010-11-12 00:00:00 -0500\nbash-3.2$ ruby optparse-test.rb  -t 9:30\n2014-08-13 09:30:00 -0400\nCreating Custom Conversions\u00b6 \u2191\nThe accept method on OptionParser may be used to create converters.\nIt specifies which conversion block to call whenever a class is specified.\nThe example below uses it to fetch a User object before the\non handler receives it.\nrequire 'optparse'\n\nUser = Struct.new(:id, :name)\n\ndef find_user id\n  not_found = ->{ raise \"No User Found for id #{id}\" }\n  [ User.new(1, \"Sam\"),\n    User.new(2, \"Gandalf\") ].find(not_found) do |u|\n    u.id == id\n  end\nend\n\nop = OptionParser.new\nop.accept(User) do |user_id|\n  find_user user_id.to_i\nend\n\nop.on(\"--user ID\", User) do |user|\n  puts user\nend\n\nop.parse!\n\noutput:\nbash-3.2$ ruby optparse-test.rb --user 1\n#<struct User id=1, name=\"Sam\">\nbash-3.2$ ruby optparse-test.rb --user 2\n#<struct User id=2, name=\"Gandalf\">\nbash-3.2$ ruby optparse-test.rb --user 3\noptparse-test.rb:15:in `block in find_user': No User Found for id 3 (RuntimeError)\nComplete example\u00b6 \u2191\nThe following example is a complete Ruby program.  You can run it and see\nthe effect of specifying various options.  This is probably the best way to\nlearn the features of optparse.\nrequire 'optparse'\nrequire 'optparse/time'\nrequire 'ostruct'\nrequire 'pp'\n\nclass OptparseExample\n  Version = '1.0.0'\n\n  CODES = %w[iso-2022-jp shift_jis euc-jp utf8 binary]\n  CODE_ALIASES = { \"jis\" => \"iso-2022-jp\", \"sjis\" => \"shift_jis\" }\n\n  class ScriptOptions\n    attr_accessor :library, :inplace, :encoding, :transfer_type,\n                  :verbose, :extension, :delay, :time, :record_separator,\n                  :list\n\n    def initialize\n      self.library = []\n      self.inplace = false\n      self.encoding = \"utf8\"\n      self.transfer_type = :auto\n      self.verbose = false\n    end\n\n    def define_options(parser)\n      parser.banner = \"Usage: example.rb [options]\"\n      parser.separator \"\"\n      parser.separator \"Specific options:\"\n\n      # add additional options\n      perform_inplace_option(parser)\n      delay_execution_option(parser)\n      execute_at_time_option(parser)\n      specify_record_separator_option(parser)\n      list_example_option(parser)\n      specify_encoding_option(parser)\n      optional_option_argument_with_keyword_completion_option(parser)\n      boolean_verbose_option(parser)\n\n      parser.separator \"\"\n      parser.separator \"Common options:\"\n      # No argument, shows at tail.  This will print an options summary.\n      # Try it and see!\n      parser.on_tail(\"-h\", \"--help\", \"Show this message\") do\n        puts parser\n        exit\n      end\n      # Another typical switch to print the version.\n      parser.on_tail(\"--version\", \"Show version\") do\n        puts Version\n        exit\n      end\n    end\n\n    def perform_inplace_option(parser)\n      # Specifies an optional option argument\n      parser.on(\"-i\", \"--inplace [EXTENSION]\",\n                \"Edit ARGV files in place\",\n                \"(make backup if EXTENSION supplied)\") do |ext|\n        self.inplace = true\n        self.extension = ext || ''\n        self.extension.sub!(/\\A\\.?(?=.)/, \".\")  # Ensure extension begins with dot.\n      end\n    end\n\n    def delay_execution_option(parser)\n      # Cast 'delay' argument to a Float.\n      parser.on(\"--delay N\", Float, \"Delay N seconds before executing\") do |n|\n        self.delay = n\n      end\n    end\n\n    def execute_at_time_option(parser)\n      # Cast 'time' argument to a Time object.\n      parser.on(\"-t\", \"--time [TIME]\", Time, \"Begin execution at given time\") do |time|\n        self.time = time\n      end\n    end\n\n    def specify_record_separator_option(parser)\n      # Cast to octal integer.\n      parser.on(\"-F\", \"--irs [OCTAL]\", OptionParser::OctalInteger,\n                \"Specify record separator (default \\\\0)\") do |rs|\n        self.record_separator = rs\n      end\n    end\n\n    def list_example_option(parser)\n      # List of arguments.\n      parser.on(\"--list x,y,z\", Array, \"Example 'list' of arguments\") do |list|\n        self.list = list\n      end\n    end\n\n    def specify_encoding_option(parser)\n      # Keyword completion.  We are specifying a specific set of arguments (CODES\n      # and CODE_ALIASES - notice the latter is a Hash), and the user may provide\n      # the shortest unambiguous text.\n      code_list = (CODE_ALIASES.keys + CODES).join(', ')\n      parser.on(\"--code CODE\", CODES, CODE_ALIASES, \"Select encoding\",\n                \"(#{code_list})\") do |encoding|\n        self.encoding = encoding\n      end\n    end\n\n    def optional_option_argument_with_keyword_completion_option(parser)\n      # Optional '--type' option argument with keyword completion.\n      parser.on(\"--type [TYPE]\", [:text, :binary, :auto],\n                \"Select transfer type (text, binary, auto)\") do |t|\n        self.transfer_type = t\n      end\n    end\n\n    def boolean_verbose_option(parser)\n      # Boolean switch.\n      parser.on(\"-v\", \"--[no-]verbose\", \"Run verbosely\") do |v|\n        self.verbose = v\n      end\n    end\n  end\n\n  #\n  # Return a structure describing the options.\n  #\n  def parse(args)\n    # The options specified on the command line will be collected in\n    # *options*.\n\n    @options = ScriptOptions.new\n    @args = OptionParser.new do |parser|\n      @options.define_options(parser)\n      parser.parse!(args)\n    end\n    @options\n  end\n\n  attr_reader :parser, :options\nend  # class OptparseExample\n\nexample = OptparseExample.new\noptions = example.parse(ARGV)\npp options # example.options\npp ARGV\n\nShell Completion\u00b6 \u2191\nFor modern shells (e.g. bash, zsh, etc.), you can use shell completion for\ncommand line options.\nFurther documentation\u00b6 \u2191\nThe above examples should be enough to learn how to use this class.  If you\nhave any questions, file a ticket at bugs.ruby-lang.org.\n"}, {"c": "Pathname", "d": "\nPathname represents the name of a file or\ndirectory on the filesystem, but not the file itself.\nThe pathname depends on the Operating System: Unix, Windows, etc. This\nlibrary works with pathnames of local OS, however non-Unix pathnames are\nsupported experimentally.\nA Pathname can be relative or absolute. \nIt's not until you try to reference the file that it even matters\nwhether the file exists or not.\nPathname is immutable.  It has no method for\ndestructive update.\nThe goal of this class is to manipulate file path information in a neater\nway than standard Ruby provides.  The examples below demonstrate the\ndifference.\nAll functionality from File, FileTest, and some from Dir\nand FileUtils is included, in an unsurprising\nway.  It is essentially a facade for all of these, and more.\nExamples\u00b6 \u2191\nExample 1: Using Pathname\u00b6 \u2191\nrequire 'pathname'\npn = Pathname.new(\"/usr/bin/ruby\")\nsize = pn.size              # 27662\nisdir = pn.directory?       # false\ndir  = pn.dirname           # Pathname:/usr/bin\nbase = pn.basename          # Pathname:ruby\ndir, base = pn.split        # [Pathname:/usr/bin, Pathname:ruby]\ndata = pn.read\npn.open { |f| _ }\npn.each_line { |line| _ }\n\nExample 2: Using standard Ruby\u00b6 \u2191\npn = \"/usr/bin/ruby\"\nsize = File.size(pn)        # 27662\nisdir = File.directory?(pn) # false\ndir  = File.dirname(pn)     # \"/usr/bin\"\nbase = File.basename(pn)    # \"ruby\"\ndir, base = File.split(pn)  # [\"/usr/bin\", \"ruby\"]\ndata = File.read(pn)\nFile.open(pn) { |f| _ }\nFile.foreach(pn) { |line| _ }\n\nExample 3: Special features\u00b6 \u2191\np1 = Pathname.new(\"/usr/lib\")   # Pathname:/usr/lib\np2 = p1 + \"ruby/1.8\"            # Pathname:/usr/lib/ruby/1.8\np3 = p1.parent                  # Pathname:/usr\np4 = p2.relative_path_from(p3)  # Pathname:lib/ruby/1.8\npwd = Pathname.pwd              # Pathname:/home/gavin\npwd.absolute?                   # true\np5 = Pathname.new \".\"           # Pathname:.\np5 = p5 + \"music/../articles\"   # Pathname:music/../articles\np5.cleanpath                    # Pathname:articles\np5.realpath                     # Pathname:/home/gavin/articles\np5.children                     # [Pathname:/home/gavin/articles/linux, ...]\n\nBreakdown of functionality\u00b6 \u2191\nCore methods\u00b6 \u2191\nThese methods are effectively manipulating a String, because that's all\na path is.  None of these access the file system except for mountpoint?, children, each_child, realdirpath and realpath.\n\n+\n\njoin\n\nparent\n\nroot?\n\nabsolute?\n\nrelative?\n\nrelative_path_from\n\neach_filename\n\ncleanpath\n\nrealpath\n\nrealdirpath\n\nchildren\n\neach_child\n\nmountpoint?\n\nFile status predicate methods\u00b6 \u2191\nThese methods are a facade for FileTest:\n\nblockdev?\n\nchardev?\n\ndirectory?\n\nexecutable?\n\nexecutable_real?\n\nexist?\n\nfile?\n\ngrpowned?\n\nowned?\n\npipe?\n\nreadable?\n\nworld_readable?\n\nreadable_real?\n\nsetgid?\n\nsetuid?\n\nsize\n\nsize?\n\nsocket?\n\nsticky?\n\nsymlink?\n\nwritable?\n\nworld_writable?\n\nwritable_real?\n\nzero?\n\nFile property and manipulation methods\u00b6 \u2191\nThese methods are a facade for File:\n\natime\n\nbirthtime\n\nctime\n\nmtime\n\nchmod(mode)\n\nlchmod(mode)\n\nchown(owner, group)\n\nlchown(owner, group)\n\nfnmatch(pattern, *args)\n\nfnmatch?(pattern, *args)\n\nftype\n\nmake_link(old)\n\nopen(*args, &block)\n\nreadlink\n\nrename(to)\n\nstat\n\nlstat\n\nmake_symlink(old)\n\ntruncate(length)\n\nutime(atime, mtime)\n\nbasename(*args)\n\ndirname\n\nextname\n\nexpand_path(*args)\n\nsplit\n\nDirectory methods\u00b6 \u2191\nThese methods are a facade for Dir:\n\n::glob\n\n::getwd / ::pwd\n\nrmdir\n\nentries\n\neach_entry(&block)\n\nmkdir(*args)\n\nopendir(*args)\n\nIO\u00b6 \u2191\nThese methods are a facade for IO:\n\neach_line(*args, &block)\n\nread(*args)\n\nbinread(*args)\n\nreadlines(*args)\n\nsysopen(*args)\n\nUtilities\u00b6 \u2191\nThese methods are a mixture of Find, FileUtils, and others:\n\nfind(&block)\n\nmkpath\n\nrmtree\n\nunlink / delete\n\nMethod documentation\u00b6 \u2191\nAs the above section shows, most of the methods in Pathname are facades.  The documentation for these\nmethods generally just says, for instance, \u00e2\u20ac\u0153See FileTest#writable?\u00e2\u20ac, as you\nshould be familiar with the original method anyway, and its documentation\n(e.g. through ri) will contain more information.  In some\ncases, a brief description will follow.\n"}, {"c": "PP", "d": "\nA pretty-printer for Ruby objects.\nWhat PP Does\u00b6 \u2191\nStandard output by p returns this:\n#<PP:0x81fedf0 @genspace=#<Proc:0x81feda0>, @group_queue=#<PrettyPrint::GroupQueue:0x81fed3c @queue=[[#<PrettyPrint::Group:0x81fed78 @breakables=[], @depth=0, @break=false>], []]>, @buffer=[], @newline=\"\\n\", @group_stack=[#<PrettyPrint::Group:0x81fed78 @breakables=[], @depth=0, @break=false>], @buffer_width=0, @indent=0, @maxwidth=79, @output_width=2, @output=#<IO:0x8114ee4>>\n\nPretty-printed output returns this:\n#<PP:0x81fedf0\n @buffer=[],\n @buffer_width=0,\n @genspace=#<Proc:0x81feda0>,\n @group_queue=\n  #<PrettyPrint::GroupQueue:0x81fed3c\n   @queue=\n    [[#<PrettyPrint::Group:0x81fed78 @break=false, @breakables=[], @depth=0>],\n     []]>,\n @group_stack=\n  [#<PrettyPrint::Group:0x81fed78 @break=false, @breakables=[], @depth=0>],\n @indent=0,\n @maxwidth=79,\n @newline=\"\\n\",\n @output=#<IO:0x8114ee4>,\n @output_width=2>\nUsage\u00b6 \u2191\npp(obj)             #=> obj\npp obj              #=> obj\npp(obj1, obj2, ...) #=> [obj1, obj2, ...]\npp()                #=> nil\nOutput obj(s) to $> in pretty printed format.\nIt returns obj(s).\nOutput Customization\u00b6 \u2191\nTo define a customized pretty printing function for your classes, redefine\nmethod #pretty_print(pp) in the class.\n#pretty_print takes the pp argument, which is an\ninstance of the PP class. The method uses text, breakable, nest, group and pp to print the object.\nPretty-Print JSON\u00b6 \u2191\nTo pretty-print JSON refer to JSON#pretty_generate.\nAuthor\u00b6 \u2191\nTanaka Akira <akr@fsij.org>\n"}, {"c": "PrettyPrint", "d": "\nThis class implements a pretty printing algorithm. It finds line breaks and\nnice indentations for grouped structure.\nBy default, the class assumes that primitive elements are strings and each\nbyte in the strings have single column in width. But it can be used for\nother situations by giving suitable arguments for some methods:\n\nnewline object and space generation block for ::new\n\noptional width argument for #text\n\n#breakable\n\nThere are several candidate uses:\n\ntext formatting using proportional fonts\n\nmultibyte characters which has columns different to number of bytes\n\nnon-string formatting\n\nBugs\u00b6 \u2191\n\nBox based formatting?\n\nOther (better) model/algorithm?\n\nReport any bugs at bugs.ruby-lang.org\nReferences\u00b6 \u2191\nChristian Lindig, Strictly Pretty, March 2000, www.st.cs.uni-sb.de/~lindig/papers/#pretty\nPhilip Wadler, A prettier printer, March 1998, homepages.inf.ed.ac.uk/wadler/topics/language-design.html#prettier\nAuthor\u00b6 \u2191\nTanaka Akira <akr@fsij.org>\n"}, {"c": "Prime", "d": "\nThe set of all prime numbers.\nExample\u00b6 \u2191\nPrime.each(100) do |prime|\n  p prime  #=> 2, 3, 5, 7, 11, ...., 97\nend\n\nPrime is Enumerable:\nPrime.first 5 # => [2, 3, 5, 7, 11]\n\nRetrieving the instance\u00b6 \u2191\nFor convenience, each instance method of Prime.instance can be\naccessed as a class method of Prime.\ne.g.\nPrime.instance.prime?(2)  #=> true\nPrime.prime?(2)           #=> true\n\nGenerators\u00b6 \u2191\nA \u00e2\u20ac\u0153generator\u00e2\u20ac provides an implementation of enumerating pseudo-prime\nnumbers and it remembers the position of enumeration and upper bound.\nFurthermore, it is an external iterator of prime enumeration which is\ncompatible with an Enumerator.\nPrime::PseudoPrimeGenerator is the base class for\ngenerators. There are few implementations of generator.\nPrime::EratosthenesGenerator\n\nUses eratosthenes' sieve.\nPrime::TrialDivisionGenerator\n\nUses the trial division method.\nPrime::Generator23\n\nGenerates all positive integers which are not divisible by either 2 or 3.\nThis sequence is very bad as a pseudo-prime sequence. But this is faster\nand uses much less memory than the other generators. So, it is suitable for\nfactorizing an integer which is not large but has many prime factors. e.g.\nfor #prime? .\n\n"}, {"c": "Proc", "d": "\nProc objects are blocks of code that have been bound to a set\nof local variables. Once bound, the code may be called in different\ncontexts and still access those variables.\ndef gen_times(factor)\n  return Proc.new {|n| n*factor }\nend\n\ntimes3 = gen_times(3)\ntimes5 = gen_times(5)\n\ntimes3.call(12)               #=> 36\ntimes5.call(5)                #=> 25\ntimes3.call(times5.call(4))   #=> 60\n\n"}, {"c": "Process", "d": "\n"}, {"c": "Profiler__", "d": "\nProfile provides a way to Profile your Ruby application.\nProfiling your program is a way of determining which methods are called and\nhow long each method takes to complete.  This way you can detect which\nmethods are possible bottlenecks.\nProfiling your program will slow down your execution time considerably, so\nactivate it only when you need it.  Don't confuse benchmarking with\nprofiling.\nThere are two ways to activate Profiling:\nCommand line\u00b6 \u2191\nRun your Ruby script with -rprofile:\nruby -rprofile example.rb\nIf you're profiling an executable in your $PATH you can\nuse ruby -S:\nruby -rprofile -S some_executable\nFrom code\u00b6 \u2191\nJust require 'profile':\nrequire 'profile'\n\ndef slow_method\n  5000.times do\n    9999999999999999*999999999\n  end\nend\n\ndef fast_method\n  5000.times do\n    9999999999999999+999999999\n  end\nend\n\nslow_method\nfast_method\n\nThe output in both cases is a report when the execution is over:\nruby -rprofile example.rb\n\n  %   cumulative   self              self     total\n time   seconds   seconds    calls  ms/call  ms/call  name\n 68.42     0.13      0.13        2    65.00    95.00  Integer#times\n 15.79     0.16      0.03     5000     0.01     0.01  Fixnum#*\n 15.79     0.19      0.03     5000     0.01     0.01  Fixnum#+\n  0.00     0.19      0.00        2     0.00     0.00  IO#set_encoding\n  0.00     0.19      0.00        1     0.00   100.00  Object#slow_method\n  0.00     0.19      0.00        2     0.00     0.00  Module#method_added\n  0.00     0.19      0.00        1     0.00    90.00  Object#fast_method\n  0.00     0.19      0.00        1     0.00   190.00  #toplevel\n"}, {"c": "PStore", "d": "\nPStore implements a file based persistence\nmechanism based on a Hash.  User code can store\nhierarchies of Ruby objects (values) into the data store file by name\n(keys).  An object hierarchy may be just a single object.  User code may\nlater read values back from the data store or even update data, as needed.\nThe transactional behavior ensures that any changes succeed or fail\ntogether. This can be used to ensure that the data store is not left in a\ntransitory state, where some values were updated but others were not.\nBehind the scenes, Ruby objects are stored to the data store file with Marshal.  That carries the usual limitations.  Proc objects cannot be marshalled, for example.\nUsage example:\u00b6 \u2191\nrequire \"pstore\"\n\n# a mock wiki object...\nclass WikiPage\n  def initialize( page_name, author, contents )\n    @page_name = page_name\n    @revisions = Array.new\n\n    add_revision(author, contents)\n  end\n\n  attr_reader :page_name\n\n  def add_revision( author, contents )\n    @revisions << { :created  => Time.now,\n                    :author   => author,\n                    :contents => contents }\n  end\n\n  def wiki_page_references\n    [@page_name] + @revisions.last[:contents].scan(/\\b(?:[A-Z]+[a-z]+){2,}/)\n  end\n\n  # ...\nend\n\n# create a new page...\nhome_page = WikiPage.new( \"HomePage\", \"James Edward Gray II\",\n                          \"A page about the JoysOfDocumentation...\" )\n\n# then we want to update page data and the index together, or not at all...\nwiki = PStore.new(\"wiki_pages.pstore\")\nwiki.transaction do  # begin transaction; do all of this or none of it\n  # store page...\n  wiki[home_page.page_name] = home_page\n  # ensure that an index has been created...\n  wiki[:wiki_index] ||= Array.new\n  # update wiki index...\n  wiki[:wiki_index].push(*home_page.wiki_page_references)\nend                   # commit changes to wiki data store file\n\n### Some time later... ###\n\n# read wiki data...\nwiki.transaction(true) do  # begin read-only transaction, no changes allowed\n  wiki.roots.each do |data_root_name|\n    p data_root_name\n    p wiki[data_root_name]\n  end\nend\n\nTransaction modes\u00b6 \u2191\nBy default, file integrity is only ensured as long as the operating system\n(and the underlying hardware) doesn't raise any unexpected I/O errors.\nIf an I/O error occurs while PStore is writing to\nits file, then the file will become corrupted.\nYou can prevent this by setting pstore.ultra_safe = true. However,\nthis results in a minor performance loss, and only works on platforms that\nsupport atomic file renames. Please consult the documentation for\nultra_safe for details.\nNeedless to say, if you're storing valuable data with PStore, then you should backup the PStore files from time to time.\n"}, {"c": "Psych", "d": "\nOverview\u00b6 \u2191\nPsych is a YAML parser and emitter. Psych leverages libyaml [Home page: pyyaml.org/wiki/LibYAML] or [HG\nrepo: bitbucket.org/xi/libyaml] for\nits YAML parsing and emitting capabilities. In addition to wrapping\nlibyaml, Psych also knows how to serialize and\nde-serialize most Ruby objects to and from the YAML format.\nI NEED TO PARSE OR EMIT YAML RIGHT NOW!\u00b6 \u2191\n# Parse some YAML\nPsych.load(\"--- foo\") # => \"foo\"\n\n# Emit some YAML\nPsych.dump(\"foo\")     # => \"--- foo\\n...\\n\"\n{ :a => 'b'}.to_yaml  # => \"---\\n:a: b\\n\"\n\nGot more time on your hands?  Keep on reading!\nYAML Parsing\u00b6 \u2191\nPsych provides a range of interfaces for parsing a\nYAML document ranging from low level to high level, depending on your\nparsing needs.  At the lowest level, is an event based parser.  Mid level\nis access to the raw YAML AST, and at the highest level is the ability to\nunmarshal YAML to Ruby objects.\nYAML Emitting\u00b6 \u2191\nPsych provides a range of interfaces ranging from\nlow to high level for producing YAML documents.  Very similar to the YAML\nparsing interfaces, Psych provides at the lowest\nlevel, an event based system, mid-level is building a YAML AST, and the\nhighest level is converting a Ruby object straight to a YAML document.\nHigh-level API\u00b6 \u2191\nParsing\u00b6 \u2191\nThe high level YAML parser provided by Psych\nsimply takes YAML as input and returns a Ruby data structure.  For\ninformation on using the high level parser see ::load\nReading from a string\u00b6 \u2191\nPsych.load(\"--- a\")             # => 'a'\nPsych.load(\"---\\n - a\\n - b\")   # => ['a', 'b']\n\nReading from a file\u00b6 \u2191\nPsych.load_file(\"database.yml\")\n\nException handling\u00b6 \u2191\nbegin\n  # The second argument changes only the exception contents\n  Psych.parse(\"--- `\", \"file.txt\")\nrescue Psych::SyntaxError => ex\n  ex.file    # => 'file.txt'\n  ex.message # => \"(file.txt): found character that cannot start any token\"\nend\n\nEmitting\u00b6 \u2191\nThe high level emitter has the easiest interface.  Psych simply takes a Ruby data structure and converts\nit to a YAML document.  See ::dump\nfor more information on dumping a Ruby data structure.\nWriting to a string\u00b6 \u2191\n# Dump an array, get back a YAML string\nPsych.dump(['a', 'b'])  # => \"---\\n- a\\n- b\\n\"\n\n# Dump an array to an IO object\nPsych.dump(['a', 'b'], StringIO.new)  # => #<StringIO:0x000001009d0890>\n\n# Dump an array with indentation set\nPsych.dump(['a', ['b']], :indentation => 3) # => \"---\\n- a\\n-  - b\\n\"\n\n# Dump an array to an IO with indentation set\nPsych.dump(['a', ['b']], StringIO.new, :indentation => 3)\n\nWriting to a file\u00b6 \u2191\nCurrently there is no direct API for dumping Ruby structure to file:\nFile.open('database.yml', 'w') do |file|\n  file.write(Psych.dump(['a', 'b']))\nend\n\nMid-level API\u00b6 \u2191\nParsing\u00b6 \u2191\nPsych provides access to an AST produced from\nparsing a YAML document.  This tree is built using the Psych::Parser and Psych::TreeBuilder.  The AST can be\nexamined and manipulated freely.  Please see ::parse_stream, Psych::Nodes, and Psych::Nodes::Node for more information on\ndealing with YAML syntax trees.\nReading from a string\u00b6 \u2191\n# Returns Psych::Nodes::Stream\nPsych.parse_stream(\"---\\n - a\\n - b\")\n\n# Returns Psych::Nodes::Document\nPsych.parse(\"---\\n - a\\n - b\")\n\nReading from a file\u00b6 \u2191\n# Returns Psych::Nodes::Stream\nPsych.parse_stream(File.read('database.yml'))\n\n# Returns Psych::Nodes::Document\nPsych.parse_file('database.yml')\n\nException handling\u00b6 \u2191\nbegin\n  # The second argument changes only the exception contents\n  Psych.parse(\"--- `\", \"file.txt\")\nrescue Psych::SyntaxError => ex\n  ex.file    # => 'file.txt'\n  ex.message # => \"(file.txt): found character that cannot start any token\"\nend\n\nEmitting\u00b6 \u2191\nAt the mid level is building an AST.  This AST is exactly the same as the\nAST used when parsing a YAML document.  Users can build an AST by hand and\nthe AST knows how to emit itself as a YAML document.  See Psych::Nodes, Psych::Nodes::Node, and Psych::TreeBuilder for more information\non building a YAML AST.\nWriting to a string\u00b6 \u2191\n# We need Psych::Nodes::Stream (not Psych::Nodes::Document)\nstream = Psych.parse_stream(\"---\\n - a\\n - b\")\n\nstream.to_yaml # => \"---\\n- a\\n- b\\n\"\n\nWriting to a file\u00b6 \u2191\n# We need Psych::Nodes::Stream (not Psych::Nodes::Document)\nstream = Psych.parse_stream(File.read('database.yml'))\n\nFile.open('database.yml', 'w') do |file|\n  file.write(stream.to_yaml)\nend\n\nLow-level API\u00b6 \u2191\nParsing\u00b6 \u2191\nThe lowest level parser should be used when the YAML input is already\nknown, and the developer does not want to pay the price of building an AST\nor automatic detection and conversion to Ruby objects.  See Psych::Parser for more information on using\nthe event based parser.\nReading to Psych::Nodes::Stream structure\u00b6 \u2191\nparser = Psych::Parser.new(TreeBuilder.new) # => #<Psych::Parser>\nparser = Psych.parser                       # it's an alias for the above\n\nparser.parse(\"---\\n - a\\n - b\")             # => #<Psych::Parser>\nparser.handler                              # => #<Psych::TreeBuilder>\nparser.handler.root                         # => #<Psych::Nodes::Stream>\n\nReceiving an events stream\u00b6 \u2191\nrecorder = Psych::Handlers::Recorder.new\nparser = Psych::Parser.new(recorder)\n\nparser.parse(\"---\\n - a\\n - b\")\nrecorder.events # => [list of [event, args] lists]\n                # event is one of: Psych::Handler::EVENTS\n                # args are the arguments passed to the event\n\nEmitting\u00b6 \u2191\nThe lowest level emitter is an event based system.  Events are sent to a Psych::Emitter object.  That object knows how\nto convert the events to a YAML document.  This interface should be used\nwhen document format is known in advance or speed is a concern.  See Psych::Emitter for more information.\nWriting to a Ruby structure\u00b6 \u2191\nPsych.parser.parse(\"--- a\")       # => #<Psych::Parser>\n\nparser.handler.first              # => #<Psych::Nodes::Stream>\nparser.handler.first.to_ruby      # => [\"a\"]\n\nparser.handler.root.first         # => #<Psych::Nodes::Document>\nparser.handler.root.first.to_ruby # => \"a\"\n\n# You can instantiate an Emitter manually\nPsych::Visitors::ToRuby.new.accept(parser.handler.root.first)\n# => \"a\"\n\n"}, {"c": "PTY", "d": "\nCreates and managed pseudo terminals (PTYs).  See also en.wikipedia.org/wiki/Pseudo_terminal\nPTY allows you to allocate new terminals using ::open or ::spawn a new terminal with a specific\ncommand.\nExample\u00b6 \u2191\nIn this example we will change the buffering type in the\nfactor command, assuming that factor uses stdio for stdout\nbuffering.\nIf IO.pipe is used instead of ::open, this code deadlocks because\nfactor's stdout is fully buffered.\n# start by requiring the standard library PTY\nrequire 'pty'\n\nmaster, slave = PTY.open\nread, write = IO.pipe\npid = spawn(\"factor\", :in=>read, :out=>slave)\nread.close     # we dont need the read\nslave.close    # or the slave\n\n# pipe \"42\" to the factor command\nwrite.puts \"42\"\n# output the response from factor\np master.gets #=> \"42: 2 3 7\\n\"\n\n# pipe \"144\" to factor and print out the response\nwrite.puts \"144\"\np master.gets #=> \"144: 2 2 2 2 3 3\\n\"\nwrite.close # close the pipe\n\n# The result of read operation when pty slave is closed is platform\n# dependent.\nret = begin\n        master.gets     # FreeBSD returns nil.\n      rescue Errno::EIO # GNU/Linux raises EIO.\n        nil\n      end\np ret #=> nil\n\nLicense\u00b6 \u2191\nC) Copyright 1998 by Akinori Ito.\n\nThis software may be redistributed freely for this purpose, in full\nor in part, provided that this entire copyright notice is included\non any copies of this software and applications and derivations thereof.\n\nThis software is provided on an \"as is\" basis, without warranty of any\nkind, either expressed or implied, as to any matter including, but not\nlimited to warranty of fitness of purpose, or merchantability, or\nresults obtained from use of this software.\n"}, {"c": "Queue", "d": "\nThe Queue class implements multi-producer,\nmulti-consumer queues. It is especially useful in threaded programming when\ninformation must be exchanged safely between multiple threads. The Queue class implements all the required locking\nsemantics.\nThe class implements FIFO type of queue. In a FIFO queue, the first tasks\nadded are the first retrieved.\nExample:\nqueue = Queue.new\n\nproducer = Thread.new do\n  5.times do |i|\n     sleep rand(i) # simulate expense\n     queue << i\n     puts \"#{i} produced\"\n  end\nend\n\nconsumer = Thread.new do\n  5.times do |i|\n     value = queue.pop\n     sleep rand(i/2) # simulate expense\n     puts \"consumed #{value}\"\n  end\nend\n\n"}, {"c": "Racc", "d": "\nRacc is a LALR(1) parser generator. It is written\nin Ruby itself, and generates Ruby programs.\nCommand-line Reference\u00b6 \u2191\nracc [-o<var>filename</var>] [--output-file=<var>filename</var>]\n     [-e<var>rubypath</var>] [--embedded=<var>rubypath</var>]\n     [-v] [--verbose]\n     [-O<var>filename</var>] [--log-file=<var>filename</var>]\n     [-g] [--debug]\n     [-E] [--embedded]\n     [-l] [--no-line-convert]\n     [-c] [--line-convert-all]\n     [-a] [--no-omit-actions]\n     [-C] [--check-only]\n     [-S] [--output-status]\n     [--version] [--copyright] [--help] <var>grammarfile</var>\nfilename\n\nRacc grammar file. Any extension is permitted.\n-o+outfile+, \u00e2\u20ac\u201coutput-file=outfile\n\nA filename for output. default is <filename>.tab.rb\n-O+filename+, \u00e2\u20ac\u201clog-file=filename\n\nPlace logging output in file filename. Default log file name\nis <filename>.output.\n-e+rubypath+, \u00e2\u20ac\u201cexecutable=rubypath\n\noutput executable file(mode 755). where path is the Ruby\ninterpreter.\n-v, \u00e2\u20ac\u201cverbose\n\nverbose mode. create filename.output file, like yacc's\ny.output file.\n-g, \u00e2\u20ac\u201cdebug\n\nadd debug code to parser class. To display debugging information, use this\n'-g' option and set @yydebug true in parser class.\n-E, \u00e2\u20ac\u201cembedded\n\nOutput parser which doesn't need runtime files (racc/parser.rb).\n-C, \u00e2\u20ac\u201ccheck-only\n\nCheck syntax of racc grammar file and quit.\n-S, \u00e2\u20ac\u201coutput-status\n\nPrint messages time to time while compiling.\n-l, \u00e2\u20ac\u201cno-line-convert\n\nturns off line number converting.\n-c, \u00e2\u20ac\u201cline-convert-all\n\nConvert line number of actions, inner, header and footer.\n-a, \u00e2\u20ac\u201cno-omit-actions\n\nCall all actions, even if an action is empty.\n\u00e2\u20ac\u201cversion\n\nprint Racc version and quit.\n\u00e2\u20ac\u201ccopyright\n\nPrint copyright and quit.\n\u00e2\u20ac\u201chelp\n\nPrint usage and quit.\n\nGenerating Parser Using Racc\u00b6 \u2191\nTo compile Racc grammar file, simply type:\n$ racc parse.y\nThis creates Ruby script file \u00e2\u20ac\u0153parse.tab.y\u00e2\u20ac. The -o option can change the\noutput filename.\nWriting A Racc Grammar File\u00b6 \u2191\nIf you want your own parser, you have to write a grammar file. A grammar\nfile contains the name of your parser class, grammar for the parser, user\ncode, and anything else. When writing a grammar file, yacc's knowledge\nis helpful. If you have not used yacc before, Racc\nis not too difficult.\nHere's an example Racc grammar file.\nclass Calcparser\nrule\n  target: exp { print val[0] }\n\n  exp: exp '+' exp\n     | exp '*' exp\n     | '(' exp ')'\n     | NUMBER\nend\nRacc grammar files resemble yacc files. But (of\ncourse), this is Ruby code. yacc's $$ is the 'result', $0, $1\u00e2\u20ac\u00a6\nis an array called 'val', and $-1, $-2\u00e2\u20ac\u00a6 is an array called\n'_values'.\nSee the Grammar File\nReference for more information on grammar files.\nParser\u00b6 \u2191\nThen you must prepare the parse entry method. There are two types of parse\nmethods in Racc, Racc::Parser#do_parse and Racc::Parser#yyparse\nRacc::Parser#do_parse is\nsimple.\nIt's yyparse() of yacc, and Racc::Parser#next_token is\nyylex(). This method must returns an array like [TOKENSYMBOL, ITS_VALUE].\nEOF is [false, false]. (TOKENSYMBOL is a Ruby symbol (taken from String#intern) by default. If you\nwant to change this, see the grammar reference.\nRacc::Parser#yyparse is\nlittle complicated, but useful. It does not use Racc::Parser#next_token,\ninstead it gets tokens from any iterator.\nFor example, yyparse(obj, :scan) causes calling +obj#scan+,\nand you can return tokens by yielding them from +obj#scan+.\nDebugging\u00b6 \u2191\nWhen debugging, \u00e2\u20ac\u0153-v\u00e2\u20ac or/and the \u00e2\u20ac\u0153-g\u00e2\u20ac option is helpful.\n\u00e2\u20ac\u0153-v\u00e2\u20ac creates verbose log file (.output). \u00e2\u20ac\u0153-g\u00e2\u20ac creates a \u00e2\u20ac\u0153Verbose Parser\u00e2\u20ac.\nVerbose Parser prints the internal status\nwhen parsing. But it's not automatic. You must use -g option\nand set +@yydebug+ to true in order to get output. -g option\nonly creates the verbose parser.\nRacc reported syntax error.\u00b6 \u2191\nIsn't there too many \u00e2\u20ac\u0153end\u00e2\u20ac? grammar of racc file is changed in v0.10.\nRacc does not use '%' mark, while yacc uses\nhuge number of '%' marks..\nRacc reported \u00e2\u20ac\u0153XXXX conflicts\u00e2\u20ac.\u00b6 \u2191\nTry \u00e2\u20ac\u0153racc -v xxxx.y\u00e2\u20ac. It causes producing racc's internal log file,\nxxxx.output.\nGenerated parsers does not work correctly\u00b6 \u2191\nTry \u00e2\u20ac\u0153racc -g xxxx.y\u00e2\u20ac. This command let racc generate \u00e2\u20ac\u0153debugging parser\u00e2\u20ac.\nThen set @yydebug=true in your parser. It produces a working log of your\nparser.\nRe-distributing Racc runtime\u00b6 \u2191\nA parser, which is created by Racc, requires the Racc runtime module; racc/parser.rb.\nRuby 1.8.x comes with Racc runtime module, you need\nNOT distribute Racc runtime files.\nIf you want to include the Racc runtime module with\nyour parser. This can be done by using '-E' option:\n$ racc -E -omyparser.rb myparser.y\nThis command creates myparser.rb which `includes' Racc runtime. Only you must do is to distribute your\nparser file (myparser.rb).\nNote: parser.rb is LGPL, but your parser is not. Your own parser is\ncompletely yours.\n"}, {"c": "Rake", "d": "\n"}, {"c": "Random", "d": "\nRandom provides an interface to Ruby's\npseudo-random number generator, or PRNG.  The PRNG produces a deterministic\nsequence of bits which approximate true randomness. The sequence may be\nrepresented by integers, floats, or binary strings.\nThe generator may be initialized with either a system-generated or\nuser-supplied seed value by using ::srand.\nThe class method #rand provides the\nbase functionality of Kernel#rand\nalong with better handling of floating point values. These are both\ninterfaces to Random::DEFAULT, the Ruby\nsystem PRNG.\n::new will create a new PRNG with a\nstate independent of Random::DEFAULT,\nallowing multiple generators with different seed values or sequence\npositions to exist simultaneously. Random objects\ncan be marshaled, allowing sequences to be saved and resumed.\nPRNGs are currently implemented as a modified Mersenne Twister with a\nperiod of 2**19937-1.\n"}, {"c": "Range", "d": "\nA Range represents an interval\u00e2\u20ac\u201da set of values with a\nbeginning and an end. Ranges may be constructed using the\ns..e and\ns...e literals, or with ::new. Ranges constructed using\n.. run from the beginning to the end inclusively. Those\ncreated using ... exclude the end value. When used as an\niterator, ranges return each value in the sequence.\n(-1..-5).to_a      #=> []\n(-5..-1).to_a      #=> [-5, -4, -3, -2, -1]\n('a'..'e').to_a    #=> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n('a'...'e').to_a   #=> [\"a\", \"b\", \"c\", \"d\"]\n\nCustom Objects in Ranges\u00b6 \u2191\nRanges can be constructed using any objects that can be compared using the\n<=> operator. Methods that treat the range as a sequence\n(#each and methods inherited from Enumerable)\nexpect the begin object to implement a succ method to return\nthe next object in sequence. The step and include? methods require the\nbegin object to implement succ or to be numeric.\nIn the Xs class below both <=> and\nsucc are implemented so Xs can be used to\nconstruct ranges. Note that the Comparable\nmodule is included so the == method is defined in terms of\n<=>.\nclass Xs                # represent a string of 'x's\n  include Comparable\n  attr :length\n  def initialize(n)\n    @length = n\n  end\n  def succ\n    Xs.new(@length + 1)\n  end\n  def <=>(other)\n    @length <=> other.length\n  end\n  def to_s\n    sprintf \"%2d #{inspect}\", @length\n  end\n  def inspect\n    'x' * @length\n  end\nend\n\nAn example of using Xs to construct a range:\nr = Xs.new(3)..Xs.new(6)   #=> xxx..xxxxxx\nr.to_a                     #=> [xxx, xxxx, xxxxx, xxxxxx]\nr.member?(Xs.new(5))       #=> true\n\n"}, {"c": "RangeError", "d": "\nRaised when a given numerical value is out of range.\n[1, 2, 3].drop(1 << 100)\n\nraises the exception:\nRangeError: bignum too big to convert into `long'\n"}, {"c": "Rational", "d": "\nA rational number can be represented as a pair of integer numbers: a/b\n(b>0), where a is the numerator and b is the denominator. Integer a equals rational a/1 mathematically.\nIn Ruby, you can create rational objects with the Kernel#Rational, #to_r, or rationalize methods or by\nsuffixing r to a literal. The return values will be\nirreducible fractions.\nRational(1)      #=> (1/1)\nRational(2, 3)   #=> (2/3)\nRational(4, -6)  #=> (-2/3)\n3.to_r           #=> (3/1)\n2/3r             #=> (2/3)\n\nYou can also create rational objects from floating-point numbers or\nstrings.\nRational(0.3)    #=> (5404319552844595/18014398509481984)\nRational('0.3')  #=> (3/10)\nRational('2/3')  #=> (2/3)\n\n0.3.to_r         #=> (5404319552844595/18014398509481984)\n'0.3'.to_r       #=> (3/10)\n'2/3'.to_r       #=> (2/3)\n0.3.rationalize  #=> (3/10)\n\nA rational object is an exact number, which helps you to write programs\nwithout any rounding errors.\n10.times.inject(0) {|t| t + 0.1 }              #=> 0.9999999999999999\n10.times.inject(0) {|t| t + Rational('0.1') }  #=> (1/1)\n\nHowever, when an expression includes an inexact component (numerical value\nor operation), it will produce an inexact result.\nRational(10) / 3   #=> (10/3)\nRational(10) / 3.0 #=> 3.3333333333333335\n\nRational(-8) ** Rational(1, 3)\n                   #=> (1.0000000000000002+1.7320508075688772i)\n\n"}, {"c": "RDoc", "d": "\nGem::RDoc provides methods to generate RDoc and ri data for installed gems upon gem\ninstallation.\nThis file is automatically required by RubyGems 1.9 and newer.\n"}, {"c": "RDocTask", "d": "\nRDoc::Task creates the following rake tasks to\ngenerate and clean up RDoc output:\nrdoc\n\nMain task for this RDoc task.\nclobber_rdoc\n\nDelete all the rdoc files.  This target is automatically added to the main\nclobber target.\nrerdoc\n\nRebuild the rdoc files from scratch, even if they are not out of date.\n\nSimple Example:\nrequire 'rdoc/task'\n\nRDoc::Task.new do |rdoc|\n  rdoc.main = \"README.rdoc\"\n  rdoc.rdoc_files.include(\"README.rdoc\", \"lib   /*.rb\")\nend\n\nThe rdoc object passed to the block is an RDoc::Task object. See the attributes list for\nthe RDoc::Task class for available\ncustomization options.\nSpecifying different task names\u00b6 \u2191\nYou may wish to give the task a different name, such as if you are\ngenerating two sets of documentation.  For instance, if you want to have a\ndevelopment set of documentation including private methods:\nrequire 'rdoc/task'\n\nRDoc::Task.new :rdoc_dev do |rdoc|\n  rdoc.main = \"README.doc\"\n  rdoc.rdoc_files.include(\"README.rdoc\", \"lib/   *.rb\")\n  rdoc.options << \"--all\"\nend\n\nThe tasks would then be named :rdoc_dev,\n:clobber_rdoc_dev, and :rerdoc_dev.\nIf you wish to have completely different task names, then pass a Hash as first argument. With the :rdoc,\n:clobber_rdoc and :rerdoc options, you can\ncustomize the task names to your liking.\nFor example:\nrequire 'rdoc/task'\n\nRDoc::Task.new(:rdoc => \"rdoc\", :clobber_rdoc => \"rdoc:clean\",\n               :rerdoc => \"rdoc:force\")\n\nThis will create the tasks :rdoc, :rdoc:clean and\n:rdoc:force.\n"}, {"c": "Readline", "d": "\nThe Readline module provides interface for GNU\nReadline. This module defines a number of\nmethods to facilitate completion and accesses input history from the Ruby\ninterpreter. This module supported Edit Line(libedit) too. libedit is\ncompatible with GNU Readline.\nGNU Readline\n\nwww.gnu.org/directory/readline.html\nlibedit\n\nwww.thrysoee.dk/editline/\n\nReads one inputted line with line edit by ::readline method. At this time,\nthe facilitatation completion and the key bind like Emacs can be operated\nlike GNU Readline.\nrequire \"readline\"\nwhile buf = Readline.readline(\"> \", true)\n  p buf\nend\n\nThe content that the user input can be recorded to the history. The history\ncan be accessed by Readline::HISTORY\nconstant.\nrequire \"readline\"\nwhile buf = Readline.readline(\"> \", true)\n  p Readline::HISTORY.to_a\n  print(\"-> \", buf, \"\\n\")\nend\n\nDocumented by Kouji Takao <kouji dot takao at gmail dot com>.\n"}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": "Regexp", "d": "\nA Regexp holds a regular expression, used to match a pattern\nagainst strings. Regexps are created using the /.../ and\n%r{...} literals, and by the Regexp::new\nconstructor.\nRegular expressions (regexps) are patterns which describe the\ncontents of a string. They're used for testing whether a string\ncontains a given pattern, or extracting the portions that match. They are\ncreated with the /pat/ and\n%r{pat} literals or the\nRegexp.new constructor.\nA regexp is usually delimited with forward slashes (/). For\nexample:\n/hay/ =~ 'haystack'   #=> 0\n/y/.match('haystack') #=> #<MatchData \"y\">\n\nIf a string contains the pattern it is said to match. A literal\nstring matches itself.\nHere 'haystack' does not contain the pattern 'needle', so\nit doesn't match:\n/needle/.match('haystack') #=> nil\n\nHere 'haystack' contains the pattern 'hay', so it matches:\n/hay/.match('haystack')    #=> #<MatchData \"hay\">\n\nSpecifically, /st/ requires that the string contains the\nletter s followed by the letter t, so it matches\nhaystack, also.\n=~ and #match\u00b6 \u2191\nPattern matching may be achieved by using =~ operator or #match method.\n=~ operator\u00b6 \u2191\n=~ is Ruby's basic pattern-matching operator.  When one\noperand is a regular expression and the other is a string then the regular\nexpression is used as a pattern to match against the string.  (This\noperator is equivalently defined by Regexp and\nString so the order of String and Regexp do not\nmatter. Other classes may have different implementations of\n=~.)  If a match is found, the operator returns index of first\nmatch in string, otherwise it returns nil.\n/hay/ =~ 'haystack'   #=> 0\n'haystack' =~ /hay/   #=> 0\n/a/   =~ 'haystack'   #=> 1\n/u/   =~ 'haystack'   #=> nil\n\nUsing =~ operator with a String and Regexp the $~ global variable is set\nafter a successful match.  $~ holds a MatchData object. ::last_match is equivalent to\n$~.\n#match method\u00b6 \u2191\nThe match method returns a MatchData object:\n/st/.match('haystack')   #=> #<MatchData \"st\">\n\nMetacharacters and Escapes\u00b6 \u2191\nThe following are metacharacters (, ),\n[, ], {, },\n., ?, +, *. They have a\nspecific meaning when appearing in a pattern. To match them literally they\nmust be backslash-escaped. To match a backslash literally, backslash-escape\nit: \\\\.\n/1 \\+ 2 = 3\\?/.match('Does 1 + 2 = 3?') #=> #<MatchData \"1 + 2 = 3?\">\n/a\\\\\\\\b/.match('a\\\\\\\\b')                    #=> #<MatchData \"a\\\\b\">\n\nPatterns behave like double-quoted strings so can contain the same\nbackslash escapes.\n/\\s\\u{6771 4eac 90fd}/.match(\"Go to \u00e6\u00b1\u00e4\u00ba\u00ac\u00e9\u0192\u00bd\")\n    #=> #<MatchData \" \u00e6\u00b1\u00e4\u00ba\u00ac\u00e9\u0192\u00bd\">\n\nArbitrary Ruby expressions can be embedded into patterns with the\n#{...} construct.\nplace = \"\u00e6\u00b1\u00e4\u00ba\u00ac\u00e9\u0192\u00bd\"\n/#{place}/.match(\"Go to \u00e6\u00b1\u00e4\u00ba\u00ac\u00e9\u0192\u00bd\")\n    #=> #<MatchData \"\u00e6\u00b1\u00e4\u00ba\u00ac\u00e9\u0192\u00bd\">\n\nCharacter Classes\u00b6 \u2191\nA character class is delimited with square brackets\n([, ]) and lists characters that may appear at\nthat point in the match. /[ab]/ means a or\nb, as opposed to /ab/ which means a followed\nby b.\n/W[aeiou]rd/.match(\"Word\") #=> #<MatchData \"Word\">\n\nWithin a character class the hyphen (-) is a metacharacter\ndenoting an inclusive range of characters. [abcd] is\nequivalent to [a-d]. A range can be followed by another range,\nso [abcdwxyz] is equivalent to [a-dw-z]. The\norder in which ranges or individual characters appear inside a character\nclass is irrelevant.\n/[0-9a-f]/.match('9f') #=> #<MatchData \"9\">\n/[9f]/.match('9f')     #=> #<MatchData \"9\">\n\nIf the first character of a character class is a caret (^) the\nclass is inverted: it matches any character except those named.\n/[^a-eg-z]/.match('f') #=> #<MatchData \"f\">\n\nA character class may contain another character class. By itself this\nisn't useful because [a-z[0-9]] describes the same set as\n[a-z0-9]. However, character classes also support the\n&& operator which performs set intersection on its\narguments. The two can be combined as follows:\n/[a-w&&[^c-g]z]/ # ([a-w] AND ([^c-g] OR z))\n\nThis is equivalent to:\n/[abh-w]/\n\nThe following metacharacters also behave like character classes:\n\n/./ - Any character except a newline.\n\n/./m - Any character (the m modifier enables\nmultiline mode)\n\n/\\w/ - A word character ([a-zA-Z0-9_])\n\n/\\W/ - A non-word character ([^a-zA-Z0-9_]).\nPlease take a look at Bug\n#4044 if using /\\W/ with the /i modifier.\n\n/\\d/ - A digit character ([0-9])\n\n/\\D/ - A non-digit character ([^0-9])\n\n/\\h/ - A hexdigit character ([0-9a-fA-F])\n\n/\\H/ - A non-hexdigit character ([^0-9a-fA-F])\n\n/\\s/ - A whitespace character: /[ \\t\\r\\n\\f\\v]/\n\n/\\S/ - A non-whitespace character: /[^\n\\t\\r\\n\\f\\v]/\n\nPOSIX bracket expressions are also similar to character classes.\nThey provide a portable alternative to the above, with the added benefit\nthat they encompass non-ASCII characters. For instance, /\\d/\nmatches only the ASCII decimal digits (0-9); whereas\n/[[:digit:]]/ matches any character in the Unicode Nd\ncategory.\n\n/[[:alnum:]]/ - Alphabetic and numeric character\n\n/[[:alpha:]]/ - Alphabetic character\n\n/[[:blank:]]/ - Space or tab\n\n/[[:cntrl:]]/ - Control character\n\n/[[:digit:]]/ - Digit\n\n/[[:graph:]]/ - Non-blank character (excludes spaces, control\ncharacters, and similar)\n\n/[[:lower:]]/ - Lowercase alphabetical character\n\n/[[:print:]]/ - Like [:graph:], but includes the space\ncharacter\n\n/[[:punct:]]/ - Punctuation character\n\n/[[:space:]]/ - Whitespace character ([:blank:],\nnewline, carriage return, etc.)\n\n/[[:upper:]]/ - Uppercase alphabetical\n\n/[[:xdigit:]]/ - Digit allowed in a hexadecimal number (i.e.,\n0-9a-fA-F)\n\nRuby also supports the following non-POSIX character classes:\n\n/[[:word:]]/ - A character in one of the following Unicode\ngeneral categories Letter, Mark, Number,\nConnector_Punctuation\n\n/[[:ascii:]]/ - A character in the ASCII character set\n# U+06F2 is \"EXTENDED ARABIC-INDIC DIGIT TWO\"\n/[[:digit:]]/.match(\"\\u06F2\")    #=> #<MatchData \"\\u{06F2}\">\n/[[:upper:]][[:lower:]]/.match(\"Hello\") #=> #<MatchData \"He\">\n/[[:xdigit:]][[:xdigit:]]/.match(\"A6\")  #=> #<MatchData \"A6\">\n\n\nRepetition\u00b6 \u2191\nThe constructs described so far match a single character. They can be\nfollowed by a repetition metacharacter to specify how many times they need\nto occur. Such metacharacters are called quantifiers.\n\n* - Zero or more times\n\n+ - One or more times\n\n? - Zero or one times (optional)\n\n{n} - Exactly n times\n\n{n,} - n or more times\n\n{,m} - m or less times\n\n{n,m} - At least\nn and at most m times\n\nAt least one uppercase character ('H'), at least one lowercase\ncharacter ('e'), two 'l' characters, then one 'o':\n\"Hello\".match(/[[:upper:]]+[[:lower:]]+l{2}o/) #=> #<MatchData \"Hello\">\n\nRepetition is greedy by default: as many occurrences as possible\nare matched while still allowing the overall match to succeed. By contrast,\nlazy matching makes the minimal amount of matches necessary for\noverall success. A greedy metacharacter can be made lazy by following it\nwith ?.\nBoth patterns below match the string. The first uses a greedy quantifier so\n'.+' matches '<a><b>'; the second uses a lazy\nquantifier so '.+?' matches '<a>':\n/<.+>/.match(\"<a><b>\")  #=> #<MatchData \"<a><b>\">\n/<.+?>/.match(\"<a><b>\") #=> #<MatchData \"<a>\">\n\nA quantifier followed by + matches possessively: once\nit has matched it does not backtrack. They behave like greedy quantifiers,\nbut having matched they refuse to \u00e2\u20ac\u0153give up\u00e2\u20ac their match even if this\njeopardises the overall match.\nCapturing\u00b6 \u2191\nParentheses can be used for capturing. The text enclosed by the\nn<sup>th</sup> group of parentheses can be\nsubsequently referred to with n. Within a pattern use the\nbackreference \\n; outside of the pattern use\nMatchData[n].\n'at' is captured by the first group of parentheses, then referred\nto later with \\1:\n/[csh](..) [csh]\\1 in/.match(\"The cat sat in the hat\")\n    #=> #<MatchData \"cat sat in\" 1:\"at\">\n\n#match returns a MatchData object which makes the captured text\navailable with its [] method:\n/[csh](..) [csh]\\1 in/.match(\"The cat sat in the hat\")[1] #=> 'at'\n\nCapture groups can be referred to by name when defined with the\n(?<name>) or\n(?'name') constructs.\n/\\$(?<dollars>\\d+)\\.(?<cents>\\d+)/.match(\"$3.67\")\n    #=> #<MatchData \"$3.67\" dollars:\"3\" cents:\"67\">\n/\\$(?<dollars>\\d+)\\.(?<cents>\\d+)/.match(\"$3.67\")[:dollars] #=> \"3\"\n\nNamed groups can be backreferenced with\n\\k<name>, where name is\nthe group name.\n/(?<vowel>[aeiou]).\\k<vowel>.\\k<vowel>/.match('ototomy')\n    #=> #<MatchData \"ototo\" vowel:\"o\">\n\nNote: A regexp can't use named backreferences and\nnumbered backreferences simultaneously.\nWhen named capture groups are used with a literal regexp on the left-hand\nside of an expression and the =~ operator, the captured text\nis also assigned to local variables with corresponding names.\n/\\$(?<dollars>\\d+)\\.(?<cents>\\d+)/ =~ \"$3.67\" #=> 0\ndollars #=> \"3\"\n\nGrouping\u00b6 \u2191\nParentheses also group the terms they enclose, allowing them to be\nquantified as one atomic whole.\nThe pattern below matches a vowel followed by 2 word characters:\n/[aeiou]\\w{2}/.match(\"Caenorhabditis elegans\") #=> #<MatchData \"aen\">\n\nWhereas the following pattern matches a vowel followed by a word character,\ntwice, i.e. [aeiou]\\w[aeiou]\\w: 'enor'.\n/([aeiou]\\w){2}/.match(\"Caenorhabditis elegans\")\n    #=> #<MatchData \"enor\" 1:\"or\">\n\nThe (?:\u00e2\u20ac\u00a6) construct provides grouping without\ncapturing. That is, it combines the terms it contains into an atomic whole\nwithout creating a backreference. This benefits performance at the slight\nexpense of readability.\nThe first group of parentheses captures 'n' and the second\n'ti'. The second group is referred to later with the backreference\n\\2:\n/I(n)ves(ti)ga\\2ons/.match(\"Investigations\")\n    #=> #<MatchData \"Investigations\" 1:\"n\" 2:\"ti\">\n\nThe first group of parentheses is now made non-capturing with '?:',\nso it still matches 'n', but doesn't create the backreference.\nThus, the backreference \\1 now refers to 'ti'.\n/I(?:n)ves(ti)ga\\1ons/.match(\"Investigations\")\n    #=> #<MatchData \"Investigations\" 1:\"ti\">\n\nAtomic Grouping\u00b6 \u2191\nGrouping can be made atomic with\n(?>pat). This causes the\nsubexpression pat to be matched independently of the rest of the\nexpression such that what it matches becomes fixed for the remainder of the\nmatch, unless the entire subexpression must be abandoned and subsequently\nrevisited. In this way pat is treated as a non-divisible whole.\nAtomic grouping is typically used to optimise patterns so as to prevent the\nregular expression engine from backtracking needlessly.\nThe \" in the pattern below matches the first character of\nthe string, then .* matches Quote\u00e2\u20ac\u0153. This causes the\noverall match to fail, so the text matched by .* is\nbacktracked by one position, which leaves the final character of the string\navailable to match \"\n/\".*\"/.match('\"Quote\"')     #=> #<MatchData \"\\\"Quote\\\"\">\n\nIf .* is grouped atomically, it refuses to backtrack\nQuote\u00e2\u20ac\u0153, even though this means that the overall match fails\n/\"(?>.*)\"/.match('\"Quote\"') #=> nil\n\nSubexpression Calls\u00b6 \u2191\nThe \\g<name> syntax matches the\nprevious subexpression named name, which can be a group name or\nnumber, again. This differs from backreferences in that it re-executes the\ngroup rather than simply trying to re-match the same text.\nThis pattern matches a ( character and assigns it to the\nparen group, tries to call that the paren\nsub-expression again but fails, then matches a literal ):\n/\\A(?<paren>\\(\\g<paren>*\\))*\\z/ =~ '()'\n\n/\\A(?<paren>\\(\\g<paren>*\\))*\\z/ =~ '(())' #=> 0\n# ^1\n#      ^2\n#           ^3\n#                 ^4\n#      ^5\n#           ^6\n#                      ^7\n#                       ^8\n#                       ^9\n#                           ^10\n\n\nMatches at the beginning of the string, i.e. before the first character.\n\nEnters a named capture group called paren\n\nMatches a literal (, the first character in the string\n\nCalls the paren group again, i.e. recurses back to the second\nstep\n\nRe-enters the paren group\n\nMatches a literal (, the second character in the string\n\nTry to call paren a third time, but fail because doing so\nwould prevent an overall successful match\n\nMatch a literal ), the third character in the string. Marks the\nend of the second recursive call\n\nMatch a literal ), the fourth character in the string\n\nMatch the end of the string\n\nAlternation\u00b6 \u2191\nThe vertical bar metacharacter (|) combines two expressions\ninto a single one that matches either of the expressions. Each expression\nis an alternative.\n/\\w(and|or)\\w/.match(\"Feliformia\") #=> #<MatchData \"form\" 1:\"or\">\n/\\w(and|or)\\w/.match(\"furandi\")    #=> #<MatchData \"randi\" 1:\"and\">\n/\\w(and|or)\\w/.match(\"dissemblance\") #=> nil\n\nCharacter Properties\u00b6 \u2191\nThe \\p{} construct matches characters with the named property,\nmuch like POSIX bracket classes.\n\n/\\p{Alnum}/ - Alphabetic and numeric character\n\n/\\p{Alpha}/ - Alphabetic character\n\n/\\p{Blank}/ - Space or tab\n\n/\\p{Cntrl}/ - Control character\n\n/\\p{Digit}/ - Digit\n\n/\\p{Graph}/ - Non-blank character (excludes spaces, control\ncharacters, and similar)\n\n/\\p{Lower}/ - Lowercase alphabetical character\n\n/\\p{Print}/ - Like \\p{Graph}, but includes the\nspace character\n\n/\\p{Punct}/ - Punctuation character\n\n/\\p{Space}/ - Whitespace character ([:blank:],\nnewline, carriage return, etc.)\n\n/\\p{Upper}/ - Uppercase alphabetical\n\n/\\p{XDigit}/ - Digit allowed in a hexadecimal number (i.e.,\n0-9a-fA-F)\n\n/\\p{Word}/ - A member of one of the following Unicode general\ncategory Letter, Mark, Number,\nConnector_Punctuation\n\n/\\p{ASCII}/ - A character in the ASCII character set\n\n/\\p{Any}/ - Any Unicode character (including unassigned\ncharacters)\n\n/\\p{Assigned}/ - An assigned character\n\nA Unicode character's General Category value can also be\nmatched with \\p{Ab} where Ab is\nthe category's abbreviation as described below:\n\n/\\p{L}/ - 'Letter'\n\n/\\p{Ll}/ - 'Letter: Lowercase'\n\n/\\p{Lm}/ - 'Letter: Mark'\n\n/\\p{Lo}/ - 'Letter: Other'\n\n/\\p{Lt}/ - 'Letter: Titlecase'\n\n/\\p{Lu}/ - 'Letter: Uppercase\n\n/\\p{Lo}/ - 'Letter: Other'\n\n/\\p{M}/ - 'Mark'\n\n/\\p{Mn}/ - 'Mark: Nonspacing'\n\n/\\p{Mc}/ - 'Mark: Spacing Combining'\n\n/\\p{Me}/ - 'Mark: Enclosing'\n\n/\\p{N}/ - 'Number'\n\n/\\p{Nd}/ - 'Number: Decimal Digit'\n\n/\\p{Nl}/ - 'Number: Letter'\n\n/\\p{No}/ - 'Number: Other'\n\n/\\p{P}/ - 'Punctuation'\n\n/\\p{Pc}/ - 'Punctuation: Connector'\n\n/\\p{Pd}/ - 'Punctuation: Dash'\n\n/\\p{Ps}/ - 'Punctuation: Open'\n\n/\\p{Pe}/ - 'Punctuation: Close'\n\n/\\p{Pi}/ - 'Punctuation: Initial Quote'\n\n/\\p{Pf}/ - 'Punctuation: Final Quote'\n\n/\\p{Po}/ - 'Punctuation: Other'\n\n/\\p{S}/ - 'Symbol'\n\n/\\p{Sm}/ - 'Symbol: Math'\n\n/\\p{Sc}/ - 'Symbol: Currency'\n\n/\\p{Sc}/ - 'Symbol: Currency'\n\n/\\p{Sk}/ - 'Symbol: Modifier'\n\n/\\p{So}/ - 'Symbol: Other'\n\n/\\p{Z}/ - 'Separator'\n\n/\\p{Zs}/ - 'Separator: Space'\n\n/\\p{Zl}/ - 'Separator: Line'\n\n/\\p{Zp}/ - 'Separator: Paragraph'\n\n/\\p{C}/ - 'Other'\n\n/\\p{Cc}/ - 'Other: Control'\n\n/\\p{Cf}/ - 'Other: Format'\n\n/\\p{Cn}/ - 'Other: Not Assigned'\n\n/\\p{Co}/ - 'Other: Private Use'\n\n/\\p{Cs}/ - 'Other: Surrogate'\n\nLastly, \\p{} matches a character's Unicode\nscript. The following scripts are supported: Arabic,\nArmenian, Balinese, Bengali, Bopomofo,\nBraille, Buginese, Buhid,\nCanadian_Aboriginal, Carian, Cham,\nCherokee, Common, Coptic, Cuneiform,\nCypriot, Cyrillic, Deseret, Devanagari,\nEthiopic, Georgian, Glagolitic, Gothic,\nGreek, Gujarati, Gurmukhi, Han,\nHangul, Hanunoo, Hebrew, Hiragana,\nInherited, Kannada, Katakana, Kayah_Li,\nKharoshthi, Khmer, Lao, Latin,\nLepcha, Limbu, Linear_B, Lycian,\nLydian, Malayalam, Mongolian, Myanmar,\nNew_Tai_Lue, Nko, Ogham, Ol_Chiki,\nOld_Italic, Old_Persian, Oriya,\nOsmanya, Phags_Pa, Phoenician, Rejang,\nRunic, Saurashtra, Shavian, Sinhala,\nSundanese, Syloti_Nagri, Syriac,\nTagalog, Tagbanwa, Tai_Le, Tamil,\nTelugu, Thaana, Thai, Tibetan,\nTifinagh, Ugaritic, Vai, and Yi.\nUnicode codepoint U+06E9 is named \u00e2\u20ac\u0153ARABIC PLACE OF SAJDAH\u00e2\u20ac and belongs to\nthe Arabic script:\n/\\p{Arabic}/.match(\"\\u06E9\") #=> #<MatchData \"\\u06E9\">\n\nAll character properties can be inverted by prefixing their name with a\ncaret (^).\nLetter 'A' is not in the Unicode Ll (Letter; Lowercase) category,\nso this match succeeds:\n/\\p{^Ll}/.match(\"A\") #=> #<MatchData \"A\">\n\nAnchors\u00b6 \u2191\nAnchors are metacharacter that match the zero-width positions between\ncharacters, anchoring the match to a specific position.\n\n^ - Matches beginning of line\n\n$ - Matches end of line\n\n\\A - Matches beginning of string.\n\n\\Z - Matches end of string. If string ends with a newline, it\nmatches just before newline\n\n\\z - Matches end of string\n\n\\G - Matches first matching position:\nIn methods like String#gsub and String#scan, it\nchanges on each iteration. It initially matches the beginning of subject,\nand in each following iteration it matches where the last match finished.\n\"    a b c\".gsub(/ /, '_')    #=> \"____a_b_c\"\n\"    a b c\".gsub(/\\G /, '_')  #=> \"____a b c\"\n\nIn methods like Regexp#match and String#match\nthat take an (optional) offset, it matches where the search begins.\n\"hello, world\".match(/,/, 3)    #=> #<MatchData \",\">\n\"hello, world\".match(/\\G,/, 3)  #=> nil\n\n\n\\b - Matches word boundaries when outside brackets; backspace\n(0x08) when inside brackets\n\n\\B - Matches non-word boundaries\n\n(?=pat) - Positive lookahead\nassertion: ensures that the following characters match pat, but\ndoesn't include those characters in the matched text\n\n(?!pat) - Negative lookahead\nassertion: ensures that the following characters do not match pat,\nbut doesn't include those characters in the matched text\n\n(?<=pat) - Positive\nlookbehind assertion: ensures that the preceding characters match\npat, but doesn't include those characters in the matched text\n\n(?<!pat) - Negative\nlookbehind assertion: ensures that the preceding characters do not\nmatch pat, but doesn't include those characters in the matched\ntext\n\nIf a pattern isn't anchored it can begin at any point in the string:\n/real/.match(\"surrealist\") #=> #<MatchData \"real\">\n\nAnchoring the pattern to the beginning of the string forces the match to\nstart there. 'real' doesn't occur at the beginning of the\nstring, so now the match fails:\n/\\Areal/.match(\"surrealist\") #=> nil\n\nThe match below fails because although 'Demand' contains\n'and', the pattern does not occur at a word boundary.\n/\\band/.match(\"Demand\")\n\nWhereas in the following example 'and' has been anchored to a\nnon-word boundary so instead of matching the first 'and' it matches\nfrom the fourth letter of 'demand' instead:\n/\\Band.+/.match(\"Supply and demand curve\") #=> #<MatchData \"and curve\">\n\nThe pattern below uses positive lookahead and positive lookbehind to match\ntext appearing in  tags without including the tags in the match:\n/(?<=<b>)\\w+(?=<\\/b>)/.match(\"Fortune favours the <b>bold</b>\")\n    #=> #<MatchData \"bold\">\n\nOptions\u00b6 \u2191\nThe end delimiter for a regexp can be followed by one or more single-letter\noptions which control how the pattern can match.\n\n/pat/i - Ignore case\n\n/pat/m - Treat a newline as a character matched by\n.\n\n/pat/x - Ignore whitespace and comments in the pattern\n\n/pat/o - Perform #{} interpolation only once\n\ni, m, and x can also be applied on\nthe subexpression level with the\n(?on-off)\nconstruct, which enables options on, and disables options\noff for the expression enclosed by the parentheses.\n/a(?i:b)c/.match('aBc') #=> #<MatchData \"aBc\">\n/a(?i:b)c/.match('abc') #=> #<MatchData \"abc\">\n\nOptions may also be used with Regexp.new:\nRegexp.new(\"abc\", Regexp::IGNORECASE)                     #=> /abc/i\nRegexp.new(\"abc\", Regexp::MULTILINE)                      #=> /abc/m\nRegexp.new(\"abc # Comment\", Regexp::EXTENDED)             #=> /abc # Comment/x\nRegexp.new(\"abc\", Regexp::IGNORECASE | Regexp::MULTILINE) #=> /abc/mi\n\nFree-Spacing Mode and Comments\u00b6 \u2191\nAs mentioned above, the x option enables free-spacing\nmode. Literal white space inside the pattern is ignored, and the octothorpe\n(#) character introduces a comment until the end of the line.\nThis allows the components of the pattern to be organized in a potentially\nmore readable fashion.\nA contrived pattern to match a number with optional decimal places:\nfloat_pat = /\\A\n    [[:digit:]]+ # 1 or more digits before the decimal point\n    (\\.          # Decimal point\n        [[:digit:]]+ # 1 or more digits after the decimal point\n    )? # The decimal point and following digits are optional\n\\Z/x\nfloat_pat.match('3.14') #=> #<MatchData \"3.14\" 1:\".14\">\n\nThere are a number of strategies for matching whitespace:\n\nUse a pattern such as \\s or \\p{Space}.\n\nUse escaped whitespace such as \\ , i.e. a space preceded by a\nbackslash.\n\nUse a character class such as [ ].\n\nComments can be included in a non-x pattern with the\n(?#comment) construct, where\ncomment is arbitrary text ignored by the regexp engine.\nComments in regexp literals cannot include unescaped terminator characters.\nEncoding\u00b6 \u2191\nRegular expressions are assumed to use the source encoding. This can be\noverridden with one of the following modifiers.\n\n/pat/u - UTF-8\n\n/pat/e - EUC-JP\n\n/pat/s - Windows-31J\n\n/pat/n - ASCII-8BIT\n\nA regexp can be matched against a string when they either share an\nencoding, or the regexp's encoding is US-ASCII and the\nstring's encoding is ASCII-compatible.\nIf a match between incompatible encodings is attempted an\nEncoding::CompatibilityError exception is raised.\nThe Regexp#fixed_encoding? predicate indicates whether the\nregexp has a fixed encoding, that is one incompatible with ASCII.\nA regexp's encoding can be explicitly fixed by supplying\nRegexp::FIXEDENCODING as the second argument of\nRegexp.new:\nr = Regexp.new(\"a\".force_encoding(\"iso-8859-1\"),Regexp::FIXEDENCODING)\nr =~ \"a\\u3042\"\n   # raises Encoding::CompatibilityError: incompatible encoding regexp match\n   #         (ISO-8859-1 regexp with UTF-8 string)\n\nSpecial global variables\u00b6 \u2191\nPattern matching sets some global variables :\n\n$~ is equivalent to ::last_match;\n\n$& contains the complete matched text;\n\n$` contains string before match;\n\n$' contains string after match;\n\n$1, $2 and so on contain text matching first,\nsecond, etc capture group;\n\n$+ contains last capture group.\n\nExample:\nm = /s(\\w{2}).*(c)/.match('haystack') #=> #<MatchData \"stac\" 1:\"ta\" 2:\"c\">\n$~                                    #=> #<MatchData \"stac\" 1:\"ta\" 2:\"c\">\nRegexp.last_match                     #=> #<MatchData \"stac\" 1:\"ta\" 2:\"c\">\n\n$&      #=> \"stac\"\n        # same as m[0]\n$`      #=> \"hay\"\n        # same as m.pre_match\n$'      #=> \"k\"\n        # same as m.post_match\n$1      #=> \"ta\"\n        # same as m[1]\n$2      #=> \"c\"\n        # same as m[2]\n$3      #=> nil\n        # no third group in pattern\n$+      #=> \"c\"\n        # same as m[-1]\n\nThese global variables are thread-local and method-local variables.\nPerformance\u00b6 \u2191\nCertain pathological combinations of constructs can lead to abysmally bad\nperformance.\nConsider a string of 25 as, a d, 4 as, and a\nc.\ns = 'a' * 25 + 'd' + 'a' * 4 + 'c'\n#=> \"aaaaaaaaaaaaaaaaaaaaaaaaadaaaac\"\n\nThe following patterns match instantly as you would expect:\n/(b|a)/ =~ s #=> 0\n/(b|a+)/ =~ s #=> 0\n/(b|a+)*/ =~ s #=> 0\n\nHowever, the following pattern takes appreciably longer:\n/(b|a+)*c/ =~ s #=> 26\n\nThis happens because an atom in the regexp is quantified by both an\nimmediate + and an enclosing * with nothing to\ndifferentiate which is in control of any particular character. The\nnondeterminism that results produces super-linear performance. (Consult\nMastering Regular Expressions (3rd ed.), pp 222, by Jeffery\nFriedl, for an in-depth analysis). This particular case can be fixed\nby use of atomic grouping, which prevents the unnecessary backtracking:\n(start = Time.now) && /(b|a+)*c/ =~ s && (Time.now - start)\n   #=> 24.702736882\n(start = Time.now) && /(?>b|a+)*c/ =~ s && (Time.now - start)\n   #=> 0.000166571\n\nA similar case is typified by the following example, which takes\napproximately 60 seconds to execute for me:\nMatch a string of 29 as against a pattern of 29 optional\nas followed by 29 mandatory as:\nRegexp.new('a?' * 29 + 'a' * 29) =~ 'a' * 29\n\nThe 29 optional as match the string, but this prevents the 29\nmandatory as that follow from matching. Ruby must then backtrack\nrepeatedly so as to satisfy as many of the optional matches as it can while\nstill matching the mandatory 29. It is plain to us that none of the\noptional matches can succeed, but this fact unfortunately eludes Ruby.\nThe best way to improve performance is to significantly reduce the amount\nof backtracking needed.  For this case, instead of individually matching 29\noptional as, a range of optional as can be matched all at\nonce with a{0,29}:\nRegexp.new('a{0,29}' + 'a' * 29) =~ 'a' * 29\n\n"}, {"c": "RegexpError", "d": "\nRaised when given an invalid regexp expression.\nRegexp.new(\"?\")\n\nraises the exception:\nRegexpError: target of repeat operator is not specified: /?/\n"}, {"c": null, "d": ""}, {"c": "Resolv", "d": "\nResolv is a thread-aware DNS resolver library written in Ruby.  Resolv can handle multiple DNS requests concurrently without blocking the\nentire Ruby interpreter.\nSee also resolv-replace.rb to replace the libc resolver with Resolv.\nResolv can look up various DNS resources using the DNS module directly.\nExamples:\np Resolv.getaddress \"www.ruby-lang.org\"\np Resolv.getname \"210.251.121.214\"\n\nResolv::DNS.open do |dns|\n  ress = dns.getresources \"www.ruby-lang.org\", Resolv::DNS::Resource::IN::A\n  p ress.map(&:address)\n  ress = dns.getresources \"ruby-lang.org\", Resolv::DNS::Resource::IN::MX\n  p ress.map { |r| [r.exchange.to_s, r.preference] }\nend\n\nBugs\u00b6 \u2191\n\nNIS is not supported.\n\n/etc/nsswitch.conf is not supported.\n\n"}, {"c": "REXML", "d": "\n :element, parent, name, attributes, children* \n\na = Node.new a << \u00e2\u20ac\u0153B\u00e2\u20ac            # => <a>B</a> a.b    \n# => <a>B<b/></a> a.b                 \n# => <a>B<b/><b/><a> a.b[\u00e2\u20ac\u0153x\u00e2\u20ac] =\n\u00e2\u20ac\u0153y\u00e2\u20ac   # => <a>B<b/><b x=\u00e2\u20ac\u0153y\u00e2\u20ac/></a> a.b.c            # =>\n<a>B<c/><b x=\u00e2\u20ac\u0153y\u00e2\u20ac/></a> a.b.c\n<< \u00e2\u20ac\u0153D\u00e2\u20ac                # =>\n<a>B<c>D</c><b x=\u00e2\u20ac\u0153y\u00e2\u20ac/></a>\n\nREXML is an XML toolkit for\nRuby, in Ruby.\nREXML is a pure Ruby, XML 1.0 conforming, non-validating\ntoolkit with an intuitive API.  REXML passes 100%\nof the non-validating Oasis tests,\nand provides tree, stream, SAX2, pull, and lightweight APIs.  REXML also includes a full XPath 1.0 implementation. Since Ruby\n1.8, REXML is included in the standard Ruby\ndistribution.\nMain page\n\nwww.germane-software.com/software/rexml\nAuthor\n\nSean Russell <serATgermaneHYPHENsoftwareDOTcom>\nDate\n\n2008/019\nVersion\n\n3.1.7.3\n\nThis API documentation can be downloaded from the REXML home page, or can be accessed online\nA tutorial is available in the REXML distribution\nin docs/tutorial.html, or can be accessed online\n"}, {"c": "Rinda", "d": "\nA module to implement the Linda distributed computing paradigm in Ruby.\nRinda is part of DRb\n(dRuby).\nExample(s)\u00b6 \u2191\nSee the sample/drb/ directory in the Ruby distribution, from 1.8.2 onwards.\n"}, {"c": "Ripper", "d": "\nRipper is a Ruby script parser.\nYou can get information from the parser with event-based style. Information\nsuch as abstract syntax trees or simple lexical analysis of the Ruby\nprogram.\nUsage\u00b6 \u2191\nRipper provides an easy interface for parsing\nyour program into a symbolic expression tree (or S-expression).\nUnderstanding the output of the parser may come as a challenge, it's\nrecommended you use PP to format the output for\nlegibility.\nrequire 'ripper'\nrequire 'pp'\n\npp Ripper.sexp('def hello(world) \"Hello, #{world}!\"; end')\n  #=> [:program,\n       [[:def,\n         [:@ident, \"hello\", [1, 4]],\n         [:paren,\n          [:params, [[:@ident, \"world\", [1, 10]]], nil, nil, nil, nil, nil, nil]],\n         [:bodystmt,\n          [[:string_literal,\n            [:string_content,\n             [:@tstring_content, \"Hello, \", [1, 18]],\n             [:string_embexpr, [[:var_ref, [:@ident, \"world\", [1, 27]]]]],\n             [:@tstring_content, \"!\", [1, 33]]]]],\n          nil,\n          nil,\n          nil]]]]\nYou can see in the example above, the expression starts with\n:program.\nFrom here, a method definition at :def, followed by the\nmethod's identifier :@ident. After the method's\nidentifier comes the parentheses :paren and the method\nparameters under :params.\nNext is the method body, starting at :bodystmt\n(stmt meaning statement), which contains the full definition\nof the method.\nIn our case, we're simply returning a String, so next we have the\n:string_literal expression.\nWithin our :string_literal you'll notice two\n@tstring_content, this is the literal part for Hello,\n and !. Between the two @tstring_content\nstatements is a :string_embexpr, where embexpr is an\nembedded expression. Our expression consists of a local variable, or\nvar_ref, with the identifier (@ident) of\nworld.\nResources\u00b6 \u2191\n\nRuby\nInside\n\nRequirements\u00b6 \u2191\n\nruby 1.9 (support CVS HEAD only)\n\nbison 1.28 or later (Other yaccs do not work)\n\nLicense\u00b6 \u2191\nRuby License.\n\nMinero Aoki\n\naamine@loveruby.net\n\ni.loveruby.net\n\n"}, {"c": "RSS", "d": "\nRSS reading and writing\u00b6 \u2191\nReally Simple Syndication (RSS) is a family of formats that describe\n'feeds,' specially constructed XML\ndocuments that allow an interested person to subscribe and receive updates\nfrom a particular web service. This portion of the standard library\nprovides tooling to read and create these feeds.\nThe standard library supports RSS 0.91, 1.0, 2.0,\nand Atom, a related format. Here are some links\nto the standards documents for these formats:\n\nRSS\n\n0.9.1\n\n1.0\n\n2.0\n\n\nAtom\n\nConsuming RSS\u00b6 \u2191\nIf you'd like to read someone's RSS feed\nwith your Ruby code, you've come to the right place. It's really\neasy to do this, but we'll need the help of open-uri:\nrequire 'rss'\nrequire 'open-uri'\n\nurl = 'http://www.ruby-lang.org/en/feeds/news.rss'\nopen(url) do |rss|\n  feed = RSS::Parser.parse(rss)\n  puts \"Title: #{feed.channel.title}\"\n  feed.items.each do |item|\n    puts \"Item: #{item.title}\"\n  end\nend\n\nAs you can see, the workhorse is RSS::Parser#parse, which takes the source\nof the feed and a parameter that performs validation on the feed. We get\nback an object that has all of the data from our feed, accessible through\nmethods. This example shows getting the title out of the channel element,\nand looping through the list of items.\nProducing RSS\u00b6 \u2191\nProducing our own RSS feeds is easy as well.\nLet's make a very basic feed:\nrequire \"rss\"\n\nrss = RSS::Maker.make(\"atom\") do |maker|\n  maker.channel.author = \"matz\"\n  maker.channel.updated = Time.now.to_s\n  maker.channel.about = \"http://www.ruby-lang.org/en/feeds/news.rss\"\n  maker.channel.title = \"Example Feed\"\n\n  maker.items.new_item do |item|\n    item.link = \"http://www.ruby-lang.org/en/news/2010/12/25/ruby-1-9-2-p136-is-released/\"\n    item.title = \"Ruby 1.9.2-p136 is released\"\n    item.updated = Time.now.to_s\n  end\nend\n\nputs rss\n\nAs you can see, this is a very Builder-like DSL. This code will spit out an\nAtom feed with one item. If we needed a second\nitem, we'd make another block with maker.items.new_item and build a\nsecond one.\nCopyright\u00b6 \u2191\nCopyright \u00c2\u00a9 2003-2007 Kouhei Sutou <kou@cozmixng.org>\nYou can redistribute it and/or modify it under the same terms as Ruby.\nThere is an additional tutorial by the author of RSS\nat: www.cozmixng.org/~rwiki/?cmd=view;name=RSS+Parser%3A%3ATutorial.en\n"}, {"c": "RubyLex", "d": "\n"}, {"c": "RubyToken", "d": "\n"}, {"c": "RubyVM", "d": "\n::RubyVM\n"}, {"c": "RuntimeError", "d": "\nA generic error class raised when an invalid operation is attempted. Kernel#raise will raise a RuntimeError if no Exception class is specified.\nraise \"ouch\"\n\nraises the exception:\nRuntimeError: ouch\n"}, {"c": "Scanf", "d": "\nscanf for Ruby\nDescription\u00b6 \u2191\nscanf is an implementation of the C function scanf(3), modified as\nnecessary for Ruby compatibility.\nthe methods provided are String#scanf, IO#scanf, and Kernel#scanf. Kernel#scanf is a wrapper around\nSTDIN.scanf.  IO#scanf can be used on\nany IO stream, including file handles and sockets.\nscanf can be called either with or without a block.\nScanf scans an input string or stream according to\na format, as described below in Conversions, and returns\nan array of matches between the format and the input.  The format is\ndefined in a string, and is similar (though not identical) to the formats\nused in Kernel#printf and Kernel#sprintf.\nThe format may contain conversion specifiers, which tell\nscanf what form (type) each particular matched substring should be\nconverted to (e.g., decimal integer, floating point number, literal string,\netc.)  The matches and conversions take place from left to right, and the\nconversions themselves are returned as an array.\nThe format string may also contain characters other than those in the\nconversion specifiers.  White space (blanks, tabs, or newlines) in the\nformat string matches any amount of white space, including none, in the\ninput.  Everything else matches only itself.\nScanning stops, and scanf returns, when any input character fails to match\nthe specifications in the format string, or when input is exhausted, or\nwhen everything in the format string has been matched. All matches found up\nto the stopping point are returned in the return array (or yielded to the\nblock, if a block was given).\nBasic usage\u00b6 \u2191\nrequire 'scanf'\n\n# String#scanf and IO#scanf take a single argument, the format string\narray = a_string.scanf(\"%d%s\")\narray = an_io.scanf(\"%d%s\")\n\n# Kernel#scanf reads from STDIN\narray = scanf(\"%d%s\")\n\nBlock usage\u00b6 \u2191\nWhen called with a block, scanf keeps scanning the input, cycling back to\nthe beginning of the format string, and yields a new array of conversions\nto the block every time the format string is matched (including partial\nmatches, but not including complete failures).  The actual return value of\nscanf when called with a block is an array containing the results of all\nthe executions of the block.\nstr = \"123 abc 456 def 789 ghi\"\nstr.scanf(\"%d%s\") { |num,str| [ num * 2, str.upcase ] }\n# => [[246, \"ABC\"], [912, \"DEF\"], [1578, \"GHI\"]]\n\nConversions\u00b6 \u2191\nThe single argument to scanf is a format string, which generally includes\none or more conversion specifiers.  Conversion specifiers begin with the\npercent character ('%') and include information about what scanf\nshould next scan for (string, decimal number, single character, etc.).\nThere may be an optional maximum field width, expressed as a decimal\ninteger, between the % and the conversion.  If no width is given, a default\nof `infinity' is used (with the exception of the %c specifier; see\nbelow).  Otherwise, given a field width of n for a given\nconversion, at most n characters are scanned in processing that\nconversion.  Before conversion begins, most conversions skip white space in\nthe input string; this white space is not counted against the field width.\nThe following conversions are available.\n%\n\nMatches a literal `%'. That is, `%%' in the format string matches a\nsingle input `%' character. No conversion is done, and the resulting\n'%' is not included in the return array.\nd\n\nMatches an optionally signed decimal integer.\nu\n\nSame as d.\ni\n\nMatches an optionally signed integer. The integer is read in base 16 if it\nbegins with `0x' or `0X', in base 8 if it begins with `0', and\nin base 10 other- wise. Only characters that correspond to the base are\nrecognized.\no\n\nMatches an optionally signed octal integer.\nx, X\n\nMatches an optionally signed hexadecimal integer,\na, e, f, g, A, E, F, G\n\nMatches an optionally signed floating-point number.\ns\n\nMatches a sequence of non-white-space character. The input string stops at\nwhite space or at the maximum field width, whichever occurs first.\nc\n\nMatches a single character, or a sequence of n characters if a\nfield width of n is specified. The usual skip of leading white\nspace is suppressed. To skip white space first, use an explicit space in\nthe format.\n[\n\nMatches a nonempty sequence of characters from the specified set of\naccepted characters.  The usual skip of leading white space is suppressed. \nThis bracketed sub-expression is interpreted exactly like a character class\nin a Ruby regular expression.  (In fact, it is placed as-is in a regular\nexpression.)  The matching against the input string ends with the\nappearance of a character not in (or, with a circumflex, in) the set, or\nwhen the field width runs out, whichever comes first.\n\nAssignment suppression\u00b6 \u2191\nTo require that a particular match occur, but without including the result\nin the return array, place the assignment suppression\nflag, which is the star character ('*'), immediately after\nthe leading '%' of a format specifier (just before the field width,\nif any).\nscanf for Ruby compared with scanf in C\u00b6 \u2191\nscanf for Ruby is based on the C function scanf(3), but with modifications,\ndictated mainly by the underlying differences between the languages.\nUnimplemented flags and specifiers\u00b6 \u2191\n\nThe only flag implemented in scanf for Ruby is '*'\n(ignore upcoming conversion).  Many of the flags available in C versions of\nscanf(3) have to do with the type of upcoming pointer arguments, and are\nmeaningless in Ruby.\n\nThe n specifier (store number of characters consumed so far in\nnext pointer) is not implemented.\n\nThe p specifier (match a pointer value) is not implemented.\n\nAltered specifiers\u00b6 \u2191\no, u, x, X\n\nIn scanf for Ruby, all of these specifiers scan for an optionally signed\ninteger, rather than for an unsigned integer like their C counterparts.\n\nReturn values\u00b6 \u2191\nscanf for Ruby returns an array of successful conversions, whereas scanf(3)\nreturns the number of conversions successfully completed. (See below for\nmore details on scanf for Ruby's return values.)\nReturn values\u00b6 \u2191\nWithout a block, scanf returns an array containing all the conversions it\nhas found.  If none are found, scanf will return an empty array. An\nunsuccessful match is never ignored, but rather always signals the end of\nthe scanning operation.  If the first unsuccessful match takes place after\none or more successful matches have already taken place, the returned array\nwill contain the results of those successful matches.\nWith a block scanf returns a 'map'-like array of transformations\nfrom the block \u00e2\u20ac\u201c that is, an array reflecting what the block did with each\nyielded result from the iterative scanf operation.  (See \u00e2\u20ac\u0153Block usage\u00e2\u20ac,\nabove.)\nCurrent limitations and bugs\u00b6 \u2191\nWhen using IO#scanf under Windows,\nmake sure you open your files in binary mode:\nFile.open(\"filename\", \"rb\")\n\nso that scanf can keep track of characters correctly.\nSupport for character classes is reasonably complete (since it essentially\npiggy-backs on Ruby's regular expression handling of character\nclasses), but users are advised that character class testing has not been\nexhaustive, and that they should exercise some caution in using any of the\nmore complex and/or arcane character class idioms.\nLicense and copyright\u00b6 \u2191\nCopyright\n\n\u00c2\u00a9 2002-2003 David Alan Black\nLicense\n\nDistributed on the same licensing terms as Ruby itself\n\nWarranty disclaimer\u00b6 \u2191\nThis software is provided \u00e2\u20ac\u0153as is\u00e2\u20ac and without any express or implied\nwarranties, including, without limitation, the implied warranties of\nmerchantability and fitness for a particular purpose.\nCredits and acknowledgements\u00b6 \u2191\nscanf was developed as the major activity of the Austin Ruby Codefest\n(Austin, Texas, August 2002).\nPrincipal author\n\nDavid Alan Black (dblack@superlink.net)\nCo-author\n\nHal Fulton (hal9000@hypermetrics.com)\nProject contributors\n\nNolan Darilek, Jason Johnston\n\nThanks to Hal Fulton for hosting the Codefest.\nThanks to Matz for suggestions about the class design.\nThanks to Gavin Sinclair for some feedback on the documentation.\nThe text for parts of this document, especially the Description and\nConversions sections, above, were adapted from the Linux Programmer's\nManual manpage for scanf(3), dated 1995-11-01.\nBugs and bug reports\u00b6 \u2191\nscanf for Ruby is based on something of an amalgam of C scanf\nimplementations and documentation, rather than on a single canonical\ndescription.  Suggestions for features and behaviors which appear in other\nscanfs, and would be meaningful in Ruby, are welcome, as are reports of\nsuspicious behaviors and/or bugs.  (Please see \u00e2\u20ac\u0153Credits and\nacknowledgements\u00e2\u20ac, above, for email addresses.)\n"}, {"c": "ScriptError", "d": "\nScriptError is the superclass for errors\nraised when a script can not be executed because of a\nLoadError, NotImplementedError or a\nSyntaxError. Note these type of ScriptErrors are\nnot StandardError and will not be rescued unless it is\nspecified explicitly (or its ancestor Exception).\n"}, {"c": "SDBM", "d": "\nSDBM provides a simple file-based key-value store,\nwhich can only store String keys and values.\nNote that Ruby comes with the source code for SDBM,\nwhile the DBM and GDBM\nstandard libraries rely on external libraries and headers.\nExamples\u00b6 \u2191\nInsert values:\nrequire 'sdbm'\n\nSDBM.open 'my_database' do |db|\n  db['apple'] = 'fruit'\n  db['pear'] = 'fruit'\n  db['carrot'] = 'vegetable'\n  db['tomato'] = 'vegetable'\nend\n\nBulk update:\nrequire 'sdbm'\n\nSDBM.open 'my_database' do |db|\n  db.update('peach' => 'fruit', 'tomato' => 'fruit')\nend\n\nRetrieve values:\nrequire 'sdbm'\n\nSDBM.open 'my_database' do |db|\n  db.each do |key, value|\n    puts \"Key: #{key}, Value: #{value}\"\n  end\nend\n\nOutputs:\nKey: apple, Value: fruit\nKey: pear, Value: fruit\nKey: carrot, Value: vegetable\nKey: peach, Value: fruit\nKey: tomato, Value: fruit\n"}, {"c": "SDBMError", "d": "\nException class used to return errors from the\nsdbm library.\n"}, {"c": "SecureRandom", "d": "\nSecure random number generator interface.\u00b6 \u2191\nThis library is an interface to secure random number generators which are\nsuitable for generating session keys in HTTP cookies, etc.\nYou can use this library in your application by requiring it:\nrequire 'securerandom'\n\nIt supports the following secure random number generators:\n\nopenssl\n\n/dev/urandom\n\nWin32\n\nExamples\u00b6 \u2191\nGenerate random hexadecimal strings:\nrequire 'securerandom'\n\np SecureRandom.hex(10) #=> \"52750b30ffbc7de3b362\"\np SecureRandom.hex(10) #=> \"92b15d6c8dc4beb5f559\"\np SecureRandom.hex(13) #=> \"39b290146bea6ce975c37cfc23\"\n\nGenerate random base64 strings:\np SecureRandom.base64(10) #=> \"EcmTPZwWRAozdA==\"\np SecureRandom.base64(10) #=> \"KO1nIU+p9DKxGg==\"\np SecureRandom.base64(12) #=> \"7kJSM/MzBJI+75j8\"\n\nGenerate random binary strings:\np SecureRandom.random_bytes(10) #=> \"\\016\\t{\\370g\\310pbr\\301\"\np SecureRandom.random_bytes(10) #=> \"\\323U\\030TO\\234\\357\\020\\a\\337\"\n\nGenerate UUIDs:\np SecureRandom.uuid #=> \"2d931510-d99f-494a-8c67-87feb05e1594\"\np SecureRandom.uuid #=> \"bad85eb9-0713-4da7-8d36-07a8e4b00eab\"\n\n"}, {"c": "SecurityError", "d": "\nRaised when attempting a potential unsafe operation, typically when the\n$SAFE level is raised above 0.\nfoo = \"bar\"\nproc = Proc.new do\n  $SAFE = 3\n  foo.untaint\nend\nproc.call\n\nraises the exception:\nSecurityError: Insecure: Insecure operation `untaint' at level 3\n"}, {"c": null, "d": ""}, {"c": "Set", "d": "\nSet implements a collection of unordered values with\nno duplicates. This is a hybrid of Array's intuitive inter-operation\nfacilities and Hash's fast lookup.\nSet is easy to use with Enumerable objects (implementing\neach). Most of the initializer methods and binary operators\naccept generic Enumerable objects besides\nsets and arrays.  An Enumerable object can be\nconverted to Set using the to_set\nmethod.\nSet uses Hash as storage, so\nyou must note the following points:\n\nEquality of elements is determined according to Object#eql? and Object#hash.  Use #compare_by_identity to\nmake a set compare its elements by their identity.\n\nSet assumes that the identity of each element does\nnot change while it is stored.  Modifying an element of a set will render\nthe set to an unreliable state.\n\nWhen a string is to be stored, a frozen copy of the string is stored\ninstead unless the original string is already frozen.\n\nComparison\u00b6 \u2191\nThe comparison operators <, >, <=, and >= are implemented as\nshorthand for the {proper_,}{subset?,superset?} methods.  However, the\n<=> operator is intentionally left out because not every pair of sets\nis comparable ({x, y} vs. {x, z} for example).\nExample\u00b6 \u2191\nrequire 'set'\ns1 = Set[1, 2]                        #=> #<Set: {1, 2}>\ns2 = [1, 2].to_set                    #=> #<Set: {1, 2}>\ns1 == s2                              #=> true\ns1.add(\"foo\")                         #=> #<Set: {1, 2, \"foo\"}>\ns1.merge([2, 6])                      #=> #<Set: {1, 2, \"foo\", 6}>\ns1.subset?(s2)                        #=> false\ns2.subset?(s1)                        #=> true\n\nContact\u00b6 \u2191\n- Akinori MUSHA <knu@iDaemons.org> (current maintainer)\n"}, {"c": "Shell", "d": "\nShell implements an idiomatic Ruby interface for\ncommon UNIX shell commands.\nIt provides users the ability to execute commands with filters and pipes,\nlike sh/csh by using native facilities of Ruby.\nExamples\u00b6 \u2191\nTemp file creation\u00b6 \u2191\nIn this example we will create three tmpFile's in three\ndifferent folders under the /tmp directory.\nsh = Shell.cd(\"/tmp\") # Change to the /tmp directory\nsh.mkdir \"shell-test-1\" unless sh.exists?(\"shell-test-1\")\n# make the 'shell-test-1' directory if it doesn't already exist\nsh.cd(\"shell-test-1\") # Change to the /tmp/shell-test-1 directory\nfor dir in [\"dir1\", \"dir3\", \"dir5\"]\n  if !sh.exists?(dir)\n    sh.mkdir dir # make dir if it doesn't already exist\n    sh.cd(dir) do\n      # change to the `dir` directory\n      f = sh.open(\"tmpFile\", \"w\") # open a new file in write mode\n      f.print \"TEST\\n\"            # write to the file\n      f.close                     # close the file handler\n    end\n    print sh.pwd                  # output the process working directory\n  end\nend\n\nTemp file creation with self\u00b6 \u2191\nThis example is identical to the first, except we're using Shell::CommandProcessor#transact.\nShell::CommandProcessor#transact\nexecutes the given block against self, in this case sh; our Shell object. Within the block we can substitute\nsh.cd to cd, because the scope within the block\nuses sh already.\nsh = Shell.cd(\"/tmp\")\nsh.transact do\n  mkdir \"shell-test-1\" unless exists?(\"shell-test-1\")\n  cd(\"shell-test-1\")\n  for dir in [\"dir1\", \"dir3\", \"dir5\"]\n    if !exists?(dir)\n      mkdir dir\n      cd(dir) do\n        f = open(\"tmpFile\", \"w\")\n        f.print \"TEST\\n\"\n        f.close\n      end\n      print pwd\n    end\n  end\nend\n\nPipe /etc/printcap into a file\u00b6 \u2191\nIn this example we will read the operating system file\n/etc/printcap, generated by cupsd, and then\noutput it to a new file relative to the pwd of\nsh.\nsh = Shell.new\nsh.cat(\"/etc/printcap\") | sh.tee(\"tee1\") > \"tee2\"\n(sh.cat < \"/etc/printcap\") | sh.tee(\"tee11\") > \"tee12\"\nsh.cat(\"/etc/printcap\") | sh.tee(\"tee1\") >> \"tee2\"\n(sh.cat < \"/etc/printcap\") | sh.tee(\"tee11\") >> \"tee12\"\n\n"}, {"c": "Shellwords", "d": "\nManipulates strings like the UNIX Bourne shell\u00b6 \u2191\nThis module manipulates strings according to the word parsing rules of the\nUNIX Bourne shell.\nThe shellwords() function was originally a port of shellwords.pl, but\nmodified to conform to the Shell & Utilities\nvolume of the IEEE Std 1003.1-2008, 2016 Edition [1].\nUsage\u00b6 \u2191\nYou can use Shellwords to parse a string into\na Bourne shell friendly Array.\nrequire 'shellwords'\n\nargv = Shellwords.split('three blind \"mice\"')\nargv #=> [\"three\", \"blind\", \"mice\"]\n\nOnce you've required Shellwords, you can\nuse the split alias String#shellsplit.\nargv = \"see how they run\".shellsplit\nargv #=> [\"see\", \"how\", \"they\", \"run\"]\n\nBe careful you don't leave a quote unmatched.\nargv = \"they all ran after the farmer's wife\".shellsplit\n     #=> ArgumentError: Unmatched double quote: ...\n\nIn this case, you might want to use ::escape, or its alias String#shellescape.\nThis method will escape the String for you to safely use with a Bourne\nshell.\nargv = Shellwords.escape(\"special's.txt\")\nargv #=> \"special\\\\'s.txt\"\nsystem(\"cat \" + argv)\n\nShellwords also comes with a core extension\nfor Array, Array#shelljoin.\nargv = %w{ls -lta lib}\nsystem(argv.shelljoin)\n\nYou can use this method to create an escaped string out of an array of\ntokens separated by a space. In this example we used the literal shortcut\nfor Array.new.\nAuthors\u00b6 \u2191\n\nWakou Aoyama\n\nAkinori MUSHA <knu@iDaemons.org>\n\nContact\u00b6 \u2191\n\nAkinori MUSHA <knu@iDaemons.org> (current maintainer)\n\nResources\u00b6 \u2191\n1: IEEE\nStd 1003.1-2008, 2016 Edition, the Shell & Utilities volume\n"}, {"c": "Signal", "d": "\nMany operating systems allow signals to be sent to running processes. Some\nsignals have a defined effect on the process, while others may be trapped\nat the code level and acted upon. For example, your process may trap the\nUSR1 signal and use it to toggle debugging, and may use TERM to initiate a\ncontrolled shutdown.\npid = fork do\n  Signal.trap(\"USR1\") do\n    $debug = !$debug\n    puts \"Debug now: #$debug\"\n  end\n  Signal.trap(\"TERM\") do\n    puts \"Terminating...\"\n    shutdown()\n  end\n  # . . . do some work . . .\nend\n\nProcess.detach(pid)\n\n# Controlling program:\nProcess.kill(\"USR1\", pid)\n# ...\nProcess.kill(\"USR1\", pid)\n# ...\nProcess.kill(\"TERM\", pid)\n\nproduces:\n Debug now: true\n Debug now: false\nTerminating...\nThe list of available signal names and their interpretation is system\ndependent. Signal delivery semantics may also\nvary between systems; in particular signal delivery may not always be\nreliable.\n"}, {"c": "SignalException", "d": "\nRaised when a signal is received.\nbegin\n  Process.kill('HUP',Process.pid)\n  sleep # wait for receiver to handle signal sent by Process.kill\nrescue SignalException => e\n  puts \"received Exception #{e}\"\nend\n\nproduces:\nreceived Exception SIGHUP\n\n"}, {"c": "SimpleDelegator", "d": "\nA concrete implementation of Delegator, this\nclass provides the means to delegate all supported method calls to the\nobject passed into the constructor and even to change the object being\ndelegated to at a later time with #__setobj__.\nclass User\n  def born_on\n    Date.new(1989, 9, 10)\n  end\nend\n\nclass UserDecorator < SimpleDelegator\n  def birth_year\n    born_on.year\n  end\nend\n\ndecorated_user = UserDecorator.new(User.new)\ndecorated_user.birth_year  #=> 1989\ndecorated_user.__getobj__  #=> #<User: ...>\n\nA SimpleDelegator instance can take\nadvantage of the fact that SimpleDelegator is a subclass of\nDelegator to call super to have methods called on\nthe object being delegated to.\nclass SuperArray < SimpleDelegator\n  def [](*args)\n    super + 1\n  end\nend\n\nSuperArray.new([1])[0]  #=> 2\n\nHere's a simple example that takes advantage of the fact that\nSimpleDelegator's delegation object can be changed at any time.\nclass Stats\n  def initialize\n    @source = SimpleDelegator.new([])\n  end\n\n  def stats(records)\n    @source.__setobj__(records)\n\n    \"Elements:  #{@source.size}\\n\" +\n    \" Non-Nil:  #{@source.compact.size}\\n\" +\n    \"  Unique:  #{@source.uniq.size}\\n\"\n  end\nend\n\ns = Stats.new\nputs s.stats(%w{James Edward Gray II})\nputs\nputs s.stats([1, 2, 3, nil, 4, 5, 1, 2])\n\nPrints:\nElements:  4\n Non-Nil:  4\n  Unique:  4\n\nElements:  8\n Non-Nil:  7\n  Unique:  6\n"}, {"c": "SingleForwardable", "d": "\nSingleForwardable can be used to setup\ndelegation at the object level as well.\nprinter = String.new\nprinter.extend SingleForwardable        # prepare object for delegation\nprinter.def_delegator \"STDOUT\", \"puts\"  # add delegation for STDOUT.puts()\nprinter.puts \"Howdy!\"\n\nAlso, SingleForwardable can be used to\nset up delegation for a Class or Module.\nclass Implementation\n  def self.service\n    puts \"serviced!\"\n  end\nend\n\nmodule Facade\n  extend SingleForwardable\n  def_delegator :Implementation, :service\nend\n\nFacade.service #=> serviced!\n\nIf you want to use both Forwardable and SingleForwardable, you can use methods\ndef_instance_delegator and #def_single_delegator,\netc.\n"}, {"c": "Singleton", "d": "\nThe Singleton module implements the Singleton pattern.\nUsage\u00b6 \u2191\nTo use Singleton, include the module in your\nclass.\nclass Klass\n   include Singleton\n   # ...\nend\n\nThis ensures that only one instance of Klass can be created.\na,b  = Klass.instance, Klass.instance\n\na == b\n# => true\n\nKlass.new\n# => NoMethodError - new is private ...\n\nThe instance is created at upon the first call of Klass.instance().\nclass OtherKlass\n  include Singleton\n  # ...\nend\n\nObjectSpace.each_object(OtherKlass){}\n# => 0\n\nOtherKlass.instance\nObjectSpace.each_object(OtherKlass){}\n# => 1\n\nThis behavior is preserved under inheritance and cloning.\nImplementation\u00b6 \u2191\nThis above is achieved by:\n\nMaking Klass.new and Klass.allocate private.\n\nOverriding Klass.inherited(sub_klass) and Klass.clone() to ensure that the\nSingleton properties are kept when inherited\nand cloned.\n\nProviding the Klass.instance() method that returns the same object each\ntime it is called.\n\nOverriding Klass._load(str) to call Klass.instance().\n\nOverriding Klass#clone and Klass#dup to raise TypeErrors to prevent cloning\nor duping.\n\nSingleton and Marshal\u00b6 \u2191\nBy default Singleton's #_dump(depth) returns the empty string.\nMarshalling by default will strip state information, e.g. instance\nvariables and taint state, from the instance. Classes using Singleton can provide custom _load(str) and\n_dump(depth) methods to retain some of the previous state of the instance.\nrequire 'singleton'\n\nclass Example\n  include Singleton\n  attr_accessor :keep, :strip\n  def _dump(depth)\n    # this strips the @strip information from the instance\n    Marshal.dump(@keep, depth)\n  end\n\n  def self._load(str)\n    instance.keep = Marshal.load(str)\n    instance\n  end\nend\n\na = Example.instance\na.keep = \"keep this\"\na.strip = \"get rid of this\"\na.taint\n\nstored_state = Marshal.dump(a)\n\na.keep = nil\na.strip = nil\nb = Marshal.load(stored_state)\np a == b  #  => true\np a.keep  #  => \"keep this\"\np a.strip #  => nil\n\n"}, {"c": "SizedQueue", "d": "\nThis class represents queues of specified size capacity.  The push\noperation may be blocked if the capacity is full.\nSee Queue for an example of how a SizedQueue works.\n"}, {"c": "Socket", "d": "\nClass Socket provides access to the\nunderlying operating system socket implementations.  It can be used to\nprovide more operating system specific functionality than the\nprotocol-specific socket classes.\nThe constants defined under Socket::Constants are also defined under\nSocket.  For example, Socket::AF_INET is usable as well as\nSocket::Constants::AF_INET.  See Socket::Constants for the list of\nconstants.\nWhat's a socket?\u00b6 \u2191\nSockets are endpoints of a bidirectional communication channel. Sockets can\ncommunicate within a process, between processes on the same machine or\nbetween different machines.  There are many types of socket: TCPSocket, UDPSocket\nor UNIXSocket for example.\nSockets have their own vocabulary:\ndomain: The family of protocols:\n\nSocket::PF_INET\n\nSocket::PF_INET6\n\nSocket::PF_UNIX\n\netc.\n\ntype: The type of communications between the two\nendpoints, typically\n\nSocket::SOCK_STREAM\n\nSocket::SOCK_DGRAM.\n\nprotocol: Typically zero. This may be used to\nidentify a variant of a protocol.\nhostname: The identifier of a network interface:\n\na string (hostname, IPv4 or IPv6 address or broadcast which\nspecifies a broadcast address)\n\na zero-length string which specifies INADDR_ANY\n\nan integer (interpreted as binary address in host byte order).\n\nQuick start\u00b6 \u2191\nMany of the classes, such as TCPSocket, UDPSocket or UNIXSocket, ease the use of sockets\ncomparatively to the equivalent C programming interface.\nLet's create an internet socket using the IPv4 protocol in a C-like\nmanner:\nrequire 'socket'\n\ns = Socket.new Socket::AF_INET, Socket::SOCK_STREAM\ns.connect Socket.pack_sockaddr_in(80, 'example.com')\n\nYou could also use the TCPSocket class:\ns = TCPSocket.new 'example.com', 80\n\nA simple server might look like this:\nrequire 'socket'\n\nserver = TCPServer.new 2000 # Server bound to port 2000\n\nloop do\n  client = server.accept    # Wait for a client to connect\n  client.puts \"Hello !\"\n  client.puts \"Time is #{Time.now}\"\n  client.close\nend\n\nA simple client may look like this:\nrequire 'socket'\n\ns = TCPSocket.new 'localhost', 2000\n\nwhile line = s.gets # Read lines from socket\n  puts line         # and print them\nend\n\ns.close             # close socket when done\n\nException Handling\u00b6 \u2191\nRuby's Socket implementation raises\nexceptions based on the error generated by the system dependent\nimplementation.  This is why the methods are documented in a way that\nisolate Unix-based system exceptions from Windows based exceptions. If more\ninformation on a particular exception is needed, please refer to the Unix\nmanual pages or the Windows WinSock reference.\nConvenience methods\u00b6 \u2191\nAlthough the general way to create socket is ::new, there are several methods of\nsocket creation for most cases.\nTCP client socket\n\n::tcp, IO.open\nTCP server socket\n\n::tcp_server_loop, IO.open\nUNIX client socket\n\n::unix, IO.open\nUNIX server socket\n\n::unix_server_loop, IO.open\n\nDocumentation by\u00b6 \u2191\n\nZach Dennis\n\nSam Roberts\n\nProgramming Ruby from The Pragmatic Bookshelf.\n\nMuch material in this documentation is taken with permission from\nProgramming Ruby from The Pragmatic Bookshelf.\n"}, {"c": "SocketError", "d": "\nSocketError is the error class for socket.\n"}, {"c": "SOCKSSocket", "d": "\nSOCKS is an Internet protocol that routes packets between a client and a\nserver through a proxy server.  SOCKS5, if supported, additionally provides\nauthentication so only authorized users may access a server.\n"}, {"c": "SortedSet", "d": "\nSortedSet implements a Set that guarantees that its elements are yielded in\nsorted order (according to the return values of their #<=> methods)\nwhen iterating over them.\nAll elements that are added to a SortedSet\nmust respond to the <=> method for comparison.\nAlso, all elements must be mutually comparable: el1\n<=> el2 must not return nil for any elements\nel1 and el2, else an ArgumentError will be raised when iterating\nover the SortedSet.\nExample\u00b6 \u2191\nrequire \"set\"\n\nset = SortedSet.new([2, 1, 5, 6, 4, 5, 3, 3, 3])\nary = []\n\nset.each do |obj|\n  ary << obj\nend\n\np ary # => [1, 2, 3, 4, 5, 6]\n\nset2 = SortedSet.new([1, 2, \"3\"])\nset2.each { |obj| } # => raises ArgumentError: comparison of Fixnum with String failed\n\n"}, {"c": "StandardError", "d": "\nThe most standard error types are subclasses of StandardError. A rescue clause without an\nexplicit Exception class will rescue all\nStandardErrors (and only those).\ndef foo\n  raise \"Oups\"\nend\nfoo rescue \"Hello\"   #=> \"Hello\"\n\nOn the other hand:\nrequire 'does/not/exist' rescue \"Hi\"\n\nraises the exception:\nLoadError: no such file to load -- does/not/exist\n"}, {"c": null, "d": ""}, {"c": "StopIteration", "d": "\nRaised to stop the iteration, in particular by Enumerator#next. It is rescued by\nKernel#loop.\nloop do\n  puts \"Hello\"\n  raise StopIteration\n  puts \"World\"\nend\nputs \"Done!\"\n\nproduces:\nHello\nDone!\n\n"}, {"c": "String", "d": "\nA String object holds and manipulates an arbitrary sequence of\nbytes, typically representing characters. String objects may be created\nusing String::new or as literals.\nBecause of aliasing issues, users of strings should be aware of the methods\nthat modify the contents of a String object.  Typically,\nmethods with names ending in \u00e2\u20ac\u0153!'' modify their receiver, while\nthose without a \u00e2\u20ac\u0153!'' return a new String.  However,\nthere are exceptions, such as String#[]=.\n"}, {"c": "StringIO", "d": "\nPseudo I/O on String object.\nCommonly used to simulate `$stdio` or `$stderr`\nExamples\u00b6 \u2191\nrequire 'stringio'\n\nio = StringIO.new\nio.puts \"Hello World\"\nio.string #=> \"Hello World\\n\"\n\n"}, {"c": "StringScanner", "d": "\nStringScanner provides for lexical\nscanning operations on a String.  Here is an example of its usage:\ns = StringScanner.new('This is an example string')\ns.eos?               # -> false\n\np s.scan(/\\w+/)      # -> \"This\"\np s.scan(/\\w+/)      # -> nil\np s.scan(/\\s+/)      # -> \" \"\np s.scan(/\\s+/)      # -> nil\np s.scan(/\\w+/)      # -> \"is\"\ns.eos?               # -> false\n\np s.scan(/\\s+/)      # -> \" \"\np s.scan(/\\w+/)      # -> \"an\"\np s.scan(/\\s+/)      # -> \" \"\np s.scan(/\\w+/)      # -> \"example\"\np s.scan(/\\s+/)      # -> \" \"\np s.scan(/\\w+/)      # -> \"string\"\ns.eos?               # -> true\n\np s.scan(/\\s+/)      # -> nil\np s.scan(/\\w+/)      # -> nil\n\nScanning a string means remembering the position of a scan\npointer, which is just an index.  The point of scanning is to move\nforward a bit at a time, so matches are sought after the scan pointer;\nusually immediately after it.\nGiven the string \u00e2\u20ac\u0153test string\u00e2\u20ac, here are the pertinent scan pointer\npositions:\n  t e s t   s t r i n g\n0 1 2 ...             1\n                      0\nWhen you scan for a pattern\n(a regular expression), the match must occur at the character after the\nscan pointer.  If you use scan_until, then the\nmatch can occur anywhere after the scan pointer.  In both cases, the scan\npointer moves just beyond the last character of the match, ready\nto scan again from the next character onwards.  This is demonstrated by the\nexample above.\nMethod Categories\u00b6 \u2191\nThere are other methods besides the plain scanners.  You can look ahead in\nthe string without actually scanning.  You can access the most recent\nmatch. You can modify the string being scanned, reset or terminate the\nscanner, find out or change the position of the scan pointer, skip ahead,\nand so on.\nAdvancing the Scan Pointer\u00b6 \u2191\n\ngetch\n\nget_byte\n\nscan\n\nscan_until\n\nskip\n\nskip_until\n\nLooking Ahead\u00b6 \u2191\n\ncheck\n\ncheck_until\n\nexist?\n\nmatch?\n\npeek\n\nFinding Where we Are\u00b6 \u2191\n\nbeginning_of_line?\n(#bol?)\n\neos?\n\nrest?\n\nrest_size\n\npos\n\nSetting Where we Are\u00b6 \u2191\n\nreset\n\nterminate\n\npos=\n\nMatch Data\u00b6 \u2191\n\nmatched\n\nmatched?\n\nmatched_size\n\n\n\npre_match\n\npost_match\n\nMiscellaneous\u00b6 \u2191\n\n<<\n\nconcat\n\nstring\n\nstring=\n\nunscan\n\nThere are aliases to several of the methods.\n"}, {"c": "Struct", "d": "\nA Struct is a convenient way to bundle a number\nof attributes together, using accessor methods, without having to write an\nexplicit class.\nThe Struct class generates new subclasses that\nhold a set of members and their values.  For each member a reader and\nwriter method is created similar to Module#attr_accessor.\nCustomer = Struct.new(:name, :address) do\n  def greeting\n    \"Hello #{name}!\"\n  end\nend\n\ndave = Customer.new(\"Dave\", \"123 Main\")\ndave.name     #=> \"Dave\"\ndave.greeting #=> \"Hello Dave!\"\n\nSee ::new for further examples of\ncreating struct subclasses and instances.\nIn the method descriptions that follow, a \u00e2\u20ac\u0153member\u00e2\u20ac parameter refers to a\nstruct member which is either a quoted string\n(\"name\") or a Symbol\n(:name).\n"}, {"c": "Symbol", "d": "\nSymbol objects represent names and some strings inside the\nRuby interpreter. They are generated using the :name and\n:\"string\" literals syntax, and by the various\nto_sym methods. The same Symbol object will be\ncreated for a given name or string for the duration of a program's\nexecution, regardless of the context or meaning of that name. Thus if\nFred is a constant in one context, a method in another, and a\nclass in a third, the Symbol :Fred will be the\nsame object in all three contexts.\nmodule One\n  class Fred\n  end\n  $f1 = :Fred\nend\nmodule Two\n  Fred = 1\n  $f2 = :Fred\nend\ndef Fred()\nend\n$f3 = :Fred\n$f1.object_id   #=> 2514190\n$f2.object_id   #=> 2514190\n$f3.object_id   #=> 2514190\n\n"}, {"c": "Sync", "d": "\nA class that provides two-phase lock with a counter.  See Sync_m for details.\n"}, {"c": "Synchronizer", "d": "\nA class that provides two-phase lock with a counter.  See Sync_m for details.\n"}, {"c": "Synchronizer_m", "d": "\nA module that provides a two-phase lock with a counter.\n"}, {"c": "Sync_m", "d": "\nA module that provides a two-phase lock with a counter.\n"}, {"c": "SyntaxError", "d": "\nRaised when encountering Ruby code with an invalid syntax.\neval(\"1+1=2\")\n\nraises the exception:\nSyntaxError: (eval):1: syntax error, unexpected '=', expecting $end\n"}, {"c": null, "d": ""}, {"c": "Syslog", "d": "\nThe syslog package provides a Ruby interface to the POSIX system logging\nfacility.\nSyslog messages are typically passed to a central\nlogging daemon. The daemon may filter them; route them into different files\n(usually found under /var/log); place them in SQL databases; forward them\nto centralized logging servers via TCP or UDP; or even alert the system\nadministrator via email, pager or text message.\nUnlike application-level logging via Logger or Log4r, syslog is designed to allow\nsecure tamper-proof logging.\nThe syslog protocol is standardized in RFC 5424.\n"}, {"c": "SystemCallError", "d": "\nSystemCallError is the base class for\nall low-level platform-dependent errors.\nThe errors available on the current platform are subclasses of SystemCallError and are defined in the Errno module.\nFile.open(\"does/not/exist\")\n\nraises the exception:\nErrno::ENOENT: No such file or directory - does/not/exist\n"}, {"c": "SystemExit", "d": "\nRaised by exit to initiate the termination of the script.\n"}, {"c": "SystemStackError", "d": "\nRaised in case of a stack overflow.\ndef me_myself_and_i\n  me_myself_and_i\nend\nme_myself_and_i\n\nraises the exception:\nSystemStackError: stack level too deep\n"}, {"c": "of Contents", "d": ""}, {"c": "TCPServer", "d": "\nTCPServer represents a TCP/IP server socket.\nA simple TCP server may look like:\nrequire 'socket'\n\nserver = TCPServer.new 2000 # Server bind to port 2000\nloop do\n  client = server.accept    # Wait for a client to connect\n  client.puts \"Hello !\"\n  client.puts \"Time is #{Time.now}\"\n  client.close\nend\n\nA more usable server (serving multiple clients):\nrequire 'socket'\n\nserver = TCPServer.new 2000\nloop do\n  Thread.start(server.accept) do |client|\n    client.puts \"Hello !\"\n    client.puts \"Time is #{Time.now}\"\n    client.close\n  end\nend\n\n"}, {"c": "TCPSocket", "d": "\nTCPSocket represents a TCP/IP client socket.\nA simple client may look like:\nrequire 'socket'\n\ns = TCPSocket.new 'localhost', 2000\n\nwhile line = s.gets # Read lines from socket\n  puts line         # and print them\nend\n\ns.close             # close socket when done\n\n"}, {"c": "Tempfile", "d": "\nA utility class for managing temporary files. When you create a Tempfile object, it will create a temporary file\nwith a unique filename. A Tempfile objects\nbehaves just like a File object, and you can\nperform all the usual file operations on it: reading data, writing data,\nchanging its permissions, etc. So although this class does not explicitly\ndocument all instance methods supported by File,\nyou can in fact call any File instance method on a\nTempfile object.\nSynopsis\u00b6 \u2191\nrequire 'tempfile'\n\nfile = Tempfile.new('foo')\nfile.path      # => A unique filename in the OS's temp directory,\n               #    e.g.: \"/tmp/foo.24722.0\"\n               #    This filename contains 'foo' in its basename.\nfile.write(\"hello world\")\nfile.rewind\nfile.read      # => \"hello world\"\nfile.close\nfile.unlink    # deletes the temp file\n\nGood practices\u00b6 \u2191\nExplicit close\u00b6 \u2191\nWhen a Tempfile object is garbage collected, or\nwhen the Ruby interpreter exits, its associated temporary file is\nautomatically deleted. This means that's it's unnecessary to\nexplicitly delete a Tempfile after use, though\nit's good practice to do so: not explicitly deleting unused Tempfiles\ncan potentially leave behind large amounts of tempfiles on the filesystem\nuntil they're garbage collected. The existence of these temp files can\nmake it harder to determine a new Tempfile\nfilename.\nTherefore, one should always call unlink or close in an ensure\nblock, like this:\nfile = Tempfile.new('foo')\nbegin\n   ...do something with file...\nensure\n   file.close\n   file.unlink   # deletes the temp file\nend\nUnlink after creation\u00b6 \u2191\nOn POSIX systems, it's possible to unlink a file right after creating\nit, and before closing it. This removes the filesystem entry without\nclosing the file handle, so it ensures that only the processes that already\nhad the file handle open can access the file's contents. It's\nstrongly recommended that you do this if you do not want any other\nprocesses to be able to read from or write to the Tempfile, and you do not need to know the\nTempfile's filename either.\nFor example, a practical use case for unlink-after-creation would be this:\nyou need a large byte buffer that's too large to comfortably fit in\nRAM, e.g. when you're writing a web server and you want to buffer the\nclient's file upload data.\nPlease refer to unlink for more\ninformation and a code example.\nMinor notes\u00b6 \u2191\nTempfile's filename picking method is both thread-safe and\ninter-process-safe: it guarantees that no other threads or processes will\npick the same filename.\nTempfile itself however may not be entirely\nthread-safe. If you access the same Tempfile\nobject from multiple threads then you should protect it with a mutex.\n"}, {"c": "TempIO", "d": "\nA StringIO duck-typed class that uses Tempfile instead of String as the backing store.\nThis is available when rubygems/test_utilities is required.\n"}, {"c": "Test", "d": "\n"}, {"c": "Thread", "d": "\nThreads are the Ruby implementation for a concurrent programming model.\nPrograms that require multiple threads of execution are a perfect candidate\nfor Ruby's Thread class.\nFor example, we can create a new thread separate from the main thread's\nexecution using ::new.\nthr = Thread.new { puts \"Whats the big deal\" }\n\nThen we are able to pause the execution of the main thread and allow our\nnew thread to finish, using join:\nthr.join #=> \"Whats the big deal\"\n\nIf we don't call thr.join before the main thread\nterminates, then all other threads including thr will be\nkilled.\nAlternatively, you can use an array for handling multiple threads at once,\nlike in the following example:\nthreads = []\nthreads << Thread.new { puts \"Whats the big deal\" }\nthreads << Thread.new { 3.times { puts \"Threads are fun!\" } }\n\nAfter creating a few threads we wait for them all to finish consecutively.\nthreads.each { |thr| thr.join }\n\nThread initialization\u00b6 \u2191\nIn order to create new threads, Ruby provides ::new, ::start, and ::fork. A block must be provided with\neach of these methods, otherwise a ThreadError will be raised.\nWhen subclassing the Thread class, the\ninitialize method of your subclass will be ignored by ::start and ::fork. Otherwise, be sure to call\nsuper in your initialize method.\nThread termination\u00b6 \u2191\nFor terminating threads, Ruby provides a variety of ways to do this.\nThe class method ::kill, is meant\nto exit a given thread:\nthr = Thread.new { ... }\nThread.kill(thr) # sends exit() to thr\nAlternatively, you can use the instance method exit, or any of its aliases kill or terminate.\nthr.exit\n\nThread status\u00b6 \u2191\nRuby provides a few instance methods for querying the state of a given\nthread. To get a string with the current thread's state use status\nthr = Thread.new { sleep }\nthr.status # => \"sleep\"\nthr.exit\nthr.status # => false\n\nYou can also use alive? to tell\nif the thread is running or sleeping, and stop? if the thread is dead or\nsleeping.\nThread variables and scope\u00b6 \u2191\nSince threads are created with blocks, the same rules apply to other Ruby\nblocks for variable scope. Any local variables created within this block\nare accessible to only this thread.\nFiber-local vs. Thread-local\u00b6 \u2191\nEach fiber has its own bucket for #[] storage. When you set a new\nfiber-local it is only accessible within this Fiber. To illustrate:\nThread.new {\n  Thread.current[:foo] = \"bar\"\n  Fiber.new {\n    p Thread.current[:foo] # => nil\n  }.resume\n}.join\n\nThis example uses [] for getting\nand []= for setting\nfiber-locals, you can also use keys\nto list the fiber-locals for a given thread and key? to check if a fiber-local\nexists.\nWhen it comes to thread-locals, they are accessible within the entire scope\nof the thread. Given the following example:\nThread.new{\n  Thread.current.thread_variable_set(:foo, 1)\n  p Thread.current.thread_variable_get(:foo) # => 1\n  Fiber.new{\n    Thread.current.thread_variable_set(:foo, 2)\n    p Thread.current.thread_variable_get(:foo) # => 2\n  }.resume\n  p Thread.current.thread_variable_get(:foo)   # => 2\n}.join\n\nYou can see that the thread-local :foo carried over into the\nfiber and was changed to 2 by the end of the thread.\nThis example makes use of thread_variable_set to\ncreate new thread-locals, and thread_variable_get to\nreference them.\nThere is also thread_variables to list\nall thread-locals, and thread_variable? to\ncheck if a given thread-local exists.\nException handling\u00b6 \u2191\nAny thread can raise an exception using the raise instance method, which operates\nsimilarly to Kernel#raise.\nHowever, it's important to note that an exception that occurs in any\nthread except the main thread depends on abort_on_exception. This\noption is false by default, meaning that any unhandled\nexception will cause the thread to terminate silently when waited on by\neither join or value. You can change this default by\neither abort_on_exception=\ntrue or setting $DEBUG to true.\nWith the addition of the class method ::handle_interrupt, you\ncan now handle exceptions asynchronously with threads.\nScheduling\u00b6 \u2191\nRuby provides a few ways to support scheduling threads in your program.\nThe first way is by using the class method ::stop, to put the current running\nthread to sleep and schedule the execution of another thread.\nOnce a thread is asleep, you can use the instance method wakeup to mark your thread as\neligible for scheduling.\nYou can also try ::pass, which\nattempts to pass execution to another thread but is dependent on the OS\nwhether a running thread will switch or not. The same goes for priority, which lets you hint to\nthe thread scheduler which threads you want to take precedence when passing\nexecution. This method is also dependent on the OS and may be ignored on\nsome platforms.\n"}, {"c": "ThreadError", "d": "\nRaised when an invalid operation is attempted on a thread.\nFor example, when no other thread has been started:\nThread.stop\n\nThis will raises the following exception:\nThreadError: stopping only thread\nnote: use sleep to stop forever\n"}, {"c": "ThreadGroup", "d": "\nThreadGroup provides a means of keeping\ntrack of a number of threads as a group.\nA given Thread object can only belong to one ThreadGroup at a time; adding a thread to a new\ngroup will remove it from any previous group.\nNewly created threads belong to the same group as the thread from which\nthey were created.\n"}, {"c": "ThreadsWait", "d": "\nThis class watches for termination of multiple threads.  Basic\nfunctionality (wait until specified threads have terminated) can be\naccessed through the class method ::all_waits.  Finer control\ncan be gained using instance methods.\nExample:\nThreadsWait.all_waits(thr1, thr2, ...) do |t|\n  STDERR.puts \"Thread #{t} has terminated.\"\nend\n\nth = ThreadsWait.new(thread1,...)\nth.next_wait # next one to be done\n"}, {"c": "ThWait", "d": "\nThis class watches for termination of multiple threads.  Basic\nfunctionality (wait until specified threads have terminated) can be\naccessed through the class method ThreadsWait.all_waits. \nFiner control can be gained using instance methods.\nExample:\nThreadsWait.all_waits(thr1, thr2, ...) do |t|\n  STDERR.puts \"Thread #{t} has terminated.\"\nend\n\nth = ThreadsWait.new(thread1,...)\nth.next_wait # next one to be done\n"}, {"c": "Time", "d": "\ntime.rb\u00b6 \u2191\nWhen 'time' is required, Time is extended\nwith additional methods for parsing and converting Times.\nFeatures\u00b6 \u2191\nThis library extends the Time class with the\nfollowing conversions between date strings and Time\nobjects:\n\ndate-time defined by RFC\n2822\n\nHTTP-date defined by RFC\n2616\n\ndateTime defined by XML Schema Part 2: Datatypes (ISO 8601)\n\nvarious formats handled by Date._parse\n\ncustom formats handled by Date._strptime\n\nExamples\u00b6 \u2191\nAll examples assume you have loaded Time with:\nrequire 'time'\n\nAll of these examples were done using the EST timezone which is GMT-5.\nConverting to a String\u00b6 \u2191\nt = Time.now\nt.iso8601  # => \"2011-10-05T22:26:12-04:00\"\nt.rfc2822  # => \"Wed, 05 Oct 2011 22:26:12 -0400\"\nt.httpdate # => \"Thu, 06 Oct 2011 02:26:12 GMT\"\n\n::parse\u00b6 \u2191\nparse takes a string representation of a Time and\nattempts to parse it using a heuristic.\nTime.parse(\"2010-10-31\") #=> 2010-10-31 00:00:00 -0500\n\nAny missing pieces of the date are inferred based on the current date.\n# assuming the current date is \"2011-10-31\"\nTime.parse(\"12:00\") #=> 2011-10-31 12:00:00 -0500\n\nWe can change the date used to infer our missing elements by passing a\nsecond object that responds to mon, day and year, such as Date, Time or DateTime. We can also use our own object.\nclass MyDate\n  attr_reader :mon, :day, :year\n\n  def initialize(mon, day, year)\n    @mon, @day, @year = mon, day, year\n  end\nend\n\nd  = Date.parse(\"2010-10-28\")\nt  = Time.parse(\"2010-10-29\")\ndt = DateTime.parse(\"2010-10-30\")\nmd = MyDate.new(10,31,2010)\n\nTime.parse(\"12:00\", d)  #=> 2010-10-28 12:00:00 -0500\nTime.parse(\"12:00\", t)  #=> 2010-10-29 12:00:00 -0500\nTime.parse(\"12:00\", dt) #=> 2010-10-30 12:00:00 -0500\nTime.parse(\"12:00\", md) #=> 2010-10-31 12:00:00 -0500\n\nparse also accepts an optional block. You can use this block to specify how\nto handle the year component of the date. This is specifically designed for\nhandling two digit years. For example, if you wanted to treat all two digit\nyears prior to 70 as the year 2000+ you could write this:\nTime.parse(\"01-10-31\") {|year| year + (year < 70 ? 2000 : 1900)}\n#=> 2001-10-31 00:00:00 -0500\nTime.parse(\"70-10-31\") {|year| year + (year < 70 ? 2000 : 1900)}\n#=> 1970-10-31 00:00:00 -0500\n\n::strptime\u00b6 \u2191\nstrptime works similar to parse except that instead of using a\nheuristic to detect the format of the input string, you provide a second\nargument that describes the format of the string. For example:\nTime.strptime(\"2000-10-31\", \"%Y-%m-%d\") #=> 2000-10-31 00:00:00 -0500\n\nTime is an abstraction of dates and times. Time is stored internally as the number of seconds\nwith fraction since the Epoch, January 1, 1970 00:00 UTC. Also see\nthe library module Date. The Time class treats GMT (Greenwich Mean Time) and UTC (Coordinated Universal Time) as equivalent. GMT is the older way of referring\nto these baseline times but persists in the names of calls on POSIX\nsystems.\nAll times may have fraction. Be aware of this fact when comparing times\nwith each other \u00e2\u20ac\u201c times that are apparently equal when displayed may be\ndifferent when compared.\nSince Ruby 1.9.2, Time implementation uses a signed\n63 bit integer, Bignum or Rational. The integer\nis a number of nanoseconds since the Epoch which can represent\n1823-11-12 to 2116-02-20. When Bignum or Rational is used (before 1823, after 2116, under\nnanosecond), Time works slower as when integer is\nused.\nExamples\u00b6 \u2191\nAll of these examples were done using the EST timezone which is GMT-5.\nCreating a new Time instance\u00b6 \u2191\nYou can create a new instance of Time with ::new. This will use the current system\ntime. ::now is an alias for this. You\ncan also pass parts of the time to ::new such as year, month, minute, etc.\nWhen you want to construct a time this way you must pass at least a year.\nIf you pass the year with nothing else time will default to January 1 of\nthat year at 00:00:00 with the current system timezone. Here are some\nexamples:\nTime.new(2002)         #=> 2002-01-01 00:00:00 -0500\nTime.new(2002, 10)     #=> 2002-10-01 00:00:00 -0500\nTime.new(2002, 10, 31) #=> 2002-10-31 00:00:00 -0500\nTime.new(2002, 10, 31, 2, 2, 2, \"+02:00\") #=> 2002-10-31 02:02:02 +0200\n\nYou can also use gm, local and utc to\ninfer GMT, local and UTC timezones instead of using the current system\nsetting.\nYou can also create a new time using ::at which takes the number of seconds (or\nfraction of seconds) since the Unix Epoch.\nTime.at(628232400) #=> 1989-11-28 00:00:00 -0500\n\nWorking with an instance of Time\u00b6 \u2191\nOnce you have an instance of Time there is a\nmultitude of things you can do with it. Below are some examples. For all of\nthe following examples, we will work on the assumption that you have done\nthe following:\nt = Time.new(1993, 02, 24, 12, 0, 0, \"+09:00\")\n\nWas that a monday?\nt.monday? #=> false\n\nWhat year was that again?\nt.year #=> 1993\n\nWas it daylight savings at the time?\nt.dst? #=> false\n\nWhat's the day a year later?\nt + (60*60*24*365) #=> 1994-02-24 12:00:00 +0900\n\nHow many seconds was that since the Unix Epoch?\nt.to_i #=> 730522800\n\nYou can also do standard functions like compare two times.\nt1 = Time.new(2010)\nt2 = Time.new(2011)\n\nt1 == t2 #=> false\nt1 == t1 #=> true\nt1 <  t2 #=> true\nt1 >  t2 #=> false\n\nTime.new(2010,10,31).between?(t1, t2) #=> true\n\n"}, {"c": "Timeout", "d": "\nTimeout long-running blocks\nSynopsis\u00b6 \u2191\nrequire 'timeout'\nstatus = Timeout::timeout(5) {\n  # Something that should be interrupted if it takes more than 5 seconds...\n}\n\nDescription\u00b6 \u2191\nTimeout provides a way to auto-terminate a\npotentially long-running operation if it hasn't finished in a fixed\namount of time.\nPrevious versions didn't use a module for namespacing, however timeout is provided for backwards\ncompatibility.  You should prefer #timeout instead.\nCopyright\u00b6 \u2191\nCopyright\n\n(C) 2000  Network Applied Communication Laboratory, Inc.\nCopyright\n\n(C) 2000  Information-technology Promotion Agency, Japan\n\n"}, {"c": "TracePoint", "d": "\nA class that provides the functionality of Kernel#set_trace_func in a\nnice Object-Oriented API.\nExample\u00b6 \u2191\nWe can use TracePoint to gather information\nspecifically for exceptions:\ntrace = TracePoint.new(:raise) do |tp|\n    p [tp.lineno, tp.event, tp.raised_exception]\nend\n#=> #<TracePoint:disabled>\n\ntrace.enable\n#=> false\n\n0 / 0\n#=> [5, :raise, #<ZeroDivisionError: divided by 0>]\n\nEvents\u00b6 \u2191\nIf you don't specify the type of events you want to listen for, TracePoint will include all available events.\nNote do not depend on current event set, as this list is\nsubject to change. Instead, it is recommended you specify the type of\nevents you want to use.\nTo filter what is traced, you can pass any of the following as\nevents:\n:line\n\nexecute code on a new line\n:class\n\nstart a class or module definition\n:end\n\nfinish a class or module definition\n:call\n\ncall a Ruby method\n:return\n\nreturn from a Ruby method\n:c_call\n\ncall a C-language routine\n:c_return\n\nreturn from a C-language routine\n:raise\n\nraise an exception\n:b_call\n\nevent hook at block entry\n:b_return\n\nevent hook at block ending\n:thread_begin\n\nevent hook at thread beginning\n:thread_end\n\nevent hook at thread ending\n:fiber_switch\n\nevent hook at fiber switch\n\n"}, {"c": "Tracer", "d": "\nOutputs a source level execution trace of a Ruby program.\nIt does this by registering an event handler with Kernel#set_trace_func for\nprocessing incoming events.  It also provides methods for filtering\nunwanted trace output (see ::add_filter, ::on, and ::off).\nExample\u00b6 \u2191\nConsider the following Ruby script\nclass A\n  def square(a)\n    return a*a\n  end\nend\n\na = A.new\na.square(5)\n\nRunning the above script using ruby -r tracer example.rb will\noutput the following trace to STDOUT (Note you can also explicitly\nrequire 'tracer')\n#0:<internal:lib/rubygems/custom_require>:38:Kernel:<: -\n#0:example.rb:3::-: class A\n#0:example.rb:3::C: class A\n#0:example.rb:4::-:   def square(a)\n#0:example.rb:7::E: end\n#0:example.rb:9::-: a = A.new\n#0:example.rb:10::-: a.square(5)\n#0:example.rb:4:A:>:   def square(a)\n#0:example.rb:5:A:-:     return a*a\n#0:example.rb:6:A:<:   end\n |  |         | |  |\n |  |         | |   ---------------------+ event\n |  |         |  ------------------------+ class\n |  |          --------------------------+ line\n |   ------------------------------------+ filename\n  ---------------------------------------+ thread\nSymbol table used for displaying incoming events:\n+}+\n\ncall a C-language routine\n+{+\n\nreturn from a C-language routine\n+>+\n\ncall a Ruby method\nC\n\nstart a class or module definition\nE\n\nfinish a class or module definition\n-\n\nexecute code on a new line\n+^+\n\nraise an exception\n+<+\n\nreturn from a Ruby method\n\nCopyright\u00b6 \u2191\nby Keiju ISHITSUKA(keiju@ishitsuka.com)\n"}, {"c": "TrueClass", "d": "\nThe global value true is the only instance of class\nTrueClass and represents a logically true value in boolean\nexpressions. The class provides operators allowing true to be\nused in logical expressions.\n"}, {"c": "TSort", "d": "\nTSort implements topological sorting using\nTarjan's algorithm for strongly connected components.\nTSort is designed to be able to be used with any\nobject which can be interpreted as a directed graph.\nTSort requires two methods to interpret an object\nas a graph, #tsort_each_node and\ntsort_each_child.\n\n#tsort_each_node is used\nto iterate for all nodes over a graph.\n\n#tsort_each_child is\nused to iterate for child nodes of a given node.\n\nThe equality of nodes are defined by eql? and hash since TSort uses Hash internally.\nA Simple Example\u00b6 \u2191\nThe following example demonstrates how to mix the TSort module into an existing class (in this case, Hash). Here, we're treating each key in the hash\nas a node in the graph, and so we simply alias the required tsort_each_node method to\nHash's each_key method. For each key in the hash, the associated value\nis an array of the node's child nodes. This choice in turn leads to our\nimplementation of the required tsort_each_child method,\nwhich fetches the array of child nodes and then iterates over that array\nusing the user-supplied block.\nrequire 'tsort'\n\nclass Hash\n  include TSort\n  alias tsort_each_node each_key\n  def tsort_each_child(node, &block)\n    fetch(node).each(&block)\n  end\nend\n\n{1=>[2, 3], 2=>[3], 3=>[], 4=>[]}.tsort\n#=> [3, 2, 1, 4]\n\n{1=>[2], 2=>[3, 4], 3=>[2], 4=>[]}.strongly_connected_components\n#=> [[4], [2, 3], [1]]\n\nA More Realistic Example\u00b6 \u2191\nA very simple `make' like tool can be implemented as follows:\nrequire 'tsort'\n\nclass Make\n  def initialize\n    @dep = {}\n    @dep.default = []\n  end\n\n  def rule(outputs, inputs=[], &block)\n    triple = [outputs, inputs, block]\n    outputs.each {|f| @dep[f] = [triple]}\n    @dep[triple] = inputs\n  end\n\n  def build(target)\n    each_strongly_connected_component_from(target) {|ns|\n      if ns.length != 1\n        fs = ns.delete_if {|n| Array === n}\n        raise TSort::Cyclic.new(\"cyclic dependencies: #{fs.join ', '}\")\n      end\n      n = ns.first\n      if Array === n\n        outputs, inputs, block = n\n        inputs_time = inputs.map {|f| File.mtime f}.max\n        begin\n          outputs_time = outputs.map {|f| File.mtime f}.min\n        rescue Errno::ENOENT\n          outputs_time = nil\n        end\n        if outputs_time == nil ||\n           inputs_time != nil && outputs_time <= inputs_time\n          sleep 1 if inputs_time != nil && inputs_time.to_i == Time.now.to_i\n          block.call\n        end\n      end\n    }\n  end\n\n  def tsort_each_child(node, &block)\n    @dep[node].each(&block)\n  end\n  include TSort\nend\n\ndef command(arg)\n  print arg, \"\\n\"\n  system arg\nend\n\nm = Make.new\nm.rule(%w[t1]) { command 'date > t1' }\nm.rule(%w[t2]) { command 'date > t2' }\nm.rule(%w[t3]) { command 'date > t3' }\nm.rule(%w[t4], %w[t1 t3]) { command 'cat t1 t3 > t4' }\nm.rule(%w[t5], %w[t4 t2]) { command 'cat t4 t2 > t5' }\nm.build('t5')\n\nBugs\u00b6 \u2191\n\n'tsort.rb' is wrong name because this library uses Tarjan's\nalgorithm for strongly connected components. Although\n'strongly_connected_components.rb' is correct but too long.\n\nReferences\u00b6 \u2191\n\nTarjan, \u00e2\u20ac\u0153Depth First Search and Linear Graph Algorithms\u00e2\u20ac,\n\n\nSIAM Journal on Computing, Vol. 1, No. 2, pp. 146-160, June 1972.\n"}, {"c": "TypeError", "d": "\nRaised when encountering an object that is not of the expected type.\n[1, 2, 3].first(\"two\")\n\nraises the exception:\nTypeError: no implicit conversion of String into Integer\n"}, {"c": "UDPSocket", "d": "\nUDPSocket represents a UDP/IP socket.\n"}, {"c": "UnboundMethod", "d": "\nRuby supports two forms of objectified methods. Class Method is used to represent\nmethods that are associated with a particular object: these method objects\nare bound to that object. Bound method objects for an object can be created\nusing Object#method.\nRuby also supports unbound methods; methods objects that are not associated\nwith a particular object. These can be created either by calling\nModule#instance_method or by calling unbind on a\nbound method object. The result of both of these is an\nUnboundMethod object.\nUnbound methods can only be called after they are bound to an object. That\nobject must be a kind_of? the method's original class.\nclass Square\n  def area\n    @side * @side\n  end\n  def initialize(side)\n    @side = side\n  end\nend\n\narea_un = Square.instance_method(:area)\n\ns = Square.new(12)\narea = area_un.bind(s)\narea.call   #=> 144\n\nUnbound methods are a reference to the method at the time it was\nobjectified: subsequent changes to the underlying class will not affect the\nunbound method.\nclass Test\n  def test\n    :original\n  end\nend\num = Test.instance_method(:test)\nclass Test\n  def test\n    :modified\n  end\nend\nt = Test.new\nt.test            #=> :modified\num.bind(t).call   #=> :original\n\n"}, {"c": "UncaughtThrowError", "d": "\nRaised when throw is called with a tag which does not\nhave corresponding catch block.\nthrow \"foo\", \"bar\"\n\nraises the exception:\nUncaughtThrowError: uncaught throw \"foo\"\n"}, {"c": "UnicodeNormalize", "d": "\ndefine UnicodeNormalize module here so\nthat we don't have to look it up\n"}, {"c": "UNIXServer", "d": "\nUNIXServer represents a UNIX domain stream\nserver socket.\n"}, {"c": "UNIXSocket", "d": "\nUNIXSocket represents a UNIX domain stream\nclient socket.\n"}, {"c": "unknown", "d": "\n"}, {"c": "URI", "d": "\nURI is a module providing classes to handle Uniform\nResource Identifiers (RFC2396)\nFeatures\u00b6 \u2191\n\nUniform handling of handling URIs\n\nFlexibility to introduce custom URI schemes\n\nFlexibility to have an alternate URI::Parser\n(or just different patterns and regexp's)\n\nBasic example\u00b6 \u2191\nrequire 'uri'\n\nuri = URI(\"http://foo.com/posts?id=30&limit=5#time=1305298413\")\n#=> #<URI::HTTP:0x00000000b14880\n      URL:http://foo.com/posts?id=30&limit=5#time=1305298413>\nuri.scheme\n#=> \"http\"\nuri.host\n#=> \"foo.com\"\nuri.path\n#=> \"/posts\"\nuri.query\n#=> \"id=30&limit=5\"\nuri.fragment\n#=> \"time=1305298413\"\n\nuri.to_s\n#=> \"http://foo.com/posts?id=30&limit=5#time=1305298413\"\nAdding custom URIs\u00b6 \u2191\nmodule URI\n  class RSYNC < Generic\n    DEFAULT_PORT = 873\n  end\n  @@schemes['RSYNC'] = RSYNC\nend\n#=> URI::RSYNC\n\nURI.scheme_list\n#=> {\"FTP\"=>URI::FTP, \"HTTP\"=>URI::HTTP, \"HTTPS\"=>URI::HTTPS,\n     \"LDAP\"=>URI::LDAP, \"LDAPS\"=>URI::LDAPS, \"MAILTO\"=>URI::MailTo,\n     \"RSYNC\"=>URI::RSYNC}\n\nuri = URI(\"rsync://rsync.foo.com\")\n#=> #<URI::RSYNC:0x00000000f648c8 URL:rsync://rsync.foo.com>\nRFC References\u00b6 \u2191\nA good place to view an RFC spec is www.ietf.org/rfc.html\nHere is a list of all related RFC's.\n\nRFC822\n\nRFC1738\n\nRFC2255\n\nRFC2368\n\nRFC2373\n\nRFC2396\n\nRFC2732\n\nRFC3986\n\nClass tree\u00b6 \u2191\n\nURI::Generic (in uri/generic.rb)\n\nURI::FTP - (in uri/ftp.rb)\n\nURI::HTTP - (in uri/http.rb)\n\nURI::HTTPS - (in uri/https.rb)\n\n\nURI::LDAP - (in uri/ldap.rb)\n\nURI::LDAPS - (in uri/ldaps.rb)\n\n\nURI::MailTo - (in uri/mailto.rb)\n\n\nURI::Parser - (in uri/common.rb)\n\nURI::REGEXP - (in uri/common.rb)\n\nURI::REGEXP::PATTERN - (in uri/common.rb)\n\n\nURI::Util - (in uri/common.rb)\n\nURI::Escape - (in uri/common.rb)\n\nURI::Error - (in uri/common.rb)\n\nURI::InvalidURIError - (in\nuri/common.rb)\n\nURI::InvalidComponentError -\n(in uri/common.rb)\n\nURI::BadURIError - (in uri/common.rb)\n\n\nCopyright Info\u00b6 \u2191\nAuthor\n\nAkira Yamada <akira@ruby-lang.org>\nDocumentation\n\nAkira Yamada <akira@ruby-lang.org> Dmitry V. Sabanin\n<sdmitry@lrn.ru> Vincent Batts <vbatts@hashbangbash.com>\nLicense\n\nCopyright \u00c2\u00a9 2001 akira yamada <akira@ruby-lang.org> You can\nredistribute it and/or modify it under the same term as Ruby.\nRevision\n\n$Id: uri.rb 53141 2015-12-16 05:07:31Z naruse $\n\n"}, {"c": "Vector", "d": "\nThe Vector class represents a mathematical vector, which is\nuseful in its own right, and also constitutes a row or column of a Matrix.\nMethod Catalogue\u00b6 \u2191\nTo create a Vector:\n\n::[]\n\n::elements(array, copy = true)\n\n::basis(size: n, index: k)\n\n::zero\n\nTo access elements:\n\n[](i)\n\nTo enumerate the elements:\n\neach2(v)\n\ncollect2(v)\n\nProperties of vectors:\n\nangle_with(v)\n\n::independent?\n\nindependent?(*vs)\n\nzero?\n\nVector arithmetic:\n\n#*(x) \u00e2\u20ac\u0153is matrix or number\u00e2\u20ac\n\n#+(v)\n\n#-(v)\n\n#/(v)\n\n#+@\n\n#-@\n\nVector functions:\n\ninner_product(v), dot(v)\n\ncross_product(v), cross(v)\n\ncollect\n\nmagnitude\n\nmap\n\nmap2(v)\n\nnorm\n\nnormalize\n\nr\n\nround\n\nsize\n\nConversion to other data types:\n\ncovector\n\nto_a\n\ncoerce(other)\n\nString representations:\n\nto_s\n\ninspect\n\n"}, {"c": "Warning", "d": "\nThe Warning module contains a single method\nnamed warn, and the module extends\nitself, making Warning.warn available. #warn is called for all warnings\nissued by Ruby. By default, warnings are printed to $stderr.\nBy overriding #warn, you can\nchange how warnings are handled by Ruby, either filtering some warnings,\nand/or outputting warnings somewhere other than $stderr.  When #warn is overridden, super can be\ncalled to get the default behavior of printing the warning to $stderr.\n"}, {"c": "WeakRef", "d": "\nWeak Reference class that allows a referenced object to be\ngarbage-collected.\nA WeakRef may be used exactly like the object it\nreferences.\nUsage:\nfoo = Object.new            # create a new object instance\np foo.to_s                  # original's class\nfoo = WeakRef.new(foo)      # reassign foo with WeakRef instance\np foo.to_s                  # should be same class\nGC.start                    # start the garbage collector\np foo.to_s                  # should raise exception (recycled)\n\n"}, {"c": "WEBrick", "d": "\nWEB server toolkit.\u00b6 \u2191\nWEBrick is an HTTP server toolkit that can be\nconfigured as an HTTPS server, a proxy server, and a virtual-host server. \nWEBrick features complete logging of both server\noperations and HTTP access.  WEBrick supports\nboth basic and digest authentication in addition to algorithms not in RFC\n2617.\nA WEBrick server can be composed of multiple WEBrick servers or servlets to provide differing\nbehavior on a per-host or per-path basis.  WEBrick includes servlets for handling CGI scripts, ERB pages,\nRuby blocks and directory listings.\nWEBrick also includes tools for daemonizing a\nprocess and starting a process at a higher privilege level and dropping\npermissions.\nStarting an HTTP server\u00b6 \u2191\nTo create a new WEBrick::HTTPServer\nthat will listen to connections on port 8000 and serve documents from the\ncurrent user's public_html folder:\nrequire 'webrick'\n\nroot = File.expand_path '~/public_html'\nserver = WEBrick::HTTPServer.new :Port => 8000, :DocumentRoot => root\n\nTo run the server you will need to provide a suitable shutdown hook as\nstarting the server blocks the current thread:\ntrap 'INT' do server.shutdown end\n\nserver.start\n\nCustom Behavior\u00b6 \u2191\nThe easiest way to have a server perform custom operations is through WEBrick::HTTPServer#mount_proc.\nThe block given will be called with a WEBrick::HTTPRequest with request info\nand a WEBrick::HTTPResponse which\nmust be filled in appropriately:\nserver.mount_proc '/' do |req, res|\n  res.body = 'Hello, world!'\nend\n\nRemember that server.mount_proc must precede\nserver.start.\nServlets\u00b6 \u2191\nAdvanced custom behavior can be obtained through mounting a subclass of WEBrick::HTTPServlet::AbstractServlet.\nServlets provide more modularity when writing an HTTP server than\nmount_proc allows.  Here is a simple servlet:\nclass Simple < WEBrick::HTTPServlet::AbstractServlet\n  def do_GET request, response\n    status, content_type, body = do_stuff_with request\n\n    response.status = 200\n    response['Content-Type'] = 'text/plain'\n    response.body = 'Hello, World!'\n  end\nend\n\nTo initialize the servlet you mount it on the server:\nserver.mount '/simple', Simple\n\nSee WEBrick::HTTPServlet::AbstractServlet\nfor more details.\nVirtual Hosts\u00b6 \u2191\nA server can act as a virtual host for multiple host names.  After creating\nthe listening host, additional hosts that do not listen can be created and\nattached as virtual hosts:\nserver = WEBrick::HTTPServer.new # ...\n\nvhost = WEBrick::HTTPServer.new :ServerName => 'vhost.example',\n                                :DoNotListen => true, # ...\nvhost.mount '/', ...\n\nserver.virtual_host vhost\nIf no :DocumentRoot is provided and no servlets or procs are\nmounted on the main server it will return 404 for all URLs.\nHTTPS\u00b6 \u2191\nTo create an HTTPS server you only need to enable SSL and provide an SSL\ncertificate name:\nrequire 'webrick'\nrequire 'webrick/https'\n\ncert_name = [\n  %w[CN localhost],\n]\n\nserver = WEBrick::HTTPServer.new(:Port => 8000,\n                                 :SSLEnable => true,\n                                 :SSLCertName => cert_name)\n\nThis will start the server with a self-generated self-signed certificate.\nThe certificate will be changed every time the server is restarted.\nTo create a server with a pre-determined key and certificate you can\nprovide them:\nrequire 'webrick'\nrequire 'webrick/https'\nrequire 'openssl'\n\ncert = OpenSSL::X509::Certificate.new File.read '/path/to/cert.pem'\npkey = OpenSSL::PKey::RSA.new File.read '/path/to/pkey.pem'\n\nserver = WEBrick::HTTPServer.new(:Port => 8000,\n                                 :SSLEnable => true,\n                                 :SSLCertificate => cert,\n                                 :SSLPrivateKey => pkey)\n\nProxy Server\u00b6 \u2191\nWEBrick can act as a proxy server:\nrequire 'webrick'\nrequire 'webrick/httpproxy'\n\nproxy = WEBrick::HTTPProxyServer.new :Port => 8000\n\ntrap 'INT' do proxy.shutdown end\n\nSee WEBrick::HTTPProxy for further details including modifying proxied\nresponses.\nBasic and Digest authentication\u00b6 \u2191\nWEBrick provides both Basic and Digest authentication for regular and proxy servers.\nSee WEBrick::HTTPAuth, WEBrick::HTTPAuth::BasicAuth and\nWEBrick::HTTPAuth::DigestAuth.\nWEBrick as a Production Web Server\u00b6 \u2191\nWEBrick can be run as a production server for\nsmall loads.\nDaemonizing\u00b6 \u2191\nTo start a WEBrick server as a daemon simple run\nWEBrick::Daemon.start\nbefore starting the server.\nDropping Permissions\u00b6 \u2191\nWEBrick can be started as one user to gain\npermission to bind to port 80 or 443 for serving HTTP or HTTPS traffic then\ncan drop these permissions for regular operation.  To listen on all\ninterfaces for HTTP traffic:\nsockets = WEBrick::Utils.create_listeners nil, 80\n\nThen drop privileges:\nWEBrick::Utils.su 'www'\n\nThen create a server that does not listen by default:\nserver = WEBrick::HTTPServer.new :DoNotListen => true, # ...\nThen overwrite the listening sockets with the port 80 sockets:\nserver.listeners.replace sockets\n\nLogging\u00b6 \u2191\nWEBrick can separately log server operations and\nend-user access.  For server operations:\nlog_file = File.open '/var/log/webrick.log', 'a+'\nlog = WEBrick::Log.new log_file\n\nFor user access logging:\naccess_log = [\n  [log_file, WEBrick::AccessLog::COMBINED_LOG_FORMAT],\n]\n\nserver = WEBrick::HTTPServer.new :Logger => log, :AccessLog => access_log\n\nSee WEBrick::AccessLog for further log\nformats.\nLog Rotation\u00b6 \u2191\nTo rotate logs in WEBrick on a HUP signal (like\nsyslogd can send), open the log file in 'a+' mode (as above) and\ntrap 'HUP' to reopen the log file:\ntrap 'HUP' do log_file.reopen '/path/to/webrick.log', 'a+'\nCopyright\u00b6 \u2191\nAuthor: IPR \u00e2\u20ac\u201c Internet Programming with Ruby \u00e2\u20ac\u201c writers\nCopyright \u00c2\u00a9 2000 TAKAHASHI Masayoshi, GOTOU YUUZOU Copyright \u00c2\u00a9 2002\nInternet Programming with Ruby writers. All rights reserved.\n"}, {"c": "WIN32OLE", "d": "\nWIN32OLE\nWIN32OLE objects represent OLE Automation object in Ruby.\nBy using WIN32OLE, you can access OLE server\nlike VBScript.\nHere is sample script.\nrequire 'win32ole'\n\nexcel = WIN32OLE.new('Excel.Application')\nexcel.visible = true\nworkbook = excel.Workbooks.Add();\nworksheet = workbook.Worksheets(1);\nworksheet.Range(\"A1:D1\").value = [\"North\",\"South\",\"East\",\"West\"];\nworksheet.Range(\"A2:B2\").value = [5.2, 10];\nworksheet.Range(\"C2\").value = 8;\nworksheet.Range(\"D2\").value = 20;\n\nrange = worksheet.Range(\"A1:D2\");\nrange.select\nchart = workbook.Charts.Add;\n\nworkbook.saved = true;\n\nexcel.ActiveWorkbook.Close(0);\nexcel.Quit();\n\nUnfortunately, Win32OLE doesn't support the argument passed by\nreference directly. Instead, Win32OLE provides WIN32OLE::ARGV or WIN32OLE_VARIANT object. If you want to\nget the result value of argument passed by reference, you can use WIN32OLE::ARGV or WIN32OLE_VARIANT.\noleobj.method(arg1, arg2, refargv3)\nputs WIN32OLE::ARGV[2]   # the value of refargv3 after called oleobj.method\n\nor\nrefargv3 = WIN32OLE_VARIANT.new(XXX,\n            WIN32OLE::VARIANT::VT_BYREF|WIN32OLE::VARIANT::VT_XXX)\noleobj.method(arg1, arg2, refargv3)\np refargv3.value # the value of refargv3 after called oleobj.method.\n\n"}, {"c": "WIN32OLEQueryInterfaceError", "d": "\n"}, {"c": "WIN32OLERuntimeError", "d": "\nRaised when OLE processing failed.\nEX:\nobj = WIN32OLE.new(\"NonExistProgID\")\n\nraises the exception:\nWIN32OLERuntimeError: unknown OLE server: `NonExistProgID'\n    HRESULT error code:0x800401f3\n      Invalid class string\n"}, {"c": "WIN32OLE_EVENT", "d": "\nWIN32OLE_EVENT objects controls OLE event.\n"}, {"c": "WIN32OLE_METHOD", "d": "\nWIN32OLE_METHOD objects represent OLE method information.\n"}, {"c": "WIN32OLE_PARAM", "d": "\nWIN32OLE_PARAM objects represent param information of the OLE\nmethod.\n"}, {"c": "WIN32OLE_RECORD", "d": "\nWIN32OLE_RECORD objects represents VT_RECORD OLE variant.\nWin32OLE returns WIN32OLE_RECORD object\nif the result value of invoking OLE methods.\nIf COM server in VB.NET ComServer project is the following:\nImports System.Runtime.InteropServices\nPublic Class ComClass\n    Public Structure Book\n        <MarshalAs(UnmanagedType.BStr)> _\n        Public title As String\n        Public cost As Integer\n    End Structure\n    Public Function getBook() As Book\n        Dim book As New Book\n        book.title = \"The Ruby Book\"\n        book.cost = 20\n        Return book\n    End Function\nEnd Class\nthen, you can retrieve getBook return value from the following Ruby script:\nrequire 'win32ole'\nobj = WIN32OLE.new('ComServer.ComClass')\nbook = obj.getBook\nbook.class # => WIN32OLE_RECORD\nbook.title # => \"The Ruby Book\"\nbook.cost  # => 20\n\n"}, {"c": "WIN32OLE_TYPE", "d": "\nWIN32OLE_TYPE objects represent OLE type libarary information.\n"}, {"c": "WIN32OLE_TYPELIB", "d": "\nWIN32OLE_TYPELIB objects represent OLE tyblib information.\n"}, {"c": "WIN32OLE_VARIABLE", "d": "\nWIN32OLE_VARIABLE objects represent OLE variable information.\n"}, {"c": "WIN32OLE_VARIANT", "d": "\nWIN32OLE_VARIANT objects represents OLE variant.\nWin32OLE converts Ruby object into OLE variant automatically when invoking\nOLE methods. If OLE method requires the argument which is different from\nthe variant by automatic conversion of Win32OLE, you can convert the\nspecfied variant type by using WIN32OLE_VARIANT class.\nparam = WIN32OLE_VARIANT.new(10, WIN32OLE::VARIANT::VT_R4)\noleobj.method(param)\n\nWIN32OLE_VARIANT does not support\nVT_RECORD variant. Use WIN32OLE_RECORD\nclass instead of WIN32OLE_VARIANT if\nthe VT_RECORD variant is needed.\n"}, {"c": "XML", "d": "\n"}, {"c": "XMLEncoding_ja", "d": "\n"}, {"c": "XMP", "d": "\nAn example printer for irb.\nIt's much like the standard library PrettyPrint, that shows the value of each\nexpression as it runs.\nIn order to use this library, you must first require it:\nrequire 'irb/xmp'\n\nNow, you can take advantage of the Object#xmp convenience method.\nxmp <<END\n  foo = \"bar\"\n  baz = 42\nEND\n#=> foo = \"bar\"\n  #==>\"bar\"\n#=> baz = 42\n  #==>42\n\nYou can also create an XMP object, with an optional\nbinding to print expressions in the given binding:\nctx = binding\nx = XMP.new ctx\nx.puts\n#=> today = \"a good day\"\n  #==>\"a good day\"\nctx.eval 'today # is what?'\n#=> \"a good day\"\n\n"}, {"c": "YAML", "d": "\nYAML Ain't Markup Language\nThis module provides a Ruby interface for data serialization in YAML\nformat.\nThe underlying implementation is the libyaml wrapper Psych.\nUsage\u00b6 \u2191\nWorking with YAML can be very simple, for example:\nrequire 'yaml'\n# Parse a YAML string\nYAML.load(\"--- foo\") #=> \"foo\"\n\n# Emit some YAML\nYAML.dump(\"foo\")     # => \"--- foo\\n...\\n\"\n{ :a => 'b'}.to_yaml  # => \"---\\n:a: b\\n\"\n\nSecurity\u00b6 \u2191\nDo not use YAML to load untrusted data. Doing so is unsafe and could allow\nmalicious input to execute arbitrary code inside your application. Please\nsee doc/security.rdoc for more information.\nHistory\u00b6 \u2191\nSyck was the original for YAML implementation\nin Ruby's standard library developed by why the lucky stiff.\nYou can still use Syck, if you prefer, for\nparsing and emitting YAML, but you must install the 'syck' gem now\nin order to use it.\nIn older Ruby versions, ie. <= 1.9, Syck is\nstill provided, however it was completely removed with the release of Ruby\n2.0.0.\nMore info\u00b6 \u2191\nFor more advanced details on the implementation see Psych, and also check out yaml.org for spec details and other helpful\ninformation.\nPsych is maintained by Aaron Patterson on github:\ngithub.com/tenderlove/psych\nSyck can also be found on github: github.com/tenderlove/syck\n"}, {"c": "ZeroDivisionError", "d": "\nRaised when attempting to divide an integer by 0.\n42 / 0   #=> ZeroDivisionError: divided by 0\n\nNote that only division by an exact 0 will raise the exception:\n42 /  0.0   #=> Float::INFINITY\n42 / -0.0   #=> -Float::INFINITY\n0  /  0.0   #=> NaN\n\n"}, {"c": "Zlib", "d": "\nThis module provides access to the zlib\nlibrary. Zlib is designed to be a portable,\nfree, general-purpose, legally unencumbered \u00e2\u20ac\u201c that is, not covered by any\npatents \u00e2\u20ac\u201c lossless data-compression library for use on virtually any\ncomputer hardware and operating system.\nThe zlib compression library provides in-memory compression and\ndecompression functions, including integrity checks of the uncompressed\ndata.\nThe zlib compressed data format is described in RFC 1950, which is a\nwrapper around a deflate stream which is described in RFC 1951.\nThe library also supports reading and writing files in gzip (.gz) format\nwith an interface similar to that of IO. The gzip\nformat is described in RFC 1952 which is also a wrapper around a deflate\nstream.\nThe zlib format was designed to be compact and fast for use in memory and\non communications channels. The gzip format was designed for single-file\ncompression on file systems, has a larger header than zlib to maintain\ndirectory information, and uses a different, slower check method than zlib.\nSee your system's zlib.h for further information about zlib\nSample usage\u00b6 \u2191\nUsing the wrapper to compress strings with default parameters is quite\nsimple:\nrequire \"zlib\"\n\ndata_to_compress = File.read(\"don_quixote.txt\")\n\nputs \"Input size: #{data_to_compress.size}\"\n#=> Input size: 2347740\n\ndata_compressed = Zlib::Deflate.deflate(data_to_compress)\n\nputs \"Compressed size: #{data_compressed.size}\"\n#=> Compressed size: 887238\n\nuncompressed_data = Zlib::Inflate.inflate(data_compressed)\n\nputs \"Uncompressed data is: #{uncompressed_data}\"\n#=> Uncompressed data is: The Project Gutenberg EBook of Don Quixote...\n\nClass tree\u00b6 \u2191\n\nZlib::Deflate\n\nZlib::Inflate\n\nZlib::ZStream\n\nZlib::Error\n\nZlib::StreamEnd\n\nZlib::NeedDict\n\nZlib::DataError\n\nZlib::StreamError\n\nZlib::MemError\n\nZlib::BufError\n\nZlib::VersionError\n\n\n(if you have GZIP_SUPPORT)\n\nZlib::GzipReader\n\nZlib::GzipWriter\n\nZlib::GzipFile\n\nZlib::GzipFile::Error\n\nZlib::GzipFile::LengthError\n\nZlib::GzipFile::CRCError\n\nZlib::GzipFile::NoFooter\n\n\n"}, {"c": "ACL::ACLEntry", "d": "\nAn entry in an ACL\n"}, {"c": "ACL::ACLList", "d": "\nA list of ACLEntry objects.  Used to implement\nthe allow and deny halves of an ACL\n"}, {"c": "Benchmark::Tms", "d": "\nA data object, representing the times associated with a benchmark\nmeasurement.\n"}, {"c": "CGI::Cookie", "d": "\nClass representing an HTTP cookie.\nIn addition to its specific fields and methods, a Cookie instance is a delegator to the array of its\nvalues.\nSee RFC 2965.\nExamples of use\u00b6 \u2191\ncookie1 = CGI::Cookie.new(\"name\", \"value1\", \"value2\", ...)\ncookie1 = CGI::Cookie.new(\"name\" => \"name\", \"value\" => \"value\")\ncookie1 = CGI::Cookie.new('name'     => 'name',\n                          'value'    => ['value1', 'value2', ...],\n                          'path'     => 'path',   # optional\n                          'domain'   => 'domain', # optional\n                          'expires'  => Time.now, # optional\n                          'secure'   => true,     # optional\n                          'httponly' => true      # optional\n                          )\n\ncgi.out(\"cookie\" => [cookie1, cookie2]) { \"string\" }\n\nname     = cookie1.name\nvalues   = cookie1.value\npath     = cookie1.path\ndomain   = cookie1.domain\nexpires  = cookie1.expires\nsecure   = cookie1.secure\nhttponly = cookie1.httponly\n\ncookie1.name     = 'name'\ncookie1.value    = ['value1', 'value2', ...]\ncookie1.path     = 'path'\ncookie1.domain   = 'domain'\ncookie1.expires  = Time.now + 30\ncookie1.secure   = true\ncookie1.httponly = true\n"}, {"c": "CGI::HTML3", "d": "\n"}, {"c": "CGI::HTML4", "d": "\n"}, {"c": "CGI::HTML4Fr", "d": "\n"}, {"c": "CGI::HTML4Tr", "d": "\n"}, {"c": "CGI::HTML5", "d": "\n"}, {"c": "CGI::HtmlExtension", "d": "\nMixin module providing HTML generation methods.\nFor example,\ncgi.a(\"http://www.example.com\") { \"Example\" }\n  # => \"<A HREF=\\\"http://www.example.com\\\">Example</A>\"\n\nModules Html3, Html4, etc., contain more basic HTML-generation methods\n(#title, #h1, etc.).\nSee class CGI for a detailed example.\n"}, {"c": "CGI::InvalidEncoding", "d": "\nException raised when there is an invalid\nencoding detected\n"}, {"c": "CGI::QueryExtension", "d": "\nMixin module that provides the following:\n\nAccess to the CGI environment variables as\nmethods.  See documentation to the CGI class for\na list of these variables.  The methods are exposed by removing the leading\nHTTP_ (if it exists) and downcasing the name.  For example,\nauth_type will return the environment variable\nAUTH_TYPE, and accept will return the value for\nHTTP_ACCEPT.\n\nAccess to cookies, including the cookies attribute.\n\nAccess to parameters, including the params attribute, and overloading [] to perform parameter value\nlookup by key.\n\nThe #initialize_query\nmethod, for initializing the above mechanisms, handling multipart forms,\nand allowing the class to be used in \u00e2\u20ac\u0153offline\u00e2\u20ac mode.\n\n"}, {"c": "CGI::Session", "d": "\nOverview\u00b6 \u2191\nThis file provides the CGI::Session class, which\nprovides session support for CGI scripts.  A\nsession is a sequence of HTTP requests and responses linked together and\nassociated with a single client. Information associated with the session is\nstored on the server between requests.  A session id is passed between\nclient and server with every request and response, transparently to the\nuser.  This adds state information to the otherwise stateless HTTP\nrequest/response protocol.\nLifecycle\u00b6 \u2191\nA CGI::Session instance is created from a CGI object.  By default, this CGI::Session instance will start a new session if\nnone currently exists, or continue the current session for this client if\none does exist.  The new_session option can be used to either\nalways or never create a new session.  See new() for more details.\ndelete() deletes a session from\nsession storage.  It does not however remove the session id from the\nclient.  If the client makes another request with the same id, the effect\nwill be to start a new session with the old session's id.\nSetting and retrieving session data.\u00b6 \u2191\nThe Session class associates data with a session\nas key-value pairs. This data can be set and retrieved by indexing the Session instance using '[]', much the same\nas hashes (although other hash methods are not supported).\nWhen session processing has been completed for a request, the session\nshould be closed using the close() method.  This will store the\nsession's state to persistent storage.  If you want to store the\nsession's state to persistent storage without finishing session\nprocessing for this request, call the update() method.\nStoring session state\u00b6 \u2191\nThe caller can specify what form of storage to use for the session's\ndata with the database_manager option to ::new.  The following storage classes\nare provided as part of the standard library:\nCGI::Session::FileStore\n\nstores data as plain text in a flat file.  Only works with String data. \nThis is the default storage type.\nCGI::Session::MemoryStore\n\nstores data in an in-memory hash.  The data only persists for as long as\nthe current Ruby interpreter instance does.\nCGI::Session::PStore\n\nstores data in Marshalled format.  Provided by cgi/session/pstore.rb. \nSupports data of any type, and provides file-locking and transaction\nsupport.\n\nCustom storage types can also be created by defining a class with the\nfollowing methods:\nnew(session, options)\nrestore  # returns hash of session data.\nupdate\nclose\ndelete\n\nChanging storage type mid-session does not work.  Note in particular that\nby default the FileStore and PStore session data files have the same\nname.  If your application switches from one to the other without making\nsure that filenames will be different and clients still have old sessions\nlying around in cookies, then things will break nastily!\nMaintaining the session id.\u00b6 \u2191\nMost session state is maintained on the server.  However, a session id must\nbe passed backwards and forwards between client and server to maintain a\nreference to this session state.\nThe simplest way to do this is via cookies.  The CGI::Session class provides transparent support for\nsession id communication via cookies if the client has cookies enabled.\nIf the client has cookies disabled, the session id must be included as a\nparameter of all requests sent by the client to the server.  The CGI::Session class in conjunction with the CGI class will transparently add the session id as a\nhidden input field to all forms generated using the CGI#form() HTML\ngeneration method.  No built-in support is provided for other mechanisms,\nsuch as URL re-writing.  The caller is responsible for extracting the\nsession id from the #session_id attribute and\nmanually encoding it in URLs and adding it as a hidden input to HTML forms\ncreated by other mechanisms.  Also, session expiry is not automatically\nhandled.\nExamples of use\u00b6 \u2191\nSetting the user's name\u00b6 \u2191\nrequire 'cgi'\nrequire 'cgi/session'\nrequire 'cgi/session/pstore'     # provides CGI::Session::PStore\n\ncgi = CGI.new(\"html4\")\n\nsession = CGI::Session.new(cgi,\n    'database_manager' => CGI::Session::PStore,  # use PStore\n    'session_key' => '_rb_sess_id',              # custom session key\n    'session_expires' => Time.now + 30 * 60,     # 30 minute timeout\n    'prefix' => 'pstore_sid_')                   # PStore option\nif cgi.has_key?('user_name') and cgi['user_name'] != ''\n    # coerce to String: cgi[] returns the\n    # string-like CGI::QueryExtension::Value\n    session['user_name'] = cgi['user_name'].to_s\nelsif !session['user_name']\n    session['user_name'] = \"guest\"\nend\nsession.close\n\nCreating a new session safely\u00b6 \u2191\nrequire 'cgi'\nrequire 'cgi/session'\n\ncgi = CGI.new(\"html4\")\n\n# We make sure to delete an old session if one exists,\n# not just to free resources, but to prevent the session\n# from being maliciously hijacked later on.\nbegin\n    session = CGI::Session.new(cgi, 'new_session' => false)\n    session.delete\nrescue ArgumentError  # if no old session\nend\nsession = CGI::Session.new(cgi, 'new_session' => true)\nsession.close\n\n"}, {"c": "CGI::Util", "d": "\n"}, {"c": "CGI::Session::FileStore", "d": "\nFile-based session storage class.\nImplements session storage as a flat file of 'key=value' values.\nThis storage type only works directly with String values; the user is\nresponsible for converting other types to Strings when storing and from\nStrings when retrieving.\n"}, {"c": "CGI::Session::MemoryStore", "d": "\nIn-memory session storage class.\nImplements session storage as a global in-memory hash.  Session data will only persist for as long as\nthe Ruby interpreter instance does.\n"}, {"c": "CGI::Session::NullStore", "d": "\nDummy session storage class.\nImplements session storage place holder.  No actual storage will be done.\n"}, {"c": "CGI::Session::PStore", "d": "\nPStore-based session storage class.\nThis builds upon the top-level PStore class\nprovided by the library file pstore.rb.  Session data is marshalled and stored in a file.\nFile locking and transaction services are\nprovided.\n"}, {"c": "Complex::compatible", "d": "\n"}, {"c": "CSV::MalformedCSVError", "d": "\nThe error thrown when the parser encounters illegal CSV formatting.\n"}, {"c": "CSV::Row", "d": "\nA CSV::Row is part Array and part Hash.  It retains an order for the fields and\nallows duplicates just as an Array would, but also allows you to access\nfields by name just as you could if they were in a Hash.\nAll rows returned by CSV will be constructed from\nthis class, if header row processing is activated.\n"}, {"c": "CSV::Table", "d": "\nA CSV::Table is a two-dimensional data structure\nfor representing CSV documents.  Tables allow you\nto work with the data by row or column, manipulate the data, and even\nconvert the results back to CSV, if needed.\nAll tables returned by CSV will be constructed\nfrom this class, if header row processing is activated.\n"}, {"c": "DEBUGGER__::Thread", "d": "\n"}, {"c": "Digest::Base", "d": "\nThis abstract class provides a common interface to message digest\nimplementation classes written in C.\nWrite a Digest subclass in C\u00b6 \u2191\nDigest::Base provides a common interface to message\ndigest classes written in C. These classes must provide a struct of type\nrb_digest_metadata_t:\ntypedef int (*rb_digest_hash_init_func_t)(void *);\ntypedef void (*rb_digest_hash_update_func_t)(void *, unsigned char *, size_t);\ntypedef int (*rb_digest_hash_finish_func_t)(void *, unsigned char *);\n\ntypedef struct {\n  int api_version;\n  size_t digest_len;\n  size_t block_len;\n  size_t ctx_size;\n  rb_digest_hash_init_func_t init_func;\n  rb_digest_hash_update_func_t update_func;\n  rb_digest_hash_finish_func_t finish_func;\n} rb_digest_metadata_t;\nThis structure must be set as an instance variable named\nmetadata (without the +@+ in front of the name). By example:\n static const rb_digest_metadata_t sha1 = {\n    RUBY_DIGEST_API_VERSION,\n    SHA1_DIGEST_LENGTH,\n    SHA1_BLOCK_LENGTH,\n    sizeof(SHA1_CTX),\n    (rb_digest_hash_init_func_t)SHA1_Init,\n    (rb_digest_hash_update_func_t)SHA1_Update,\n    (rb_digest_hash_finish_func_t)SHA1_Finish,\n};\n\nrb_ivar_set(cDigest_SHA1, rb_intern(\"metadata\"),\n            Data_Wrap_Struct(0, 0, 0, (void *)&sha1));\n"}, {"c": "Digest::Class", "d": "\nThis module stands as a base class for digest implementation classes.\n"}, {"c": "Digest::Instance", "d": "\nThis module provides instance methods for a digest implementation object to\ncalculate message digest values.\n"}, {"c": "Digest::MD5", "d": "\nA class for calculating message digests using the MD5 Message-Digest Algorithm by RSA Data Security, Inc., described in RFC1321.\nMD5 calculates a digest of 128 bits (16 bytes).\nExamples\u00b6 \u2191\nrequire 'digest'\n\n# Compute a complete digest\nDigest::MD5.hexdigest 'abc'      #=> \"90015098...\"\n\n# Compute digest by chunks\nmd5 = Digest::MD5.new               # =>#<Digest::MD5>\nmd5.update \"ab\"\nmd5 << \"c\"                           # alias for #update\nmd5.hexdigest                        # => \"90015098...\"\n\n# Use the same object to compute another digest\nmd5.reset\nmd5 << \"message\"\nmd5.hexdigest                        # => \"78e73102...\"\n\n"}, {"c": "Digest::RMD160", "d": "\nA class for calculating message digests using RIPEMD-160 cryptographic hash\nfunction, designed by Hans Dobbertin, Antoon Bosselaers, and Bart Preneel.\nRMD160 calculates a digest of 160 bits (20\nbytes).\nExamples\u00b6 \u2191\nrequire 'digest'\n\n# Compute a complete digest\nDigest::RMD160.hexdigest 'abc'      #=> \"8eb208f7...\"\n\n# Compute digest by chunks\nrmd160 = Digest::RMD160.new               # =>#<Digest::RMD160>\nrmd160.update \"ab\"\nrmd160 << \"c\"                           # alias for #update\nrmd160.hexdigest                        # => \"8eb208f7...\"\n\n# Use the same object to compute another digest\nrmd160.reset\nrmd160 << \"message\"\nrmd160.hexdigest                        # => \"1dddbe1b...\"\n\n"}, {"c": "Digest::SHA1", "d": "\nA class for calculating message digests using the SHA-1 Secure Hash Algorithm by NIST (the US' National\nInstitute of Standards and Technology), described in FIPS PUB 180-1.\nSee Digest::Instance for digest API.\nSHA-1 calculates a digest of 160 bits (20 bytes).\nExamples\u00b6 \u2191\nrequire 'digest'\n\n# Compute a complete digest\nDigest::SHA1.hexdigest 'abc'      #=> \"a9993e36...\"\n\n# Compute digest by chunks\nsha1 = Digest::SHA1.new               # =>#<Digest::SHA1>\nsha1.update \"ab\"\nsha1 << \"c\"                           # alias for #update\nsha1.hexdigest                        # => \"a9993e36...\"\n\n# Use the same object to compute another digest\nsha1.reset\nsha1 << \"message\"\nsha1.hexdigest                        # => \"6f9b9af3...\"\n\n"}, {"c": "DRb::DRbArray", "d": "\nAn Array wrapper that can be sent to another server via DRb.\nAll entries in the array will be dumped or be references that point to the\nlocal server.\n"}, {"c": "DRb::DRbBadScheme", "d": "\nError raised by a dRuby protocol when it doesn't support the scheme\nspecified in a URI.  See DRb::DRbProtocol.\n"}, {"c": "DRb::DRbBadURI", "d": "\nError raised by the DRbProtocol module when\nit cannot find any protocol implementation support the scheme specified in\na URI.\n"}, {"c": "DRb::DRbConn", "d": "\nClass handling the connection between a DRbObject and the server the real object lives\non.\nThis class maintains a pool of connections, to reduce the overhead of\nstarting and closing down connections for each method call.\nThis class is used internally by DRbObject. \nThe user does not normally need to deal with it directly.\n"}, {"c": "DRb::DRbConnError", "d": "\nError raised when an error occurs on the underlying communication protocol.\n"}, {"c": "DRb::DRbError", "d": "\nSuperclass of all errors raised in the DRb\nmodule.\n"}, {"c": "DRb::DRbIdConv", "d": "\nClass responsible for converting between an\nobject and its id.\nThis, the default implementation, uses an object's local ObjectSpace __id__ as its id.  This means\nthat an object's identification over drb remains valid only while that\nobject instance remains alive within the server runtime.\nFor alternative mechanisms, see DRb::TimerIdConv in rdb/timeridconv.rb and\nDRbNameIdConv in sample/name.rb in the full drb distribution.\n"}, {"c": "DRb::DRbMessage", "d": "\nHandler for sending and receiving drb messages.\nThis takes care of the low-level marshalling and unmarshalling of drb\nrequests and responses sent over the wire between server and client.  This\nrelieves the implementor of a new drb protocol layer with having to deal\nwith these details.\nThe user does not have to directly deal with this object in normal use.\n"}, {"c": "DRb::DRbObject", "d": "\nObject wrapping a reference to a remote drb\nobject.\nMethod calls on this object are relayed to the\nremote object that this object is a stub for.\n"}, {"c": "DRb::DRbObservable", "d": "\nThe Observable module extended to DRb.  See Observable for details.\n"}, {"c": "DRb::DRbProtocol", "d": "\nModule managing the underlying network\nprotocol(s) used by drb.\nBy default, drb uses the DRbTCPSocket\nprotocol.  Other protocols can be defined.  A protocol must define the\nfollowing class methods:\n[open(uri, config)] Open a client connection to the server at +uri+,\n                    using configuration +config+.  Return a protocol\n                    instance for this connection.\n[open_server(uri, config)] Open a server listening at +uri+,\n                           using configuration +config+.  Return a\n                           protocol instance for this listener.\n[uri_option(uri, config)] Take a URI, possibly containing an option\n                          component (e.g. a trailing '?param=val'),\n                          and return a [uri, option] tuple.\nAll of these methods should raise a DRbBadScheme error if the URI does not identify the protocol they support\n(e.g. \u00e2\u20ac\u0153druby:\u00e2\u20ac for the standard Ruby protocol).  This is how the DRbProtocol module, given a URI, determines which protocol implementation serves\nthat protocol.\nThe protocol instance returned by open_server must have the\nfollowing methods:\naccept\n\nAccept a new connection to the server.  Returns a protocol instance capable\nof communicating with the client.\nclose\n\nClose the server connection.\nuri\n\nGet the URI for this server.\n\nThe protocol instance returned by open must have the following\nmethods:\nsend_request (ref, msg_id, arg, b)\n\nSend a request to ref with the given message id and arguments.\nThis is most easily implemented by calling DRbMessage.send_request,\nproviding a stream that sits on top of the current protocol.\nrecv_reply\n\nReceive a reply from the server and return it as a [success-boolean,\nreply-value] pair.  This is most easily implemented by calling\nDRb.recv_reply, providing a stream that sits on top of the current\nprotocol.\nalive?\n\nIs this connection still alive?\nclose\n\nClose this connection.\n\nThe protocol instance returned by open_server().accept()\nmust have the following methods:\nrecv_request\n\nReceive a request from the client and return a [object, message, args,\nblock] tuple.  This is most easily implemented by calling\nDRbMessage.recv_request, providing a stream that sits on top of the current\nprotocol.\nsend_reply(succ, result)\n\nSend a reply to the client.  This is most easily implemented by calling\nDRbMessage.send_reply, providing a stream that sits on top of the current\nprotocol.\nclose\n\nClose this connection.\n\nA new protocol is registered with the DRbProtocol module using the #add_protocol method.\nFor examples of other protocols, see DRbUNIXSocket in drb/unix.rb, and HTTP0 in\nsample/http0.rb and sample/http0serv.rb in the full drb distribution.\n"}, {"c": "DRb::DRbRemoteError", "d": "\nAn exception wrapping an error object\n"}, {"c": "DRb::DRbServer", "d": "\nClass representing a drb server instance.\nA DRbServer must be running in the local process before any incoming dRuby\ncalls can be accepted, or any local objects can be passed as dRuby\nreferences to remote processes, even if those local objects are never\nactually called remotely. You do not need to start a DRbServer in the local\nprocess if you are only making outgoing dRuby calls passing marshalled\nparameters.\nUnless multiple servers are being used, the local DRbServer is normally\nstarted by calling DRb#start_service.\n"}, {"c": "DRb::DRbServerNotFound", "d": "\nError raised by the DRb module when an attempt is\nmade to refer to the context's current drb server but the context does\nnot have one. See current_server.\n"}, {"c": "DRb::DRbSSLSocket", "d": "\nThe protocol for DRb over an SSL socket\nThe URI for a DRb\nsocket over SSL is:\ndrbssl://<host>:<port>?<option>.  The option\nis optional\n"}, {"c": "DRb::DRbTCPSocket", "d": "\nThe default drb protocol which communicates over a TCP socket.\nThe DRb TCP protocol URI looks like:\ndruby://<host>:<port>?<option>.  The option\nis optional.\n"}, {"c": "DRb::DRbUndumped", "d": "\nMixin module making an object undumpable or unmarshallable.\nIf an object which includes this module is returned by method called over\ndrb, then the object remains in the server space and a reference to the\nobject is returned, rather than the object being marshalled and moved into\nthe client space.\n"}, {"c": "DRb::DRbUNIXSocket", "d": "\nImplements DRb over a UNIX socket\nDRb UNIX socket URIs look like\ndrbunix:<path>?<option>.  The option is optional.\n"}, {"c": "DRb::DRbUnknown", "d": "\nClass wrapping a marshalled object whose type\nis unknown locally.\nIf an object is returned by a method invoked over drb, but the class of the\nobject is unknown in the client namespace, or the object is a constant\nunknown in the client namespace, then the still-marshalled object is\nreturned wrapped in a DRbUnknown instance.\nIf this object is passed as an argument to a method invoked over drb, then\nthe wrapped object is passed instead.\nThe class or constant name of the object can be read from the\nname attribute.  The marshalled object is held in the\nbuf attribute.\n"}, {"c": "DRb::DRbUnknownError", "d": "\nAn exception wrapping a DRb::DRbUnknown\nobject\n"}, {"c": "DRb::ExtServ", "d": "\n"}, {"c": "DRb::ExtServManager", "d": "\n"}, {"c": "DRb::GW", "d": "\nThe GW provides a synchronized store for participants\nin the gateway to communicate.\n"}, {"c": "DRb::GWIdConv", "d": "\nGateway id conversion forms a gateway between different DRb protocols or networks.\nThe gateway needs to install this id conversion and create servers for each\nof the protocols or networks it will be a gateway between.  It then needs\nto create a server that attaches to each of these networks.  For example:\nrequire 'drb/drb'\nrequire 'drb/unix'\nrequire 'drb/gw'\n\nDRb.install_id_conv DRb::GWIdConv.new\ngw = DRb::GW.new\ns1 = DRb::DRbServer.new 'drbunix:/path/to/gateway', gw\ns2 = DRb::DRbServer.new 'druby://example:10000', gw\n\ns1.thread.join\ns2.thread.join\n\nEach client must register services with the gateway, for example:\nDRb.start_service 'drbunix:', nil # an anonymous server\ngw = DRbObject.new nil, 'drbunix:/path/to/gateway'\ngw[:unix] = some_service\nDRb.thread.join\n\n"}, {"c": "DRb::Thread", "d": "\n"}, {"c": "DRb::TimerIdConv", "d": "\nTimer id conversion keeps objects alive for a certain amount of time after\ntheir last access.  The default time period is 600 seconds and can be\nchanged upon initialization.\nTo use TimerIdConv:\nDRb.install_id_conv TimerIdConv.new 60 # one minute\n\n"}, {"c": "DRb::DRbConn::Thread", "d": "\n"}, {"c": "DRb::DRbServer::InvokeMethod18Mixin", "d": "\n"}, {"c": "DRb::DRbSSLSocket::SSLConfig", "d": "\nSSLConfig handles the needed SSL information\nfor establishing a DRbSSLSocket\nconnection, including generating the X509 / RSA pair.\nAn instance of this config can be passed to DRb::DRbSSLSocket.new, DRb::DRbSSLSocket.open and DRb::DRbSSLSocket.open_server\nSee ::new for more details\n"}, {"c": "DRb::TimerIdConv::TimerHolder2", "d": "\n"}, {"c": "DRb::TimerIdConv::TimerHolder2::InvalidIndexError", "d": "\n"}, {"c": "Encoding::CompatibilityError", "d": "\nRaised by Encoding and String methods when\nthe source encoding is incompatible with the target encoding.\n"}, {"c": "Encoding::Converter", "d": "\n"}, {"c": "Encoding::ConverterNotFoundError", "d": "\nRaised by transcoding methods when a named encoding does not correspond\nwith a known converter.\n"}, {"c": "Encoding::InvalidByteSequenceError", "d": "\nRaised by Encoding and String methods when\nthe string being transcoded contains a byte invalid for the either the\nsource or target encoding.\n"}, {"c": "Encoding::UndefinedConversionError", "d": "\nRaised by Encoding and String methods when a\ntranscoding operation fails.\n"}, {"c": "Enumerator::Generator", "d": "\nGenerator\n"}, {"c": "Enumerator::Lazy", "d": "\nLazy\n"}, {"c": "Enumerator::Yielder", "d": "\nYielder\n"}, {"c": "ERB::DefMethod", "d": "\nUtility module to define eRuby script as instance method.\nExample\u00b6 \u2191\nexample.rhtml:\n<% for item in @items %>\n<b><%= item %></b>\n<% end %>\nexample.rb:\nrequire 'erb'\nclass MyClass\n  extend ERB::DefMethod\n  def_erb_method('render()', 'example.rhtml')\n  def initialize(items)\n    @items = items\n  end\nend\nprint MyClass.new([10,20,30]).render()\n\nresult:\n<b>10</b>\n\n<b>20</b>\n\n<b>30</b>\n"}, {"c": "ERB::Util", "d": "\nA utility module for conversion routines, often handy in HTML generation.\n"}, {"c": "Errno::ECONNABORTED", "d": "\nClient sent TCP reset (RST) before server has accepted the connection\nrequested by client.\n"}, {"c": "Errno::ECONNRESET", "d": "\nRemote host reset the connection request.\n"}, {"c": "Errno::EPROTO", "d": "\nProtocol error.\n"}, {"c": "Exception2MessageMapper::E2MM", "d": "\n"}, {"c": "Fiddle::BasicTypes", "d": "\nAdds basic type aliases to the including class for use with Fiddle::Importer.\nThe aliases added are uint and u_int\n(unsigned int) and ulong and u_long\n(unsigned long)\n"}, {"c": "Fiddle::Closure", "d": "\nDescription\u00b6 \u2191\nAn FFI closure wrapper, for handling callbacks.\nExample\u00b6 \u2191\nclosure = Class.new(Fiddle::Closure) {\n  def call\n    10\n  end\n}.new(Fiddle::TYPE_INT, [])\n   #=> #<#<Class:0x0000000150d308>:0x0000000150d240>\nfunc = Fiddle::Function.new(closure, [], Fiddle::TYPE_INT)\n   #=> #<Fiddle::Function:0x00000001516e58>\nfunc.call\n   #=> 10\n\n"}, {"c": "Fiddle::CompositeHandler", "d": "\nUsed internally by Fiddle::Importer\n"}, {"c": "Fiddle::CParser", "d": "\nA mixin that provides methods for parsing C struct and prototype\nsignatures.\nExample\u00b6 \u2191\nrequire 'fiddle/import'\n\ninclude Fiddle::CParser\n  #=> Object\n\nparse_ctype('int')\n  #=> Fiddle::TYPE_INT\n\nparse_struct_signature(['int i', 'char c'])\n  #=> [[Fiddle::TYPE_INT, Fiddle::TYPE_CHAR], [\"i\", \"c\"]]\n\nparse_signature('double sum(double, double)')\n  #=> [\"sum\", Fiddle::TYPE_DOUBLE, [Fiddle::TYPE_DOUBLE, Fiddle::TYPE_DOUBLE]]\n\n"}, {"c": "Fiddle::CStruct", "d": "\nC struct shell\n"}, {"c": "Fiddle::CStructBuilder", "d": "\nUsed to construct C classes (CUnion, CStruct,\netc)\nFiddle::Importer#struct and Fiddle::Importer#union wrap this\nfunctionality in an easy-to-use manner.\n"}, {"c": "Fiddle::CStructEntity", "d": "\nA C struct wrapper\n"}, {"c": "Fiddle::CUnion", "d": "\nC union shell\n"}, {"c": "Fiddle::CUnionEntity", "d": "\nA C union wrapper\n"}, {"c": "Fiddle::DLError", "d": "\nstandard dynamic load exception\n"}, {"c": "Fiddle::Function", "d": "\nDescription\u00b6 \u2191\nA representation of a C function\nExamples\u00b6 \u2191\n'strcpy'\u00b6 \u2191\n@libc = Fiddle.dlopen \"/lib/libc.so.6\"\n   #=> #<Fiddle::Handle:0x00000001d7a8d8>\nf = Fiddle::Function.new(\n  @libc['strcpy'],\n  [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP],\n  Fiddle::TYPE_VOIDP)\n   #=> #<Fiddle::Function:0x00000001d8ee00>\nbuff = \"000\"\n   #=> \"000\"\nstr = f.call(buff, \"123\")\n   #=> #<Fiddle::Pointer:0x00000001d0c380 ptr=0x000000018a21b8 size=0 free=0x00000000000000>\nstr.to_s\n=> \"123\"\nABI check\u00b6 \u2191\n@libc = Fiddle.dlopen \"/lib/libc.so.6\"\n   #=> #<Fiddle::Handle:0x00000001d7a8d8>\nf = Fiddle::Function.new(@libc['strcpy'], [TYPE_VOIDP, TYPE_VOIDP], TYPE_VOIDP)\n   #=> #<Fiddle::Function:0x00000001d8ee00>\nf.abi == Fiddle::Function::DEFAULT\n   #=> true\n\n"}, {"c": "Fiddle::Handle", "d": "\nThe Fiddle::Handle is the manner to access the\ndynamic library\nExample\u00b6 \u2191\nSetup\u00b6 \u2191\nlibc_so = \"/lib64/libc.so.6\"\n=> \"/lib64/libc.so.6\"\n@handle = Fiddle::Handle.new(libc_so)\n=> #<Fiddle::Handle:0x00000000d69ef8>\nSetup, with flags\u00b6 \u2191\nlibc_so = \"/lib64/libc.so.6\"\n=> \"/lib64/libc.so.6\"\n@handle = Fiddle::Handle.new(libc_so, Fiddle::RTLD_LAZY | Fiddle::RTLD_GLOBAL)\n=> #<Fiddle::Handle:0x00000000d69ef8>\nSee RTLD_LAZY and RTLD_GLOBAL\nAddresses to symbols\u00b6 \u2191\nstrcpy_addr = @handle['strcpy']\n=> 140062278451968\nor\nstrcpy_addr = @handle.sym('strcpy')\n=> 140062278451968\n"}, {"c": "Fiddle::Importer", "d": "\nA DSL that provides the means to dynamically load libraries and build\nmodules around them including calling extern functions within the C library\nthat has been loaded.\nExample\u00b6 \u2191\nrequire 'fiddle'\nrequire 'fiddle/import'\n\nmodule LibSum\n  extend Fiddle::Importer\n  dlload './libsum.so'\n  extern 'double sum(double*, int)'\n  extern 'double split(double)'\nend\n\n"}, {"c": "Fiddle::Pointer", "d": "\nFiddle::Pointer is a class to handle C pointers\n"}, {"c": "Fiddle::Win32Types", "d": "\nAdds Windows type aliases to the including class for use with Fiddle::Importer.\nThe aliases added are:\n\nATOM\n\nBOOL\n\nBYTE\n\nDWORD\n\nDWORD32\n\nDWORD64\n\nHANDLE\n\nHDC\n\nHINSTANCE\n\nHWND\n\nLPCSTR\n\nLPSTR\n\nPBYTE\n\nPDWORD\n\nPHANDLE\n\nPVOID\n\nPWORD\n\nUCHAR\n\nUINT\n\nULONG\n\nWORD\n\n"}, {"c": "Fiddle::Closure::BlockCaller", "d": "\nExtends Fiddle::Closure to allow for building\nthe closure in a block\n"}, {"c": "File::Constants", "d": "\nFile::Constants provides file-related\nconstants.  All possible file constants are listed in the documentation but\nthey may not all be present on your platform.\nIf the underlying platform doesn't define a constant the corresponding\nRuby constant is not defined.\nYour platform documentations (e.g. man open(2)) may describe more detailed\ninformation.\n"}, {"c": "File::Stat", "d": "\nObjects of class File::Stat encapsulate common status\ninformation for File objects. The information is recorded at\nthe moment the File::Stat object is created; changes made to\nthe file after that point will not be reflected. File::Stat\nobjects are returned by IO#stat, File::stat,\nFile#lstat, and File::lstat. Many of these\nmethods return platform-specific values, and not all values are meaningful\non all systems. See also Kernel#test.\n"}, {"c": "FileUtils::DryRun", "d": "\nThis module has all methods of FileUtils\nmodule, but never changes files/directories, with printing message before\nacting. This equates to passing the :noop and\n:verbose flag to methods in FileUtils.\n"}, {"c": "FileUtils::LowMethods", "d": "\n"}, {"c": "FileUtils::NoWrite", "d": "\nThis module has all methods of FileUtils\nmodule, but never changes files/directories.  This equates to passing the\n:noop flag to methods in FileUtils.\n"}, {"c": "FileUtils::StreamUtils_", "d": "\n"}, {"c": "FileUtils::Verbose", "d": "\nThis module has all methods of FileUtils\nmodule, but it outputs messages before acting.  This equates to passing the\n:verbose flag to methods in FileUtils.\n"}, {"c": "GC::Profiler", "d": "\nThe GC profiler provides access to information on\nGC runs including time, length and object space\nsize.\nExample:\nGC::Profiler.enable\n\nrequire 'rdoc/rdoc'\n\nGC::Profiler.report\n\nGC::Profiler.disable\n\nSee also GC.count, GC.malloc_allocated_size\nand GC.malloc_allocations\n"}, {"c": "Gem::AvailableSet", "d": "\n"}, {"c": "Gem::BasicSpecification", "d": "\nBasicSpecification is an abstract\nclass which implements some common code used by both Specification and\nStubSpecification.\n"}, {"c": "Gem::BundlerVersionFinder", "d": "\n"}, {"c": "Gem::Command", "d": "\nBase class for all Gem commands.  When creating a new gem command, define\ninitialize, execute, arguments, defaults_str, description and usage (as appropriate).  See the\nabove mentioned methods for details.\nA very good example to look at is Gem::Commands::ContentsCommand\n"}, {"c": "Gem::CommandLineError", "d": "\n"}, {"c": "Gem::CommandManager", "d": "\nThe command manager registers and installs all the individual sub-commands\nsupported by the gem command.\nExtra commands can be provided by writing a rubygems_plugin.rb file in an\ninstalled gem.  You should register your command against the Gem::CommandManager instance, like this:\n# file rubygems_plugin.rb\nrequire 'rubygems/command_manager'\n\nGem::CommandManager.instance.register_command :edit\n\nYou should put the implementation of your command in rubygems/commands.\n# file rubygems/commands/edit_command.rb\nclass Gem::Commands::EditCommand < Gem::Command\n  # ...\nend\n\nSee Gem::Command for instructions on writing gem\ncommands.\n"}, {"c": "Gem::Commands", "d": "\nCommands will be placed in this namespace\n"}, {"c": "Gem::ConfigFile", "d": "\nGem::ConfigFile RubyGems options and gem\ncommand options from gemrc.\ngemrc is a YAML file that uses strings to match gem command arguments and\nsymbols to match RubyGems options.\nGem command arguments use a String key that matches the command name and\nallow you to specify default arguments:\ninstall: --no-rdoc --no-ri\nupdate: --no-rdoc --no-ri\nYou can use gem: to set default arguments for all commands.\nRubyGems options use symbol keys.  Valid options are:\n:backtrace\n\nSee backtrace\n:sources\n\nSets Gem.sources\n:verbose\n\nSee verbose\n\ngemrc files may exist in various locations and are read and merged in the\nfollowing order:\n\nsystem wide (/etc/gemrc)\n\nper user (~/.gemrc)\n\nper environment (gemrc files listed in the GEMRC environment variable)\n\n"}, {"c": "Gem::ConflictError", "d": "\nRaised when there are conflicting gem specs loaded\n"}, {"c": "Gem::ConsoleUI", "d": "\nSubclass of StreamUI that instantiates the user interaction using STDIN,\nSTDOUT, and STDERR.\n"}, {"c": "Gem::DefaultUserInteraction", "d": "\nWhen rubygems/test_case is required the default user interaction is a MockGemUi.\nModule that defines the default UserInteraction.  Any class including this\nmodule will have access to the ui method that returns the\ndefault UI.\n"}, {"c": "Gem::Dependency", "d": "\n"}, {"c": "Gem::DependencyError", "d": "\n"}, {"c": "Gem::DependencyInstaller", "d": "\nInstalls a gem along with all its dependencies from local and remote gems.\n"}, {"c": "Gem::DependencyList", "d": "\nGem::DependencyList is used for\ninstalling and uninstalling gems in the correct order to avoid conflicts.\n"}, {"c": "Gem::DependencyRemovalException", "d": "\n"}, {"c": "Gem::DependencyResolutionError", "d": "\nRaised by Gem::Resolver when a\nGem::Dependency::Conflict reaches the toplevel.  Indicates which\ndependencies were incompatible through conflict and\nconflicting_dependencies\n"}, {"c": "Gem::Deprecate", "d": "\nProvides a single method deprecate to be used to declare when\nsomething is going away.\nclass Legacy\n  def self.klass_method\n    # ...\n  end\n\n  def instance_method\n    # ...\n  end\n\n  extend Gem::Deprecate\n  deprecate :instance_method, \"X.z\", 2011, 4\n\n  class << self\n    extend Gem::Deprecate\n    deprecate :klass_method, :none, 2011, 4\n  end\nend\n\n"}, {"c": "Gem::Doctor", "d": "\nCleans up after a partially-failed uninstall or for an invalid Gem::Specification.\nIf a specification was removed by hand this will remove any remaining\nfiles.\nIf a corrupt specification was installed this will clean up warnings by\nremoving the bogus specification.\n"}, {"c": "Gem::DocumentError", "d": "\n"}, {"c": "Gem::EndOfYAMLException", "d": "\nPotentially raised when a specification is validated.\n"}, {"c": "Gem::ErrorReason", "d": "\n"}, {"c": "Gem::Exception", "d": "\nBase exception class for RubyGems.  All exception raised by RubyGems are a\nsubclass of this one.\n"}, {"c": "Gem::Ext", "d": "\nClasses for building C extensions live here.\n"}, {"c": "Gem::FakeFetcher", "d": "\nA fake Gem::RemoteFetcher for use in tests\nor to avoid real live HTTP requests when testing code that uses RubyGems.\nExample:\n@fetcher = Gem::FakeFetcher.new\n@fetcher.data['http://gems.example.com/yaml'] = source_index.to_yaml\nGem::RemoteFetcher.fetcher = @fetcher\n\n# invoke RubyGems code\n\npaths = @fetcher.paths\nassert_equal 'http://gems.example.com/yaml', paths.shift\nassert paths.empty?, paths.join(', ')\n\nSee RubyGems' tests for more examples of FakeFetcher.\n"}, {"c": "Gem::FilePermissionError", "d": "\nSignals that a file permission error is preventing the user from operating\non the given directory.\n"}, {"c": "Gem::FormatException", "d": "\nUsed to raise parsing and loading errors\n"}, {"c": "Gem::GemcutterUtilities", "d": "\nUtility methods for using the RubyGems API.\n"}, {"c": "Gem::GemNotFoundException", "d": "\n"}, {"c": "Gem::GemNotInHomeException", "d": "\nRaised when attempting to uninstall a gem that isn't in GEM_HOME.\n"}, {"c": "Gem::GemRunner", "d": "\nRun an instance of the gem program.\nGem::GemRunner is only intended for internal\nuse by RubyGems itself.  It does not form any public API and may change at\nany time for any reason.\nIf you would like to duplicate functionality of `gem` commands, use the\nclasses they call directly.\n"}, {"c": "Gem::ImpossibleDependenciesError", "d": "\nRaised by Gem::Resolver when dependencies\nconflict and create the inability to find a valid possible spec for a\nrequest.\n"}, {"c": "Gem::Indexer", "d": "\nTop level class for building the gem repository index.\n"}, {"c": "Gem::Installer", "d": "\nThe installer installs the files contained in the .gem into the Gem.home.\nGem::Installer does the work of putting files\nin all the right places on the filesystem including unpacking the gem into\nits gem dir, installing the gemspec in the specifications dir, storing the\ncached gem in the cache dir, and installing either wrappers or symlinks for\nexecutables.\nThe installer invokes pre and post install hooks.  Hooks can be added\neither through a rubygems_plugin.rb file in an installed gem or via a\nrubygems/defaults/#{RUBY_ENGINE}.rb or\nrubygems/defaults/operating_system.rb file.  See Gem.pre_install and Gem.post_install for details.\n"}, {"c": "Gem::InstallError", "d": "\n"}, {"c": "Gem::InstallerTestCase", "d": "\nA test case for Gem::Installer.\n"}, {"c": "Gem::InstallUpdateOptions", "d": "\nMixin methods for install and update options for Gem::Commands\n"}, {"c": "Gem::InvalidSpecificationException", "d": "\nPotentially raised when a specification is validated.\n"}, {"c": "Gem::Licenses", "d": "\n"}, {"c": "Gem::List", "d": "\n"}, {"c": "Gem::LoadError", "d": "\nRaised when RubyGems is unable to load or activate a gem.  Contains the\nname and version requirements of the gem that either conflicts with already\nactivated gems or that RubyGems is otherwise unable to activate.\n"}, {"c": "Gem::LocalRemoteOptions", "d": "\nMixin methods for local and remote Gem::Command\noptions.\n"}, {"c": "Gem::MissingSpecError", "d": "\nRaised when trying to activate a gem, and that gem does not exist on the\nsystem.  Instead of rescuing from this class, make sure to rescue from the\nsuperclass Gem::LoadError to catch all types\nof load errors.\n"}, {"c": "Gem::MissingSpecVersionError", "d": "\nRaised when trying to activate a gem, and the gem exists on the system, but\nnot the requested version. Instead of rescuing from this class, make sure\nto rescue from the superclass Gem::LoadError\nto catch all types of load errors.\n"}, {"c": "Gem::MockGemUi", "d": "\nThis Gem::StreamUI subclass records input and\noutput to StringIO for retrieval during\ntests.\n"}, {"c": "Gem::NameTuple", "d": "\n"}, {"c": "Gem::NoAliasYAMLTree", "d": "\n"}, {"c": "Gem::OperationNotSupportedError", "d": "\n"}, {"c": "Gem::Package", "d": "\n"}, {"c": "Gem::PackageTask", "d": "\nCreate a package based upon a Gem::Specification.  Gem packages, as well as\nzip files and tar/gzipped packages can be produced by this task.\nIn addition to the Rake targets generated by Rake::PackageTask, a Gem::PackageTask will also generate the\nfollowing tasks:\n\u00e2\u20ac\u0153package_dir/name-version.gem\u00e2\u20ac\n\nCreate a RubyGems package with the given name and version.\n\nExample using a Gem::Specification:\nrequire 'rubygems'\nrequire 'rubygems/package_task'\n\nspec = Gem::Specification.new do |s|\n  s.summary = \"Ruby based make-like utility.\"\n  s.name = 'rake'\n  s.version = PKG_VERSION\n  s.requirements << 'none'\n  s.files = PKG_FILES\n  s.description = <<-EOF\nRake is a Make-like program implemented in Ruby. Tasks\nand dependencies are specified in standard Ruby syntax.\n  EOF\nend\n\nGem::PackageTask.new(spec) do |pkg|\n  pkg.need_zip = true\n  pkg.need_tar = true\nend\n\n"}, {"c": "Gem::PathSupport", "d": "\nGem::PathSupport facilitates the GEM_HOME\nand GEM_PATH environment settings to the rest of RubyGems.\n"}, {"c": "Gem::Platform", "d": "\nAvailable list of platforms for targeting Gem installations.\nSee `gem help platform` for information on platform matching.\n"}, {"c": "Gem::PlatformMismatch", "d": "\nGenerated when trying to lookup a gem to indicate that the gem was found,\nbut that it isn't usable on the current platform.\nfetch and install read these and report them to the user to aid in figuring\nout why a gem couldn't be installed.\n"}, {"c": "Gem::RemoteError", "d": "\nSignals that a remote operation cannot be conducted, probably due to not\nbeing connected (or just not finding host).\n"}, {"c": "Gem::RemoteFetcher", "d": "\nRemoteFetcher handles the details of\nfetching gems and gem information from a remote source.\n"}, {"c": "Gem::RemoteInstallationCancelled", "d": "\n"}, {"c": "Gem::RemoteInstallationSkipped", "d": "\n"}, {"c": "Gem::RemoteSourceException", "d": "\nRepresents an error communicating via HTTP.\n"}, {"c": "Gem::Request", "d": "\n"}, {"c": "Gem::RequestSet", "d": "\nA RequestSet groups a request to activate a\nset of dependencies.\nnokogiri = Gem::Dependency.new 'nokogiri', '~> 1.6'\npg = Gem::Dependency.new 'pg', '~> 0.14'\n\nset = Gem::RequestSet.new nokogiri, pg\n\nrequests = set.resolve\n\np requests.map { |r| r.full_name }\n#=> [\"nokogiri-1.6.0\", \"mini_portile-0.5.1\", \"pg-0.17.0\"]\n\n"}, {"c": "Gem::Requirement", "d": "\nA Requirement is a set of one or more\nversion restrictions. It supports a few (=, !=, >, <, >=,\n<=, ~>) different restriction operators.\nSee Gem::Version for a description on how\nversions and requirements work together in RubyGems.\n"}, {"c": "Gem::Resolver", "d": "\nGiven a set of Gem::Dependency objects as\nneeded and a way to query the set of available specs via\nset, calculates a set of ActivationRequest objects which\nindicate all the specs that should be activated to meet the all the\nrequirements.\n"}, {"c": "Gem::RubyVersionMismatch", "d": "\nRaised when a gem dependencies file specifies a ruby version that does not\nmatch the current version.\n"}, {"c": "Gem::RuntimeRequirementNotMetError", "d": "\n"}, {"c": "Gem::SafeYAML", "d": "\nThis module is used for safely loading YAML specs from a gem.  The\n`safe_load` method defined on this module is specifically designed for\nloading Gem specifications.  For loading other YAML safely, please see Psych.safe_load\n"}, {"c": "Gem::Security", "d": "\nSigning gems\u00b6 \u2191\nThe Gem::Security implements cryptographic\nsignatures for gems.  The section below is a step-by-step guide to using\nsigned gems and generating your own.\nWalkthrough\u00b6 \u2191\nBuilding your certificate\u00b6 \u2191\nIn order to start signing your gems, you'll need to build a private key\nand a self-signed certificate.  Here's how:\n# build a private key and certificate for yourself:\n$ gem cert --build you@example.com\nThis could take anywhere from a few seconds to a minute or two, depending\non the speed of your computer (public key algorithms aren't exactly the\nspeediest crypto algorithms in the world).  When it's finished,\nyou'll see the files \u00e2\u20ac\u0153gem-private_key.pem\u00e2\u20ac and \u00e2\u20ac\u0153gem-public_cert.pem\u00e2\u20ac in\nthe current directory.\nFirst things first: Move both files to ~/.gem if you don't already have\na key and certificate in that directory.  Ensure the file permissions make\nthe key unreadable by others (by default the file is saved securely).\nKeep your private key hidden; if it's compromised, someone can sign\npackages as you (note: PKI has ways of mitigating the risk of stolen keys;\nmore on that later).\nSigning Gems\u00b6 \u2191\nIn RubyGems 2 and newer there is no extra work to sign a gem.  RubyGems\nwill automatically find your key and certificate in your home directory and\nuse them to sign newly packaged gems.\nIf your certificate is not self-signed (signed by a third party) RubyGems\nwill attempt to load the certificate chain from the trusted certificates.\nUse gem cert --add signing_cert.pem to add your signers as\ntrusted certificates.  See below for further information on certificate\nchains.\nIf you build your gem it will automatically be signed.  If you peek inside\nyour gem file, you'll see a couple of new files have been added:\n$ tar tf your-gem-1.0.gem\nmetadata.gz\nmetadata.gz.sum\nmetadata.gz.sig # metadata signature\ndata.tar.gz\ndata.tar.gz.sum\ndata.tar.gz.sig # data signature\nManually signing gems\u00b6 \u2191\nIf you wish to store your key in a separate secure location you'll need\nto set your gems up for signing by hand.  To do this, set the\nsigning_key and cert_chain in the gemspec before\npackaging your gem:\ns.signing_key = '/secure/path/to/gem-private_key.pem'\ns.cert_chain = %w[/secure/path/to/gem-public_cert.pem]\n\nWhen you package your gem with these options set RubyGems will\nautomatically load your key and certificate from the secure paths.\nSigned gems and security policies\u00b6 \u2191\nNow let's verify the signature.  Go ahead and install the gem, but add\nthe following options: -P HighSecurity, like this:\n# install the gem with using the security policy \"HighSecurity\"\n$ sudo gem install your.gem -P HighSecurity\nThe -P option sets your security policy \u00e2\u20ac\u201c we'll talk about\nthat in just a minute.  Eh, what's this?\n$ gem install -P HighSecurity your-gem-1.0.gem\nERROR:  While executing gem ... (Gem::Security::Exception)\n    root cert /CN=you/DC=example is not trusted\nThe culprit here is the security policy.  RubyGems has several different\nsecurity policies.  Let's take a short break and go over the security\npolicies.  Here's a list of the available security policies, and a\nbrief description of each one:\n\nNoSecurity - Well, no security at\nall.  Signed packages are treated like unsigned packages.\n\nLowSecurity - Pretty much no\nsecurity.  If a package is signed then RubyGems will make sure the\nsignature matches the signing certificate, and that the signing certificate\nhasn't expired, but that's it.  A malicious user could easily\ncircumvent this kind of security.\n\nMediumSecurity - Better than LowSecurity and NoSecurity, but still fallible. \nPackage contents are verified against the signing certificate, and the\nsigning certificate is checked for validity, and checked against the rest\nof the certificate chain (if you don't know what a certificate chain\nis, stay tuned, we'll get to that). The biggest improvement over LowSecurity is that MediumSecurity won't install\npackages that are signed by untrusted sources. Unfortunately, MediumSecurity still isn't\ntotally secure \u00e2\u20ac\u201c a malicious user can still unpack the gem, strip the\nsignatures, and distribute the gem unsigned.\n\nHighSecurity - Here's the\nbugger that got us into this mess. The HighSecurity policy is identical to\nthe MediumSecurity policy,\nexcept that it does not allow unsigned gems.  A malicious user doesn't\nhave a whole lot of options here; they can't modify the package\ncontents without invalidating the signature, and they can't modify or\nremove signature or the signing certificate chain, or RubyGems will simply\nrefuse to install the package.  Oh well, maybe they'll have better luck\ncausing problems for CPAN users instead :).\n\nThe reason RubyGems refused to install your shiny new signed gem was\nbecause it was from an untrusted source.  Well, your code is infallible\n(naturally), so you need to add yourself as a trusted source:\n# add trusted certificate\ngem cert --add ~/.gem/gem-public_cert.pem\nYou've now added your public certificate as a trusted source.  Now you\ncan install packages signed by your private key without any hassle. \nLet's try the install command above again:\n# install the gem with using the HighSecurity policy (and this time\n# without any shenanigans)\n$ gem install -P HighSecurity your-gem-1.0.gem\nSuccessfully installed your-gem-1.0\n1 gem installed\nThis time RubyGems will accept your signed package and begin installing.\nWhile you're waiting for RubyGems to work it's magic, have a look\nat some of the other security commands by running gem help\ncert:\nOptions:\n  -a, --add CERT                   Add a trusted certificate.\n  -l, --list [FILTER]              List trusted certificates where the\n                                   subject contains FILTER\n  -r, --remove FILTER              Remove trusted certificates where the\n                                   subject contains FILTER\n  -b, --build EMAIL_ADDR           Build private key and self-signed\n                                   certificate for EMAIL_ADDR\n  -C, --certificate CERT           Signing certificate for --sign\n  -K, --private-key KEY            Key for --sign or --build\n  -s, --sign CERT                  Signs CERT with the key from -K\n                                   and the certificate from -C\nWe've already covered the --build option, and the\n--add, --list, and --remove commands\nseem fairly straightforward; they allow you to add, list, and remove the\ncertificates in your trusted certificate list.  But what's with this\n--sign option?\nCertificate chains\u00b6 \u2191\nTo answer that question, let's take a look at \u00e2\u20ac\u0153certificate chains\u00e2\u20ac, a\nconcept I mentioned earlier.  There are a couple of problems with\nself-signed certificates: first of all, self-signed certificates don't\noffer a whole lot of security.  Sure, the certificate says Yukihiro\nMatsumoto, but how do I know it was actually generated and signed by matz\nhimself unless he gave me the certificate in person?\nThe second problem is scalability.  Sure, if there are 50 gem authors, then\nI have 50 trusted certificates, no problem.  What if there are 500 gem\nauthors?  1000?  Having to constantly add new trusted certificates is a\npain, and it actually makes the trust system less secure by encouraging\nRubyGems users to blindly trust new certificates.\nHere's where certificate chains come in.  A certificate chain\nestablishes an arbitrarily long chain of trust between an issuing\ncertificate and a child certificate.  So instead of trusting certificates\non a per-developer basis, we use the PKI concept of certificate chains to\nbuild a logical hierarchy of trust.  Here's a hypothetical example of a\ntrust hierarchy based (roughly) on geography:\n                    --------------------------\n                    | rubygems@rubygems.org |\n                    --------------------------\n                                |\n              -----------------------------------\n              |                                 |\n  ----------------------------    -----------------------------\n  |  seattlerb@seattlerb.org |    | dcrubyists@richkilmer.com |\n  ----------------------------    -----------------------------\n       |                |                 |             |\n---------------   ----------------   -----------   --------------\n|   drbrain   |   |   zenspider  |   | pabs@dc |   | tomcope@dc |\n---------------   ----------------   -----------   --------------\nNow, rather than having 4 trusted certificates (one for drbrain, zenspider,\npabs@dc, and tomecope@dc), a user could actually get by with one\ncertificate, the \u00e2\u20ac\u0153rubygems@rubygems.org\u00e2\u20ac certificate.\nHere's how it works:\nI install \u00e2\u20ac\u0153rdoc-3.12.gem\u00e2\u20ac, a package signed by \u00e2\u20ac\u0153drbrain\u00e2\u20ac.  I've never\nheard of \u00e2\u20ac\u0153drbrain\u00e2\u20ac, but his certificate has a valid signature from the\n\u00e2\u20ac\u0153seattle.rb@seattlerb.org\u00e2\u20ac certificate, which in turn has a valid signature\nfrom the \u00e2\u20ac\u0153rubygems@rubygems.org\u00e2\u20ac certificate.  Voila!  At this point,\nit's much more reasonable for me to trust a package signed by\n\u00e2\u20ac\u0153drbrain\u00e2\u20ac, because I can establish a chain to \u00e2\u20ac\u0153rubygems@rubygems.org\u00e2\u20ac,\nwhich I do trust.\nSigning certificates\u00b6 \u2191\nThe --sign option allows all this to happen.  A developer\ncreates their build certificate with the --build option, then\nhas their certificate signed by taking it with them to their next regional\nRuby meetup (in our hypothetical example), and it's signed there by the\nperson holding the regional RubyGems signing certificate, which is signed\nat the next RubyConf by the holder of the top-level RubyGems certificate. \nAt each point the issuer runs the same command:\n# sign a certificate with the specified key and certificate\n# (note that this modifies client_cert.pem!)\n$ gem cert -K /mnt/floppy/issuer-priv_key.pem -C issuer-pub_cert.pem\n   --sign client_cert.pem\nThen the holder of issued certificate (in this case, your buddy \u00e2\u20ac\u0153drbrain\u00e2\u20ac),\ncan start using this signed certificate to sign RubyGems.  By the way, in\norder to let everyone else know about his new fancy signed certificate,\n\u00e2\u20ac\u0153drbrain\u00e2\u20ac would save his newly signed certificate as\n~/.gem/gem-public_cert.pem\nObviously this RubyGems trust infrastructure doesn't exist yet.  Also,\nin the \u00e2\u20ac\u0153real world\u00e2\u20ac, issuers actually generate the child certificate from a\ncertificate request, rather than sign an existing certificate.  And our\nhypothetical infrastructure is missing a certificate revocation system.\nThese are that can be fixed in the future\u00e2\u20ac\u00a6\nAt this point you should know how to do all of these new and interesting\nthings:\n\nbuild a gem signing key and certificate\n\nadjust your security policy\n\nmodify your trusted certificate list\n\nsign a certificate\n\nManually verifying signatures\u00b6 \u2191\nIn case you don't trust RubyGems you can verify gem signatures\nmanually:\n\nFetch and unpack the gem\ngem fetch some_signed_gem\ntar -xf some_signed_gem-1.0.gem\n\nGrab the public key from the gemspec\ngem spec some_signed_gem-1.0.gem cert_chain | \\\n  ruby -ryaml -e 'puts YAML.load_documents($stdin)' > public_key.crt\n\nGenerate a SHA1 hash of the data.tar.gz\nopenssl dgst -sha1 < data.tar.gz > my.hash\n\n\nVerify the signature\nopenssl rsautl -verify -inkey public_key.crt -certin \\\n  -in data.tar.gz.sig > verified.hash\n\nCompare your hash to the verified hash\ndiff -s verified.hash my.hash\n\nRepeat 5 and 6 with metadata.gz\n\nOpenSSL Reference\u00b6 \u2191\nThe .pem files generated by \u00e2\u20ac\u201cbuild and \u00e2\u20ac\u201csign are PEM files.  Here's a\ncouple of useful OpenSSL commands for\nmanipulating them:\n# convert a PEM format X509 certificate into DER format:\n# (note: Windows .cer files are X509 certificates in DER format)\n$ openssl x509 -in input.pem -outform der -out output.der\n\n# print out the certificate in a human-readable format:\n$ openssl x509 -in input.pem -noout -text\nAnd you can do the same thing with the private key file as well:\n# convert a PEM format RSA key into DER format:\n$ openssl rsa -in input_key.pem -outform der -out output_key.der\n\n# print out the key in a human readable format:\n$ openssl rsa -in input_key.pem -noout -text\nBugs/TODO\u00b6 \u2191\n\nThere's no way to define a system-wide trust list.\n\ncustom security policies (from a YAML file, etc)\n\nSimple method to generate a signed certificate request\n\nSupport for OCSP, SCVP, CRLs, or some other form of cert status check (list\nis in order of preference)\n\nSupport for encrypted private keys\n\nSome sort of semi-formal trust hierarchy (see long-winded explanation\nabove)\n\nPath discovery (for gem certificate chains that don't have a\nself-signed root) \u00e2\u20ac\u201c by the way, since we don't have this, THE ROOT OF\nTHE CERTIFICATE CHAIN MUST BE SELF SIGNED if Gem::Security::Policy#verify_root\nis true (and it is for the MediumSecurity and HighSecurity policies)\n\nBetter explanation of X509 naming (ie, we don't have to use email\naddresses)\n\nHonor AIA field (see note about OCSP above)\n\nHonor extension restrictions\n\nMight be better to store the certificate chain as a PKCS#7 or PKCS#12 file,\ninstead of an array embedded in the metadata.\n\nFlexible signature and key algorithms, not hard-coded to RSA and SHA1.\n\nOriginal author\u00b6 \u2191\nPaul Duncan <pabs@pablotron.org> pablotron.org/\n"}, {"c": "Gem::SecurityOption", "d": "\nMixin methods for security option for Gem::Commands\n"}, {"c": "Gem::Server", "d": "\nGem::Server and allows users to serve gems for\nconsumption by `gem \u00e2\u20ac\u201cremote-install`.\ngem_server starts an HTTP server on the given port and serves the\nfollowing:\n\n\u00e2\u20ac\u0153/\u00e2\u20ac - Browsing of gem spec files for installed gems\n\n\u00e2\u20ac\u0153/specs.#{Gem.marshal_version}.gz\u00e2\u20ac - specs name/version/platform index\n\n\u00e2\u20ac\u0153/latest_specs.#{Gem.marshal_version}.gz\u00e2\u20ac - latest specs\nname/version/platform index\n\n\u00e2\u20ac\u0153/quick/\u00e2\u20ac - Individual gemspecs\n\n\u00e2\u20ac\u0153/gems\u00e2\u20ac - Direct access to download the installable gems\n\n\u00e2\u20ac\u0153/rdoc?q=\u00e2\u20ac - Search for installed rdoc documentation\n\nUsage\u00b6 \u2191\ngem_server = Gem::Server.new Gem.dir, 8089, false\ngem_server.run\n\n"}, {"c": "Gem::SilentUI", "d": "\nSilentUI is a UI choice that is absolutely\nsilent.\n"}, {"c": "Gem::Source", "d": "\nA Source knows how to list and fetch gems from a\nRubyGems marshal index.\nThere are other Source subclasses for installed\ngems, local gems, the bundler dependency API and so-forth.\n"}, {"c": "Gem::SourceFetchProblem", "d": "\nAn error that indicates we weren't able to fetch some data from a\nsource\n"}, {"c": "Gem::SourceList", "d": "\nThe SourceList represents the sources\nrubygems has been configured to use. A source may be created from an array\nof sources:\nGem::SourceList.from %w[https://rubygems.example https://internal.example]\n\nOr by adding them:\nsources = Gem::SourceList.new\nsources << 'https://rubygems.example'\n\nThe most common way to get a SourceList is Gem.sources.\n"}, {"c": "Gem::SpecFetcher", "d": "\nSpecFetcher handles metadata updates from\nremote gem repositories.\n"}, {"c": "Gem::Specification", "d": "\nThe Specification class contains the\ninformation for a Gem.  Typically defined in a .gemspec file or a Rakefile,\nand looks like this:\nGem::Specification.new do |s|\n  s.name        = 'example'\n  s.version     = '0.1.0'\n  s.licenses    = ['MIT']\n  s.summary     = \"This is an example!\"\n  s.description = \"Much longer explanation of the example!\"\n  s.authors     = [\"Ruby Coder\"]\n  s.email       = 'rubycoder@example.com'\n  s.files       = [\"lib/example.rb\"]\n  s.homepage    = 'https://rubygems.org/gems/example'\n  s.metadata    = { \"source_code_uri\" => \"https://github.com/example/example\" }\nend\n\nStarting in RubyGems 2.0, a Specification\ncan hold arbitrary metadata.  See metadata for\nrestrictions on the format and size of metadata items you may add to a\nspecification.\n"}, {"c": "Gem::SpecificGemNotFoundException", "d": "\nRaised by the DependencyInstaller when a specific gem cannot be found\n"}, {"c": "Gem::StreamUI", "d": "\nGem::StreamUI implements a simple stream based\nuser interface.\n"}, {"c": "Gem::StubSpecification", "d": "\nGem::StubSpecification reads the stub:\nline from the gemspec.  This prevents us having to eval the entire gemspec\nin order to find out certain information.\n"}, {"c": "Gem::SystemExitException", "d": "\nRaised to indicate that a system exit should occur with the specified #exit_code\n"}, {"c": "Gem::TestCase", "d": "\nRubyGemTestCase provides a variety of methods for testing rubygems and\ngem-related behavior in a sandbox.  Through RubyGemTestCase you can install\nand uninstall gems, fetch remote gems through a stub fetcher and be assured\nyour normal set of gems is not affected.\nTests are always run at a safe level of 1.\n"}, {"c": "Gem::Text", "d": "\nA collection of text-wrangling methods\n"}, {"c": "Gem::Uninstaller", "d": "\nAn Uninstaller.\nThe uninstaller fires pre and post uninstall hooks.  Hooks can be added\neither through a rubygems_plugin.rb file in an installed gem or via a\nrubygems/defaults/#{RUBY_ENGINE}.rb or\nrubygems/defaults/operating_system.rb file.  See Gem.pre_uninstall and Gem.post_uninstall for\ndetails.\n"}, {"c": "Gem::UnsatisfiableDependencyError", "d": "\nRaised by Resolver when a dependency requests a gem for which there is no\nspec.\n"}, {"c": "Gem::UriFormatter", "d": "\nThe UriFormatter handles URIs from\nuser-input and escaping.\nuf = Gem::UriFormatter.new 'example.com'\n\np uf.normalize #=> 'http://example.com'\n\n"}, {"c": "Gem::UserInteraction", "d": "\nUserInteraction allows RubyGems to\ninteract with the user through standard methods that can be replaced with\nmore-specific UI methods for different displays.\nSince UserInteraction dispatches to a\nconcrete UI class you may need to reference other classes for specific\nbehavior such as Gem::ConsoleUI or Gem::SilentUI.\nExample:\nclass X\n  include Gem::UserInteraction\n\n  def get_answer\n    n = ask(\"What is the meaning of life?\")\n  end\nend\n\n"}, {"c": "Gem::Util", "d": "\nThis module contains various utility methods as module methods.\n"}, {"c": "Gem::Validator", "d": "\nValidator performs various gem file and gem\ndatabase validation\n"}, {"c": "Gem::VerificationError", "d": "\nRaised by Gem::Validator when something is not\nright in a gem.\n"}, {"c": "Gem::Version", "d": "\nThe Version class processes string versions into\ncomparable values. A version string should normally be a series of numbers\nseparated by periods. Each part (digits separated by periods) is considered\nits own number, and these are used for sorting. So for instance, 3.10 sorts\nhigher than 3.2 because ten is greater than two.\nIf any part contains letters (currently only a-z are supported) then that\nversion is considered prerelease. Versions with a prerelease part in the\nNth part sort less than versions with N-1 parts. Prerelease parts are\nsorted alphabetically using the normal Ruby string sorting rules. If a\nprerelease part contains both letters and numbers, it will be broken into\nmultiple parts to provide expected sort behavior (1.0.a10 becomes 1.0.a.10,\nand is greater than 1.0.a9).\nPrereleases sort between real releases (newest to oldest):\n\n1.0\n\n1.0.b1\n\n1.0.a.2\n\n0.9\n\nIf you want to specify a version restriction that includes both prereleases\nand regular releases of the 1.x series this is the best way:\ns.add_dependency 'example', '>= 1.0.0.a', '< 2.0.0'\n\nHow Software Changes\u00b6 \u2191\nUsers expect to be able to specify a version constraint that gives them\nsome reasonable expectation that new versions of a library will work with\ntheir software if the version constraint is true, and not work with their\nsoftware if the version constraint is false.  In other words, the perfect\nsystem will accept all compatible versions of the library and reject all\nincompatible versions.\nLibraries change in 3 ways (well, more than 3, but stay focused here!).\n\nThe change may be an implementation detail only and have no effect on the\nclient software.\n\nThe change may add new features, but do so in a way that client software\nwritten to an earlier version is still compatible.\n\nThe change may change the public interface of the library in such a way\nthat old software is no longer compatible.\n\nSome examples are appropriate at this point.  Suppose I have a Stack class\nthat supports a push and a pop method.\nExamples of Category 1 changes:\u00b6 \u2191\n\nSwitch from an array based implementation to a linked-list based\nimplementation.\n\nProvide an automatic (and transparent) backing store for large stacks.\n\nExamples of Category 2 changes might be:\u00b6 \u2191\n\nAdd a depth method to return the current depth of the stack.\n\nAdd a top method that returns the current top of stack\n(without changing the stack).\n\nChange push so that it returns the item pushed (previously it\nhad no usable return value).\n\nExamples of Category 3 changes might be:\u00b6 \u2191\n\nChanges pop so that it no longer returns a value (you must use\ntop to get the top of the stack).\n\nRename the methods to push_item and pop_item.\n\nRubyGems Rational Versioning\u00b6 \u2191\n\nVersions shall be represented by three non-negative integers, separated by\nperiods (e.g. 3.1.4).  The first integers is the \u00e2\u20ac\u0153major\u00e2\u20ac version number,\nthe second integer is the \u00e2\u20ac\u0153minor\u00e2\u20ac version number, and the third integer is\nthe \u00e2\u20ac\u0153build\u00e2\u20ac number.\n\nA category 1 change (implementation detail) will increment the build\nnumber.\n\nA category 2 change (backwards compatible) will increment the minor version\nnumber and reset the build number.\n\nA category 3 change (incompatible) will increment the major build number\nand reset the minor and build numbers.\n\nAny \u00e2\u20ac\u0153public\u00e2\u20ac release of a gem should have a different version.  Normally\nthat means incrementing the build number.  This means a developer can\ngenerate builds all day long, but as soon as they make a public release,\nthe version must be updated.\n\nExamples\u00b6 \u2191\nLet's work through a project lifecycle using our Stack example from\nabove.\nVersion 0.0.1\n\nThe initial Stack class is release.\nVersion 0.0.2\n\nSwitched to a linked=list implementation because it is cooler.\nVersion 0.1.0\n\nAdded a depth method.\nVersion 1.0.0\n\nAdded top and made pop return nil\n(pop used to return the  old top item).\nVersion 1.1.0\n\npush now returns the value pushed (it used it return nil).\nVersion 1.1.1\n\nFixed a bug in the linked list implementation.\nVersion 1.1.2\n\nFixed a bug introduced in the last fix.\n\nClient A needs a stack with basic push/pop capability.  They write to the\noriginal interface (no top), so their version constraint looks\nlike:\ngem 'stack', '>= 0.0'\n\nEssentially, any version is OK with Client A.  An incompatible change to\nthe library will cause them grief, but they are willing to take the chance\n(we call Client A optimistic).\nClient B is just like Client A except for two things: (1) They use the\ndepth method and (2) they are worried about future\nincompatibilities, so they write their version constraint like this:\ngem 'stack', '~> 0.1'\n\nThe depth method was introduced in version 0.1.0, so that\nversion or anything later is fine, as long as the version stays below\nversion 1.0 where incompatibilities are introduced.  We call Client B\npessimistic because they are worried about incompatible future changes (it\nis OK to be pessimistic!).\nPreventing Version Catastrophe:\u00b6 \u2191\nFrom: blog.zenspider.com/2008/10/rubygems-howto-preventing-cata.html\nLet's say you're depending on the fnord gem version 2.y.z. If you\nspecify your dependency as \u00e2\u20ac\u0153>= 2.0.0\u00e2\u20ac then, you're good, right? What\nhappens if fnord 3.0 comes out and it isn't backwards compatible with\n2.y.z? Your stuff will break as a result of using \u00e2\u20ac\u0153>=\u00e2\u20ac. The better route\nis to specify your dependency with an \u00e2\u20ac\u0153approximate\u00e2\u20ac version specifier\n(\u00e2\u20ac\u0153~>\u00e2\u20ac). They're a tad confusing, so here is how the dependency\nspecifiers work:\nSpecification From  ... To (exclusive)\n\">= 3.0\"      3.0   ... &infin;\n\"~> 3.0\"      3.0   ... 4.0\n\"~> 3.0.0\"    3.0.0 ... 3.1\n\"~> 3.5\"      3.5   ... 4.0\n\"~> 3.5.0\"    3.5.0 ... 3.6\n\"~> 3\"        3.0   ... 4.0\nFor the last example, single-digit versions are automatically extended with\na zero to give a sensible result.\n"}, {"c": "Gem::VersionOption", "d": "\nMixin methods for \u00e2\u20ac\u201cversion and \u00e2\u20ac\u201cplatform Gem::Command options.\n"}, {"c": "Gem::Commands::BuildCommand", "d": "\n"}, {"c": "Gem::Commands::CertCommand", "d": "\n"}, {"c": "Gem::Commands::CheckCommand", "d": "\n"}, {"c": "Gem::Commands::CleanupCommand", "d": "\n"}, {"c": "Gem::Commands::ContentsCommand", "d": "\n"}, {"c": "Gem::Commands::DependencyCommand", "d": "\n"}, {"c": "Gem::Commands::EnvironmentCommand", "d": "\n"}, {"c": "Gem::Commands::FetchCommand", "d": "\n"}, {"c": "Gem::Commands::GenerateIndexCommand", "d": "\nGenerates a index files for use as a gem server.\nSee `gem help generate_index`\n"}, {"c": "Gem::Commands::HelpCommand", "d": "\n"}, {"c": "Gem::Commands::InstallCommand", "d": "\nGem installer command line tool\nSee `gem help install`\n"}, {"c": "Gem::Commands::ListCommand", "d": "\nAn alternate to Gem::Commands::QueryCommand\nthat searches for gems starting with the supplied argument.\n"}, {"c": "Gem::Commands::LockCommand", "d": "\n"}, {"c": "Gem::Commands::MirrorCommand", "d": "\n"}, {"c": "Gem::Commands::OpenCommand", "d": "\n"}, {"c": "Gem::Commands::OutdatedCommand", "d": "\n"}, {"c": "Gem::Commands::OwnerCommand", "d": "\n"}, {"c": "Gem::Commands::PristineCommand", "d": "\n"}, {"c": "Gem::Commands::PushCommand", "d": "\n"}, {"c": "Gem::Commands::QueryCommand", "d": "\n"}, {"c": "Gem::Commands::RdocCommand", "d": "\n"}, {"c": "Gem::Commands::SearchCommand", "d": "\n"}, {"c": "Gem::Commands::ServerCommand", "d": "\n"}, {"c": "Gem::Commands::SetupCommand", "d": "\nInstalls RubyGems itself.  This command is ordinarily only available from a\nRubyGems checkout or tarball.\n"}, {"c": "Gem::Commands::SigninCommand", "d": "\n"}, {"c": "Gem::Commands::SignoutCommand", "d": "\n"}, {"c": "Gem::Commands::SourcesCommand", "d": "\n"}, {"c": "Gem::Commands::SpecificationCommand", "d": "\n"}, {"c": "Gem::Commands::StaleCommand", "d": "\n"}, {"c": "Gem::Commands::UninstallCommand", "d": "\nGem uninstaller command line tool\nSee `gem help uninstall`\n"}, {"c": "Gem::Commands::UnpackCommand", "d": "\n"}, {"c": "Gem::Commands::UpdateCommand", "d": "\n"}, {"c": "Gem::Commands::WhichCommand", "d": "\n"}, {"c": "Gem::Commands::YankCommand", "d": "\n"}, {"c": "Gem::Ext::Builder", "d": "\n"}, {"c": "Gem::Ext::BuildError", "d": "\nRaised when there is an error while building extensions.\n"}, {"c": "Gem::Ext::CmakeBuilder", "d": "\n"}, {"c": "Gem::Ext::ConfigureBuilder", "d": "\n"}, {"c": "Gem::Ext::ExtConfBuilder", "d": "\n"}, {"c": "Gem::Ext::RakeBuilder", "d": "\n"}, {"c": "Gem::Installer::FakePackage", "d": "\n"}, {"c": "Gem::MockGemUi::InputEOFError", "d": "\nRaised when you haven't provided enough input to your MockGemUi\n"}, {"c": "Gem::MockGemUi::SystemExitException", "d": "\n"}, {"c": "Gem::MockGemUi::TermError", "d": "\n"}, {"c": "Gem::MockGemUi::TTY", "d": "\n"}, {"c": "Gem::Package::DigestIO", "d": "\nIO wrapper that creates digests of contents\nwritten to the IO it wraps.\n"}, {"c": "Gem::Package::Error", "d": "\n"}, {"c": "Gem::Package::FormatError", "d": "\n"}, {"c": "Gem::Package::NonSeekableIO", "d": "\n"}, {"c": "Gem::Package::Old", "d": "\nThe format class knows the guts of the ancient .gem file format and\nprovides the capability to read such ancient gems.\nPlease pretend this doesn't exist.\n"}, {"c": "Gem::Package::PathError", "d": "\n"}, {"c": "Gem::Package::TarHeader", "d": "\nA header for a tar file\n"}, {"c": "Gem::Package::TarInvalidError", "d": "\nRaised when a tar file is corrupt\n"}, {"c": "Gem::Package::TarReader", "d": "\nTarReader reads tar files and allows iteration\nover their items\n"}, {"c": "Gem::Package::TarTestCase", "d": "\nA test case for Gem::Package::Tar* classes\n"}, {"c": "Gem::Package::TarWriter", "d": "\nAllows writing of tar files\n"}, {"c": "Gem::Package::TooLongFileName", "d": "\n"}, {"c": "Gem::Package::TarReader::Entry", "d": "\nClass for reading entries out of a tar\nfile\n"}, {"c": "Gem::Package::TarReader::UnexpectedEOF", "d": "\nRaised if the tar IO is not seekable\n"}, {"c": "Gem::Package::TarWriter::BoundedStream", "d": "\nIO wrapper that allows writing a limited\namount of data\n"}, {"c": "Gem::Package::TarWriter::FileOverflow", "d": "\n"}, {"c": "Gem::Package::TarWriter::RestrictedStream", "d": "\nIO wrapper that provides only write\n"}, {"c": "Gem::RemoteFetcher::FetchError", "d": "\nA FetchError exception wraps up the various\npossible IO and HTTP failures that could happen\nwhile downloading from the internet.\n"}, {"c": "Gem::RemoteFetcher::UnknownHostError", "d": "\nA FetchError that indicates that the reason\nfor not being able to fetch data was that the host could not be contacted\n"}, {"c": "Gem::RequestSet::GemDependencyAPI", "d": "\nA semi-compatible DSL for the Bundler Gemfile and Isolate gem dependencies\nfiles.\nTo work with both the Bundler Gemfile and Isolate formats this\nimplementation takes some liberties to allow compatibility with each, most\nnotably in source.\nA basic gem dependencies file will look like the following:\nsource 'https://rubygems.org'\n\ngem 'rails', '3.2.14a\ngem 'devise', '~> 2.1', '>= 2.1.3'\ngem 'cancan'\ngem 'airbrake'\ngem 'pg'\nRubyGems recommends saving this as gem.deps.rb over Gemfile or Isolate.\nTo install the gems in this Gemfile use `gem install -g` to install it and\ncreate a lockfile.  The lockfile will ensure that when you make changes to\nyour gem dependencies file a minimum amount of change is made to the\ndependencies of your gems.\nRubyGems can activate all the gems in your dependencies file at startup\nusing the RUBYGEMS_GEMDEPS environment variable or through Gem.use_gemdeps. See Gem.use_gemdeps for details\nand warnings.\nSee `gem help install` and `gem help gem_dependencies` for further details.\n"}, {"c": "Gem::RequestSet::Lockfile", "d": "\nParses a gem.deps.rb.lock file and constructs a LockSet containing the\ndependencies found inside.  If the lock file is missing no LockSet is\nconstructed.\n"}, {"c": "Gem::RequestSet::Lockfile::ParseError", "d": "\nRaised when a lockfile cannot be parsed\n"}, {"c": "Gem::RequestSet::Lockfile::Parser", "d": "\n"}, {"c": "Gem::RequestSet::Lockfile::Tokenizer", "d": "\n"}, {"c": "Gem::Requirement::BadRequirementError", "d": "\nRaised when a bad requirement is encountered\n"}, {"c": "Gem::Resolver::ActivationRequest", "d": "\nSpecifies a Specification object that should be activated.  Also contains a\ndependency that was used to introduce this activation.\n"}, {"c": "Gem::Resolver::APISet", "d": "\nThe global rubygems pool, available via the rubygems.org API. Returns\ninstances of APISpecification.\n"}, {"c": "Gem::Resolver::APISpecification", "d": "\nRepresents a specification retrieved via the rubygems.org API.\nThis is used to avoid loading the full Specification object when all we\nneed is the name, version, and dependencies.\n"}, {"c": "Gem::Resolver::BestSet", "d": "\nThe BestSet chooses the best available method to\nquery a remote index.\nIt combines IndexSet and APISet\n"}, {"c": "Gem::Resolver::ComposedSet", "d": "\nA ComposedSet allows multiple sets to be\nqueried like a single set.\nTo create a composed set with any number of sets use:\nGem::Resolver.compose_sets set1, set2\n\nThis method will eliminate nesting of composed sets.\n"}, {"c": "Gem::Resolver::Conflict", "d": "\nUsed internally to indicate that a dependency conflicted with a spec that\nwould be activated.\n"}, {"c": "Gem::Resolver::CurrentSet", "d": "\nA set which represents the installed gems. Respects all the normal settings\nthat control where to look for installed gems.\n"}, {"c": "Gem::Resolver::DependencyRequest", "d": "\nUsed Internally. Wraps a Dependency object to also track which spec\ncontained the Dependency.\n"}, {"c": "Gem::Resolver::GitSet", "d": "\nA GitSet represents gems that are sourced from\ngit repositories.\nThis is used for gem dependency file support.\nExample:\nset = Gem::Resolver::GitSet.new\nset.add_git_gem 'rake', 'git://example/rake.git', tag: 'rake-10.1.0'\n\n"}, {"c": "Gem::Resolver::GitSpecification", "d": "\nA GitSpecification represents a gem\nthat is sourced from a git repository and is being loaded through a gem\ndependencies file through the git: option.\n"}, {"c": "Gem::Resolver::IndexSet", "d": "\nThe global rubygems pool represented via the traditional source index.\n"}, {"c": "Gem::Resolver::IndexSpecification", "d": "\nRepresents a possible Specification object returned from IndexSet.  Used to\ndelay needed to download full Specification objects when only the\nname and version are needed.\n"}, {"c": "Gem::Resolver::InstalledSpecification", "d": "\nAn InstalledSpecification\nrepresents a gem that is already installed locally.\n"}, {"c": "Gem::Resolver::InstallerSet", "d": "\nA set of gems for installation sourced from remote sources and local .gem\nfiles\n"}, {"c": "Gem::Resolver::LocalSpecification", "d": "\nA LocalSpecification comes from a\n.gem file on the local filesystem.\n"}, {"c": "Gem::Resolver::LockSet", "d": "\nA set of gems from a gem dependencies lockfile.\n"}, {"c": "Gem::Resolver::LockSpecification", "d": "\nThe LockSpecification comes from a\nlockfile (Gem::RequestSet::Lockfile).\nA LockSpecification's dependency information is pre-filled from the\nlockfile.\n"}, {"c": "Gem::Resolver::Molinillo", "d": "\nGem::Resolver::Molinillo is a generic\ndependency resolution algorithm.\n"}, {"c": "Gem::Resolver::RequirementList", "d": "\nThe RequirementList is used to hold the\nrequirements being considered while resolving a set of gems.\nThe RequirementList acts like a queue\nwhere the oldest items are removed first.\n"}, {"c": "Gem::Resolver::Set", "d": "\nResolver sets are used to look up specifications (and their dependencies)\nused in resolution.  This set is abstract.\n"}, {"c": "Gem::Resolver::SourceSet", "d": "\nThe SourceSet chooses the best available\nmethod to query a remote index.\nKind off like BestSet but filters the sources for gems\n"}, {"c": "Gem::Resolver::Specification", "d": "\nA Resolver::Specification contains a subset of the information contained in\na Gem::Specification.  Only the\ninformation necessary for dependency resolution in the resolver is\nincluded.\n"}, {"c": "Gem::Resolver::SpecSpecification", "d": "\nThe Resolver::SpecSpecification contains common functionality for Resolver\nspecifications that are backed by a Gem::Specification.\n"}, {"c": "Gem::Resolver::Stats", "d": "\n"}, {"c": "Gem::Resolver::VendorSet", "d": "\nA VendorSet represents gems that have been\nunpacked into a specific directory that contains a gemspec.\nThis is used for gem dependency file support.\nExample:\nset = Gem::Resolver::VendorSet.new\n\nset.add_vendor_gem 'rake', 'vendor/rake'\n\nThe directory vendor/rake must contain an unpacked rake gem along with a\nrake.gemspec (watching the given name).\n"}, {"c": "Gem::Resolver::VendorSpecification", "d": "\nA VendorSpecification represents a\ngem that has been unpacked into a project and is being loaded through a gem\ndependencies file through the path: option.\n"}, {"c": "Gem::Resolver::Molinillo::CircularDependencyError", "d": "\nAn error caused by attempting to fulfil a dependency that was circular\n@note This exception will be thrown iff a {Vertex} is added to a\n{DependencyGraph} that has a {DependencyGraph::Vertex#path_to?} an\nexisting {DependencyGraph::Vertex}\n"}, {"c": "Gem::Resolver::Molinillo::Delegates", "d": "\n@!visibility private\n"}, {"c": "Gem::Resolver::Molinillo::DependencyGraph", "d": "\nA directed acyclic graph that is tuned to hold named dependencies\n"}, {"c": "Gem::Resolver::Molinillo::DependencyState", "d": "\nA state that encapsulates a set of {#requirements} with an {Array} of\npossibilities\n"}, {"c": "Gem::Resolver::Molinillo::NoSuchDependencyError", "d": "\nAn error caused by searching for a dependency that is completely unknown,\ni.e. has no versions available whatsoever.\n"}, {"c": "Gem::Resolver::Molinillo::PossibilityState", "d": "\nA state that encapsulates a single possibility to fulfill the given\n{#requirement}\n"}, {"c": "Gem::Resolver::Molinillo::ResolutionState", "d": "\n"}, {"c": "Gem::Resolver::Molinillo::Resolver", "d": "\nThis class encapsulates a dependency resolver. The resolver is responsible\nfor determining which set of dependencies to activate, with feedback from\nthe {#specification_provider}\n"}, {"c": "Gem::Resolver::Molinillo::ResolverError", "d": "\nAn error that occurred during the resolution process\n"}, {"c": "Gem::Resolver::Molinillo::SpecificationProvider", "d": "\nProvides information about specifcations and dependencies to the resolver,\nallowing the {Resolver} class to remain generic while still providing power\nand flexibility.\nThis module contains the methods that users of Gem::Resolver::Molinillo must to implement,\nusing knowledge of their own model classes.\n"}, {"c": "Gem::Resolver::Molinillo::UI", "d": "\nConveys information about the resolution process to a user.\n"}, {"c": "Gem::Resolver::Molinillo::VersionConflict", "d": "\nAn error caused by conflicts in version\n"}, {"c": "Gem::Resolver::Molinillo::Delegates::ResolutionState", "d": "\nDelegates all\n{Gem::Resolver::Molinillo::ResolutionState} methods to a `#state` property.\n"}, {"c": "Gem::Resolver::Molinillo::Delegates::SpecificationProvider", "d": "\nDelegates all\n{Gem::Resolver::Molinillo::SpecificationProvider} methods to a\n`#specification_provider` property.\n"}, {"c": "Gem::Resolver::Molinillo::DependencyGraph::Action", "d": "\nAn action that modifies a {DependencyGraph} that is reversible. @abstract\n"}, {"c": "Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular", "d": "\n@!visibility private (see Gem::Resolver::Molinillo::DependencyGraph#add_edge_no_circular)\n"}, {"c": "Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge", "d": "\n@!visibility private (see Gem::Resolver::Molinillo::DependencyGraph#delete_edge)\n"}, {"c": "Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed", "d": "\n@!visibility private @see Gem::Resolver::Molinillo::DependencyGraph#detach_vertex_named\n"}, {"c": "Gem::Resolver::Molinillo::DependencyGraph::Log", "d": "\nA log for dependency graph actions\n"}, {"c": "Gem::Resolver::Molinillo::DependencyGraph::Tag", "d": "\n@!visibility private @see Gem::Resolver::Molinillo::DependencyGraph#tag\n"}, {"c": "Gem::Resolver::Molinillo::DependencyGraph::Vertex", "d": "\nA vertex in a {DependencyGraph} that encapsulates a {#name} and a\n{#payload}\n"}, {"c": "Gem::Resolver::Molinillo::Resolver::Resolution", "d": "\nA specific resolution from a given {Resolver}\n"}, {"c": "Gem::Security::Exception", "d": "\nGem::Security default exception type\n"}, {"c": "Gem::Security::Policy", "d": "\nA Gem::Security::Policy object encapsulates the\nsettings for verifying signed gem files.  This is the base class.  You can\neither declare an instance of this or use one of the preset security\npolicies in Gem::Security::Policies.\n"}, {"c": "Gem::Security::Signer", "d": "\nBasic OpenSSL-based package signing class.\n"}, {"c": "Gem::Security::TrustDir", "d": "\nThe TrustDir manages the trusted certificates\nfor gem signature verification.\n"}, {"c": "Gem::Source::Git", "d": "\nA git gem for use in a gem dependencies file.\nExample:\nsource =\n  Gem::Source::Git.new 'rake', 'git@example:rake.git', 'rake-10.1.0', false\n\nsource.specs\n\n"}, {"c": "Gem::Source::Installed", "d": "\nRepresents an installed gem.  This is used for dependency resolution.\n"}, {"c": "Gem::Source::Local", "d": "\nThe local source finds gems in the current directory for fulfilling\ndependencies.\n"}, {"c": "Gem::Source::Lock", "d": "\nA Lock source wraps an installed gem's source\nand sorts before other sources during dependency resolution.  This allows\nRubyGems to prefer gems from dependency lock files.\n"}, {"c": "Gem::Source::SpecificFile", "d": "\nA source representing a single .gem file.  This is used for installation of\nlocal gems.\n"}, {"c": "Gem::Source::Vendor", "d": "\nThis represents a vendored source that is similar to an installed gem.\n"}, {"c": "Gem::StreamUI::SilentDownloadReporter", "d": "\nAn absolutely silent download reporter.\n"}, {"c": "Gem::StreamUI::SilentProgressReporter", "d": "\nAn absolutely silent progress reporter.\n"}, {"c": "Gem::StreamUI::SimpleProgressReporter", "d": "\nA basic dotted progress reporter.\n"}, {"c": "Gem::StreamUI::VerboseDownloadReporter", "d": "\nA progress reporter that prints out messages about the current progress.\n"}, {"c": "Gem::StreamUI::VerboseProgressReporter", "d": "\nA progress reporter that prints out messages about the current progress.\n"}, {"c": "Gem::TestCase::SpecFetcherSetup", "d": "\nThe SpecFetcherSetup allows easy setup\nof a remote source in RubyGems tests:\nspec_fetcher do |f|\n  f.gem  'a', 1\n  f.spec 'a', 2\n  f.gem  'b', 1' 'a' => '~> 1.0'\nend\nThe above declaration creates two gems, a-1 and b-1, with a dependency from\nb to a.  The declaration creates an additional spec a-2, but no gem for it\n(so it cannot be installed).\nAfter the gems are created they are removed from Gem.dir.\n"}, {"c": "Gem::TestCase::StaticSet", "d": "\nThe StaticSet is a static set of gem\nspecifications used for testing only. It is available by requiring Gem::TestCase.\n"}, {"c": "GetoptLong::AmbiguousOption", "d": "\n"}, {"c": "GetoptLong::Error", "d": "\nError types.\n"}, {"c": "GetoptLong::InvalidOption", "d": "\n"}, {"c": "GetoptLong::MissingArgument", "d": "\n"}, {"c": "GetoptLong::NeedlessArgument", "d": "\n"}, {"c": "IO::EAGAINWaitReadable", "d": "\n"}, {"c": "IO::EAGAINWaitWritable", "d": "\n"}, {"c": "IO::EINPROGRESSWaitReadable", "d": "\n"}, {"c": "IO::EINPROGRESSWaitWritable", "d": "\n"}, {"c": "IO::EWOULDBLOCKWaitReadable", "d": "\n"}, {"c": "IO::EWOULDBLOCKWaitWritable", "d": "\n"}, {"c": "IO::generic_readable", "d": "\n"}, {"c": "IO::generic_writable", "d": "\n"}, {"c": "IO::WaitReadable", "d": "\n"}, {"c": "IO::WaitWritable", "d": "\n"}, {"c": "IPAddr::AddressFamilyError", "d": "\nRaised when the address family is invalid such as an address with an\nunsupported family, an address with an inconsistent family, or an address\nwho's family cannot be determined.\n"}, {"c": "IPAddr::Error", "d": "\nGeneric IPAddr related error. Exceptions\nraised in this class should inherit from Error.\n"}, {"c": "IPAddr::InvalidAddressError", "d": "\nRaised when the provided IP address is an invalid address.\n"}, {"c": "IPAddr::InvalidPrefixError", "d": "\nRaised when the address is an invalid length.\n"}, {"c": "IRB::Abort", "d": "\nAn exception raised by IRB.irb_abort\n"}, {"c": "IRB::Context", "d": "\nA class that wraps the current state of the irb session, including the\nconfiguration of IRB.conf.\n"}, {"c": "IRB::ContextExtender", "d": "\nExtends methods for the Context module\n"}, {"c": "IRB::ExtendCommand", "d": "\n"}, {"c": "IRB::ExtendCommandBundle", "d": "\nInstalls the default irb extensions command bundle.\n"}, {"c": "IRB::FileInputMethod", "d": "\nUse a File for IO with\nirb, see InputMethod\n"}, {"c": "IRB::Frame", "d": "\n"}, {"c": "IRB::InputMethod", "d": "\n"}, {"c": "IRB::Inspector", "d": "\nAn irb inspector\nIn order to create your own custom inspector there are two things you\nshould be aware of:\nInspector uses inspect_value, or\ninspect_proc, for output of return values.\nThis also allows for an optional init+, or init_proc,\nwhich is called when the inspector is activated.\nKnowing this, you can create a rudimentary inspector as follows:\nirb(main):001:0> ins = IRB::Inspector.new(proc{ |v| \"omg! #{v}\" })\nirb(main):001:0> IRB.CurrentContext.inspect_mode = ins # => omg! #<IRB::Inspector:0x007f46f7ba7d28>\nirb(main):001:0> \"what?\" #=> omg! what?\n"}, {"c": "IRB::Irb", "d": "\n"}, {"c": "IRB::IrbLoader", "d": "\nProvides a few commands for loading files within an irb session.\nSee ExtendCommandBundle for more\ninformation.\n"}, {"c": "IRB::JobManager", "d": "\n"}, {"c": "IRB::LoadAbort", "d": "\nRaised in the event of an exception in a file loaded from an Irb session\n"}, {"c": "IRB::Locale", "d": "\n"}, {"c": "IRB::MethodExtender", "d": "\nA convenience module for extending Ruby methods.\n"}, {"c": "IRB::Notifier", "d": "\nAn output formatter used internally by the lexer.\n"}, {"c": "IRB::OutputMethod", "d": "\nAn abstract output class for IO in irb. This is\nmainly used internally by IRB::Notifier. You\ncan define your own output method to use with IRB::Irb.new, or IRB::Context.new\n"}, {"c": "IRB::ReadlineInputMethod", "d": "\n"}, {"c": "IRB::SLex", "d": "\n"}, {"c": "IRB::StdioInputMethod", "d": "\n"}, {"c": "IRB::StdioOutputMethod", "d": "\nA standard output printer\n"}, {"c": "IRB::WorkSpace", "d": "\n"}, {"c": "IRB::ExtendCommand::ChangeWorkspace", "d": "\n"}, {"c": "IRB::ExtendCommand::CurrentWorkingWorkspace", "d": "\n"}, {"c": "IRB::ExtendCommand::Foreground", "d": "\n"}, {"c": "IRB::ExtendCommand::Fork", "d": "\n"}, {"c": "IRB::ExtendCommand::Help", "d": "\n"}, {"c": "IRB::ExtendCommand::IrbCommand", "d": "\n"}, {"c": "IRB::ExtendCommand::Jobs", "d": "\n"}, {"c": "IRB::ExtendCommand::Kill", "d": "\n"}, {"c": "IRB::ExtendCommand::Load", "d": "\n"}, {"c": "IRB::ExtendCommand::Nop", "d": "\n"}, {"c": "IRB::ExtendCommand::PopWorkspace", "d": "\n"}, {"c": "IRB::ExtendCommand::PushWorkspace", "d": "\n"}, {"c": "IRB::ExtendCommand::Require", "d": "\n"}, {"c": "IRB::ExtendCommand::Source", "d": "\n"}, {"c": "IRB::ExtendCommand::Workspaces", "d": "\n"}, {"c": "IRB::Notifier::AbstractNotifier", "d": "\nAn abstract class, or superclass, for CompositeNotifier and LeveledNotifier to inherit. It provides\nseveral wrapper methods for the OutputMethod object used by the Notifier.\n"}, {"c": "IRB::Notifier::CompositeNotifier", "d": "\nA class that can be used to create a group of notifier objects with the\nintent of representing a leveled notification system for irb.\nThis class will allow you to generate other notifiers, and assign them the\nappropriate level for output.\nThe Notifier class provides a class-method\nIRB::Notifier#def_notifier\nto create a new composite notifier. Using the first composite notifier\nobject you create, sibling notifiers can be initialized with def_notifier.\n"}, {"c": "IRB::Notifier::LeveledNotifier", "d": "\nA leveled notifier is comparable to the composite group from IRB::Notifier::CompositeNotifier#notifiers.\n"}, {"c": "IRB::Notifier::NoMsgNotifier", "d": "\nNoMsgNotifier is a LeveledNotifier that's used as the\ndefault notifier when creating a new CompositeNotifier.\nThis notifier is used as the zero index, or level\n0, for IRB::Notifier::CompositeNotifier#notifiers,\nand will not output messages of any sort.\n"}, {"c": "IRB::SLex::Node", "d": "\n"}, {"c": "JSON::CircularDatastructure", "d": "\n"}, {"c": "JSON::Ext", "d": "\nThis module holds all the modules/classes that implement JSON's\nfunctionality as C extensions.\n"}, {"c": "JSON::UnparserError", "d": "\nThis exception is raised if a generator or unparser error occurs.\n"}, {"c": "JSON::GenericObject", "d": "\n"}, {"c": "JSON::JSONError", "d": "\nThe base exception for JSON errors.\n"}, {"c": "JSON::MissingUnicodeSupport", "d": "\nThis exception is raised if the required unicode support is missing on the\nsystem. Usually this means that the iconv library is not installed.\n"}, {"c": "JSON::NestingError", "d": "\nThis exception is raised if the nesting of parsed data structures is too\ndeep.\n"}, {"c": "JSON::ParserError", "d": "\nThis exception is raised if a parser error occurs.\n"}, {"c": "JSON::Ext::Generator", "d": "\nThis is the JSON generator implemented as a C\nextension. It can be configured to be used by setting\nJSON.generator = JSON::Ext::Generator\n\nwith the method generator= in JSON.\n"}, {"c": "JSON::Ext::Parser", "d": "\nThis is the JSON parser implemented as a C\nextension. It can be configured to be used by setting\nJSON.parser = JSON::Ext::Parser\n\nwith the method parser= in JSON.\n"}, {"c": "JSON::Ext::Generator::GeneratorMethods", "d": "\n"}, {"c": "JSON::Ext::Generator::State", "d": "\n"}, {"c": "JSON::Ext::Generator::GeneratorMethods::Array", "d": "\n"}, {"c": "JSON::Ext::Generator::GeneratorMethods::Bignum", "d": "\n"}, {"c": "JSON::Ext::Generator::GeneratorMethods::FalseClass", "d": "\n"}, {"c": "JSON::Ext::Generator::GeneratorMethods::Fixnum", "d": "\n"}, {"c": "JSON::Ext::Generator::GeneratorMethods::Float", "d": "\n"}, {"c": "JSON::Ext::Generator::GeneratorMethods::Hash", "d": "\n"}, {"c": "JSON::Ext::Generator::GeneratorMethods::Integer", "d": "\n"}, {"c": "JSON::Ext::Generator::GeneratorMethods::NilClass", "d": "\n"}, {"c": "JSON::Ext::Generator::GeneratorMethods::Object", "d": "\n"}, {"c": "JSON::Ext::Generator::GeneratorMethods::String", "d": "\n"}, {"c": "JSON::Ext::Generator::GeneratorMethods::TrueClass", "d": "\n"}, {"c": "JSON::Ext::Generator::GeneratorMethods::String::Extend", "d": "\n"}, {"c": null, "d": ""}, {"c": "Logger::Formatter", "d": "\nDefault formatter for log messages.\n"}, {"c": "Logger::LogDevice", "d": "\nDevice used for logging messages.\n"}, {"c": "Logger::Period", "d": "\n"}, {"c": "Logger::Severity", "d": "\nLogging severity.\n"}, {"c": "MakeMakefile::Logging", "d": "\n"}, {"c": "MakeMakefile::RbConfig", "d": "\n"}, {"c": "MakeMakefile::STRING_OR_FAILED_FORMAT", "d": "\n"}, {"c": "Math::DomainError", "d": "\nRaised when a mathematical function is evaluated outside of its domain of\ndefinition.\nFor example, since cos returns values in the range -1..1, its\ninverse function acos is only defined on that interval:\nMath.acos(42)\n\nproduces:\nMath::DomainError: Numerical argument is out of domain - \"acos\"\n"}, {"c": "Matrix::EigenvalueDecomposition", "d": "\nEigenvalues and eigenvectors of a real matrix.\nComputes the eigenvalues and eigenvectors of a matrix A.\nIf A is diagonalizable, this provides matrices V and D such that A =\nV*D*V.inv, where D is the diagonal matrix with entries equal to the\neigenvalues and V is formed by the eigenvectors.\nIf A is symmetric, then V is orthogonal and thus A = V*D*V.t\n"}, {"c": "Matrix::LUPDecomposition", "d": "\nFor an m-by-n matrix A with m >= n, the LU decomposition is an m-by-n\nunit lower triangular matrix L, an n-by-n upper triangular matrix U, and a\nm-by-m permutation matrix P so that L*U = P*A. If m < n, then L is\nm-by-m and U is m-by-n.\nThe LUP decomposition with pivoting always exists, even if the matrix is\nsingular, so the constructor will never fail.  The primary use of the LU\ndecomposition is in the solution of square systems of simultaneous linear\nequations.  This will fail if singular? returns true.\n"}, {"c": "MonitorMixin::ConditionVariable", "d": "\nFIXME: This isn't documented in Nutshell.\nSince MonitorMixin#new_cond\nreturns a ConditionVariable, and the\nexample above calls while_wait and signal, this class should be documented.\n"}, {"c": "MonitorMixin::ConditionVariable::Timeout", "d": "\n"}, {"c": "Net::APOPSession", "d": "\nThis class is equivalent to POP3, except that it\nuses APOP authentication.\n"}, {"c": "Net::FTP", "d": "\nThis class implements the File Transfer\nProtocol.  If you have used a command-line FTP\nprogram, and are familiar with the commands, you will be able to use this\nclass easily.  Some extra features are included to take advantage of\nRuby's style and strengths.\nExample\u00b6 \u2191\nrequire 'net/ftp'\n\nExample 1\u00b6 \u2191\nftp = Net::FTP.new('example.com')\nftp.login\nfiles = ftp.chdir('pub/lang/ruby/contrib')\nfiles = ftp.list('n*')\nftp.getbinaryfile('nif.rb-0.91.gz', 'nif.gz', 1024)\nftp.close\n\nExample 2\u00b6 \u2191\nNet::FTP.open('example.com') do |ftp|\n  ftp.login\n  files = ftp.chdir('pub/lang/ruby/contrib')\n  files = ftp.list('n*')\n  ftp.getbinaryfile('nif.rb-0.91.gz', 'nif.gz', 1024)\nend\n\nMajor Methods\u00b6 \u2191\nThe following are the methods most likely to be useful to users:\n\n::open\n\ngetbinaryfile\n\ngettextfile\n\nputbinaryfile\n\nputtextfile\n\nchdir\n\nnlst\n\nsize\n\nrename\n\ndelete\n\n"}, {"c": "Net::FTPConnectionError", "d": "\n"}, {"c": "Net::FTPError", "d": "\n"}, {"c": "Net::FTPPermError", "d": "\n"}, {"c": "Net::FTPProtoError", "d": "\n"}, {"c": "Net::FTPReplyError", "d": "\n"}, {"c": "Net::FTPTempError", "d": "\n"}, {"c": "Net::HTTP", "d": "\nAn HTTP client API for Ruby.\u00b6 \u2191\nNet::HTTP provides a rich library which can be used\nto build HTTP user-agents.  For more details about\nHTTP see [RFC2616](www.ietf.org/rfc/rfc2616.txt)\nNet::HTTP is designed to work closely with URI.  URI::Generic#host, URI::Generic#port and URI::HTTP#request_uri are\ndesigned to work with Net::HTTP.\nIf you are only performing a few GET requests you should try OpenURI.\nSimple Examples\u00b6 \u2191\nAll examples assume you have loaded Net::HTTP with:\nrequire 'net/http'\n\nThis will also require 'uri' so you don't need to require it\nseparately.\nThe Net::HTTP methods in the following section do\nnot persist connections.  They are not recommended if you are performing\nmany HTTP requests.\nGET\u00b6 \u2191\nNet::HTTP.get('example.com', '/index.html') # => String\n\nGET by URI\u00b6 \u2191\nuri = URI('http://example.com/index.html?count=10')\nNet::HTTP.get(uri) # => String\n\nGET with Dynamic Parameters\u00b6 \u2191\nuri = URI('http://example.com/index.html')\nparams = { :limit => 10, :page => 3 }\nuri.query = URI.encode_www_form(params)\n\nres = Net::HTTP.get_response(uri)\nputs res.body if res.is_a?(Net::HTTPSuccess)\n\nPOST\u00b6 \u2191\nuri = URI('http://www.example.com/search.cgi')\nres = Net::HTTP.post_form(uri, 'q' => 'ruby', 'max' => '50')\nputs res.body\n\nPOST with Multiple Values\u00b6 \u2191\nuri = URI('http://www.example.com/search.cgi')\nres = Net::HTTP.post_form(uri, 'q' => ['ruby', 'perl'], 'max' => '50')\nputs res.body\n\nHow to use Net::HTTP\u00b6 \u2191\nThe following example code can be used as the basis of a HTTP user-agent which can perform a variety of request\ntypes using persistent connections.\nuri = URI('http://example.com/some_path?query=string')\n\nNet::HTTP.start(uri.host, uri.port) do |http|\n  request = Net::HTTP::Get.new uri\n\n  response = http.request request # Net::HTTPResponse object\nend\n\n::start immediately creates a\nconnection to an HTTP server which is kept open for\nthe duration of the block.  The connection will remain open for multiple\nrequests in the block if the server indicates it supports persistent\nconnections.\nThe request types Net::HTTP supports are listed\nbelow in the section \u00e2\u20ac\u0153HTTP Request Classes\u00e2\u20ac.\nIf you wish to re-use a connection across multiple HTTP requests without automatically closing it you can\nuse ::new instead of ::start.  request will automatically open a\nconnection to the server if one is not currently open.  You can manually\nclose the connection with finish.\nFor all the Net::HTTP request objects and shortcut\nrequest methods you may supply either a String for the request path or a URI from which Net::HTTP\nwill extract the request path.\nResponse Data\u00b6 \u2191\nuri = URI('http://example.com/index.html')\nres = Net::HTTP.get_response(uri)\n\n# Headers\nres['Set-Cookie']            # => String\nres.get_fields('set-cookie') # => Array\nres.to_hash['set-cookie']    # => Array\nputs \"Headers: #{res.to_hash.inspect}\"\n\n# Status\nputs res.code       # => '200'\nputs res.message    # => 'OK'\nputs res.class.name # => 'HTTPOK'\n\n# Body\nputs res.body if res.response_body_permitted?\n\nFollowing Redirection\u00b6 \u2191\nEach Net::HTTPResponse object belongs to a\nclass for its response code.\nFor example, all 2XX responses are instances of a Net::HTTPSuccess subclass, a 3XX response is an\ninstance of a Net::HTTPRedirection\nsubclass and a 200 response is an instance of the Net::HTTPOK class.  For details of response classes,\nsee the section \u00e2\u20ac\u0153HTTP Response Classes\u00e2\u20ac below.\nUsing a case statement you can handle various types of responses properly:\ndef fetch(uri_str, limit = 10)\n  # You should choose a better exception.\n  raise ArgumentError, 'too many HTTP redirects' if limit == 0\n\n  response = Net::HTTP.get_response(URI(uri_str))\n\n  case response\n  when Net::HTTPSuccess then\n    response\n  when Net::HTTPRedirection then\n    location = response['location']\n    warn \"redirected to #{location}\"\n    fetch(location, limit - 1)\n  else\n    response.value\n  end\nend\n\nprint fetch('http://www.ruby-lang.org')\n\nPOST\u00b6 \u2191\nA POST can be made using the Net::HTTP::Post\nrequest class.  This example creates a urlencoded POST body:\nuri = URI('http://www.example.com/todo.cgi')\nreq = Net::HTTP::Post.new(uri)\nreq.set_form_data('from' => '2005-01-01', 'to' => '2005-03-31')\n\nres = Net::HTTP.start(uri.hostname, uri.port) do |http|\n  http.request(req)\nend\n\ncase res\nwhen Net::HTTPSuccess, Net::HTTPRedirection\n  # OK\nelse\n  res.value\nend\n\nAt this time Net::HTTP does not support\nmultipart/form-data.  To send multipart/form-data use Net::HTTPGenericRequest#body=\nand Net::HTTPHeader#content_type=:\nreq = Net::HTTP::Post.new(uri)\nreq.body = multipart_data\nreq.content_type = 'multipart/form-data'\n\nOther requests that can contain a body such as PUT can be created in the\nsame way using the corresponding request class (Net::HTTP::Put).\nSetting Headers\u00b6 \u2191\nThe following example performs a conditional GET using the\nIf-Modified-Since header.  If the files has not been modified since the\ntime in the header a Not Modified response will be returned.  See RFC 2616\nsection 9.3 for further details.\nuri = URI('http://example.com/cached_response')\nfile = File.stat 'cached_response'\n\nreq = Net::HTTP::Get.new(uri)\nreq['If-Modified-Since'] = file.mtime.rfc2822\n\nres = Net::HTTP.start(uri.hostname, uri.port) {|http|\n  http.request(req)\n}\n\nopen 'cached_response', 'w' do |io|\n  io.write res.body\nend if res.is_a?(Net::HTTPSuccess)\n\nBasic Authentication\u00b6 \u2191\nBasic authentication is performed according to [RFC2617](www.ietf.org/rfc/rfc2617.txt)\nuri = URI('http://example.com/index.html?key=value')\n\nreq = Net::HTTP::Get.new(uri)\nreq.basic_auth 'user', 'pass'\n\nres = Net::HTTP.start(uri.hostname, uri.port) {|http|\n  http.request(req)\n}\nputs res.body\n\nStreaming Response Bodies\u00b6 \u2191\nBy default Net::HTTP reads an entire response into\nmemory.  If you are handling large files or wish to implement a progress\nbar you can instead stream the body directly to an IO.\nuri = URI('http://example.com/large_file')\n\nNet::HTTP.start(uri.host, uri.port) do |http|\n  request = Net::HTTP::Get.new uri\n\n  http.request request do |response|\n    open 'large_file', 'w' do |io|\n      response.read_body do |chunk|\n        io.write chunk\n      end\n    end\n  end\nend\n\nHTTPS\u00b6 \u2191\nHTTPS is enabled for an HTTP connection by #use_ssl=.\nuri = URI('https://secure.example.com/some_path?query=string')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl => true) do |http|\n  request = Net::HTTP::Get.new uri\n  response = http.request request # Net::HTTPResponse object\nend\n\nOr if you simply want to make a GET request, you may pass in an URI object that has a HTTPS URL. Net::HTTP automatically turn on TLS verification if\nthe URI object has a 'https' URI scheme.\nuri = URI('https://example.com/')\nNet::HTTP.get(uri) # => String\n\nIn previous versions of Ruby you would need to require 'net/https'\nto use HTTPS. This is no longer true.\nProxies\u00b6 \u2191\nNet::HTTP will automatically create a proxy from\nthe http_proxy environment variable if it is present.  To\ndisable use of http_proxy, pass nil for the proxy\naddress.\nYou may also create a custom proxy:\nproxy_addr = 'your.proxy.host'\nproxy_port = 8080\n\nNet::HTTP.new('example.com', nil, proxy_addr, proxy_port).start { |http|\n  # always proxy via your.proxy.addr:8080\n}\n\nSee ::new for further details and\nexamples such as proxies that require a username and password.\nCompression\u00b6 \u2191\nNet::HTTP automatically adds Accept-Encoding for\ncompression of response bodies and automatically decompresses gzip and\ndeflate responses unless a Range header was\nsent.\nCompression can be disabled through the Accept-Encoding: identity header.\nHTTP Request Classes\u00b6 \u2191\nHere is the HTTP request class hierarchy.\n\nNet::HTTPRequest\n\nNet::HTTP::Get\n\nNet::HTTP::Head\n\nNet::HTTP::Post\n\nNet::HTTP::Patch\n\nNet::HTTP::Put\n\nNet::HTTP::Proppatch\n\nNet::HTTP::Lock\n\nNet::HTTP::Unlock\n\nNet::HTTP::Options\n\nNet::HTTP::Propfind\n\nNet::HTTP::Delete\n\nNet::HTTP::Move\n\nNet::HTTP::Copy\n\nNet::HTTP::Mkcol\n\nNet::HTTP::Trace\n\n\nHTTP Response Classes\u00b6 \u2191\nHere is HTTP response class hierarchy.  All classes\nare defined in Net module and are subclasses of\nNet::HTTPResponse.\nHTTPUnknownResponse\n\nFor unhandled HTTP extensions\nHTTPInformation\n\n1xx\nHTTPContinue\n\n100\nHTTPSwitchProtocol\n\n101\nHTTPSuccess\n\n2xx\nHTTPOK\n\n200\nHTTPCreated\n\n201\nHTTPAccepted\n\n202\nHTTPNonAuthoritativeInformation\n\n203\nHTTPNoContent\n\n204\nHTTPResetContent\n\n205\nHTTPPartialContent\n\n206\nHTTPMultiStatus\n\n207\nHTTPIMUsed\n\n226\nHTTPRedirection\n\n3xx\nHTTPMultipleChoices\n\n300\nHTTPMovedPermanently\n\n301\nHTTPFound\n\n302\nHTTPSeeOther\n\n303\nHTTPNotModified\n\n304\nHTTPUseProxy\n\n305\nHTTPTemporaryRedirect\n\n307\nHTTPClientError\n\n4xx\nHTTPBadRequest\n\n400\nHTTPUnauthorized\n\n401\nHTTPPaymentRequired\n\n402\nHTTPForbidden\n\n403\nHTTPNotFound\n\n404\nHTTPMethodNotAllowed\n\n405\nHTTPNotAcceptable\n\n406\nHTTPProxyAuthenticationRequired\n\n407\nHTTPRequestTimeOut\n\n408\nHTTPConflict\n\n409\nHTTPGone\n\n410\nHTTPLengthRequired\n\n411\nHTTPPreconditionFailed\n\n412\nHTTPRequestEntityTooLarge\n\n413\nHTTPRequestURITooLong\n\n414\nHTTPUnsupportedMediaType\n\n415\nHTTPRequestedRangeNotSatisfiable\n\n416\nHTTPExpectationFailed\n\n417\nHTTPUnprocessableEntity\n\n422\nHTTPLocked\n\n423\nHTTPFailedDependency\n\n424\nHTTPUpgradeRequired\n\n426\nHTTPPreconditionRequired\n\n428\nHTTPTooManyRequests\n\n429\nHTTPRequestHeaderFieldsTooLarge\n\n431\nHTTPUnavailableForLegalReasons\n\n451\nHTTPServerError\n\n5xx\nHTTPInternalServerError\n\n500\nHTTPNotImplemented\n\n501\nHTTPBadGateway\n\n502\nHTTPServiceUnavailable\n\n503\nHTTPGatewayTimeOut\n\n504\nHTTPVersionNotSupported\n\n505\nHTTPInsufficientStorage\n\n507\nHTTPNetworkAuthenticationRequired\n\n511\n\nThere is also the Net::HTTPBadResponse exception which is raised when there\nis a protocol error.\n"}, {"c": "Net::HTTPAccepted", "d": "\n"}, {"c": "Net::HTTPAlreadyReported", "d": "\n"}, {"c": "Net::HTTPBadGateway", "d": "\n"}, {"c": "Net::HTTPBadRequest", "d": "\n"}, {"c": "Net::HTTPBadResponse", "d": "\n"}, {"c": "Net::HTTPClientError", "d": "\n"}, {"c": "Net::HTTPConflict", "d": "\n"}, {"c": "Net::HTTPContinue", "d": "\n"}, {"c": "Net::HTTPCreated", "d": "\n"}, {"c": "Net::HTTPError", "d": "\n"}, {"c": "Net::HTTPExceptions", "d": "\nNet::HTTP exception class. You cannot use Net::HTTPExceptions directly; instead, you\nmust use its subclasses.\n"}, {"c": "Net::HTTPExpectationFailed", "d": "\n"}, {"c": "Net::HTTPFailedDependency", "d": "\n"}, {"c": "Net::HTTPFatalError", "d": "\n"}, {"c": "Net::HTTPForbidden", "d": "\n"}, {"c": "Net::HTTPFound", "d": "\n"}, {"c": "Net::HTTPGatewayTimeOut", "d": "\n"}, {"c": "Net::HTTPGenericRequest", "d": "\nHTTPGenericRequest is the parent of\nthe HTTPRequest class. Do not use this directly; use a subclass of\nHTTPRequest.\nMixes in the HTTPHeader module to provide easier access to HTTP headers.\n"}, {"c": "Net::HTTPGone", "d": "\n"}, {"c": "Net::HTTPHeader", "d": "\nThe HTTPHeader module defines methods for\nreading and writing HTTP headers.\nIt is used as a mixin by other classes, to provide hash-like access to HTTP header values. Unlike raw hash access, HTTPHeader provides access via case-insensitive\nkeys. It also provides methods for accessing commonly-used HTTP header values in more convenient formats.\n"}, {"c": "Net::HTTPHeaderSyntaxError", "d": "\n"}, {"c": "Net::HTTPIMUsed", "d": "\n"}, {"c": "Net::HTTPInformation", "d": "\n"}, {"c": "Net::HTTPInsufficientStorage", "d": "\n"}, {"c": "Net::HTTPInternalServerError", "d": "\n444 No Response - Nginx 449 Retry With - Microsoft 450 Blocked by Windows\nParental Controls - Microsoft 499 Client Closed Request - Nginx\n"}, {"c": "Net::HTTPLengthRequired", "d": "\n"}, {"c": "Net::HTTPLocked", "d": "\n"}, {"c": "Net::HTTPLoopDetected", "d": "\n"}, {"c": "Net::HTTPMethodNotAllowed", "d": "\n"}, {"c": "Net::HTTPMisdirectedRequest", "d": "\n418 I'm a teapot - RFC 2324; a joke RFC 420 Enhance Your Calm - Twitter\n"}, {"c": "Net::HTTPMovedPermanently", "d": "\n"}, {"c": "Net::HTTPMultipleChoices", "d": "\n"}, {"c": "Net::HTTPMultiStatus", "d": "\n"}, {"c": "Net::HTTPNetworkAuthenticationRequired", "d": "\n"}, {"c": "Net::HTTPNoContent", "d": "\n"}, {"c": "Net::HTTPNonAuthoritativeInformation", "d": "\n"}, {"c": "Net::HTTPNotAcceptable", "d": "\n"}, {"c": "Net::HTTPNotExtended", "d": "\n509 Bandwidth Limit Exceeded - Apache bw/limited extension\n"}, {"c": "Net::HTTPNotFound", "d": "\n"}, {"c": "Net::HTTPNotImplemented", "d": "\n"}, {"c": "Net::HTTPNotModified", "d": "\n"}, {"c": "Net::HTTPOK", "d": "\n"}, {"c": "Net::HTTPPartialContent", "d": "\n"}, {"c": "Net::HTTPPaymentRequired", "d": "\n"}, {"c": "Net::HTTPPermanentRedirect", "d": "\n"}, {"c": "Net::HTTPPreconditionFailed", "d": "\n"}, {"c": "Net::HTTPPreconditionRequired", "d": "\n"}, {"c": "Net::HTTPProcessing", "d": "\n"}, {"c": "Net::HTTPProxyAuthenticationRequired", "d": "\n"}, {"c": "Net::HTTPRedirection", "d": "\n"}, {"c": "Net::HTTPRequest", "d": "\nHTTP request class. This class wraps together the request header and the\nrequest path. You cannot use this class directly. Instead, you should use\none of its subclasses: Net::HTTP::Get, Net::HTTP::Post, Net::HTTP::Head.\n"}, {"c": "Net::HTTPRequestedRangeNotSatisfiable", "d": "\n"}, {"c": "Net::HTTPRequestEntityTooLarge", "d": "\n"}, {"c": "Net::HTTPRequestHeaderFieldsTooLarge", "d": "\n"}, {"c": "Net::HTTPRequestTimeOut", "d": "\n"}, {"c": "Net::HTTPRequestURITooLong", "d": "\n"}, {"c": "Net::HTTPResetContent", "d": "\n"}, {"c": "Net::HTTPResponse", "d": "\nHTTP response class.\nThis class wraps together the response header and the response body (the\nentity requested).\nIt mixes in the HTTPHeader module, which provides access to response header\nvalues both via hash-like methods and via individual readers.\nNote that each possible HTTP response code defines its own HTTPResponse subclass.  These are listed\nbelow.\nAll classes are defined under the Net module.\nIndentation indicates inheritance.  For a list of the classes see Net::HTTP.\n"}, {"c": "Net::HTTPRetriableError", "d": "\n"}, {"c": "Net::HTTPSeeOther", "d": "\n"}, {"c": "Net::HTTPServerError", "d": "\n"}, {"c": "Net::HTTPServerException", "d": "\n"}, {"c": "Net::HTTPServiceUnavailable", "d": "\n"}, {"c": "Net::HTTPSuccess", "d": "\n"}, {"c": "Net::HTTPSwitchProtocol", "d": "\n"}, {"c": "Net::HTTPTemporaryRedirect", "d": "\n306 Switch Proxy - no longer unused\n"}, {"c": "Net::HTTPTooManyRequests", "d": "\n"}, {"c": "Net::HTTPUnauthorized", "d": "\n"}, {"c": "Net::HTTPUnavailableForLegalReasons", "d": "\n"}, {"c": "Net::HTTPUnknownResponse", "d": "\nwww.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n"}, {"c": "Net::HTTPUnprocessableEntity", "d": "\n"}, {"c": "Net::HTTPUnsupportedMediaType", "d": "\n"}, {"c": "Net::HTTPUpgradeRequired", "d": "\n425 Unordered Collection - existed only in draft\n"}, {"c": "Net::HTTPUseProxy", "d": "\n"}, {"c": "Net::HTTPVariantAlsoNegotiates", "d": "\n"}, {"c": "Net::HTTPVersionNotSupported", "d": "\n"}, {"c": "Net::IMAP", "d": "\nNet::IMAP implements Internet Message Access\nProtocol (IMAP) client functionality.  The protocol is described in [IMAP].\nIMAP Overview\u00b6 \u2191\nAn IMAP client connects to a server, and then\nauthenticates itself using either authenticate() or login().  Having authenticated itself,\nthere is a range of commands available to it.  Most work with mailboxes,\nwhich may be arranged in an hierarchical namespace, and each of which\ncontains zero or more messages.  How this is implemented on the server is\nimplementation-dependent; on a UNIX server, it will frequently be\nimplemented as files in mailbox format within a hierarchy of directories.\nTo work on the messages within a mailbox, the client must first select that\nmailbox, using either select() or\n(for read-only access) examine(). \nOnce the client has successfully selected a mailbox, they enter\nselected state, and that mailbox becomes the current\nmailbox, on which mail-item related commands implicitly operate.\nMessages have two sorts of identifiers: message sequence numbers and UIDs.\nMessage sequence numbers number messages within a mailbox from 1 up to the\nnumber of items in the mailbox.  If a new message arrives during a session,\nit receives a sequence number equal to the new size of the mailbox.  If\nmessages are expunged from the mailbox, remaining messages have their\nsequence numbers \u00e2\u20ac\u0153shuffled down\u00e2\u20ac to fill the gaps.\nUIDs, on the other hand, are permanently guaranteed not to identify another\nmessage within the same mailbox, even if the existing message is deleted. \nUIDs are required to be assigned in ascending (but not necessarily\nsequential) order within a mailbox; this means that if a non-IMAP client\nrearranges the order of mailitems within a mailbox, the UIDs have to be\nreassigned.  An IMAP client thus cannot rearrange\nmessage orders.\nExamples of Usage\u00b6 \u2191\nList sender and subject of all recent messages in the default mailbox\u00b6 \u2191\nimap = Net::IMAP.new('mail.example.com')\nimap.authenticate('LOGIN', 'joe_user', 'joes_password')\nimap.examine('INBOX')\nimap.search([\"RECENT\"]).each do |message_id|\n  envelope = imap.fetch(message_id, \"ENVELOPE\")[0].attr[\"ENVELOPE\"]\n  puts \"#{envelope.from[0].name}: \\t#{envelope.subject}\"\nend\n\nMove all messages from April 2003 from \u00e2\u20ac\u0153Mail/sent-mail\u00e2\u20ac to \u00e2\u20ac\u0153Mail/sent-apr03\u00e2\u20ac\u00b6 \u2191\nimap = Net::IMAP.new('mail.example.com')\nimap.authenticate('LOGIN', 'joe_user', 'joes_password')\nimap.select('Mail/sent-mail')\nif not imap.list('Mail/', 'sent-apr03')\n  imap.create('Mail/sent-apr03')\nend\nimap.search([\"BEFORE\", \"30-Apr-2003\", \"SINCE\", \"1-Apr-2003\"]).each do |message_id|\n  imap.copy(message_id, \"Mail/sent-apr03\")\n  imap.store(message_id, \"+FLAGS\", [:Deleted])\nend\nimap.expunge\n\nThread Safety\u00b6 \u2191\nNet::IMAP supports concurrent threads. For example,\nimap = Net::IMAP.new(\"imap.foo.net\", \"imap2\")\nimap.authenticate(\"cram-md5\", \"bar\", \"password\")\nimap.select(\"inbox\")\nfetch_thread = Thread.start { imap.fetch(1..-1, \"UID\") }\nsearch_result = imap.search([\"BODY\", \"hello\"])\nfetch_result = fetch_thread.value\nimap.disconnect\n\nThis script invokes the FETCH command and the SEARCH command concurrently.\nErrors\u00b6 \u2191\nAn IMAP server can send three different types of\nresponses to indicate failure:\nNO\n\nthe attempted command could not be successfully completed.  For instance,\nthe username/password used for logging in are incorrect; the selected\nmailbox does not exist; etc.\nBAD\n\nthe request from the client does not follow the server's understanding\nof the IMAP protocol.  This includes attempting\ncommands from the wrong client state; for instance, attempting to perform a\nSEARCH command without having SELECTed a current mailbox.  It can also\nsignal an internal server failure (such as a disk crash) has occurred.\nBYE\n\nthe server is saying goodbye.  This can be part of a normal logout\nsequence, and can be used as part of a login sequence to indicate that the\nserver is (for some reason) unwilling to accept your connection.  As a\nresponse to any other command, it indicates either that the server is\nshutting down, or that the server is timing out the client connection due\nto inactivity.\n\nThese three error response are represented by the errors Net::IMAP::NoResponseError, Net::IMAP::BadResponseError, and Net::IMAP::ByeResponseError, all of\nwhich are subclasses of Net::IMAP::ResponseError.  Essentially,\nall methods that involve sending a request to the server can generate one\nof these errors. Only the most pertinent instances have been documented\nbelow.\nBecause the IMAP class uses Sockets for\ncommunication, its methods are also susceptible to the various errors that\ncan occur when working with sockets.  These are generally represented as Errno errors.  For instance, any method that\ninvolves sending a request to the server and/or receiving a response from\nit could raise an Errno::EPIPE error if the network connection unexpectedly\ngoes down.  See the socket(7), ip(7), tcp(7), socket(2), connect(2), and\nassociated man pages.\nFinally, a Net::IMAP::DataFormatError is thrown\nif low-level data is found to be in an incorrect format (for instance, when\nconverting between UTF-8 and UTF-16), and Net::IMAP::ResponseParseError is\nthrown if a server response is non-parseable.\nReferences\u00b6 \u2191\n[IMAP]\n\nCrispin, \u00e2\u20ac\u0153INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1\u00e2\u20ac,\n\nRFC 2060, December 1996.  (Note: since obsoleted by RFC 3501)\n[LANGUAGE-TAGS]\n\nAlvestrand, H., \u00e2\u20ac\u0153Tags for the Identification of Languages\u00e2\u20ac, RFC 1766, March\n1995.\n[MD5]\n\nMyers, J., and M. Rose, \u00e2\u20ac\u0153The Content-MD5 Header Field\u00e2\u20ac, RFC 1864, October\n1995.\n[MIME-IMB]\n\nFreed, N., and N. Borenstein, \u00e2\u20ac\u0153MIME (Multipurpose Internet Mail Extensions)\nPart One: Format of Internet Message Bodies\u00e2\u20ac, RFC 2045, November 1996.\n[RFC-822]\n\nCrocker, D., \u00e2\u20ac\u0153Standard for the Format of ARPA Internet Text Messages\u00e2\u20ac, STD\n11, RFC 822, University of Delaware, August 1982.\n[RFC-2087]\n\nMyers, J., \u00e2\u20ac\u0153IMAP4 QUOTA extension\u00e2\u20ac, RFC 2087, January 1997.\n[RFC-2086]\n\nMyers, J., \u00e2\u20ac\u0153IMAP4 ACL extension\u00e2\u20ac, RFC 2086,\nJanuary 1997.\n[RFC-2195]\n\nKlensin, J., Catoe, R., and Krumviede, P., \u00e2\u20ac\u0153IMAP/POP AUTHorize Extension\nfor Simple Challenge/Response\u00e2\u20ac, RFC 2195, September 1997.\n[SORT-THREAD-EXT]\n\nCrispin, M., \u00e2\u20ac\u0153INTERNET MESSAGE ACCESS PROTOCOL - SORT and THREAD\nExtensions\u00e2\u20ac, draft-ietf-imapext-sort, May 2003.\n[OSSL]\n\nwww.openssl.org\n[RSSL]\n\nsavannah.gnu.org/projects/rubypki\n[UTF7]\n\nGoldsmith, D. and Davis, M., \u00e2\u20ac\u0153UTF-7: A Mail-Safe Transformation Format of\nUnicode\u00e2\u20ac, RFC 2152, May 1997.\n\n"}, {"c": "Net::OpenTimeout", "d": "\nOpenTimeout, a subclass of Timeout::Error, is raised if a connection\ncannot be created within the open_timeout.\n"}, {"c": "Net::POP3", "d": "\nWhat is This Library?\u00b6 \u2191\nThis library provides functionality for retrieving email via POP3, the Post Office Protocol version 3. For details\nof POP3, see [RFC1939] (www.ietf.org/rfc/rfc1939.txt).\nExamples\u00b6 \u2191\nRetrieving Messages\u00b6 \u2191\nThis example retrieves messages from the server and deletes them on the\nserver.\nMessages are written to files named 'inbox/1', 'inbox/2',\n.\u00e2\u20ac\u00a6 Replace 'pop.example.com' with your POP3\nserver address, and 'YourAccount' and 'YourPassword' with\nthe appropriate account details.\nrequire 'net/pop'\n\npop = Net::POP3.new('pop.example.com')\npop.start('YourAccount', 'YourPassword')             # (1)\nif pop.mails.empty?\n  puts 'No mail.'\nelse\n  i = 0\n  pop.each_mail do |m|   # or \"pop.mails.each ...\"   # (2)\n    File.open(\"inbox/#{i}\", 'w') do |f|\n      f.write m.pop\n    end\n    m.delete\n    i += 1\n  end\n  puts \"#{pop.mails.size} mails popped.\"\nend\npop.finish                                           # (3)\n\n\nCall #start and start POP session.\n\nAccess messages by using #each_mail and/or #mails.\n\nClose POP session by calling #finish or use the block form of start.\n\nShortened Code\u00b6 \u2191\nThe example above is very verbose. You can shorten the code by using some\nutility methods. First, the block form of ::start can be used instead of ::new, #start and #finish.\nrequire 'net/pop'\n\nNet::POP3.start('pop.example.com', 110,\n                'YourAccount', 'YourPassword') do |pop|\n  if pop.mails.empty?\n    puts 'No mail.'\n  else\n    i = 0\n    pop.each_mail do |m|   # or \"pop.mails.each ...\"\n      File.open(\"inbox/#{i}\", 'w') do |f|\n        f.write m.pop\n      end\n      m.delete\n      i += 1\n    end\n    puts \"#{pop.mails.size} mails popped.\"\n  end\nend\n\n#delete_all is an alternative\nfor each_mail and delete.\nrequire 'net/pop'\n\nNet::POP3.start('pop.example.com', 110,\n                'YourAccount', 'YourPassword') do |pop|\n  if pop.mails.empty?\n    puts 'No mail.'\n  else\n    i = 1\n    pop.delete_all do |m|\n      File.open(\"inbox/#{i}\", 'w') do |f|\n        f.write m.pop\n      end\n      i += 1\n    end\n  end\nend\n\nAnd here is an even shorter example.\nrequire 'net/pop'\n\ni = 0\nNet::POP3.delete_all('pop.example.com', 110,\n                     'YourAccount', 'YourPassword') do |m|\n  File.open(\"inbox/#{i}\", 'w') do |f|\n    f.write m.pop\n  end\n  i += 1\nend\n\nMemory Space Issues\u00b6 \u2191\nAll the examples above get each message as one big string. This example\navoids this.\nrequire 'net/pop'\n\ni = 1\nNet::POP3.delete_all('pop.example.com', 110,\n                     'YourAccount', 'YourPassword') do |m|\n  File.open(\"inbox/#{i}\", 'w') do |f|\n    m.pop do |chunk|    # get a message little by little.\n      f.write chunk\n    end\n    i += 1\n  end\nend\n\nUsing APOP\u00b6 \u2191\nThe net/pop library supports APOP authentication.\nTo use APOP, use the Net::APOP class instead of the Net::POP3 class. You can use the utility method, Net::POP3.APOP(). For example:\nrequire 'net/pop'\n\n# Use APOP authentication if $isapop == true\npop = Net::POP3.APOP($isapop).new('apop.example.com', 110)\npop.start('YourAccount', 'YourPassword') do |pop|\n  # Rest of the code is the same.\nend\n\nFetch Only Selected Mail Using 'UIDL' POP Command\u00b6 \u2191\nIf your POP server provides UIDL functionality, you can grab only selected\nmails from the POP server. e.g.\ndef need_pop?( id )\n  # determine if we need pop this mail...\nend\n\nNet::POP3.start('pop.example.com', 110,\n                'Your account', 'Your password') do |pop|\n  pop.mails.select { |m| need_pop?(m.unique_id) }.each do |m|\n    do_something(m.pop)\n  end\nend\n\nThe Net::POPMail#unique_id\nmethod returns the unique-id of the message as a String. Normally the\nunique-id is a hash of the message.\n"}, {"c": "Net::POPAuthenticationError", "d": "\nPOP3 authentication error.\n"}, {"c": "Net::POPBadResponse", "d": "\nUnexpected response from the server.\n"}, {"c": "Net::POPError", "d": "\nNon-authentication POP3 protocol error (reply code\n\u00e2\u20ac\u0153-ERR\u00e2\u20ac, except authentication).\n"}, {"c": "Net::POPMail", "d": "\nThis class represents a message which exists on the POP server. Instances\nof this class are created by the POP3 class; they\nshould not be directly created by the user.\n"}, {"c": "Net::ProtoAuthError", "d": "\n"}, {"c": "Net::ProtocolError", "d": "\n"}, {"c": "Net::ProtoCommandError", "d": "\n"}, {"c": "Net::ProtocRetryError", "d": "\n"}, {"c": "Net::ProtoFatalError", "d": "\n"}, {"c": "Net::ProtoRetriableError", "d": "\n"}, {"c": "Net::ProtoServerError", "d": "\n"}, {"c": "Net::ProtoSyntaxError", "d": "\n"}, {"c": "Net::ProtoUnknownError", "d": "\n"}, {"c": "Net::ReadTimeout", "d": "\nReadTimeout, a subclass of Timeout::Error, is raised if a chunk of\nthe response cannot be read within the read_timeout.\n"}, {"c": "Net::SMTP", "d": "\nWhat is This Library?\u00b6 \u2191\nThis library provides functionality to send internet mail via SMTP, the Simple Mail Transfer Protocol. For details\nof SMTP itself, see [RFC2821] (www.ietf.org/rfc/rfc2821.txt).\nWhat is This Library NOT?\u00b6 \u2191\nThis library does NOT provide functions to compose internet mails. You must\ncreate them by yourself. If you want better mail support, try RubyMail or\nTMail or search for alternatives in RubyGems.org or The Ruby Toolbox.\nFYI: the official documentation on internet mail is: [RFC2822] (www.ietf.org/rfc/rfc2822.txt).\nExamples\u00b6 \u2191\nSending Messages\u00b6 \u2191\nYou must open a connection to an SMTP server before\nsending messages. The first argument is the address of your SMTP server, and the second argument is the port\nnumber. Using ::start with a block\nis the simplest way to do this. This way, the SMTP\nconnection is closed automatically after the block is executed.\nrequire 'net/smtp'\nNet::SMTP.start('your.smtp.server', 25) do |smtp|\n  # Use the SMTP object smtp only in this block.\nend\n\nReplace 'your.smtp.server' with your SMTP\nserver. Normally your system manager or internet provider supplies a server\nfor you.\nThen you can send messages.\nmsgstr = <<END_OF_MESSAGE\nFrom: Your Name <your@mail.address>\nTo: Destination Address <someone@example.com>\nSubject: test message\nDate: Sat, 23 Jun 2001 16:26:43 +0900\nMessage-Id: <unique.message.id.string@example.com>\n\nThis is a test message.\nEND_OF_MESSAGE\n\nrequire 'net/smtp'\nNet::SMTP.start('your.smtp.server', 25) do |smtp|\n  smtp.send_message msgstr,\n                    'your@mail.address',\n                    'his_address@example.com'\nend\n\nClosing the Session\u00b6 \u2191\nYou MUST close the SMTP session after sending\nmessages, by calling the finish\nmethod:\n# using SMTP#finish\nsmtp = Net::SMTP.start('your.smtp.server', 25)\nsmtp.send_message msgstr, 'from@address', 'to@address'\nsmtp.finish\n\nYou can also use the block form of ::start/SMTP#start.  This closes the SMTP session automatically:\n# using block form of SMTP.start\nNet::SMTP.start('your.smtp.server', 25) do |smtp|\n  smtp.send_message msgstr, 'from@address', 'to@address'\nend\n\nI strongly recommend this scheme.  This form is simpler and more robust.\nHELO domain\u00b6 \u2191\nIn almost all situations, you must provide a third argument to ::start/SMTP#start. This is the domain\nname which you are on (the host to send mail from). It is called the \u00e2\u20ac\u0153HELO\ndomain\u00e2\u20ac. The SMTP server will judge whether it\nshould send or reject the SMTP session by\ninspecting the HELO domain.\nNet::SMTP.start('your.smtp.server', 25,\n                'mail.from.domain') { |smtp| ... }\nSMTP Authentication\u00b6 \u2191\nThe Net::SMTP class supports three authentication\nschemes; PLAIN, LOGIN and CRAM MD5.  (SMTP Authentication: [RFC2554]) To\nuse SMTP authentication, pass extra arguments to ::start/SMTP#start.\n# PLAIN\nNet::SMTP.start('your.smtp.server', 25, 'mail.from.domain',\n                'Your Account', 'Your Password', :plain)\n# LOGIN\nNet::SMTP.start('your.smtp.server', 25, 'mail.from.domain',\n                'Your Account', 'Your Password', :login)\n\n# CRAM MD5\nNet::SMTP.start('your.smtp.server', 25, 'mail.from.domain',\n                'Your Account', 'Your Password', :cram_md5)\n\n"}, {"c": "Net::SMTPAuthenticationError", "d": "\nRepresents an SMTP authentication error.\n"}, {"c": "Net::SMTPError", "d": "\nModule mixed in to all SMTP error classes\n"}, {"c": "Net::SMTPFatalError", "d": "\nRepresents a fatal SMTP error (error code 5xx,\nexcept for 500)\n"}, {"c": "Net::SMTPServerBusy", "d": "\nRepresents SMTP error code 420 or 450, a temporary\nerror.\n"}, {"c": "Net::SMTPSyntaxError", "d": "\nRepresents an SMTP command syntax error (error code\n500)\n"}, {"c": "Net::SMTPUnknownError", "d": "\nUnexpected reply code returned from server.\n"}, {"c": "Net::SMTPUnsupportedCommand", "d": "\nCommand is not supported on server.\n"}, {"c": "Net::WriteAdapter", "d": "\nThe writer adapter class\n"}, {"c": "Net::FTP::BufferedSocket", "d": "\n"}, {"c": "Net::FTP::BufferedSSLSocket", "d": "\n"}, {"c": "Net::FTP::MLSxEntry", "d": "\nMLSxEntry represents an entry in responses of\nMLST/MLSD. Each entry has the facts (e.g., size, last modification time,\netc.) and the pathname.\n"}, {"c": "Net::FTP::NullSocket", "d": "\n"}, {"c": "Net::HTTP::Copy", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods.\n"}, {"c": "Net::HTTP::Delete", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods. See Net::HTTP for usage\nexamples.\n"}, {"c": "Net::HTTP::Get", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods. See Net::HTTP for usage\nexamples.\n"}, {"c": "Net::HTTP::Head", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods. See Net::HTTP for usage\nexamples.\n"}, {"c": "Net::HTTP::Lock", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods.\n"}, {"c": "Net::HTTP::Mkcol", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods.\n"}, {"c": "Net::HTTP::Move", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods.\n"}, {"c": "Net::HTTP::Options", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods.\n"}, {"c": "Net::HTTP::Patch", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods.\n"}, {"c": "Net::HTTP::Post", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods. See Net::HTTP for usage\nexamples.\n"}, {"c": "Net::HTTP::Propfind", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods.\n"}, {"c": "Net::HTTP::Proppatch", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods.\n"}, {"c": "Net::HTTP::Put", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods. See Net::HTTP for usage\nexamples.\n"}, {"c": "Net::HTTP::Trace", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods.\n"}, {"c": "Net::HTTP::Unlock", "d": "\nSee Net::HTTPGenericRequest for\nattributes and methods.\n"}, {"c": "Net::IMAP::BadResponseError", "d": "\nError raised upon a \u00e2\u20ac\u0153BAD\u00e2\u20ac response from the\nserver, indicating that the client command violated the IMAP protocol, or an internal server failure has\noccurred.\n"}, {"c": "Net::IMAP::BodyTypeAttachment", "d": "\nNet::IMAP::BodyTypeAttachment\nrepresents attachment body structures of messages.\nFields:\u00b6 \u2191\nmedia_type\n\nReturns the content media type name.\nsubtype\n\nReturns nil.\nparam\n\nReturns a hash that represents parameters.\nmultipart?\n\nReturns false.\n\n"}, {"c": "Net::IMAP::BodyTypeBasic", "d": "\nNet::IMAP::BodyTypeBasic represents basic\nbody structures of messages.\nFields:\u00b6 \u2191\nmedia_type\n\nReturns the content media type name as defined in [MIME-IMB].\nsubtype\n\nReturns the content subtype name as defined in [MIME-IMB].\nparam\n\nReturns a hash that represents parameters as defined in [MIME-IMB].\ncontent_id\n\nReturns a string giving the content id as defined in [MIME-IMB].\ndescription\n\nReturns a string giving the content description as defined in [MIME-IMB].\nencoding\n\nReturns a string giving the content transfer encoding as defined in\n[MIME-IMB].\nsize\n\nReturns a number giving the size of the body in octets.\nmd5\n\nReturns a string giving the body MD5 value as defined in [MD5].\ndisposition\n\nReturns a Net::IMAP::ContentDisposition object giving the content\ndisposition.\nlanguage\n\nReturns a string or an array of strings giving the body language value as\ndefined in [LANGUAGE-TAGS].\nextension\n\nReturns extension data.\nmultipart?\n\nReturns false.\n\n"}, {"c": "Net::IMAP::BodyTypeExtension", "d": "\n"}, {"c": "Net::IMAP::BodyTypeMessage", "d": "\nNet::IMAP::BodyTypeMessage represents\nMESSAGE/RFC822 body structures of messages.\nFields:\u00b6 \u2191\nenvelope\n\nReturns a Net::IMAP::Envelope giving the envelope structure.\nbody\n\nReturns an object giving the body structure.\n\nAnd Net::IMAP::BodyTypeMessage has all\nmethods of Net::IMAP::BodyTypeText.\n"}, {"c": "Net::IMAP::BodyTypeMultipart", "d": "\nNet::IMAP::BodyTypeMultipart\nrepresents multipart body structures of messages.\nFields:\u00b6 \u2191\nmedia_type\n\nReturns the content media type name as defined in [MIME-IMB].\nsubtype\n\nReturns the content subtype name as defined in [MIME-IMB].\nparts\n\nReturns multiple parts.\nparam\n\nReturns a hash that represents parameters as defined in [MIME-IMB].\ndisposition\n\nReturns a Net::IMAP::ContentDisposition object giving the content\ndisposition.\nlanguage\n\nReturns a string or an array of strings giving the body language value as\ndefined in [LANGUAGE-TAGS].\nextension\n\nReturns extension data.\nmultipart?\n\nReturns true.\n\n"}, {"c": "Net::IMAP::BodyTypeText", "d": "\nNet::IMAP::BodyTypeText represents TEXT\nbody structures of messages.\nFields:\u00b6 \u2191\nlines\n\nReturns the size of the body in text lines.\n\nAnd Net::IMAP::BodyTypeText has all fields\nof Net::IMAP::BodyTypeBasic.\n"}, {"c": "Net::IMAP::ByeResponseError", "d": "\nError raised upon a \u00e2\u20ac\u0153BYE\u00e2\u20ac response from the\nserver, indicating that the client is not being allowed to login, or has\nbeen timed out due to inactivity.\n"}, {"c": "Net::IMAP::CramMD5Authenticator", "d": "\nAuthenticator for the \u00e2\u20ac\u0153CRAM-MD5\u00e2\u20ac authentication type.  See authenticate().\n"}, {"c": "Net::IMAP::DataFormatError", "d": "\nError raised when data is in the incorrect format.\n"}, {"c": "Net::IMAP::DigestMD5Authenticator", "d": "\nAuthenticator for the \u00e2\u20ac\u0153DIGEST-MD5\u00e2\u20ac authentication type.  See\nauthenticate().\n"}, {"c": "Net::IMAP::Error", "d": "\nSuperclass of IMAP errors.\n"}, {"c": "Net::IMAP::FlagCountError", "d": "\nError raised when too many flags are interned to\nsymbols.\n"}, {"c": "Net::IMAP::LoginAuthenticator", "d": "\nAuthenticator for the \u00e2\u20ac\u0153LOGIN\u00e2\u20ac authentication type.  See authenticate().\n"}, {"c": "Net::IMAP::NoResponseError", "d": "\nError raised upon a \u00e2\u20ac\u0153NO\u00e2\u20ac response from the server,\nindicating that the client command could not be completed successfully.\n"}, {"c": "Net::IMAP::NumValidator", "d": "\nCommon validators of number and nz_number types\n"}, {"c": "Net::IMAP::PlainAuthenticator", "d": "\nAuthenticator for the \u00e2\u20ac\u0153PLAIN\u00e2\u20ac authentication type.  See authenticate().\n"}, {"c": "Net::IMAP::ResponseError", "d": "\nSuperclass of all errors used to encapsulate \u00e2\u20ac\u0153fail\u00e2\u20ac responses from the\nserver.\n"}, {"c": "Net::IMAP::ResponseParseError", "d": "\nError raised when a response from the server is\nnon-parseable.\n"}, {"c": "Net::SMTP::Response", "d": "\nThis class represents a response received by the SMTP server. Instances of this class are created by\nthe SMTP class; they should not be directly\ncreated by the user. For more information on SMTP responses, view Section 4.2 of RFC\n5321\n"}, {"c": "ObjectSpace::InternalObjectWrapper", "d": "\nThis class is used as a return value from ObjectSpace.reachable_objects_from.\nWhen ObjectSpace.reachable_objects_from\nreturns an object with references to an internal object, an instance of\nthis class is returned.\nYou can use the type\nmethod to check the type of the internal object.\n"}, {"c": "ObjectSpace::WeakMap", "d": "\nAn ObjectSpace::WeakMap object holds references\nto any objects, but those objects can get garbage collected.\nThis class is mostly used internally by WeakRef, please use lib/weakref.rb\nfor the public interface.\n"}, {"c": "OpenSSL::ASN1", "d": "\nAbstract Syntax Notation One (or ASN.1) is a notation syntax to describe\ndata structures and is defined in ITU-T X.680. ASN.1 itself does not\nmandate any encoding or parsing rules, but usually ASN.1 data structures\nare encoded using the Distinguished Encoding\nRules (DER) or less often the Basic Encoding\nRules (BER) described in ITU-T X.690. DER and BER encodings are binary\nTag-Length-Value (TLV) encodings that are quite concise compared to other\npopular data description formats such as XML, JSON etc. ASN.1 data structures are very common in\ncryptographic applications, e.g. X.509 public key certificates or\ncertificate revocation lists (CRLs) are all defined in ASN.1 and\nDER-encoded. ASN.1, DER and BER are the building blocks of applied\ncryptography. The ASN1 module provides the\nnecessary classes that allow generation of ASN.1 data structures and the\nmethods to encode them using a DER encoding. The decode method allows\nparsing arbitrary BER-/DER-encoded data to a Ruby object that can then be\nmodified and re-encoded at will.\nASN.1 class hierarchy\u00b6 \u2191\nThe base class representing ASN.1 structures is ASN1Data. ASN1Data offers attributes to read and set\nthe tag, the tag_class and finally the value of\na particular ASN.1 item. Upon parsing, any tagged values (implicit or\nexplicit) will be represented by ASN1Data\ninstances because their \u00e2\u20ac\u0153real type\u00e2\u20ac can only be determined using\nout-of-band information from the ASN.1 type declaration. Since this\ninformation is normally known when encoding a type, all sub-classes of ASN1Data offer an additional attribute\ntagging that allows to encode a value implicitly\n(:IMPLICIT) or explicitly (:EXPLICIT).\nConstructive\u00b6 \u2191\nConstructive is, as its name implies,\nthe base class for all constructed encodings, i.e. those that consist of\nseveral values, opposed to \u00e2\u20ac\u0153primitive\u00e2\u20ac encodings with just one single\nvalue. The value of an Constructive is\nalways an Array.\nASN1::Set and ASN1::Sequence\u00b6 \u2191\nThe most common constructive encodings are SETs and SEQUENCEs, which is why\nthere are two sub-classes of Constructive representing each of them.\nPrimitive\u00b6 \u2191\nThis is the super class of all primitive values. Primitive itself is not used when parsing\nASN.1 data, all values are either instances of a corresponding sub-class of\nPrimitive or they are instances of ASN1Data if the value was tagged implicitly\nor explicitly. Please cf. Primitive\ndocumentation for details on sub-classes and their respective mappings of\nASN.1 data types to Ruby objects.\nPossible values for tagging\u00b6 \u2191\nWhen constructing an ASN1Data object the\nASN.1 type definition may require certain elements to be either implicitly\nor explicitly tagged. This can be achieved by setting the tagging\nattribute manually for sub-classes of ASN1Data. Use the symbol\n:IMPLICIT for implicit tagging and :EXPLICIT if\nthe element requires explicit tagging.\nPossible values for tag_class\u00b6 \u2191\nIt is possible to create arbitrary ASN1Data objects that also support a PRIVATE\nor APPLICATION tag class. Possible values for the tag_class\nattribute are:\n\n:UNIVERSAL (the default for untagged values)\n\n:CONTEXT_SPECIFIC (the default for tagged values)\n\n:APPLICATION\n\n:PRIVATE\n\nTag constants\u00b6 \u2191\nThere is a constant defined for each universal tag:\n\nOpenSSL::ASN1::EOC (0)\n\nOpenSSL::ASN1::BOOLEAN (1)\n\nOpenSSL::ASN1::INTEGER (2)\n\nOpenSSL::ASN1::BIT_STRING (3)\n\nOpenSSL::ASN1::OCTET_STRING (4)\n\nOpenSSL::ASN1::NULL (5)\n\nOpenSSL::ASN1::OBJECT (6)\n\nOpenSSL::ASN1::ENUMERATED (10)\n\nOpenSSL::ASN1::UTF8STRING (12)\n\nOpenSSL::ASN1::SEQUENCE (16)\n\nOpenSSL::ASN1::SET (17)\n\nOpenSSL::ASN1::NUMERICSTRING (18)\n\nOpenSSL::ASN1::PRINTABLESTRING (19)\n\nOpenSSL::ASN1::T61STRING (20)\n\nOpenSSL::ASN1::VIDEOTEXSTRING (21)\n\nOpenSSL::ASN1::IA5STRING (22)\n\nOpenSSL::ASN1::UTCTIME (23)\n\nOpenSSL::ASN1::GENERALIZEDTIME (24)\n\nOpenSSL::ASN1::GRAPHICSTRING (25)\n\nOpenSSL::ASN1::ISO64STRING (26)\n\nOpenSSL::ASN1::GENERALSTRING (27)\n\nOpenSSL::ASN1::UNIVERSALSTRING (28)\n\nOpenSSL::ASN1::BMPSTRING (30)\n\nUNIVERSAL_TAG_NAME constant\u00b6 \u2191\nAn Array that stores the name of a given tag number. These names are the\nsame as the name of the tag constant that is additionally defined, e.g. UNIVERSAL_TAG_NAME = \u00e2\u20ac\u0153INTEGER\u00e2\u20ac and OpenSSL::ASN1::INTEGER = 2.\nExample usage\u00b6 \u2191\nDecoding and viewing a DER-encoded file\u00b6 \u2191\nrequire 'openssl'\nrequire 'pp'\nder = File.binread('data.der')\nasn1 = OpenSSL::ASN1.decode(der)\npp der\n\nCreating an ASN.1 structure and DER-encoding it\u00b6 \u2191\nrequire 'openssl'\nversion = OpenSSL::ASN1::Integer.new(1)\n# Explicitly 0-tagged implies context-specific tag class\nserial = OpenSSL::ASN1::Integer.new(12345, 0, :EXPLICIT, :CONTEXT_SPECIFIC)\nname = OpenSSL::ASN1::PrintableString.new('Data 1')\nsequence = OpenSSL::ASN1::Sequence.new( [ version, serial, name ] )\nder = sequence.to_der\n\n"}, {"c": "OpenSSL::BN", "d": "\n"}, {"c": "OpenSSL::BNError", "d": "\nGeneric Error for all of OpenSSL::BN (big num)\n"}, {"c": "OpenSSL::Buffering", "d": "\nOpenSSL IO buffering\nmix-in module.\nThis module allows an OpenSSL::SSL::SSLSocket to behave like an IO.\nYou typically won't use this module directly, you can see it\nimplemented in OpenSSL::SSL::SSLSocket.\n"}, {"c": "OpenSSL::Cipher", "d": "\nProvides symmetric algorithms for encryption and decryption. The algorithms\nthat are available depend on the particular version of OpenSSL that is installed.\nListing all supported algorithms\u00b6 \u2191\nA list of supported algorithms can be obtained by\nputs OpenSSL::Cipher.ciphers\n\nInstantiating a Cipher\u00b6 \u2191\nThere are several ways to create a Cipher\ninstance. Generally, a Cipher algorithm is\ncategorized by its name, the key length in bits and the cipher mode to be\nused. The most generic way to create a Cipher is the following\ncipher = OpenSSL::Cipher.new('<name>-<key length>-<mode>')\n\nThat is, a string consisting of the hyphenated concatenation of the\nindividual components name, key length and mode. Either all uppercase or\nall lowercase strings may be used, for example:\ncipher = OpenSSL::Cipher.new('AES-128-CBC')\n\nFor each algorithm supported, there is a class defined under the Cipher class that goes by the name of the\ncipher, e.g. to obtain an instance of AES, you could also use\n# these are equivalent\ncipher = OpenSSL::Cipher::AES.new(128, :CBC)\ncipher = OpenSSL::Cipher::AES.new(128, 'CBC')\ncipher = OpenSSL::Cipher::AES.new('128-CBC')\n\nFinally, due to its wide-spread use, there are also extra classes defined\nfor the different key sizes of AES\ncipher = OpenSSL::Cipher::AES128.new(:CBC)\ncipher = OpenSSL::Cipher::AES192.new(:CBC)\ncipher = OpenSSL::Cipher::AES256.new(:CBC)\n\nChoosing either encryption or decryption mode\u00b6 \u2191\nEncryption and decryption are often very similar operations for symmetric\nalgorithms, this is reflected by not having to choose different classes for\neither operation, both can be done using the same class. Still, after\nobtaining a Cipher instance, we need to\ntell the instance what it is that we intend to do with it, so we need to\ncall either\ncipher.encrypt\n\nor\ncipher.decrypt\n\non the Cipher instance. This should be the\nfirst call after creating the instance, otherwise configuration that has\nalready been set could get lost in the process.\nChoosing a key\u00b6 \u2191\nSymmetric encryption requires a key that is the same for the encrypting and\nfor the decrypting party and after initial key establishment should be kept\nas private information. There are a lot of ways to create insecure keys,\nthe most notable is to simply take a password as the key without processing\nthe password further. A simple and secure way to create a key for a\nparticular Cipher is\ncipher = OpenSSL::AES256.new(:CFB)\ncipher.encrypt\nkey = cipher.random_key # also sets the generated key on the Cipher\n\nIf you absolutely need to use passwords as encryption keys, you should use\nPassword-Based Key Derivation Function 2 (PBKDF2) by generating the key\nwith the help of the functionality provided by OpenSSL::PKCS5#pbkdf2_hmac_sha1\nor OpenSSL::PKCS5#pbkdf2_hmac.\nAlthough there is #pkcs5_keyivgen, its use is\ndeprecated and it should only be used in legacy applications because it\ndoes not use the newer PKCS#5 v2 algorithms.\nChoosing an IV\u00b6 \u2191\nThe cipher modes CBC, CFB, OFB and CTR all need an \u00e2\u20ac\u0153initialization vector\u00e2\u20ac,\nor short, IV. ECB mode is the only mode that does not require an IV, but\nthere is almost no legitimate use case for this mode because of the fact\nthat it does not sufficiently hide plaintext patterns. Therefore\nYou should never use ECB mode unless you are absolutely sure that\nyou absolutely need it\nBecause of this, you will end up with a mode that explicitly requires an IV\nin any case. Although the IV can be seen as public information, i.e. it may\nbe transmitted in public once generated, it should still stay unpredictable\nto prevent certain kinds of attacks. Therefore, ideally\nAlways create a secure random IV for every encryption of your Cipher\nA new, random IV should be created for every encryption of data. Think of\nthe IV as a nonce (number used once) - it's public but random and\nunpredictable. A secure random IV can be created as follows\ncipher = ...\ncipher.encrypt\nkey = cipher.random_key\niv = cipher.random_iv # also sets the generated IV on the Cipher\nAlthough the key is generally a random value, too, it is a bad choice as an\nIV. There are elaborate ways how an attacker can take advantage of such an\nIV. As a general rule of thumb, exposing the key directly or indirectly\nshould be avoided at all cost and exceptions only be made with good reason.\nCalling #final\u00b6 \u2191\nECB (which should not be used) and CBC are both block-based modes. This\nmeans that unlike for the other streaming-based modes, they operate on\nfixed-size blocks of data, and therefore they require a \u00e2\u20ac\u0153finalization\u00e2\u20ac step\nto produce or correctly decrypt the last block of data by appropriately\nhandling some form of padding. Therefore it is essential to add the output\nof #final to your\nencryption/decryption buffer or you will end up with decryption errors or\ntruncated data.\nAlthough this is not really necessary for streaming-mode ciphers, it is\nstill recommended to apply the same pattern of adding the output of #final there as well - it also\nenables you to switch between modes more easily in the future.\nEncrypting and decrypting some data\u00b6 \u2191\ndata = \"Very, very confidential data\"\n\ncipher = OpenSSL::Cipher::AES.new(128, :CBC)\ncipher.encrypt\nkey = cipher.random_key\niv = cipher.random_iv\n\nencrypted = cipher.update(data) + cipher.final\n...\ndecipher = OpenSSL::Cipher::AES.new(128, :CBC)\ndecipher.decrypt\ndecipher.key = key\ndecipher.iv = iv\n\nplain = decipher.update(encrypted) + decipher.final\n\nputs data == plain #=> true\nAuthenticated Encryption and Associated Data (AEAD)\u00b6 \u2191\nIf the OpenSSL version used supports it, an\nAuthenticated Encryption mode (such as GCM or CCM) should always be\npreferred over any unauthenticated mode. Currently, OpenSSL supports AE only in combination with\nAssociated Data (AEAD) where additional\nassociated data is included in the encryption process to compute a tag at\nthe end of the encryption. This tag will also be used in the decryption\nprocess and by verifying its validity, the authenticity of a given\nciphertext is established.\nThis is superior to unauthenticated modes in that it allows to detect if\nsomebody effectively changed the ciphertext after it had been encrypted.\nThis prevents malicious modifications of the ciphertext that could\notherwise be exploited to modify ciphertexts in ways beneficial to\npotential attackers.\nAn associated data is used where there is additional information, such as\nheaders or some metadata, that must be also authenticated but not\nnecessarily need to be encrypted. If no associated data is needed for\nencryption and later decryption, the OpenSSL\nlibrary still requires a value to be set - \u00e2\u20ac\u0153\u00e2\u20ac may be used in case none is\navailable.\nAn example using the GCM (Galois/Counter Mode). You have 16 bytes\nkey, 12 bytes (96 bits) nonce and the associated data\nauth_data. Be sure not to reuse the key and\nnonce pair. Reusing an nonce ruins the security guarantees of GCM\nmode.\ncipher = OpenSSL::Cipher::AES.new(128, :GCM).encrypt\ncipher.key = key\ncipher.iv = nonce\ncipher.auth_data = auth_data\n\nencrypted = cipher.update(data) + cipher.final\ntag = cipher.auth_tag # produces 16 bytes tag by default\n\nNow you are the receiver. You know the key and have received\nnonce, auth_data, encrypted and tag\nthrough an untrusted network. Note that GCM accepts an arbitrary length tag\nbetween 1 and 16 bytes. You may additionally need to check that the\nreceived tag has the correct length, or you allow attackers to forge a\nvalid single byte tag for the tampered ciphertext with a probability of\n1/256.\nraise \"tag is truncated!\" unless tag.bytesize == 16\ndecipher = OpenSSL::Cipher::AES.new(128, :GCM).decrypt\ndecipher.key = key\ndecipher.iv = nonce\ndecipher.auth_tag = tag\ndecipher.auth_data = auth_data\n\ndecrypted = decipher.update(encrypted) + decipher.final\n\nputs data == decrypted #=> true\n\n"}, {"c": "OpenSSL::Config", "d": "\nOpenSSL::Config\u00b6 \u2191\nConfiguration for the openssl library.\nMany system's installation of openssl library will depend on your\nsystem configuration. See the value of OpenSSL::Config::DEFAULT_CONFIG_FILE\nfor the location of the file for your host.\nSee also www.openssl.org/docs/apps/config.html\n"}, {"c": "OpenSSL::ConfigError", "d": "\nGeneral error for openssl library configuration files. Including\nformatting, parsing errors, etc.\n"}, {"c": "OpenSSL::Digest", "d": "\nOpenSSL::Digest allows you to compute message\ndigests (sometimes interchangeably called \u00e2\u20ac\u0153hashes\u00e2\u20ac) of arbitrary data that\nare cryptographically secure, i.e. a Digest\nimplements a secure one-way function.\nOne-way functions offer some useful properties. E.g. given two distinct\ninputs the probability that both yield the same output is highly unlikely.\nCombined with the fact that every message digest algorithm has a\nfixed-length output of just a few bytes, digests are often used to create\nunique identifiers for arbitrary data. A common example is the creation of\na unique id for binary documents that are stored in a database.\nAnother useful characteristic of one-way functions (and thus the name) is\nthat given a digest there is no indication about the original data that\nproduced it, i.e. the only way to identify the original input is to\n\u00e2\u20ac\u0153brute-force\u00e2\u20ac through every possible combination of inputs.\nThese characteristics make one-way functions also ideal companions for\npublic key signature algorithms: instead of signing an entire document,\nfirst a hash of the document is produced with a considerably faster message\ndigest algorithm and only the few bytes of its output need to be signed\nusing the slower public key algorithm. To validate the integrity of a\nsigned document, it suffices to re-compute the hash and verify that it is\nequal to that in the signature.\nAmong the supported message digest algorithms are:\n\nSHA, SHA1, SHA224, SHA256, SHA384 and SHA512\n\nMD2, MD4, MDC2 and MD5\n\nRIPEMD160\n\nDSS, DSS1 (Pseudo algorithms to be used for DSA signatures. DSS is equal to\nSHA and DSS1 is equal to SHA1)\n\nFor each of these algorithms, there is a sub-class of Digest that can be instantiated as simply as e.g.\ndigest = OpenSSL::Digest::SHA1.new\n\nMapping between Digest class and sn/ln\u00b6 \u2191\nThe sn (short names) and ln (long names) are defined in\n<openssl/object.h> and <openssl/obj_mac.h>. They are textual\nrepresentations of ASN.1 OBJECT IDENTIFIERs. Each supported digest\nalgorithm has an OBJECT IDENTIFIER associated to it and those again have\nshort/long names assigned to them. E.g. the OBJECT IDENTIFIER for SHA-1 is\n1.3.14.3.2.26 and its sn is \u00e2\u20ac\u0153SHA1\u00e2\u20ac and its ln is \u00e2\u20ac\u0153sha1\u00e2\u20ac.\nMD2\u00b6 \u2191\n\nsn: MD2\n\nln: md2\n\nMD4\u00b6 \u2191\n\nsn: MD4\n\nln: md4\n\nMD5\u00b6 \u2191\n\nsn: MD5\n\nln: md5\n\nSHA\u00b6 \u2191\n\nsn: SHA\n\nln: SHA\n\nSHA-1\u00b6 \u2191\n\nsn: SHA1\n\nln: sha1\n\nSHA-224\u00b6 \u2191\n\nsn: SHA224\n\nln: sha224\n\nSHA-256\u00b6 \u2191\n\nsn: SHA256\n\nln: sha256\n\nSHA-384\u00b6 \u2191\n\nsn: SHA384\n\nln: sha384\n\nSHA-512\u00b6 \u2191\n\nsn: SHA512\n\nln: sha512\n\n\u00e2\u20ac\u0153Breaking\u00e2\u20ac a message digest algorithm means defying its one-way function\ncharacteristics, i.e. producing a collision or finding a way to get to the\noriginal data by means that are more efficient than brute-forcing etc. Most\nof the supported digest algorithms can be considered broken in this sense,\neven the very popular MD5 and SHA1 algorithms. Should security be your\nhighest concern, then you should probably rely on SHA224, SHA256, SHA384 or\nSHA512.\nHashing a file\u00b6 \u2191\ndata = File.read('document')\nsha256 = OpenSSL::Digest::SHA256.new\ndigest = sha256.digest(data)\n\nHashing several pieces of data at once\u00b6 \u2191\ndata1 = File.read('file1')\ndata2 = File.read('file2')\ndata3 = File.read('file3')\nsha256 = OpenSSL::Digest::SHA256.new\nsha256 << data1\nsha256 << data2\nsha256 << data3\ndigest = sha256.digest\n\nReuse a Digest instance\u00b6 \u2191\ndata1 = File.read('file1')\nsha256 = OpenSSL::Digest::SHA256.new\ndigest1 = sha256.digest(data1)\n\ndata2 = File.read('file2')\nsha256.reset\ndigest2 = sha256.digest(data2)\n\n"}, {"c": "OpenSSL::Engine", "d": "\nThis class is the access to openssl's ENGINE cryptographic module\nimplementation.\nSee also, www.openssl.org/docs/crypto/engine.html\n"}, {"c": "OpenSSL::ExtConfig", "d": "\nThis module contains configuration information about the SSL extension, for example if socket support is\nenabled, or the host name TLS extension is enabled.  Constants in this\nmodule will always be defined, but contain true or\nfalse values depending on the configuration of your OpenSSL installation.\n"}, {"c": "OpenSSL::HMAC", "d": "\nOpenSSL::HMAC allows computing Hash-based Message\nAuthentication Code (HMAC). It is a type of message authentication code\n(MAC) involving a hash function in combination with a key. HMAC can be used to verify the integrity of a message\nas well as the authenticity.\nOpenSSL::HMAC has a similar interface to OpenSSL::Digest.\nHMAC-SHA256 using one-shot interface\u00b6 \u2191\nkey = \"key\"\ndata = \"message-to-be-authenticated\"\nmac = OpenSSL::HMAC.hexdigest(\"SHA256\", key, data)\n#=> \"cddb0db23f469c8bf072b21fd837149bd6ace9ab771cceef14c9e517cc93282e\"\n\nHMAC-SHA256 using incremental interface\u00b6 \u2191\ndata1 = File.read(\"file1\")\ndata2 = File.read(\"file2\")\nkey = \"key\"\ndigest = OpenSSL::Digest::SHA256.new\nhmac = OpenSSL::HMAC.new(key, digest)\nhmac << data1\nhmac << data2\nmac = hmac.digest\n\n"}, {"c": "OpenSSL::HMACError", "d": "\nDocument-class: OpenSSL::HMAC\nOpenSSL::HMAC allows computing Hash-based Message\nAuthentication Code (HMAC). It is a type of message authentication code\n(MAC) involving a hash function in combination with a key. HMAC can be used to verify the integrity of a message\nas well as the authenticity.\nOpenSSL::HMAC has a similar interface to OpenSSL::Digest.\nHMAC-SHA256 using one-shot interface\u00b6 \u2191\nkey = \"key\"\ndata = \"message-to-be-authenticated\"\nmac = OpenSSL::HMAC.hexdigest(\"SHA256\", key, data)\n#=> \"cddb0db23f469c8bf072b21fd837149bd6ace9ab771cceef14c9e517cc93282e\"\n\nHMAC-SHA256 using incremental interface\u00b6 \u2191\ndata1 = File.read(\"file1\")\ndata2 = File.read(\"file2\")\nkey = \"key\"\ndigest = OpenSSL::Digest::SHA256.new\nhmac = OpenSSL::HMAC.new(key, digest)\nhmac << data1\nhmac << data2\nmac = hmac.digest\n\n"}, {"c": "OpenSSL::KDF", "d": "\nProvides functionality of various KDFs (key derivation function).\nKDF is typically used for securely deriving\narbitrary length symmetric keys to be used with an OpenSSL::Cipher from passwords. Another use case is\nfor storing passwords: Due to the ability to tweak the effort of\ncomputation by increasing the iteration count, computation can be slowed\ndown artificially in order to render possible attacks infeasible.\nCurrently, OpenSSL::KDF provides implementations for\nthe following KDF:\n\nPKCS #5 PBKDF2 (Password-Based Key Derivation Function 2) in combination\nwith HMAC\n\nscrypt\n\nHKDF\n\nExamples\u00b6 \u2191\nGenerating a 128 bit key for a Cipher (e.g. AES)\u00b6 \u2191\npass = \"secret\"\nsalt = OpenSSL::Random.random_bytes(16)\niter = 20_000\nkey_len = 16\nkey = OpenSSL::KDF.pbkdf2_hmac(pass, salt: salt, iterations: iter,\n                               length: key_len, hash: \"sha1\")\n\nStoring Passwords\u00b6 \u2191\npass = \"secret\"\n# store this with the generated value\nsalt = OpenSSL::Random.random_bytes(16)\niter = 20_000\nhash = OpenSSL::Digest::SHA256.new\nlen = hash.digest_length\n# the final value to be stored\nvalue = OpenSSL::KDF.pbkdf2_hmac(pass, salt: salt, iterations: iter,\n                                 length: len, hash: hash)\n\nImportant Note on Checking Passwords\u00b6 \u2191\nWhen comparing passwords provided by the user with previously stored\nvalues, a common mistake made is comparing the two values using \u00e2\u20ac\u0153==\u00e2\u20ac.\nTypically, \u00e2\u20ac\u0153==\u00e2\u20ac short-circuits on evaluation, and is therefore vulnerable\nto timing attacks. The proper way is to use a method that always takes the\nsame amount of time when comparing two values, thus not leaking any\ninformation to potential attackers. To compare two values, the following\ncould be used:\ndef eql_time_cmp(a, b)\n  unless a.length == b.length\n    return false\n  end\n  cmp = b.bytes\n  result = 0\n  a.bytes.each_with_index {|c,i|\n    result |= c ^ cmp[i]\n  }\n  result == 0\nend\n\nPlease note that the premature return in case of differing lengths\ntypically does not leak valuable information - when using PBKDF2, the\nlength of the values to be compared is of fixed size.\n"}, {"c": "OpenSSL::Netscape", "d": "\nOpenSSL::Netscape is a namespace for SPKI (Simple Public Key Infrastructure) which\nimplements Signed Public Key and Challenge. See RFC 2692 and RFC 2693 for details.\n"}, {"c": "OpenSSL::OCSP", "d": "\nOpenSSL::OCSP implements Online Certificate Status\nProtocol requests and responses.\nCreating and sending an OCSP request requires a\nsubject certificate that contains an OCSP URL in an\nauthorityInfoAccess extension and the issuer certificate for the subject\ncertificate.  First, load the issuer and subject certificates:\nsubject = OpenSSL::X509::Certificate.new subject_pem\nissuer  = OpenSSL::X509::Certificate.new issuer_pem\n\nTo create the request we need to create a certificate ID for the subject\ncertificate so the CA knows which certificate we are asking about:\ndigest = OpenSSL::Digest::SHA1.new\ncertificate_id =\n  OpenSSL::OCSP::CertificateId.new subject, issuer, digest\n\nThen create a request and add the certificate ID to it:\nrequest = OpenSSL::OCSP::Request.new\nrequest.add_certid certificate_id\n\nAdding a nonce to the request protects against replay attacks but not all\nCA process the nonce.\nrequest.add_nonce\n\nTo submit the request to the CA for verification we need to extract the OCSP URI from the subject\ncertificate:\nauthority_info_access = subject.extensions.find do |extension|\n  extension.oid == 'authorityInfoAccess'\nend\n\ndescriptions = authority_info_access.value.split \"\\n\"\nocsp = descriptions.find do |description|\n  description.start_with? 'OCSP'\nend\n\nrequire 'uri'\n\nocsp_uri = URI ocsp[/URI:(.*)/, 1]\n\nTo submit the request we'll POST the request to the OCSP URI (per RFC 2560). \nNote that we only handle HTTP requests and don't handle any redirects\nin this example, so this is insufficient for serious use.\nrequire 'net/http'\n\nhttp_response =\n  Net::HTTP.start ocsp_uri.hostname, ocsp.port do |http|\n    http.post ocsp_uri.path, request.to_der,\n              'content-type' => 'application/ocsp-request'\nend\n\nresponse = OpenSSL::OCSP::Response.new http_response.body\nresponse_basic = response.basic\n\nFirst we check if the response has a valid signature.  Without a valid\nsignature we cannot trust it.  If you get a failure here you may be missing\na system certificate store or may be missing the intermediate certificates.\nstore = OpenSSL::X509::Store.new\nstore.set_default_paths\n\nunless response_basic.verify [], store then\n  raise 'response is not signed by a trusted certificate'\nend\n\nThe response contains the status information (success/fail).  We can\ndisplay the status as a string:\nputs response.status_string #=> successful\n\nNext we need to know the response details to determine if the response\nmatches our request.  First we check the nonce.  Again, not all CAs support\na nonce.  See OpenSSL::OCSP::Request#check_nonce\nfor the meanings of the return values.\np request.check_nonce basic_response #=> value from -1 to 3\n\nThen extract the status information for the certificate from the basic\nresponse.\nsingle_response = basic_response.find_response(certificate_id)\n\nunless single_response\n  raise 'basic_response does not have the status for the certificiate'\nend\n\nThen check the validity. A status issued in the future must be rejected.\nunless single_response.check_validity\n  raise 'this_update is in the future or next_update time has passed'\nend\n\ncase single_response.cert_status\nwhen OpenSSL::OCSP::V_CERTSTATUS_GOOD\n  puts 'certificate is still valid'\nwhen OpenSSL::OCSP::V_CERTSTATUS_REVOKED\n  puts \"certificate has been revoked at #{single_response.revocation_time}\"\nwhen OpenSSL::OCSP::V_CERTSTATUS_UNKNOWN\n  puts 'responder doesn't know about the certificate'\nend\n"}, {"c": "OpenSSL::OpenSSLError", "d": "\nGeneric error, common for all classes under OpenSSL module\n"}, {"c": "OpenSSL::PKCS12", "d": "\nDefines a file format commonly used to store private keys with accompanying\npublic key certificates, protected with a password-based symmetric key.\n"}, {"c": "OpenSSL::PKCS5", "d": "\n"}, {"c": "OpenSSL::PKCS7", "d": "\n"}, {"c": "OpenSSL::PKey", "d": "\nAsymmetric Public Key Algorithms\u00b6 \u2191\nAsymmetric public key algorithms solve the problem of establishing and\nsharing secret keys to en-/decrypt messages. The key in such an algorithm\nconsists of two parts: a public key that may be distributed to others and a\nprivate key that needs to remain secret.\nMessages encrypted with a public key can only be decrypted by recipients\nthat are in possession of the associated private key. Since public key\nalgorithms are considerably slower than symmetric key algorithms (cf. OpenSSL::Cipher) they are often used to establish a\nsymmetric key shared between two parties that are in possession of each\nother's public key.\nAsymmetric algorithms offer a lot of nice features that are used in a lot\nof different areas. A very common application is the creation and\nvalidation of digital signatures. To sign a document, the signatory\ngenerally uses a message digest algorithm (cf. OpenSSL::Digest) to compute a digest of the document\nthat is then encrypted (i.e. signed) using the private key. Anyone in\npossession of the public key may then verify the signature by computing the\nmessage digest of the original document on their own, decrypting the\nsignature using the signatory's public key and comparing the result to\nthe message digest they previously computed. The signature is valid if and\nonly if the decrypted signature is equal to this message digest.\nThe PKey module offers support for three\npopular public/private key algorithms:\n\nRSA (OpenSSL::PKey::RSA)\n\nDSA (OpenSSL::PKey::DSA)\n\nElliptic Curve Cryptography (OpenSSL::PKey::EC)\n\nEach of these implementations is in fact a sub-class of the abstract PKey class which offers the interface for\nsupporting digital signatures in the form of OpenSSL::PKey::PKey#sign and OpenSSL::PKey::PKey#verify.\nDiffie-Hellman Key Exchange\u00b6 \u2191\nFinally PKey also features OpenSSL::PKey::DH, an implementation of the\nDiffie-Hellman key exchange protocol based on discrete logarithms in finite\nfields, the same basis that DSA is built on.\nThe Diffie-Hellman protocol can be used to exchange (symmetric) keys over\ninsecure channels without needing any prior joint knowledge between the\nparticipating parties. As the security of DH\ndemands relatively long \u00e2\u20ac\u0153public keys\u00e2\u20ac (i.e. the part that is overtly\ntransmitted between participants) DH tends to be\nquite slow. If security or speed is your primary concern, OpenSSL::PKey::EC offers another implementation of\nthe Diffie-Hellman protocol.\n"}, {"c": "OpenSSL::Random", "d": "\n"}, {"c": "OpenSSL::SSL", "d": "\nUse SSLContext to set up the parameters\nfor a TLS (former SSL) connection. Both client and\nserver TLS connections are supported, SSLSocket and SSLServer may be used in conjunction with an\ninstance of SSLContext to set up\nconnections.\n"}, {"c": "OpenSSL::X509", "d": "\n"}, {"c": "OpenSSL::ASN1::ASN1Data", "d": "\nThe top-level class representing any ASN.1 object. When parsed by OpenSSL::ASN1.decode, tagged values\nare always represented by an instance of ASN1Data.\nThe role of ASN1Data for parsing tagged values\u00b6 \u2191\nWhen encoding an ASN.1 type it is inherently clear what original type (e.g.\nINTEGER, OCTET STRING etc.) this value has, regardless of its tagging. But\nopposed to the time an ASN.1 type is to be encoded, when parsing them it is\nnot possible to deduce the \u00e2\u20ac\u0153real type\u00e2\u20ac of tagged values. This is why tagged\nvalues are generally parsed into ASN1Data\ninstances, but with a different outcome for implicit and explicit tagging.\nExample of a parsed implicitly tagged value\u00b6 \u2191\nAn implicitly 1-tagged INTEGER value will be parsed as an ASN1Data with\n\ntag equal to 1\n\ntag_class equal to :CONTEXT_SPECIFIC\n\nvalue equal to a String that carries the raw encoding of the\nINTEGER.\n\nThis implies that a subsequent decoding step is required to completely\ndecode implicitly tagged values.\nExample of a parsed explicitly tagged value\u00b6 \u2191\nAn explicitly 1-tagged INTEGER value will be parsed as an ASN1Data with\n\ntag equal to 1\n\ntag_class equal to :CONTEXT_SPECIFIC\n\nvalue equal to an Array with one single element, an instance of\nOpenSSL::ASN1::Integer, i.e. the inner element is the non-tagged primitive\nvalue, and the tagging is represented in the outer ASN1Data\n\nExample - Decoding an implicitly tagged INTEGER\u00b6 \u2191\nint = OpenSSL::ASN1::Integer.new(1, 0, :IMPLICIT) # implicit 0-tagged\nseq = OpenSSL::ASN1::Sequence.new( [int] )\nder = seq.to_der\nasn1 = OpenSSL::ASN1.decode(der)\n# pp asn1 => #<OpenSSL::ASN1::Sequence:0x87326e0\n#              @indefinite_length=false,\n#              @tag=16,\n#              @tag_class=:UNIVERSAL,\n#              @tagging=nil,\n#              @value=\n#                [#<OpenSSL::ASN1::ASN1Data:0x87326f4\n#                   @indefinite_length=false,\n#                   @tag=0,\n#                   @tag_class=:CONTEXT_SPECIFIC,\n#                   @value=\"\\x01\">]>\nraw_int = asn1.value[0]\n# manually rewrite tag and tag class to make it an UNIVERSAL value\nraw_int.tag = OpenSSL::ASN1::INTEGER\nraw_int.tag_class = :UNIVERSAL\nint2 = OpenSSL::ASN1.decode(raw_int)\nputs int2.value # => 1\n\nExample - Decoding an explicitly tagged INTEGER\u00b6 \u2191\nint = OpenSSL::ASN1::Integer.new(1, 0, :EXPLICIT) # explicit 0-tagged\nseq = OpenSSL::ASN1::Sequence.new( [int] )\nder = seq.to_der\nasn1 = OpenSSL::ASN1.decode(der)\n# pp asn1 => #<OpenSSL::ASN1::Sequence:0x87326e0\n#              @indefinite_length=false,\n#              @tag=16,\n#              @tag_class=:UNIVERSAL,\n#              @tagging=nil,\n#              @value=\n#                [#<OpenSSL::ASN1::ASN1Data:0x87326f4\n#                   @indefinite_length=false,\n#                   @tag=0,\n#                   @tag_class=:CONTEXT_SPECIFIC,\n#                   @value=\n#                     [#<OpenSSL::ASN1::Integer:0x85bf308\n#                        @indefinite_length=false,\n#                        @tag=2,\n#                        @tag_class=:UNIVERSAL\n#                        @tagging=nil,\n#                        @value=1>]>]>\nint2 = asn1.value[0].value[0]\nputs int2.value # => 1\n\n"}, {"c": "OpenSSL::ASN1::ASN1Error", "d": "\nGeneric error class for all errors raised in ASN1 and any of the classes defined in it.\n"}, {"c": "OpenSSL::ASN1::Constructive", "d": "\nThe parent class for all constructed encodings. The value\nattribute of a Constructive is always an\nArray. Attributes are the same as for ASN1Data,\nwith the addition of tagging.\nSET and SEQUENCE\u00b6 \u2191\nMost constructed encodings come in the form of a SET or a SEQUENCE. These\nencodings are represented by one of the two sub-classes of Constructive:\n\nOpenSSL::ASN1::Set\n\nOpenSSL::ASN1::Sequence\n\nPlease note that tagged sequences and sets are still parsed as instances of\nASN1Data. Find\nfurther details on tagged values there.\nExample - constructing a SEQUENCE\u00b6 \u2191\nint = OpenSSL::ASN1::Integer.new(1)\nstr = OpenSSL::ASN1::PrintableString.new('abc')\nsequence = OpenSSL::ASN1::Sequence.new( [ int, str ] )\n\nExample - constructing a SET\u00b6 \u2191\nint = OpenSSL::ASN1::Integer.new(1)\nstr = OpenSSL::ASN1::PrintableString.new('abc')\nset = OpenSSL::ASN1::Set.new( [ int, str ] )\n\n"}, {"c": "OpenSSL::ASN1::ObjectId", "d": "\nRepresents the primitive object id for OpenSSL::ASN1\n"}, {"c": "OpenSSL::ASN1::Primitive", "d": "\nThe parent class for all primitive encodings. Attributes are the same as\nfor ASN1Data, with the addition of\ntagging. Primitive values can never\nbe encoded with indefinite length form, thus it is not possible to set the\nindefinite_length attribute for Primitive and its sub-classes.\nPrimitive sub-classes and their mapping to Ruby classes\u00b6 \u2191\n\nOpenSSL::ASN1::EndOfContent    <=> value is always\nnil\n\nOpenSSL::ASN1::Boolean         <=> value is\ntrue or false\n\nOpenSSL::ASN1::Integer         <=> value is an OpenSSL::BN\n\nOpenSSL::ASN1::BitString       <=> value is a String\n\nOpenSSL::ASN1::OctetString     <=> value is a String\n\nOpenSSL::ASN1::Null            <=> value is always\nnil\n\nOpenSSL::ASN1::Object          <=> value is a String\n\nOpenSSL::ASN1::Enumerated      <=> value is an OpenSSL::BN\n\nOpenSSL::ASN1::UTF8String      <=> value is a String\n\nOpenSSL::ASN1::NumericString   <=> value is a String\n\nOpenSSL::ASN1::PrintableString <=> value is a String\n\nOpenSSL::ASN1::T61String       <=> value is a String\n\nOpenSSL::ASN1::VideotexString  <=> value is a String\n\nOpenSSL::ASN1::IA5String       <=> value is a String\n\nOpenSSL::ASN1::UTCTime         <=> value is a Time\n\nOpenSSL::ASN1::GeneralizedTime <=> value is a Time\n\nOpenSSL::ASN1::GraphicString   <=> value is a String\n\nOpenSSL::ASN1::ISO64String     <=> value is a String\n\nOpenSSL::ASN1::GeneralString   <=> value is a String\n\nOpenSSL::ASN1::UniversalString <=> value is a String\n\nOpenSSL::ASN1::BMPString       <=> value is a String\n\nOpenSSL::ASN1::BitString\u00b6 \u2191\nAdditional attributes\u00b6 \u2191\nunused_bits: if the underlying BIT STRING's length is a\nmultiple of 8 then unused_bits is 0. Otherwise\nunused_bits indicates the number of bits that are to be ignored in\nthe final octet of the BitString's value.\nOpenSSL::ASN1::ObjectId\u00b6 \u2191\nNOTE: While ::new will allocate a\nnew ObjectId, it is not typically allocated\nthis way, but rather that are received from parsed ASN1 encodings.\nAdditional attributes\u00b6 \u2191\n\nsn: the short name as defined in <openssl/objects.h>.\n\nln: the long name as defined in <openssl/objects.h>.\n\noid: the object identifier as a String, e.g. \u00e2\u20ac\u01531.2.3.4.5\u00e2\u20ac\n\nshort_name: alias for sn.\n\nlong_name: alias for ln.\n\nExamples\u00b6 \u2191\nWith the Exception of\nOpenSSL::ASN1::EndOfContent, each Primitive\nclass constructor takes at least one parameter, the value.\nCreating EndOfContent\u00b6 \u2191\neoc = OpenSSL::ASN1::EndOfContent.new\n\nCreating any other Primitive\u00b6 \u2191\nprim = <class>.new(value) # <class> being one of the sub-classes except EndOfContent\nprim_zero_tagged_implicit = <class>.new(value, 0, :IMPLICIT)\nprim_zero_tagged_explicit = <class>.new(value, 0, :EXPLICIT)\n"}, {"c": "OpenSSL::Cipher::Cipher", "d": "\nDeprecated.\nThis class is only provided for backwards compatibility. Use OpenSSL::Cipher.\n"}, {"c": "OpenSSL::Cipher::CipherError", "d": "\n"}, {"c": "OpenSSL::Digest::DigestError", "d": "\nGeneric Exception class that is raised\nif an error occurs during a Digest operation.\n"}, {"c": "OpenSSL::Engine::EngineError", "d": "\nThis is the generic exception for OpenSSL::Engine related errors\n"}, {"c": "OpenSSL::KDF::KDFError", "d": "\nGeneric exception class raised if an error occurs in OpenSSL::KDF module.\n"}, {"c": "OpenSSL::Netscape::SPKI", "d": "\nA Simple Public Key Infrastructure implementation (pronounced \u00e2\u20ac\u0153spooky\u00e2\u20ac).\nThe structure is defined as\nPublicKeyAndChallenge ::= SEQUENCE {\n  spki SubjectPublicKeyInfo,\n  challenge IA5STRING\n}\n\nSignedPublicKeyAndChallenge ::= SEQUENCE {\n  publicKeyAndChallenge PublicKeyAndChallenge,\n  signatureAlgorithm AlgorithmIdentifier,\n  signature BIT STRING\n}\nwhere the definitions of SubjectPublicKeyInfo and AlgorithmIdentifier can\nbe found in RFC5280. SPKI is typically used in\nbrowsers for generating a public/private key pair and a subsequent\ncertificate request, using the HTML <keygen> element.\nExamples\u00b6 \u2191\nCreating an SPKI\u00b6 \u2191\nkey = OpenSSL::PKey::RSA.new 2048\nspki = OpenSSL::Netscape::SPKI.new\nspki.challenge = \"RandomChallenge\"\nspki.public_key = key.public_key\nspki.sign(key, OpenSSL::Digest::SHA256.new)\n#send a request containing this to a server generating a certificate\n\nVerifying an SPKI request\u00b6 \u2191\nrequest = #...\nspki = OpenSSL::Netscape::SPKI.new request\nunless spki.verify(spki.public_key)\n  # signature is invalid\nend\n#proceed\n\n"}, {"c": "OpenSSL::Netscape::SPKIError", "d": "\nGeneric Exception class that is raised\nif an error occurs during an operation on an instance of OpenSSL::Netscape::SPKI.\n"}, {"c": "OpenSSL::OCSP::BasicResponse", "d": "\nAn OpenSSL::OCSP::BasicResponse contains\nthe status of a certificate check which is created from an OpenSSL::OCSP::Request.  A BasicResponse is more detailed than a Response.\n"}, {"c": "OpenSSL::OCSP::CertificateId", "d": "\nAn OpenSSL::OCSP::CertificateId identifies\na certificate to the CA so that a status check can be performed.\n"}, {"c": "OpenSSL::OCSP::OCSPError", "d": "\nOCSP error class.\n"}, {"c": "OpenSSL::OCSP::Request", "d": "\nAn OpenSSL::OCSP::Request contains the\ncertificate information for determining if a certificate has been revoked\nor not.  A Request can be created for a\ncertificate or from a DER-encoded request created elsewhere.\n"}, {"c": "OpenSSL::OCSP::Response", "d": "\nAn OpenSSL::OCSP::Response contains the status\nof a certificate check which is created from an OpenSSL::OCSP::Request.\n"}, {"c": "OpenSSL::OCSP::SingleResponse", "d": "\nAn OpenSSL::OCSP::SingleResponse\nrepresents an OCSP SingleResponse structure, which contains the\nbasic information of the status of the certificate.\n"}, {"c": "OpenSSL::PKCS12::PKCS12Error", "d": "\n"}, {"c": "OpenSSL::PKCS7::PKCS7Error", "d": "\n"}, {"c": "OpenSSL::PKCS7::RecipientInfo", "d": "\n"}, {"c": "OpenSSL::PKCS7::SignerInfo", "d": "\n"}, {"c": "OpenSSL::PKey::DH", "d": "\nAn implementation of the Diffie-Hellman key exchange protocol based on\ndiscrete logarithms in finite fields, the same basis that DSA is built on.\nAccessor methods for the Diffie-Hellman parameters\u00b6 \u2191\nKernel#p\n\nThe prime (an OpenSSL::BN) of the Diffie-Hellman\nparameters.\nDH#g\n\nThe generator (an OpenSSL::BN) g of the\nDiffie-Hellman parameters.\nDH#pub_key\n\nThe per-session public key (an OpenSSL::BN)\nmatching the private key. This needs to be passed to #compute_key.\nDH#priv_key\n\nThe per-session private key, an OpenSSL::BN.\n\nExample of a key exchange\u00b6 \u2191\ndh1 = OpenSSL::PKey::DH.new(2048)\nder = dh1.public_key.to_der #you may send this publicly to the participating party\ndh2 = OpenSSL::PKey::DH.new(der)\ndh2.generate_key! #generate the per-session key pair\nsymm_key1 = dh1.compute_key(dh2.pub_key)\nsymm_key2 = dh2.compute_key(dh1.pub_key)\n\nputs symm_key1 == symm_key2 # => true\n\n"}, {"c": "OpenSSL::PKey::DHError", "d": "\nGeneric exception that is raised if an operation on a DH PKey fails unexpectedly or in\ncase an instantiation of an instance of DH fails due\nto non-conformant input data.\n"}, {"c": "OpenSSL::PKey::DSA", "d": "\nDSA, the Digital Signature Algorithm, is specified\nin NIST's FIPS 186-3. It is an asymmetric public key algorithm that may\nbe used similar to e.g. RSA.\n"}, {"c": "OpenSSL::PKey::DSAError", "d": "\nGeneric exception that is raised if an operation on a DSA PKey fails unexpectedly or\nin case an instantiation of an instance of DSA fails\ndue to non-conformant input data.\n"}, {"c": "OpenSSL::PKey::EC", "d": "\nOpenSSL::PKey::EC provides access to Elliptic Curve\nDigital Signature Algorithm (ECDSA) and Elliptic Curve Diffie-Hellman\n(ECDH).\nKey exchange\u00b6 \u2191\nec1 = OpenSSL::PKey::EC.generate(\"prime256v1\")\nec2 = OpenSSL::PKey::EC.generate(\"prime256v1\")\n# ec1 and ec2 have own private key respectively\nshared_key1 = ec1.dh_compute_key(ec2.public_key)\nshared_key2 = ec2.dh_compute_key(ec1.public_key)\n\np shared_key1 == shared_key2 #=> true\n\n"}, {"c": "OpenSSL::PKey::ECError", "d": "\n"}, {"c": "OpenSSL::PKey::PKey", "d": "\nAn abstract class that bundles signature creation (PKey#sign) and\nvalidation (PKey#verify) that is common to all implementations except OpenSSL::PKey::DH\n\nOpenSSL::PKey::RSA\n\nOpenSSL::PKey::DSA\n\nOpenSSL::PKey::EC\n\n"}, {"c": "OpenSSL::PKey::PKeyError", "d": "\nRaised when errors occur during OpenSSL::PKey::PKey#sign or OpenSSL::PKey::PKey#verify.\n"}, {"c": "OpenSSL::PKey::RSA", "d": "\nRSA is an asymmetric public key algorithm that has\nbeen formalized in RFC 3447. It is in widespread use in public key\ninfrastructures (PKI) where certificates (cf. OpenSSL::X509::Certificate) often are\nissued on the basis of a public/private RSA key\npair. RSA is used in a wide field of applications\nsuch as secure (symmetric) key exchange, e.g. when establishing a secure\nTLS/SSL connection. It is also used in various digital signature schemes.\n"}, {"c": "OpenSSL::PKey::RSAError", "d": "\nGeneric exception that is raised if an operation on an RSA PKey fails unexpectedly or\nin case an instantiation of an instance of RSA fails\ndue to non-conformant input data.\n"}, {"c": "OpenSSL::PKey::EC::Group", "d": "\n"}, {"c": "OpenSSL::PKey::EC::Point", "d": "\n"}, {"c": "OpenSSL::PKey::EC::Group::Error", "d": "\n"}, {"c": "OpenSSL::PKey::EC::Point::Error", "d": "\n"}, {"c": "OpenSSL::Random::RandomError", "d": "\n"}, {"c": "OpenSSL::SSL::Session", "d": "\n"}, {"c": "OpenSSL::SSL::SocketForwarder", "d": "\n"}, {"c": "OpenSSL::SSL::SSLContext", "d": "\nAn SSLContext is used to set various options\nregarding certificates, algorithms, verification, session caching, etc. \nThe SSLContext is used to create an SSLSocket.\nAll attributes must be set before creating an SSLSocket as the SSLContext will be frozen afterward.\n"}, {"c": "OpenSSL::SSL::SSLError", "d": "\nGeneric error class raised by SSLSocket and SSLContext.\n"}, {"c": "OpenSSL::SSL::SSLErrorWaitReadable", "d": "\n"}, {"c": "OpenSSL::SSL::SSLErrorWaitWritable", "d": "\n"}, {"c": "OpenSSL::SSL::SSLServer", "d": "\nSSLServer represents a TCP/IP server socket\nwith Secure Sockets Layer.\n"}, {"c": "OpenSSL::SSL::SSLSocket", "d": "\n"}, {"c": "OpenSSL::SSL::Session::SessionError", "d": "\n"}, {"c": "OpenSSL::X509::Attribute", "d": "\n"}, {"c": "OpenSSL::X509::AttributeError", "d": "\n"}, {"c": "OpenSSL::X509::Certificate", "d": "\nImplementation of an X.509 certificate as specified in RFC 5280. Provides\naccess to a certificate's attributes and allows certificates to be read\nfrom a string, but also supports the creation of new certificates from\nscratch.\nReading a certificate from a file\u00b6 \u2191\nCertificate is capable of handling\nDER-encoded certificates and certificates encoded in OpenSSL's PEM\nformat.\nraw = File.read \"cert.cer\" # DER- or PEM-encoded\ncertificate = OpenSSL::X509::Certificate.new raw\n\nSaving a certificate to a file\u00b6 \u2191\nA certificate may be encoded in DER format\ncert = ...\nFile.open(\"cert.cer\", \"wb\") { |f| f.print cert.to_der }\nor in PEM format\ncert = ...\nFile.open(\"cert.pem\", \"wb\") { |f| f.print cert.to_pem }\nX.509 certificates are associated with a private/public key pair, typically\na RSA, DSA or ECC key (see also OpenSSL::PKey::RSA, OpenSSL::PKey::DSA and OpenSSL::PKey::EC), the public key itself is\nstored within the certificate and can be accessed in form of an OpenSSL::PKey. Certificates are typically used to\nbe able to associate some form of identity with a key pair, for example web\nservers serving pages over HTTPs use certificates to authenticate\nthemselves to the user.\nThe public key infrastructure (PKI) model relies on trusted certificate\nauthorities (\u00e2\u20ac\u0153root CAs\u00e2\u20ac) that issue these certificates, so that end users\nneed to base their trust just on a selected few authorities that themselves\nagain vouch for subordinate CAs issuing their certificates to end users.\nThe OpenSSL::X509 module provides the tools to\nset up an independent PKI, similar to scenarios where the 'openssl'\ncommand line tool is used for issuing certificates in a private PKI.\nCreating a root CA certificate and an end-entity certificate\u00b6 \u2191\nFirst, we need to create a \u00e2\u20ac\u0153self-signed\u00e2\u20ac root certificate. To do so, we\nneed to generate a key first. Please note that the choice of \u00e2\u20ac\u01531\u00e2\u20ac as a\nserial number is considered a security flaw for real certificates. Secure\nchoices are integers in the two-digit byte range and ideally not sequential\nbut secure random numbers, steps omitted here to keep the example concise.\nroot_key = OpenSSL::PKey::RSA.new 2048 # the CA's public/private key\nroot_ca = OpenSSL::X509::Certificate.new\nroot_ca.version = 2 # cf. RFC 5280 - to make it a \"v3\" certificate\nroot_ca.serial = 1\nroot_ca.subject = OpenSSL::X509::Name.parse \"/DC=org/DC=ruby-lang/CN=Ruby CA\"\nroot_ca.issuer = root_ca.subject # root CA's are \"self-signed\"\nroot_ca.public_key = root_key.public_key\nroot_ca.not_before = Time.now\nroot_ca.not_after = root_ca.not_before + 2 * 365 * 24 * 60 * 60 # 2 years validity\nef = OpenSSL::X509::ExtensionFactory.new\nef.subject_certificate = root_ca\nef.issuer_certificate = root_ca\nroot_ca.add_extension(ef.create_extension(\"basicConstraints\",\"CA:TRUE\",true))\nroot_ca.add_extension(ef.create_extension(\"keyUsage\",\"keyCertSign, cRLSign\", true))\nroot_ca.add_extension(ef.create_extension(\"subjectKeyIdentifier\",\"hash\",false))\nroot_ca.add_extension(ef.create_extension(\"authorityKeyIdentifier\",\"keyid:always\",false))\nroot_ca.sign(root_key, OpenSSL::Digest::SHA256.new)\n\nThe next step is to create the end-entity certificate using the root CA\ncertificate.\nkey = OpenSSL::PKey::RSA.new 2048\ncert = OpenSSL::X509::Certificate.new\ncert.version = 2\ncert.serial = 2\ncert.subject = OpenSSL::X509::Name.parse \"/DC=org/DC=ruby-lang/CN=Ruby certificate\"\ncert.issuer = root_ca.subject # root CA is the issuer\ncert.public_key = key.public_key\ncert.not_before = Time.now\ncert.not_after = cert.not_before + 1 * 365 * 24 * 60 * 60 # 1 years validity\nef = OpenSSL::X509::ExtensionFactory.new\nef.subject_certificate = cert\nef.issuer_certificate = root_ca\ncert.add_extension(ef.create_extension(\"keyUsage\",\"digitalSignature\", true))\ncert.add_extension(ef.create_extension(\"subjectKeyIdentifier\",\"hash\",false))\ncert.sign(root_key, OpenSSL::Digest::SHA256.new)\n\n"}, {"c": "OpenSSL::X509::CertificateError", "d": "\n"}, {"c": "OpenSSL::X509::CRL", "d": "\n"}, {"c": "OpenSSL::X509::CRLError", "d": "\n"}, {"c": "OpenSSL::X509::Extension", "d": "\n"}, {"c": "OpenSSL::X509::ExtensionError", "d": "\n"}, {"c": "OpenSSL::X509::ExtensionFactory", "d": "\n"}, {"c": "OpenSSL::X509::Name", "d": "\nAn X.509 name represents a hostname, email address or other entity\nassociated with a public key.\nYou can create a Name by parsing a distinguished\nname String or by supplying the distinguished name as an Array.\nname = OpenSSL::X509::Name.parse 'CN=nobody/DC=example'\n\nname = OpenSSL::X509::Name.new [['CN', 'nobody'], ['DC', 'example']]\n\n"}, {"c": "OpenSSL::X509::NameError", "d": "\n"}, {"c": "OpenSSL::X509::Request", "d": "\n"}, {"c": "OpenSSL::X509::RequestError", "d": "\n"}, {"c": "OpenSSL::X509::Revoked", "d": "\n"}, {"c": "OpenSSL::X509::RevokedError", "d": "\n"}, {"c": "OpenSSL::X509::Store", "d": "\nThe X509 certificate store holds trusted CA\ncertificates used to verify peer certificates.\nThe easiest way to create a useful certificate store is:\ncert_store = OpenSSL::X509::Store.new\ncert_store.set_default_paths\n\nThis will use your system's built-in certificates.\nIf your system does not have a default set of certificates you can obtain a\nset extracted from Mozilla CA certificate store by cURL maintainers here:\ncurl.haxx.se/docs/caextract.html\n(You may wish to use the firefox-db2pem.sh script to extract the\ncertificates from a local install to avoid man-in-the-middle attacks.)\nAfter downloading or generating a cacert.pem from the above link you can\ncreate a certificate store from the pem file like this:\ncert_store = OpenSSL::X509::Store.new\ncert_store.add_file 'cacert.pem'\n\nThe certificate store can be used with an SSLSocket like this:\nssl_context = OpenSSL::SSL::SSLContext.new\nssl_context.verify_mode = OpenSSL::SSL::VERIFY_PEER\nssl_context.cert_store = cert_store\n\ntcp_socket = TCPSocket.open 'example.com', 443\n\nssl_socket = OpenSSL::SSL::SSLSocket.new tcp_socket, ssl_context\n\n"}, {"c": "OpenSSL::X509::StoreContext", "d": "\nA StoreContext is used while validating a\nsingle certificate and holds the status involved.\n"}, {"c": "OpenSSL::X509::StoreError", "d": "\n"}, {"c": "OpenSSL::X509::Name::RFC2253DN", "d": "\n"}, {"c": "OpenURI::HTTPError", "d": "\n"}, {"c": "OpenURI::HTTPRedirect", "d": "\nRaised on redirection, only occurs when redirect option for\nHTTP is false.\n"}, {"c": "OpenURI::Meta", "d": "\nMixin for holding meta-information.\n"}, {"c": "OpenURI::OpenRead", "d": "\nMixin for HTTP and FTP URIs.\n"}, {"c": "OptionParser::AC", "d": "\n"}, {"c": "OptionParser::Acceptables", "d": "\nAcceptable argument classes. Now contains DecimalInteger, OctalInteger and\nDecimalNumeric. See Acceptable argument classes (in source code).\n"}, {"c": "OptionParser::AmbiguousArgument", "d": "\nRaises when the given argument word can't be completed uniquely.\n"}, {"c": "OptionParser::AmbiguousOption", "d": "\nRaises when ambiguously completable string is encountered.\n"}, {"c": "OptionParser::Arguable", "d": "\nExtends command line arguments array (ARGV) to parse itself.\n"}, {"c": "OptionParser::CompletingHash", "d": "\nHash with completion search feature. See OptionParser::Completion.\n"}, {"c": "OptionParser::Completion", "d": "\nKeyword completion module.  This allows partial arguments to be specified\nand resolved against a list of acceptable values.\n"}, {"c": "OptionParser::InvalidArgument", "d": "\nRaises when the given argument does not match required format.\n"}, {"c": "OptionParser::InvalidOption", "d": "\nRaises when switch is undefined.\n"}, {"c": "OptionParser::List", "d": "\nSimple option list providing mapping from short and/or long option string\nto OptionParser::Switch and mapping from\nacceptable argument to matching pattern and converter pair. Also provides\nsummary feature.\n"}, {"c": "OptionParser::MissingArgument", "d": "\nRaises when a switch with mandatory argument has no argument.\n"}, {"c": "OptionParser::NeedlessArgument", "d": "\nRaises when there is an argument for a switch which takes no argument.\n"}, {"c": "OptionParser::OptionMap", "d": "\nMap from option/keyword string to object with completion.\n"}, {"c": "OptionParser::ParseError", "d": "\nBase class of exceptions from OptionParser.\n"}, {"c": "OptionParser::Switch", "d": "\nIndividual switch class.  Not important to the user.\nDefined within Switch are several Switch-derived\nclasses: NoArgument, RequiredArgument, etc.\n"}, {"c": "OptionParser::Switch::NoArgument", "d": "\nSwitch that takes no arguments.\n"}, {"c": "OptionParser::Switch::OptionalArgument", "d": "\nSwitch that can omit argument.\n"}, {"c": "OptionParser::Switch::PlacedArgument", "d": "\nSwitch that takes an argument, which does not\nbegin with '-'.\n"}, {"c": "OptionParser::Switch::RequiredArgument", "d": "\nSwitch that takes an argument.\n"}, {"c": "PP::PPMethods", "d": "\n"}, {"c": "PrettyPrint::SingleLine", "d": "\nPrettyPrint::SingleLine is used by PrettyPrint.singleline_format\nIt is passed to be similar to a PrettyPrint object itself, by responding to:\n\ntext\n\nbreakable\n\nnest\n\ngroup\n\nflush\n\nfirst?\n\nbut instead, the output has no line breaks\n"}, {"c": "Prime::EratosthenesGenerator", "d": "\nAn implementation of PseudoPrimeGenerator.\nUses EratosthenesSieve.\n"}, {"c": "Prime::EratosthenesSieve", "d": "\nInternal use. An implementation of Eratosthenes' sieve\n"}, {"c": "Prime::Generator23", "d": "\nGenerates all integers which are greater than 2 and are not divisible by\neither 2 or 3.\nThis is a pseudo-prime generator, suitable on checking primality of an\ninteger by brute force method.\n"}, {"c": "Prime::PseudoPrimeGenerator", "d": "\nAn abstract class for enumerating pseudo-prime numbers.\nConcrete subclasses should override succ, next, rewind.\n"}, {"c": "Prime::TrialDivision", "d": "\nInternal use. An implementation of prime table by trial division method.\n"}, {"c": "Prime::TrialDivisionGenerator", "d": "\nAn implementation of PseudoPrimeGenerator which uses a prime\ntable generated by trial division.\n"}, {"c": "Process::GID", "d": "\nThe Process::GID module contains a collection of module\nfunctions which can be used to portably get, set, and switch the current\nprocess's real, effective, and saved group IDs.\n"}, {"c": "Process::Status", "d": "\nProcess::Status encapsulates the information on the status of\na running or terminated system process. The built-in variable\n$? is either nil or a\nProcess::Status object.\nfork { exit 99 }   #=> 26557\nProcess.wait       #=> 26557\n$?.class           #=> Process::Status\n$?.to_i            #=> 25344\n$? >> 8            #=> 99\n$?.stopped?        #=> false\n$?.exited?         #=> true\n$?.exitstatus      #=> 99\n\nPosix systems record information on processes using a 16-bit integer.  The\nlower bits record the process status (stopped, exited, signaled) and the\nupper bits possibly contain additional information (for example the\nprogram's return code in the case of exited processes). Pre Ruby 1.8,\nthese bits were exposed directly to the Ruby program. Ruby now encapsulates\nthese in a Process::Status object. To maximize compatibility,\nhowever, these objects retain a bit-oriented interface. In the descriptions\nthat follow, when we talk about the integer value of stat,\nwe're referring to this 16 bit value.\n"}, {"c": "Process::Sys", "d": "\nThe Process::Sys module contains UID\nand GID functions which provide direct bindings to\nthe system calls of the same names instead of the more-portable versions of\nthe same functionality found in the Process,\nProcess::UID, and Process::GID modules.\n"}, {"c": "Process::UID", "d": "\nThe Process::UID module contains a collection of module\nfunctions which can be used to portably get, set, and switch the current\nprocess's real, effective, and saved user IDs.\n"}, {"c": "Process::Waiter", "d": "\n"}, {"c": "PStore::Error", "d": "\nThe error type thrown by all PStore methods.\n"}, {"c": "Psych::BadAlias", "d": "\n"}, {"c": "Psych::ClassLoader", "d": "\n"}, {"c": "Psych::Coder", "d": "\nIf an object defines encode_with, then an instance of Psych::Coder will be passed to the method when the\nobject is being serialized.  The Coder\nautomatically assumes a Psych::Nodes::Mapping is being emitted. \nOther objects like Sequence and Scalar may be emitted if seq=\nor scalar= are called, respectively.\n"}, {"c": "Psych::DisallowedClass", "d": "\n"}, {"c": "Psych::Emitter", "d": "\n"}, {"c": "Psych::Exception", "d": "\n"}, {"c": "Psych::Handler", "d": "\nPsych::Handler is an abstract base class that\ndefines the events used when dealing with Psych::Parser.  Clients who want to use Psych::Parser should implement a class that inherits\nfrom Psych::Handler and define events that they\ncan handle.\nPsych::Handler defines all events that Psych::Parser can possibly send to event handlers.\nSee Psych::Parser for more details\n"}, {"c": "Psych::Handlers", "d": "\n"}, {"c": "Psych::JSON", "d": "\n"}, {"c": "Psych::Nodes", "d": "\nOverview\u00b6 \u2191\nWhen using Psych.load to\ndeserialize a YAML document, the document is translated to an intermediary\nAST.  That intermediary AST is then translated in to a Ruby object graph.\nIn the opposite direction, when using Psych.dump, the Ruby object graph is\ntranslated to an intermediary AST which is then converted to a YAML\ndocument.\nPsych::Nodes contains all of the classes that make\nup the nodes of a YAML AST.  You can manually build an AST and use one of\nthe visitors (see Psych::Visitors) to convert\nthat AST to either a YAML document or to a Ruby object graph.\nHere is an example of building an AST that represents a list with one\nscalar:\n# Create our nodes\nstream = Psych::Nodes::Stream.new\ndoc    = Psych::Nodes::Document.new\nseq    = Psych::Nodes::Sequence.new\nscalar = Psych::Nodes::Scalar.new('foo')\n\n# Build up our tree\nstream.children << doc\ndoc.children    << seq\nseq.children    << scalar\n\nThe stream is the root of the tree.  We can then convert the tree to YAML:\nstream.to_yaml => \"---\\n- foo\\n\"\nOr convert it to Ruby:\nstream.to_ruby => [[\"foo\"]]\nYAML AST Requirements\u00b6 \u2191\nA valid YAML AST must have one Psych::Nodes::Stream at the root.  A Psych::Nodes::Stream node must have 1 or more\nPsych::Nodes::Document nodes as children.\nPsych::Nodes::Document nodes must have\none and only one child.  That child may be one of:\n\nPsych::Nodes::Sequence\n\nPsych::Nodes::Mapping\n\nPsych::Nodes::Scalar\n\nPsych::Nodes::Sequence and Psych::Nodes::Mapping nodes may have many\nchildren, but Psych::Nodes::Mapping nodes\nshould have an even number of children.\nAll of these are valid children for Psych::Nodes::Sequence and Psych::Nodes::Mapping nodes:\n\nPsych::Nodes::Sequence\n\nPsych::Nodes::Mapping\n\nPsych::Nodes::Scalar\n\nPsych::Nodes::Alias\n\nPsych::Nodes::Scalar and Psych::Nodes::Alias are both terminal nodes and\nshould not have any children.\n"}, {"c": "Psych::Omap", "d": "\n"}, {"c": "Psych::Parser", "d": "\nYAML event parser class.  This class parses a YAML document and calls\nevents on the handler that is passed to the constructor.  The events can be\nused for things such as constructing a YAML AST or deserializing YAML\ndocuments.  It can even be fed back to Psych::Emitter to emit the same document that was\nparsed.\nSee Psych::Handler for documentation on the\nevents that Psych::Parser emits.\nHere is an example that prints out ever scalar found in a YAML document:\n# Handler for detecting scalar values\nclass ScalarHandler < Psych::Handler\n  def scalar value, anchor, tag, plain, quoted, style\n    puts value\n  end\nend\n\nparser = Psych::Parser.new(ScalarHandler.new)\nparser.parse(yaml_document)\n\nHere is an example that feeds the parser back in to Psych::Emitter.  The YAML document is read from\nSTDIN and written back out to STDERR:\nparser = Psych::Parser.new(Psych::Emitter.new($stderr))\nparser.parse($stdin)\n\nPsych uses Psych::Parser in combination with Psych::TreeBuilder to construct an AST of the\nparsed YAML document.\n"}, {"c": "Psych::ScalarScanner", "d": "\nScan scalars for built in types\n"}, {"c": "Psych::Set", "d": "\n"}, {"c": "Psych::Stream", "d": "\nPsych::Stream is a streaming YAML emitter.  It\nwill not buffer your YAML, but send it straight to an IO.\nHere is an example use:\nstream = Psych::Stream.new($stdout)\nstream.start\nstream.push({:foo => 'bar'})\nstream.finish\n\nYAML will be immediately emitted to $stdout with no buffering.\nPsych::Streaming#start will\ntake a block and ensure that Psych::Visitors::YAMLTree#finish\nis called, so you can do this form:\nstream = Psych::Stream.new($stdout)\nstream.start do |em|\n  em.push(:foo => 'bar')\nend\n\n"}, {"c": "Psych::Streaming", "d": "\n"}, {"c": "Psych::SyntaxError", "d": "\n"}, {"c": "Psych::TreeBuilder", "d": "\nThis class works in conjunction with Psych::Parser to build an in-memory parse tree that\nrepresents a YAML document.\nExample\u00b6 \u2191\nparser = Psych::Parser.new Psych::TreeBuilder.new\nparser.parse('--- foo')\ntree = parser.handler.root\n\nSee Psych::Handler for documentation on the\nevent methods used in this class.\n"}, {"c": "Psych::Visitors", "d": "\n"}, {"c": "Psych::ClassLoader::Restricted", "d": "\n"}, {"c": "Psych::Handler::DumperOptions", "d": "\nConfiguration options for dumping YAML.\n"}, {"c": "Psych::Handlers::Recorder", "d": "\nThis handler will capture an event and record the event.  Recorder events are available vial #events.\nFor example:\nrecorder = Psych::Handlers::Recorder.new\nparser = Psych::Parser.new recorder\nparser.parse '--- foo'\n\nrecorder.events # => [list of events]\n\n# Replay the events\n\nemitter = Psych::Emitter.new $stdout\nrecorder.events.each do |m, args|\n  emitter.send m, *args\nend\n\n"}, {"c": "Psych::JSON::Stream", "d": "\n"}, {"c": "Psych::JSON::TreeBuilder", "d": "\nPsych::JSON::TreeBuilder is an event based\nAST builder.  Events are sent to an instance of Psych::JSON::TreeBuilder and a JSON AST is constructed.\n"}, {"c": "Psych::Nodes::Alias", "d": "\nThis class represents a YAML\nAlias. It points to an anchor.\nA Psych::Nodes::Alias is a terminal node and may\nhave no children.\n"}, {"c": "Psych::Nodes::Document", "d": "\nThis represents a YAML Document.  This node\nmust be a child of Psych::Nodes::Stream.  A Psych::Nodes::Document must have one child, and\nthat child may be one of the following:\n\nPsych::Nodes::Sequence\n\nPsych::Nodes::Mapping\n\nPsych::Nodes::Scalar\n\n"}, {"c": "Psych::Nodes::Mapping", "d": "\nThis class represents a YAML\nMapping.\nA Psych::Nodes::Mapping node may have 0 or more\nchildren, but must have an even number of children.  Here are the valid\nchildren a Psych::Nodes::Mapping node may have:\n\nPsych::Nodes::Sequence\n\nPsych::Nodes::Mapping\n\nPsych::Nodes::Scalar\n\nPsych::Nodes::Alias\n\n"}, {"c": "Psych::Nodes::Node", "d": "\nThe base class for any Node in a YAML parse tree. \nThis class should never be instantiated.\n"}, {"c": "Psych::Nodes::Scalar", "d": "\nThis class represents a YAML\nScalar.\nThis node type is a terminal node and should not have any children.\n"}, {"c": "Psych::Nodes::Sequence", "d": "\nThis class represents a YAML sequence.\nA YAML sequence is basically a list, and looks like this:\n%YAML 1.1\n---\n- I am\n- a Sequence\nA YAML sequence may have an anchor like this:\n%YAML 1.1\n---\n&A [\n  \"This sequence\",\n  \"has an anchor\"\n]\nA YAML sequence may also have a tag like this:\n%YAML 1.1\n---\n!!seq [\n  \"This sequence\",\n  \"has a tag\"\n]\nThis class represents a sequence in a YAML document.  A Psych::Nodes::Sequence node may have 0 or more\nchildren.  Valid children for this node are:\n\nPsych::Nodes::Sequence\n\nPsych::Nodes::Mapping\n\nPsych::Nodes::Scalar\n\nPsych::Nodes::Alias\n\n"}, {"c": "Psych::Nodes::Stream", "d": "\nRepresents a YAML stream.  This is the root node for any YAML parse tree. \nThis node must have one or more child nodes.  The only valid child node for\na Psych::Nodes::Stream node is Psych::Nodes::Document.\n"}, {"c": "Psych::Parser::Mark", "d": "\n"}, {"c": "Psych::Streaming::ClassMethods", "d": "\n"}, {"c": "Psych::Visitors::DepthFirst", "d": "\n"}, {"c": "Psych::Visitors::Emitter", "d": "\n"}, {"c": "Psych::Visitors::JSONTree", "d": "\n"}, {"c": "Psych::Visitors::NoAliasRuby", "d": "\n"}, {"c": "Psych::Visitors::ToRuby", "d": "\nThis class walks a YAML AST, converting each node to Ruby\n"}, {"c": "Psych::Visitors::Visitor", "d": "\n"}, {"c": "Psych::Visitors::YAMLTree", "d": "\nYAMLTree builds a YAML ast given a Ruby object.\nFor example:\nbuilder = Psych::Visitors::YAMLTree.new\nbuilder << { :foo => 'bar' }\nbuilder.tree # => #<Psych::Nodes::Stream .. }\n\n"}, {"c": "PTY::ChildExited", "d": "\nThrown when PTY.check is called\nfor a pid that represents a process that has exited.\n"}, {"c": "Racc::CparseParams", "d": "\n"}, {"c": "Racc::ParseError", "d": "\n"}, {"c": "Racc::Parser", "d": "\n"}, {"c": "Random::Formatter", "d": "\n"}, {"c": "Rational::compatible", "d": "\n"}, {"c": "RDoc::Alias", "d": "\nRepresent an alias, which is an old_name/new_name pair associated with a\nparticular context\n"}, {"c": "RDoc::AnonClass", "d": "\nAn anonymous class like:\nc = Class.new do end\n\nAnonClass is currently not used.\n"}, {"c": "RDoc::AnyMethod", "d": "\nAnyMethod is the base class for objects\nrepresenting methods\n"}, {"c": "RDoc::Attr", "d": "\nAn attribute created by #attr, #attr_reader, #attr_writer or #attr_accessor\n"}, {"c": "RDoc::ClassModule", "d": "\nClassModule is the base class for objects\nrepresenting either a class or a module.\n"}, {"c": "RDoc::CodeObject", "d": "\nBase class for the RDoc code tree.\nWe contain the common stuff for contexts (which are containers) and other\nelements (methods, attributes and so on)\nHere's the tree of the CodeObject\nsubclasses:\n\nRDoc::Context\n\nRDoc::TopLevel\n\nRDoc::ClassModule\n\nRDoc::AnonClass (never used so far)\n\nRDoc::NormalClass\n\nRDoc::NormalModule\n\nRDoc::SingleClass\n\n\n\nRDoc::MethodAttr\n\nRDoc::Attr\n\nRDoc::AnyMethod\n\nRDoc::GhostMethod\n\nRDoc::MetaMethod\n\n\n\nRDoc::Alias\n\nRDoc::Constant\n\nRDoc::Mixin\n\nRDoc::Require\n\nRDoc::Include\n\n\n"}, {"c": "RDoc::Comment", "d": "\nA comment holds the text comment for a RDoc::CodeObject and provides a unified way of\ncleaning it up and parsing it into an RDoc::Markup::Document.\nEach comment may have a different markup format set by format=.  By default\n'rdoc' is used.  The :markup: directive tells RDoc which format to use.\nSee Other directives at\nRDoc::Markup for instructions on adding an alternate format.\n"}, {"c": "RDoc::Constant", "d": "\nA constant\n"}, {"c": "RDoc::Context", "d": "\nA Context is something that can hold modules,\nclasses, methods, attributes, aliases, requires, and includes. Classes,\nmodules, and files are all Contexts.\n"}, {"c": "RDoc::CrossReference", "d": "\nRDoc::CrossReference is a reusable way to\ncreate cross references for names.\n"}, {"c": "RDoc::Encoding", "d": "\nThis class is a wrapper around File IO and Encoding that\nhelps RDoc load files and convert them to the\ncorrect encoding.\n"}, {"c": "RDoc::ERBIO", "d": "\nA subclass of ERB that writes directly to an IO.  Credit to Aaron Patterson and Masatoshi SEKI.\nTo use:\nerbio = RDoc::ERBIO.new '<%= \"hello world\" %>', nil, nil\n\nopen 'hello.txt', 'w' do |io|\n  erbio.result binding\nend\n\nNote that binding must enclose the io you wish to output on.\n"}, {"c": "RDoc::ERBPartial", "d": "\nAllows an ERB template to be rendered in the\ncontext (binding) of an existing ERB template\nevaluation.\n"}, {"c": "RDoc::Error", "d": "\nException thrown by any rdoc error.\n"}, {"c": "RDoc::Extend", "d": "\nA Module extension to a class with #extend\nRDoc::Extend.new 'Enumerable', 'comment ...'\n\n"}, {"c": "RDoc::Generator", "d": "\nRDoc uses generators to turn parsed source code in\nthe form of an RDoc::CodeObject tree into\nsome form of output.  RDoc comes with the HTML\ngenerator RDoc::Generator::Darkfish and an ri data generator\nRDoc::Generator::RI.\nRegistering a Generator\u00b6 \u2191\nGenerators are registered by calling RDoc::RDoc.add_generator with\nthe class of the generator:\nclass My::Awesome::Generator\n  RDoc::RDoc.add_generator self\nend\n\nAdding Options to rdoc\u00b6 \u2191\nBefore option processing in rdoc, RDoc::Options will call ::setup_options on the\ngenerator class with an RDoc::Options instance. \nThe generator can use RDoc::Options#option_parser\nto add command-line options to the rdoc tool.  See Custom Options at\nRDoc::Options for an example and see OptionParser for details on how to add\noptions.\nYou can extend the RDoc::Options instance with\nadditional accessors for your generator.\nGenerator Instantiation\u00b6 \u2191\nAfter parsing, RDoc::RDoc will instantiate a\ngenerator by calling initialize with an RDoc::Store instance and an RDoc::Options instance.\nThe RDoc::Store instance holds documentation for\nparsed source code.  In RDoc 3 and earlier the RDoc::TopLevel class held this data.  When\nupgrading a generator from RDoc 3 and earlier you\nshould only need to replace RDoc::TopLevel with\nthe store instance.\nRDoc will then call generate on the generator\ninstance.  You can use the various methods on RDoc::Store and in the RDoc::CodeObject tree to create your desired\noutput format.\n"}, {"c": "RDoc::GhostMethod", "d": "\nGhostMethod represents a method referenced\nonly by a comment\n"}, {"c": "RDoc::I18n", "d": "\nThis module provides i18n related features.\n"}, {"c": "RDoc::Include", "d": "\nA Module included in a class with #include\nRDoc::Include.new 'Enumerable', 'comment ...'\n\n"}, {"c": "RDoc::Markdown", "d": "\nRDoc::Markdown as described by the markdown\nsyntax.\nTo choose Markdown as your only default format\nsee Saved Options at\nRDoc::Options for instructions on setting up a\n.doc_options file to store your project default.\nUsage\u00b6 \u2191\nHere is a brief example of using this parse to read a markdown file by\nhand.\ndata = File.read(\"README.md\")\nformatter = RDoc::Markup::ToHtml.new(RDoc::Options.new, nil)\nhtml = RDoc::Markdown.parse(data).accept(formatter)\n\n# do something with html\n\nExtensions\u00b6 \u2191\nThe following markdown extensions are supported by the parser, but not all\nare used in RDoc output by default.\nRDoc\u00b6 \u2191\nThe RDoc Markdown\nparser has the following built-in behaviors that cannot be disabled.\nUnderscores embedded in words are never interpreted as emphasis. (While the\nmarkdown\ndingus emphasizes in-word underscores, neither the Markdown syntax nor MarkdownTest mention this\nbehavior.)\nFor HTML output, RDoc always auto-links bare\nURLs.\nBreak on Newline\u00b6 \u2191\nThe #break_on_newline\nextension converts all newlines into hard line breaks as in Github Flavored\nMarkdown. This extension is disabled by default.\nCSS\u00b6 \u2191\nThe css extension enables CSS\nblocks to be included in the output, but they are not used for any built-in\nRDoc output format. This extension is disabled\nby default.\nExample:\n<style type=\"text/css\">\nh1 { font-size: 3em }\n</style>\nDefinition Lists\u00b6 \u2191\nThe #definition_lists\nextension allows definition lists using the PHP\nMarkdown Extra syntax, but only one label and definition are supported\nat this time. This extension is enabled by default.\nExample:\ncat\n:   A small furry mammal\nthat seems to sleep a lot\n\nant\n:   A little insect that is known\nto enjoy picnics\nProduces:\ncat\n\nA small furry mammal that seems to sleep a lot\nant\n\nA little insect that is known to enjoy picnics\n\nStrike\u00b6 \u2191\nExample:\nThis is ~~striked~~.\nProduces:\nThis is ~striked~.\nGithub\u00b6 \u2191\nThe github extension enables a\npartial set of Github Flavored\nMarkdown. This extension is enabled by default.\nSupported github extensions include:\nFenced code blocks\u00b6 \u2191\nUse ``` around a block of code instead of indenting it four\nspaces.\nSyntax highlighting\u00b6 \u2191\nUse ``` ruby as the start of a code fence to add syntax\nhighlighting. (Currently only ruby syntax is supported).\nHTML\u00b6 \u2191\nEnables raw HTML to be included in the output. This extension is enabled by\ndefault.\nExample:\n<table>\n...\n</table>\nNotes\u00b6 \u2191\nThe notes extension enables\nfootnote support. This extension is enabled by default.\nExample:\nHere is some text[^1] including an inline footnote ^[for short footnotes]\n\n...\n\n[^1]: With the footnote text down at the bottom\nProduces:\nHere is some text1\nincluding an inline footnote 2\nLimitations\u00b6 \u2191\n\nLink titles are not used\n\nFootnotes are collapsed into a single paragraph\n\nAuthor\u00b6 \u2191\nThis markdown parser is a port to kpeg from peg-markdown by John\nMacFarlane.\nIt is used under the MIT license:\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \u00e2\u20ac\u0153Software\u00e2\u20ac),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \u00e2\u20ac\u0153AS IS\u00e2\u20ac, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\nThe port to kpeg was performed by Eric Hodel and Evan Phoenix\n\n1 With the footnote\ntext down at the bottom\n2 for short footnotes\n"}, {"c": "RDoc::Markup", "d": "\nRDoc::Markup parses plain text documents and\nattempts to decompose them into their constituent parts.  Some of these\nparts are high-level: paragraphs, chunks of verbatim text, list entries and\nthe like.  Other parts happen at the character level: a piece of bold text,\na word in code font.  This markup is similar in spirit to that used on\nWikiWiki webs, where folks create web pages using a simple set of\nformatting rules.\nRDoc::Markup and other markup formats do no\noutput formatting, this is handled by the RDoc::Markup::Formatter\nsubclasses.\nSupported Formats\u00b6 \u2191\nBesides the RDoc::Markup format, the following\nformats are built in to RDoc:\nmarkdown\n\nThe markdown format as described by daringfireball.net/projects/markdown/.\nSee RDoc::Markdown for details on the parser\nand supported extensions.\nrd\n\nThe rdtool format.  See RDoc::RD for details on the\nparser and format.\ntomdoc\n\nThe TomDoc format as described by tomdoc.org/.  See RDoc::TomDoc for details on the parser and supported\nextensions.\n\nYou can choose a markup format using the following methods:\nper project\n\nIf you build your documentation with rake use RDoc::Task#markup.\nIf you build your documentation by hand run:\nrdoc --markup your_favorite_format --write-options\nand commit .rdoc_options and ship it with your packaged gem.\nper file\n\nAt the top of the file use the :markup: directive to set the\ndefault format for the rest of the file.\nper comment\n\nUse the :markup: directive at the top of a comment you want to\nwrite in a different format.\n\nRDoc::Markup\u00b6 \u2191\nRDoc::Markup is extensible at runtime: you can\nadd new markup elements to be recognized in the documents that RDoc::Markup parses.\nRDoc::Markup is intended to be the basis for a\nfamily of tools which share the common requirement that simple, plain-text\nshould be rendered in a variety of different output formats and media.  It\nis envisaged that RDoc::Markup could be the basis\nfor formatting RDoc style comment blocks, Wiki\nentries, and online FAQs.\nSynopsis\u00b6 \u2191\nThis code converts input_string to HTML.  The conversion takes\nplace in the convert method, so you can use the same RDoc::Markup converter to convert multiple input\nstrings.\nrequire 'rdoc'\n\nh = RDoc::Markup::ToHtml.new(RDoc::Options.new)\n\nputs h.convert(input_string)\n\nYou can extend the RDoc::Markup parser to\nrecognize new markup sequences, and to add special processing for text that\nmatches a regular expression.  Here we make WikiWords significant to the\nparser, and also make the sequences {word} and <no>text\u00e2\u20ac\u00a6</no>\nsignify strike-through text.  We then subclass the HTML output class to\ndeal with these:\nrequire 'rdoc'\n\nclass WikiHtml < RDoc::Markup::ToHtml\n  def handle_special_WIKIWORD(special)\n    \"<font color=red>\" + special.text + \"</font>\"\n  end\nend\n\nmarkup = RDoc::Markup.new\nmarkup.add_word_pair(\"{\", \"}\", :STRIKE)\nmarkup.add_html(\"no\", :STRIKE)\n\nmarkup.add_special(/\\b([A-Z][a-z]+[A-Z]\\w+)/, :WIKIWORD)\n\nwh = WikiHtml.new RDoc::Options.new, markup\nwh.add_tag(:STRIKE, \"<strike>\", \"</strike>\")\n\nputs \"<body>#{wh.convert ARGF.read}</body>\"\n\nEncoding\u00b6 \u2191\nWhere Encoding support is available, RDoc will automatically convert all documents to\nthe same output encoding.  The output encoding can be set via RDoc::Options#encoding and\ndefaults to Encoding.default_external.\nRDoc Markup Reference\u00b6 \u2191\nBlock Markup\u00b6 \u2191\nParagraphs and Verbatim\u00b6 \u2191\nThe markup engine looks for a document's natural left margin.  This is\nused as the initial margin for the document.\nConsecutive lines starting at this margin are considered to be a paragraph.\nEmpty lines separate paragraphs.\nAny line that starts to the right of the current margin is treated as\nverbatim text.  This is useful for code listings:\n3.times { puts \"Ruby\" }\n\nIn verbatim text, two or more blank lines are collapsed into one, and\ntrailing blank lines are removed:\nThis is the first line\n\nThis is the second non-blank line,\nafter 2 blank lines in the source markup.\nThere were two trailing blank lines right above this paragraph, that have\nbeen removed. In addition, the verbatim text has been shifted left, so the\namount of indentation of verbatim text is unimportant.\nFor HTML output RDoc makes a small effort to\ndetermine if a verbatim section contains Ruby source code.  If so, the\nverbatim block will be marked up as HTML.  Triggers include \u00e2\u20ac\u0153def\u00e2\u20ac, \u00e2\u20ac\u0153class\u00e2\u20ac,\n\u00e2\u20ac\u0153module\u00e2\u20ac, \u00e2\u20ac\u0153require\u00e2\u20ac, the \u00e2\u20ac\u0153hash rocket\u00e2\u20ac# (=>) or a block call with a\nparameter.\nHeaders\u00b6 \u2191\nA line starting with an equal sign (=) is treated as a heading.  Level one\nheadings have one equals sign, level two headings have two, and so on until\nlevel six, which is the maximum (seven hyphens or more result in a level\nsix heading).\nFor example, the above header was obtained with:\n=== Headers\nIn HTML output headers have an id matching their name.  The above\nexample's HTML is:\n<h3 id=\"label-Headers\">Headers</h3>\nIf a heading is inside a method body the id will be prefixed with the\nmethod's id.  If the above header where in the documentation for a\nmethod such as:\n##\n# This method does fun things\n#\n# = Example\n#\n#   Example of fun things goes here ...\n\ndef do_fun_things\nend\n\nThe header's id would be:\n<h1 id=\"method-i-do_fun_things-label-Example\">Example</h1>\nThe label can be linked-to using SomeClass@Headers.  See Links for further details.\nRules\u00b6 \u2191\nA line starting with three or more hyphens (at the current indent)\ngenerates a horizontal rule.\n---\nproduces:\n\nSimple Lists\u00b6 \u2191\nIf a paragraph starts with a \u00e2\u20ac\u0153*\u00e2\u20ac, \u00e2\u20ac\u0153-\u00e2\u20ac, \u00e2\u20ac\u0153<digit>.\u00e2\u20ac or\n\u00e2\u20ac\u0153<letter>.\u00e2\u20ac, then it is taken to be the start of a list.  The margin\nis increased to be the first non-space following the list start flag. \nSubsequent lines should be indented to this new margin until the list ends.\nFor example:\n* this is a list with three paragraphs in\n  the first item.  This is the first paragraph.\n\n  And this is the second paragraph.\n\n  1. This is an indented, numbered list.\n  2. This is the second item in that list\n\n  This is the third conventional paragraph in the\n  first list item.\n\n* This is the second item in the original list\nproduces:\n\nthis is a list with three paragraphs in the first item.  This is the first\nparagraph.\nAnd this is the second paragraph.\n\nThis is an indented, numbered list.\n\nThis is the second item in that list\n\nThis is the third conventional paragraph in the first list item.\n\nThis is the second item in the original list\n\nLabeled Lists\u00b6 \u2191\nYou can also construct labeled lists, sometimes called description or\ndefinition lists.  Do this by putting the label in square brackets and\nindenting the list body:\n[cat]  a small furry mammal\n       that seems to sleep a lot\n\n[ant]  a little insect that is known\n       to enjoy picnics\nproduces:\ncat\n\na small furry mammal that seems to sleep a lot\nant\n\na little insect that is known to enjoy picnics\n\nIf you want the list bodies to line up to the left of the labels, use two\ncolons:\ncat::  a small furry mammal\n       that seems to sleep a lot\n\nant::  a little insect that is known\n       to enjoy picnics\n\nproduces:\ncat\n\na small furry mammal that seems to sleep a lot\nant\n\na little insect that is known to enjoy picnics\n\nNotice that blank lines right after the label are ignored in labeled lists:\n[one]\n\n    definition 1\n\n[two]\n\n    definition 2\n\nproduces the same output as\n[one]  definition 1\n[two]  definition 2\nLists and Verbatim\u00b6 \u2191\nIf you want to introduce a verbatim section right after a list, it has to\nbe less indented than the list item bodies, but more indented than the list\nlabel, letter, digit or bullet. For instance:\n*   point 1\n\n*   point 2, first paragraph\n\n    point 2, second paragraph\n      verbatim text inside point 2\n    point 2, third paragraph\n  verbatim text outside of the list (the list is therefore closed)\nregular paragraph after the list\nproduces:\n\npoint 1\n\npoint 2, first paragraph\npoint 2, second paragraph\nverbatim text inside point 2\n\npoint 2, third paragraph\n\nverbatim text outside of the list (the list is therefore closed)\n\nregular paragraph after the list\nText Markup\u00b6 \u2191\nBold, Italic, Typewriter Text\u00b6 \u2191\nYou can use markup within text (except verbatim) to change the appearance\nof parts of that text.  Out of the box, RDoc::Markup supports word-based and general markup.\nWord-based markup uses flag characters around individual words:\n*word*\n\ndisplays word in a bold font\n_word_\n\ndisplays word in an emphasized font\n+word+\n\ndisplays word in a code font\n\nGeneral markup affects text between a start delimiter and an end delimiter.\nNot surprisingly, these delimiters look like HTML markup.\n<b>text</b>\n\ndisplays text in a bold font\n<em>text</em>\n\ndisplays text in an emphasized font (alternate tag:\n<i>)\n<tt>text</tt>\n\ndisplays text in a code font (alternate tag:\n<code>)\n\nUnlike conventional Wiki markup, general markup can cross line boundaries. \nYou can turn off the interpretation of markup by preceding the first\ncharacter with a backslash (see Escaping Text Markup, below).\nLinks\u00b6 \u2191\nLinks to starting with http:, https:,\nmailto:, ftp: or www. are\nrecognized.  An HTTP url that references an external image is converted\ninto an inline image element.\nClasses and methods will be automatically linked to their definition.  For\nexample, RDoc::Markup will link to this documentation.  By\ndefault methods will only be automatically linked if they contain an\n_ (all methods can be automatically linked through the\n--hyperlink-all command line option).\nSingle-word methods can be linked by using the # character for\ninstance methods or :: for class methods.  For example,\n#convert links to convert.  A class or method may be\ncombined like RDoc::Markup#convert.\nA heading inside the documentation can be linked by following the class or\nmethod by an @ then the heading name.\nRDoc::Markup@Links will link to this section like this: Links at RDoc::Markup.  Spaces in\nheadings with multiple words must be escaped with + like\nRDoc::Markup@Escaping+Text+Markup. Punctuation and other\nspecial characters must be escaped like CGI::Util#escape.\nThe @ can also be used to link to sections.  If a section and\na heading share the same name the section is preferred for the link.\nLinks can also be of the form label[url], in which case\nlabel is used in the displayed text, and url is\nused as the target.  If label contains multiple words, put it\nin braces: {multi word label}[url]. The url may\nbe an http:-type link or a cross-reference to a class, module\nor method with a label.\nLinks with the rdoc-image: scheme will create an image tag for\nHTML output.  Only fully-qualified URLs are supported.\nLinks with the rdoc-ref: scheme will link to the referenced\nclass, module, method, file, etc.  If the referenced item is does not exist\nno link will be generated and rdoc-ref: will be removed from\nthe resulting text.\nLinks starting with rdoc-label:label_name will link to the\nlabel_name.  You can create a label for the current link (for\nbidirectional links) by supplying a name for the current link like\nrdoc-label:label-other:label-mine.\nLinks starting with link: refer to local files whose path is\nrelative to the --op directory.  Use rdoc-ref:\ninstead of link: to link to files generated by RDoc as the link target may be different across RDoc generators.\nExample links:\nhttps://github.com/ruby/rdoc\nmailto:user@example.com\n{RDoc Documentation}[http://rdoc.rubyforge.org]\n{RDoc Markup}[rdoc-ref:RDoc::Markup]\nEscaping Text Markup\u00b6 \u2191\nText markup can be escaped with a backslash, as in <tt>, which was\nobtained with \\<tt>.  Except in verbatim sections and\nbetween <tt> tags, to produce a backslash you have to double it\nunless it is followed by a space, tab or newline. Otherwise, the HTML\nformatter will discard it, as it is used to escape potential links:\n* The \\ must be doubled if not followed by white space: \\\\.\n* But not in \\<tt> tags: in a Regexp, <tt>\\S</tt> matches non-space.\n* This is a link to {ruby-lang}[www.ruby-lang.org].\n* This is not a link, however: \\{ruby-lang.org}[www.ruby-lang.org].\n* This will not be linked to \\RDoc::RDoc#document\ngenerates:\n\nThe \\ must be doubled if not followed by white space: \\.\n\nBut not in <tt> tags: in a Regexp,\n\\S matches non-space.\n\nThis is a link to ruby-lang\n\nThis is not a link, however: {ruby-lang.org}[www.ruby-lang.org]\n\nThis will not be linked to RDoc::RDoc#document\n\nInside <tt> tags, more precisely, leading backslashes are removed\nonly if followed by a markup character (<*_+), a backslash,\nor a known link reference (a known class or method). So in the example\nabove, the backslash of \\S would be removed if there was a\nclass or module named S in the current context.\nThis behavior is inherited from RDoc version 1,\nand has been kept for compatibility with existing RDoc documentation.\nConversion of characters\u00b6 \u2191\nHTML will convert two/three dashes to an em-dash. Other common characters\nare converted as well:\nem-dash::  -- or ---\nellipsis:: ...\n\nsingle quotes:: 'text' or `text'\ndouble quotes:: \"text\" or ``text''\n\ncopyright:: (c)\nregistered trademark:: (r)\nproduces:\nem-dash\n\n\u00e2\u20ac\u201c or \u00e2\u20ac\u201d\nellipsis\n\n\u00e2\u20ac\u00a6\nsingle quotes\n\n'text' or `text'\ndouble quotes\n\n\u00e2\u20ac\u0153text\u00e2\u20ac or \u00e2\u20ac\u0153text''\ncopyright\n\n\u00c2\u00a9\nregistered trademark\n\n\u00c2\u00ae\n\nDocumenting Source Code\u00b6 \u2191\nComment blocks can be written fairly naturally, either using #\non successive lines of the comment, or by including the comment in a\n=begin/=end block.  If you use the latter form,\nthe =begin line must be flagged with an\nrdoc tag:\n=begin rdoc\nDocumentation to be processed by RDoc.\n\n...\n=end\n\nRDoc stops processing comments if it finds a\ncomment line starting with -- right after the #\ncharacter (otherwise, it will be treated as a rule if it has three dashes\nor more). This can be used to separate external from internal comments, or\nto stop a comment being associated with a method, class, or module.\nCommenting can be turned back on with a line that starts with\n++.\n##\n# Extract the age and calculate the date-of-birth.\n#--\n# FIXME: fails if the birthday falls on February 29th\n#++\n# The DOB is returned as a Time object.\n\ndef get_dob(person)\n  # ...\nend\n\nNames of classes, files, and any method names containing an underscore or\npreceded by a hash character are automatically linked from comment text to\ntheir description. This linking works inside the current class or module,\nand with ancestor methods (in included modules or in the superclass).\nMethod parameter lists are extracted and\ndisplayed with the method description.  If a method calls\nyield, then the parameters passed to yield will also be\ndisplayed:\ndef fred\n  ...\n  yield line, address\nThis will get documented as:\nfred() { |line, address| ... }\nYou can override this using a comment containing ':yields: \u00e2\u20ac\u00a6'\nimmediately after the method definition\ndef fred # :yields: index, position\n  # ...\n\n  yield line, address\nwhich will get documented as\nfred() { |index, position| ... }\n:yields: is an example of a documentation directive.  These\nappear immediately after the start of the document element they are\nmodifying.\nRDoc automatically cross-references words with\nunderscores or camel-case. To suppress cross-references, prefix the word\nwith a \\ character.  To include special characters like \u00e2\u20ac\u0153\\n\u00e2\u20ac,\nyou'll need to use two \\ characters in normal text, but only one in\n<tt> text:\n\"\\\\n\" or \"<tt>\\n</tt>\"\n\nproduces:\n\u00e2\u20ac\u0153\\n\u00e2\u20ac or \u00e2\u20ac\u0153\\n\u00e2\u20ac\nDirectives\u00b6 \u2191\nDirectives are keywords surrounded by \u00e2\u20ac\u0153:\u00e2\u20ac characters.\nControlling what is documented\u00b6 \u2191\n:nodoc: / :nodoc: all\n\nThis directive prevents documentation for the element from being generated.\nFor classes and modules, methods, aliases, constants, and attributes\ndirectly within the affected class or module also will be omitted.  By\ndefault, though, modules and classes within that class or module\nwill be documented.  This is turned off by adding the\nall modifier.\nmodule MyModule # :nodoc:\n  class Input\n  end\nend\n\nmodule OtherModule # :nodoc: all\n  class Output\n  end\nend\n\nIn the above code, only class MyModule::Input will be\ndocumented.\nThe :nodoc: directive, like :enddoc:,\n:stopdoc: and :startdoc: presented below, is\nlocal to the current file: if you do not want to document a module that\nappears in several files, specify :nodoc: on each appearance,\nat least once per file.\n:stopdoc: / :startdoc:\n\nStop and start adding new documentation elements to the current container.\nFor example, if a class has a number of constants that you don't want\nto document, put a :stopdoc: before the first, and a\n:startdoc: after the last.  If you don't specify a\n:startdoc: by the end of the container, disables documentation\nfor the rest of the current file.\n:doc:\n\nForces a method or attribute to be documented even if it wouldn't be\notherwise.  Useful if, for example, you want to include documentation of a\nparticular private method.\n:enddoc:\n\nDocument nothing further at the current level: directives\n:startdoc: and :doc: that appear after this will\nnot be honored for the current container (file, class or module), in the\ncurrent file.\n:notnew: / :not_new: / :not-new:\n\nOnly applicable to the initialize instance method.  Normally\nRDoc assumes that the documentation and\nparameters for initialize are actually for the\nnew method, and so fakes out a new for the class.\nThe :notnew: directive stops this.  Remember that\ninitialize is private, so you won't see the documentation\nunless you use the -a command line option.\n\nMethod arguments\u00b6 \u2191\n:arg: or :args: parameters\n\nOverrides the default argument handling with exactly these parameters.\n##\n#  :args: a, b\n\ndef some_method(*a)\nend\n\n:yield: or :yields: parameters\n\nOverrides the default yield discovery with these parameters.\n##\n# :yields: key, value\n\ndef each_thing &block\n  @things.each(&block)\nend\n\n:call-seq:\n\nLines up to the next blank line or lines with a common prefix in the\ncomment are treated as the method's calling sequence, overriding the\ndefault parsing of method parameters and yield arguments.\nMultiple lines may be used.\n# :call-seq:\n#   ARGF.readlines(sep=$/)     -> array\n#   ARGF.readlines(limit)      -> array\n#   ARGF.readlines(sep, limit) -> array\n#\n#   ARGF.to_a(sep=$/)     -> array\n#   ARGF.to_a(limit)      -> array\n#   ARGF.to_a(sep, limit) -> array\n#\n# The remaining lines are documentation ...\n\n\nSections\u00b6 \u2191\nSections allow you to group methods in a class into sensible containers. \nIf you use the sections 'Public', 'Internal' and\n'Deprecated' (the three allowed method statuses from TomDoc) the\nsections will be displayed in that order placing the most useful methods at\nthe top.  Otherwise, sections will be displayed in alphabetical order.\n:category: section\n\nAdds this item to the named section overriding the current\nsection.  Use this to group methods by section in RDoc output while maintaining a sensible ordering\n(like alphabetical).\n# :category: Utility Methods\n#\n# CGI escapes +text+\n\ndef convert_string text\n  CGI.escapeHTML text\nend\n\nAn empty category will place the item in the default category:\n# :category:\n#\n# This method is in the default category\n\ndef some_method\n  # ...\nend\n\nUnlike the :section: directive, :category: is not sticky.  The category\nonly applies to the item immediately following the comment.\nUse the :section: directive to provide introductory text for a section of\ndocumentation.\n:section: title\n\nProvides section introductory text in RDoc\noutput.  The title following :section: is used as the section\nname and the remainder of the comment containing the section is used as\nintroductory text.  A section's comment block must be separated from\nfollowing comment blocks.  Use an empty title to switch to the default\nsection.\nThe :section: directive is sticky, so subsequent methods, aliases,\nattributes, and classes will be contained in this section until the section\nis changed.  The :category: directive will override the :section:\ndirective.\nA :section: comment block may have one or more lines before the :section:\ndirective.  These will be removed, and any identical lines at the end of\nthe block are also removed.  This allows you to add visual cues to the\nsection.\nExample:\n# ----------------------------------------\n# :section: My Section\n# This is the section that I wrote.\n# See it glisten in the noon-day sun.\n# ----------------------------------------\n\n##\n# Comment for some_method\n\ndef some_method\n  # ...\nend\n\n\nOther directives\u00b6 \u2191\n:markup: type\n\nOverrides the default markup type for this comment with the specified\nmarkup type.  For Ruby files, if the first comment contains this directive\nit is applied automatically to all comments in the file.\nUnless you are converting between markup formats you should use a\n.rdoc_options file to specify the default documentation format\nfor your entire project.  See Saved Options at RDoc::Options\nfor instructions.\nAt the top of a file the :markup: directive applies to the\nentire file:\n# coding: UTF-8\n# :markup: TomDoc\n\n# TomDoc comment here ...\n\nclass MyClass\n  # ...\nFor just one comment:\n  # ...\nend\n\n# :markup: RDoc\n#\n# This is a comment in RDoc markup format ...\n\ndef some_method\n  # ...\nSee CONTRIBUTING at Markup for\ninstructions on adding a new markup format.\n:include: filename\n\nInclude the contents of the named file at this point. This directive must\nappear alone on one line, possibly preceded by spaces. In this position, it\ncan be escaped with a \\ in front of the first colon.\nThe file will be searched for in the directories listed by the\n--include option, or in the current directory by default.  The\ncontents of the file will be shifted to have the same indentation as the\n':' at the start of the :include: directive.\n:title: text\n\nSets the title for the document.  Equivalent to the --title\ncommand line parameter.  (The command line parameter overrides any :title:\ndirective in the source).\n:main: name\n\nEquivalent to the --main command line parameter.\n\n"}, {"c": "RDoc::MetaMethod", "d": "\nMetaMethod represents a meta-programmed\nmethod\n"}, {"c": "RDoc::MethodAttr", "d": "\nAbstract class representing either a method or an attribute.\n"}, {"c": "RDoc::Mixin", "d": "\nA Mixin adds features from a module into another\ncontext.  RDoc::Include and RDoc::Extend are both mixins.\n"}, {"c": "RDoc::NormalClass", "d": "\nA normal class, neither singleton nor anonymous\n"}, {"c": "RDoc::NormalModule", "d": "\nA normal module, like NormalClass\n"}, {"c": "RDoc::Options", "d": "\nRDoc::Options handles the parsing and storage of\noptions\nSaved Options\u00b6 \u2191\nYou can save some options like the markup format in the\n.rdoc_options file in your gem.  The easiest way to do this\nis:\nrdoc --markup tomdoc --write-options\nWhich will automatically create the file and fill it with the options you\nspecified.\nThe following options will not be saved since they interfere with the\nuser's preferences or with the normal operation of RDoc:\n\n--coverage-report\n\n--dry-run\n\n--encoding\n\n--force-update\n\n--format\n\n--pipe\n\n--quiet\n\n--template\n\n--verbose\n\nCustom Options\u00b6 \u2191\nGenerators can hook into RDoc::Options to add\ngenerator-specific command line options.\nWhen --format is encountered in ARGV, RDoc calls ::setup_options on the generator class\nto add extra options to the option parser.  Options for custom generators must occur after\n--format.  rdoc --help will list options for all\ninstalled generators.\nExample:\nclass RDoc::Generator::Spellcheck\n  RDoc::RDoc.add_generator self\n\n  def self.setup_options rdoc_options\n    op = rdoc_options.option_parser\n\n    op.on('--spell-dictionary DICTIONARY',\n          RDoc::Options::Path) do |dictionary|\n      rdoc_options.spell_dictionary = dictionary\n    end\n  end\nend\n\nOf course, RDoc::Options does not respond to\nspell_dictionary by default so you will need to add it:\nclass RDoc::Options\n\n  ##\n  # The spell dictionary used by the spell-checking plugin.\n\n  attr_accessor :spell_dictionary\n\nend\n\nOption Validators\u00b6 \u2191\nOptionParser validators will validate\nand cast user input values.  In addition to the validators that ship with\nOptionParser (String, Integer, Float, TrueClass, FalseClass, Array, Regexp, Date, Time, URI, etc.), RDoc::Options adds Path, PathArray and Template.\n"}, {"c": "RDoc::Parser", "d": "\nA parser is simple a class that subclasses RDoc::Parser and implements scan to fill in an RDoc::TopLevel with parsed data.\nThe initialize method takes an RDoc::TopLevel\nto fill with parsed content, the name of the file to be parsed, the content\nof the file, an RDoc::Options object and an RDoc::Stats object to inform the user of parsed\nitems.  The scan method is then called to parse the file and must return\nthe RDoc::TopLevel object.  By calling super\nthese items will be set for you.\nIn order to be used by RDoc the parser needs to\nregister the file extensions it can parse.  Use ::parse_files_matching\nto register extensions.\nrequire 'rdoc'\n\nclass RDoc::Parser::Xyz < RDoc::Parser\n  parse_files_matching /\\.xyz$/\n\n  def initialize top_level, file_name, content, options, stats\n    super\n\n    # extra initialization if needed\n  end\n\n  def scan\n    # parse file and fill in @top_level\n  end\nend\n\n"}, {"c": "RDoc::RD", "d": "\nRDoc::RD implements the RD\nformat from the rdtool gem.\nTo choose RD as your only default format see Saved Options at RDoc::Options\nfor instructions on setting up a .doc_options file to store\nyour project default.\nLICENSE\u00b6 \u2191\nThe grammar that produces RDoc::RD::BlockParser and RDoc::RD::InlineParser\nis included in RDoc under the Ruby License.\nYou can find the original source for rdtool at github.com/uwabami/rdtool/\nYou can use, re-distribute or change these files under Ruby's License\nor GPL.\n\nYou may make and give away verbatim copies of the source form of the\nsoftware without restriction, provided that you duplicate all of the\noriginal copyright notices and associated disclaimers.\n\nYou may modify your copy of the software in any way, provided that you do\nat least ONE of the following:\n\nplace your modifications in the Public Domain or otherwise make them Freely\nAvailable, such as by posting said modifications to Usenet or an equivalent\nmedium, or by allowing the author to include your modifications in the\nsoftware.\n\nuse the modified software only within your corporation or organization.\n\ngive non-standard binaries non-standard names, with instructions on where\nto get the original software distribution.\n\nmake other distribution arrangements with the author.\n\n\nYou may distribute the software in object code or binary form, provided\nthat you do at least ONE of the following:\n\ndistribute the binaries and library files of the software, together with\ninstructions (in the manual page or equivalent) on where to get the\noriginal distribution.\n\naccompany the distribution with the machine-readable source of the\nsoftware.\n\ngive non-standard binaries non-standard names, with instructions on where\nto get the original software distribution.\n\nmake other distribution arrangements with the author.\n\n\nYou may modify and include the part of the software into any other software\n(possibly commercial).  But some files in the distribution are not written\nby the author, so that they are not under these terms.\nFor the list of those files and their copying conditions, see the file\nLEGAL.\n\nThe scripts and library files supplied as input to or produced as output\nfrom the software do not automatically fall under the copyright of the\nsoftware, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this software.\n\nTHIS SOFTWARE IS PROVIDED \u00e2\u20ac\u0153AS IS\u00e2\u20ac AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\n"}, {"c": "RDoc::RDoc", "d": "\nThis is the driver for generating RDoc output.  It\nhandles file parsing and generation of output.\nTo use this class to generate RDoc output via the\nAPI, the recommended way is:\nrdoc = RDoc::RDoc.new\noptions = rdoc.load_options # returns an RDoc::Options instance\n# set extra options\nrdoc.document options\n\nYou can also generate output like the rdoc executable:\nrdoc = RDoc::RDoc.new\nrdoc.document argv\n\nWhere argv is an array of strings, each corresponding to an\nargument you'd give rdoc on the command line.  See <tt>rdoc\n\u00e2\u20ac\u201chelp<tt> for details.\n"}, {"c": "RDoc::Require", "d": "\nA file loaded by #require\n"}, {"c": "RDoc::RI", "d": "\nNamespace for the ri command line tool's implementation.\nSee ri --help for details.\n"}, {"c": "RDoc::RubygemsHook", "d": "\nGem::RDoc provides methods to generate RDoc and ri data for installed gems upon gem\ninstallation.\nThis file is automatically required by RubyGems 1.9 and newer.\n"}, {"c": "RDoc::Servlet", "d": "\nThis is a WEBrick servlet that allows you to\nbrowse ri documentation.\nYou can show documentation through either `ri \u00e2\u20ac\u201cserver` or, with RubyGems\n2.0 or newer, `gem server`.  For ri, the server runs on port 8214 by\ndefault.  For RubyGems the server runs on port 8808 by default.\nYou can use this servlet in your own project by mounting it on a WEBrick server:\nrequire 'webrick'\n\nserver = WEBrick::HTTPServer.new Port: 8000\n\nserver.mount '/', RDoc::Servlet\n\nIf you want to mount the servlet some other place than the root, provide\nthe base path when mounting:\nserver.mount '/rdoc', RDoc::Servlet, '/rdoc'\n\n"}, {"c": "RDoc::SingleClass", "d": "\nA singleton class\n"}, {"c": "RDoc::Stats", "d": "\nRDoc statistics collector which prints a summary\nand report of a project's documentation totals.\n"}, {"c": "RDoc::Store", "d": "\nA set of rdoc data for a single project (gem, path, etc.).\nThe store manages reading and writing ri data for a project and maintains a\ncache of methods, classes and ancestors in the store.\nThe store maintains a cache of\nits contents for faster lookup.  After adding items to the store it must be\nflushed using save_cache.  The\ncache contains the following structures:\n@cache = {\n  :ancestors        => {}, # class name => ancestor names\n  :attributes       => {}, # class name => attributes\n  :class_methods    => {}, # class name => class methods\n  :instance_methods => {}, # class name => instance methods\n  :modules          => [], # classes and modules in this store\n  :pages            => [], # page names\n}\n\n"}, {"c": "RDoc::Task", "d": "\nRDoc::Task creates the following rake tasks to\ngenerate and clean up RDoc output:\nrdoc\n\nMain task for this RDoc task.\nclobber_rdoc\n\nDelete all the rdoc files.  This target is automatically added to the main\nclobber target.\nrerdoc\n\nRebuild the rdoc files from scratch, even if they are not out of date.\n\nSimple Example:\nrequire 'rdoc/task'\n\nRDoc::Task.new do |rdoc|\n  rdoc.main = \"README.rdoc\"\n  rdoc.rdoc_files.include(\"README.rdoc\", \"lib   /*.rb\")\nend\n\nThe rdoc object passed to the block is an RDoc::Task object. See the attributes list for the RDoc::Task class for available customization options.\nSpecifying different task names\u00b6 \u2191\nYou may wish to give the task a different name, such as if you are\ngenerating two sets of documentation.  For instance, if you want to have a\ndevelopment set of documentation including private methods:\nrequire 'rdoc/task'\n\nRDoc::Task.new :rdoc_dev do |rdoc|\n  rdoc.main = \"README.doc\"\n  rdoc.rdoc_files.include(\"README.rdoc\", \"lib/   *.rb\")\n  rdoc.options << \"--all\"\nend\n\nThe tasks would then be named :rdoc_dev,\n:clobber_rdoc_dev, and :rerdoc_dev.\nIf you wish to have completely different task names, then pass a Hash as first argument. With the\n:rdoc, :clobber_rdoc and :rerdoc\noptions, you can customize the task names to your liking.\nFor example:\nrequire 'rdoc/task'\n\nRDoc::Task.new(:rdoc => \"rdoc\", :clobber_rdoc => \"rdoc:clean\",\n               :rerdoc => \"rdoc:force\")\n\nThis will create the tasks :rdoc, :rdoc:clean and\n:rdoc:force.\n"}, {"c": "RDoc::TestCase", "d": "\nRDoc::TestCase is an abstract TestCase to provide common setup and teardown\nacross all RDoc tests.  The test case uses\nminitest, so all the assertions of minitest may be used.\nThe testcase provides the following:\n\nA reset code-object tree\n\nA reset markup preprocessor (RDoc::Markup::PreProcess)\n\nThe @RM alias of RDoc::Markup (for\nless typing)\n\n@pwd containing the current working directory\n\nFileUtils, pp, Tempfile, Dir.tmpdir and StringIO\n\n"}, {"c": "RDoc::Text", "d": "\nMethods for manipulating comment text\n"}, {"c": "RDoc::TokenStream", "d": "\nA TokenStream is a list of tokens, gathered\nduring the parse of some entity (say a method). Entities populate these\nstreams by being registered with the lexer. Any class can collect tokens by\nincluding TokenStream. From the outside, you\nuse such an object by calling the #start_collecting_tokens\nmethod, followed by calls to #add_token and pop_token.\n"}, {"c": "RDoc::TomDoc", "d": "\nA parser for TomDoc based on TomDoc 1.0.0-rc1 (02adef9b5a)\nThe TomDoc specification can be found at:\ntomdoc.org\nThe latest version of the TomDoc specification\ncan be found at:\ngithub.com/mojombo/tomdoc/blob/master/tomdoc.md\nTo choose TomDoc as your only default format see\nSaved Options at\nRDoc::Options for instructions on setting up a\n.rdoc_options file to store your project default.\nThere are a few differences between this parser and the specification.  A\nbest-effort was made to follow the specification as closely as possible but\nsome choices to deviate were made.\nA future version of RDoc will warn when a MUST\nor MUST NOT is violated and may warn when a SHOULD or SHOULD NOT is\nviolated.  RDoc will always try to emit\ndocumentation even if given invalid TomDoc.\nHere are some implementation choices this parser currently makes:\nThis parser allows rdoc-style inline markup but you should not depended on\nit.\nThis parser allows a space between the comment and the method body.\nThis parser does not require the default value to be described for an\noptional argument.\nThis parser does not examine the order of sections.  An Examples section\nmay precede the Arguments section.\nThis class is documented in TomDoc format.  Since\nthis is a subclass of the RDoc markup parser\nthere isn't much to see here, unfortunately.\n"}, {"c": "RDoc::TopLevel", "d": "\nA TopLevel context is a representation of the\ncontents of a single file\n"}, {"c": "RDoc::Markdown::MemoEntry", "d": "\n"}, {"c": "RDoc::Markdown::ParseError", "d": "\n"}, {"c": "RDoc::Markdown::RuleInfo", "d": "\n"}, {"c": "RDoc::RI::Error", "d": "\nBase RI error class\n"}, {"c": "RDoc::Store::Error", "d": "\nErrors raised from loading or saving the store\n"}, {"c": "RDoc::Store::MissingFileError", "d": "\nRaised when a stored file for a class, module, page or method is missing.\n"}, {"c": "Resolv::DNS", "d": "\nResolv::DNS is a DNS stub\nresolver.\nInformation taken from the following places:\n\nSTD0013\n\nRFC 1035\n\nftp.isi.edu/in-notes/iana/assignments/dns-parameters\n\netc.\n\n"}, {"c": "Resolv::Hosts", "d": "\nResolv::Hosts is a hostname resolver that uses the\nsystem hosts file.\n"}, {"c": "Resolv::IPv4", "d": "\nA Resolv::DNS IPv4 address.\n"}, {"c": "Resolv::IPv6", "d": "\nA Resolv::DNS IPv6 address.\n"}, {"c": "Resolv::LOC", "d": "\n"}, {"c": "Resolv::MDNS", "d": "\nResolv::MDNS is a one-shot Multicast DNS (mDNS) resolver.  It blindly makes queries to the\nmDNS addresses without understanding anything about multicast ports.\nInformation taken form the following places:\n\nRFC 6762\n\n"}, {"c": "Resolv::ResolvError", "d": "\nIndicates a failure to resolve a name or address.\n"}, {"c": "Resolv::ResolvTimeout", "d": "\nIndicates a timeout resolving a name or address.\n"}, {"c": "Resolv::DNS::Config", "d": "\n"}, {"c": "Resolv::DNS::DecodeError", "d": "\nIndicates that the DNS response was unable to be\ndecoded.\n"}, {"c": "Resolv::DNS::EncodeError", "d": "\nIndicates that the DNS request was unable to be\nencoded.\n"}, {"c": "Resolv::DNS::Name", "d": "\nA representation of a DNS name.\n"}, {"c": "Resolv::DNS::Query", "d": "\nA DNS query abstract class.\n"}, {"c": "Resolv::DNS::Requester", "d": "\n"}, {"c": "Resolv::DNS::Resource", "d": "\nA DNS resource abstract class.\n"}, {"c": "Resolv::DNS::Config::NXDomain", "d": "\nIndicates no such domain was found.\n"}, {"c": "Resolv::DNS::Config::OtherResolvError", "d": "\nIndicates some other unhandled resolver error was encountered.\n"}, {"c": "Resolv::DNS::Requester::RequestError", "d": "\nIndicates a problem with the DNS request.\n"}, {"c": "Resolv::DNS::Resource::ANY", "d": "\nA Query type requesting any RR.\n"}, {"c": "Resolv::DNS::Resource::CNAME", "d": "\nThe canonical name for an alias.\n"}, {"c": "Resolv::DNS::Resource::DomainName", "d": "\nDomain Name resource abstract class.\n"}, {"c": "Resolv::DNS::Resource::Generic", "d": "\nA generic resource abstract class.\n"}, {"c": "Resolv::DNS::Resource::HINFO", "d": "\nHost Information resource.\n"}, {"c": "Resolv::DNS::Resource::IN", "d": "\nmodule IN contains ARPA Internet specific RRs.\n"}, {"c": "Resolv::DNS::Resource::LOC", "d": "\nLocation resource\n"}, {"c": "Resolv::DNS::Resource::MINFO", "d": "\nMailing list or mailbox information.\n"}, {"c": "Resolv::DNS::Resource::MX", "d": "\nMail Exchanger resource.\n"}, {"c": "Resolv::DNS::Resource::NS", "d": "\nAn authoritative name server.\n"}, {"c": "Resolv::DNS::Resource::PTR", "d": "\nA Pointer to another DNS name.\n"}, {"c": "Resolv::DNS::Resource::SOA", "d": "\nStart Of Authority resource.\n"}, {"c": "Resolv::DNS::Resource::TXT", "d": "\nUnstructured text resource.\n"}, {"c": "Resolv::DNS::Resource::IN::A", "d": "\nIPv4 Address resource\n"}, {"c": "Resolv::DNS::Resource::IN::AAAA", "d": "\nAn IPv6 address record.\n"}, {"c": "Resolv::DNS::Resource::IN::SRV", "d": "\nSRV resource record defined in RFC 2782\nThese records identify the hostname and port that a service is available\nat.\n"}, {"c": "Resolv::DNS::Resource::IN::WKS", "d": "\nWell Known Service resource.\n"}, {"c": "Resolv::LOC::Alt", "d": "\nA Resolv::LOC::Alt\n"}, {"c": "Resolv::LOC::Coord", "d": "\nA Resolv::LOC::Coord\n"}, {"c": "Resolv::LOC::Size", "d": "\nA Resolv::LOC::Size\n"}, {"c": "REXML::AttlistDecl", "d": "\nThis class needs:\n\nDocumentation\n\nWork!  Not all types of attlists are intelligently parsed, so we just\n\nspew back out what we get in.  This works, but it would be better if we\nformatted the output ourselves.\nAttlistDecls provide just enough support to allow\nnamespace declarations.  If you need some sort of generalized support, or\nhave an interesting idea about how to map the hideous, terrible design of\nDTD AttlistDecls onto an intuitive Ruby interface,\nlet me know.  I'm desperate for anything to make DTDs more palateable.\n"}, {"c": "REXML::Attribute", "d": "\nDefines an Element Attribute; IE, a attribute=value pair, as in:\n<element attribute=\u00e2\u20ac\u0153value\u00e2\u20ac/>.  Attributes can be in their own namespaces. \nGeneral users of REXML will not interact with\nthe Attribute class much.\n"}, {"c": "REXML::Attributes", "d": "\nA class that defines the set of Attributes of\nan Element and provides operations for accessing\nelements in that set.\n"}, {"c": "REXML::CData", "d": "\n"}, {"c": "REXML::Child", "d": "\nA Child object is something contained by a parent,\nand this class contains methods to support that.  Most user code will not\nuse this class directly.\n"}, {"c": "REXML::Comment", "d": "\nRepresents an XML comment; that is, text between\n<!\u00e2\u20ac\u201c \u00e2\u20ac\u00a6 \u00e2\u20ac\u201c>\n"}, {"c": "REXML::Declaration", "d": "\nThis is an abstract class.  You never use this directly; it serves as a\nparent class for the specific declarations.\n"}, {"c": "REXML::DocType", "d": "\nRepresents an XML DOCTYPE declaration; that is,\nthe contents of <!DOCTYPE \u00e2\u20ac\u00a6 >.  DOCTYPES can be used to declare the\nDTD of a document, as well as being used to declare\nentities used in the document.\n"}, {"c": "REXML::Document", "d": "\nRepresents a full XML document, including PIs, a\ndoctype, etc.  A Document has a single child\nthat can be accessed by root(). Note that if you want to have an XML declaration written for a document you create,\nyou must add one; REXML documents do not write\na default declaration for you.  See |DECLARATION| and |write|.\n"}, {"c": "REXML::DTD", "d": "\n"}, {"c": "REXML::Element", "d": "\nRepresents a tagged XML element.  Elements are characterized by having children,\nattributes, and names, and can themselves be children.\n"}, {"c": "REXML::ElementDecl", "d": "\n"}, {"c": "REXML::Elements", "d": "\nA class which provides filtering of children for Elements, and XPath\nsearch support.  You are expected to only encounter this class as the\nelement.elements object.  Therefore, you are not\nexpected to instantiate this yourself.\n"}, {"c": "REXML::Encoding", "d": "\n"}, {"c": "REXML::Entity", "d": "\n"}, {"c": "REXML::EntityConst", "d": "\nThis is a set of entity constants \u00e2\u20ac\u201c the ones defined in the XML specification.  These are gt,\nlt, amp, quot and apos.\nCAUTION: these entities does not have parent and document\n"}, {"c": "REXML::ExternalEntity", "d": "\n"}, {"c": "REXML::Formatters", "d": "\n"}, {"c": "REXML::Functions", "d": "\nIf you add a method, keep in mind two things: (1) the first argument will\nalways be a list of nodes from which to filter.  In the case of context\nmethods (such as position), the function should return an array with a\nvalue for each child in the array. (2) all method calls from XML will have \u00e2\u20ac\u0153-\u00e2\u20ac replaced with \u00e2\u20ac\u0153_\u00e2\u20ac. Therefore, in\nXML, \u00e2\u20ac\u0153local-name()\u00e2\u20ac is identical (and actually\nbecomes) \u00e2\u20ac\u0153local_name()\u00e2\u20ac\n"}, {"c": "REXML::Instruction", "d": "\nRepresents an XML Instruction; IE, <? \u00e2\u20ac\u00a6 ?> TODO: Add parent\narg (3rd arg) to constructor\n"}, {"c": "REXML::IOSource", "d": "\nA Source that wraps an IO.  See the Source class\nfor method documentation\n"}, {"c": "REXML::Light", "d": "\n"}, {"c": "REXML::Namespace", "d": "\nAdds named attributes to an object.\n"}, {"c": "REXML::Node", "d": "\nRepresents a node in the tree.  Nodes are never encountered except as\nsuperclasses of other objects.  Nodes have siblings.\n"}, {"c": "REXML::NotationDecl", "d": "\n"}, {"c": "REXML::Output", "d": "\n"}, {"c": "REXML::Parent", "d": "\nA parent has children, and has methods for accessing them.  The Parent class is never encountered except as the\nsuperclass for some other object.\n"}, {"c": "REXML::ParseException", "d": "\n"}, {"c": "REXML::Parsers", "d": "\n"}, {"c": "REXML::QuickPath", "d": "\n"}, {"c": "REXML::SAX2Listener", "d": "\nA template for stream parser listeners. Note that the declarations\n(attlistdecl, elementdecl, etc) are trivially processed; REXML doesn't yet handle doctype entity\ndeclarations, so you have to parse them out yourself.\nMissing methods from SAX2\u00b6 \u2191\nignorable_whitespace\n\nMethods extending SAX2\u00b6 \u2191\nWARNING These methods are certainly going to change, until\nDTDs are fully supported.  Be aware of this.\nstart_document\nend_document\ndoctype\nelementdecl\nattlistdecl\nentitydecl\nnotationdecl\ncdata\nxmldecl\ncomment\n\n"}, {"c": "REXML::Security", "d": "\n"}, {"c": "REXML::Source", "d": "\nA Source can be searched for patterns, and wraps\nbuffers and other objects and provides consumption of text\n"}, {"c": "REXML::SourceFactory", "d": "\nGenerates Source-s.  USE THIS CLASS.\n"}, {"c": "REXML::StreamListener", "d": "\nA template for stream parser listeners. Note that the declarations\n(attlistdecl, elementdecl, etc) are trivially processed; REXML doesn't yet handle doctype entity\ndeclarations, so you have to parse them out yourself.\n"}, {"c": "REXML::SyncEnumerator", "d": "\n"}, {"c": "REXML::Text", "d": "\nRepresents text nodes in an XML document\n"}, {"c": "REXML::UndefinedNamespaceException", "d": "\n"}, {"c": "REXML::Validation", "d": "\n"}, {"c": "REXML::XMLDecl", "d": "\nNEEDS DOCUMENTATION\n"}, {"c": "REXML::XMLTokens", "d": "\nDefines a number of tokens used for parsing XML. \nNot for general consumption.\n"}, {"c": "REXML::XPath", "d": "\nWrapper class.  Use this class to access the XPath\nfunctions.\n"}, {"c": "REXML::XPathParser", "d": "\nYou don't want to use this class.  Really.  Use XPath, which is a wrapper for this class.  Believe\nme.  You don't want to poke around in here. There is strange, dark\nmagic at work in this code.  Beware.  Go back!  Go back while you still\ncan!\n"}, {"c": "REXML::DTD::AttlistDecl", "d": "\n"}, {"c": "REXML::DTD::ElementDecl", "d": "\n"}, {"c": "REXML::DTD::EntityDecl", "d": "\n"}, {"c": "REXML::DTD::NotationDecl", "d": "\n"}, {"c": "REXML::DTD::Parser", "d": "\n"}, {"c": "REXML::Formatters::Default", "d": "\n"}, {"c": "REXML::Formatters::Pretty", "d": "\nPretty-prints an XML document.  This destroys\nwhitespace in text nodes and will insert carriage returns and indentations.\nTODO: Add an option to print attributes on new lines\n"}, {"c": "REXML::Formatters::Transitive", "d": "\nThe Transitive formatter writes an XML document that parses to an identical document\nas the source document.  This means that no extra whitespace nodes are\ninserted, and whitespace within text nodes is preserved.  Within these\nconstraints, the document is pretty-printed, with whitespace inserted into\nthe metadata to introduce formatting.\nNote that this is only useful if the original XML is not already formatted.  Since this\nformatter does not alter whitespace nodes, the results of formatting\nalready formatted XML will be odd.\n"}, {"c": "REXML::Light::Node", "d": "\nRepresents a tagged XML element.  Elements are characterized by having children,\nattributes, and names, and can themselves be children.\n"}, {"c": "REXML::Parsers::BaseParser", "d": "\nUsing the Pull Parser\u00b6 \u2191\nThis API is experimental, and subject to change.\nparser = PullParser.new( \"<a>text<b att='val'/>txet</a>\" )\nwhile parser.has_next?\n  res = parser.next\n  puts res[1]['att'] if res.start_tag? and res[0] == 'b'\nend\n\nSee the PullEvent class for information on the\ncontent of the results. The data is identical to the arguments passed for\nthe various events to the StreamListener API.\nNotice that:\nparser = PullParser.new( \"<a>BAD DOCUMENT\" )\nwhile parser.has_next?\n  res = parser.next\n  raise res[1] if res.error?\nend\n\nNat Price gave me some good ideas for the API.\n"}, {"c": "REXML::Parsers::LightParser", "d": "\n"}, {"c": "REXML::Parsers::PullEvent", "d": "\nA parsing event.  The contents of the event are accessed as an +Array?, and\nthe type is given either by the \u00e2\u20ac\u00a6? methods, or by accessing the\ntype accessor.  The contents of this object vary from event to\nevent, but are identical to the arguments passed to +StreamListener+s for\neach event.\n"}, {"c": "REXML::Parsers::PullParser", "d": "\nUsing the Pull Parser\u00b6 \u2191\nThis API is experimental, and subject to change.\nparser = PullParser.new( \"<a>text<b att='val'/>txet</a>\" )\nwhile parser.has_next?\n  res = parser.next\n  puts res[1]['att'] if res.start_tag? and res[0] == 'b'\nend\n\nSee the PullEvent class for information on the\ncontent of the results. The data is identical to the arguments passed for\nthe various events to the StreamListener API.\nNotice that:\nparser = PullParser.new( \"<a>BAD DOCUMENT\" )\nwhile parser.has_next?\n  res = parser.next\n  raise res[1] if res.error?\nend\n\nNat Price gave me some good ideas for the API.\n"}, {"c": "REXML::Parsers::SAX2Parser", "d": "\nSAX2Parser\n"}, {"c": "REXML::Parsers::StreamParser", "d": "\n"}, {"c": "REXML::Parsers::TreeParser", "d": "\n"}, {"c": "REXML::Parsers::UltraLightParser", "d": "\n"}, {"c": "REXML::Parsers::XPathParser", "d": "\nYou don't want to use this class.  Really.  Use XPath, which is a wrapper for this class.  Believe\nme.  You don't want to poke around in here. There is strange, dark\nmagic at work in this code.  Beware.  Go back!  Go back while you still\ncan!\n"}, {"c": "REXML::Validation::Choice", "d": "\n"}, {"c": "REXML::Validation::Event", "d": "\n"}, {"c": "REXML::Validation::Interleave", "d": "\n"}, {"c": "REXML::Validation::OneOrMore", "d": "\n"}, {"c": "REXML::Validation::Optional", "d": "\n"}, {"c": "REXML::Validation::Ref", "d": "\n"}, {"c": "REXML::Validation::RelaxNG", "d": "\nImplemented:\n\nempty\n\nelement\n\nattribute\n\ntext\n\noptional\n\nchoice\n\noneOrMore\n\nzeroOrMore\n\ngroup\n\nvalue\n\ninterleave\n\nmixed\n\nref\n\ngrammar\n\nstart\n\ndefine\n\nNot implemented:\n\ndata\n\nparam\n\ninclude\n\nexternalRef\n\nnotAllowed\n\nanyName\n\nnsName\n\nexcept\n\nname\n\n"}, {"c": "REXML::Validation::Sequence", "d": "\n"}, {"c": "REXML::Validation::State", "d": "\n"}, {"c": "REXML::Validation::ValidationException", "d": "\n"}, {"c": "REXML::Validation::Validator", "d": "\n"}, {"c": "REXML::Validation::ZeroOrMore", "d": "\n"}, {"c": "Rinda::DRbObjectTemplate", "d": "\nDocumentation?\n"}, {"c": "Rinda::InvalidHashTupleKey", "d": "\nRaised when a hash-based tuple has an invalid key.\n"}, {"c": "Rinda::NotifyTemplateEntry", "d": "\nA NotifyTemplateEntry is returned by\nRinda::TupleSpace#notify and\nis notified of TupleSpace changes.  You may\nreceive either your subscribed event or the 'close' event when\niterating over notifications.\nSee Rinda::TupleSpace#notify_event\nfor valid notification types.\nExample\u00b6 \u2191\nts = Rinda::TupleSpace.new\nobserver = ts.notify 'write', [nil]\n\nThread.start do\n  observer.each { |t| p t }\nend\n\n3.times { |i| ts.write [i] }\n\nOutputs:\n['write', [0]]\n['write', [1]]\n['write', [2]]\n\n"}, {"c": "Rinda::RequestCanceledError", "d": "\nRaised when trying to use a canceled tuple.\n"}, {"c": "Rinda::RequestExpiredError", "d": "\nRaised when trying to use an expired tuple.\n"}, {"c": "Rinda::RindaError", "d": "\nRinda error base class\n"}, {"c": "Rinda::RingFinger", "d": "\nRingFinger is used by RingServer clients to discover the\nRingServer's TupleSpace.  Typically, all\na client needs to do is call ::primary to retrieve the\nremote TupleSpace, which it can then begin\nusing.\nTo find the first available remote TupleSpace:\nRinda::RingFinger.primary\n\nTo create a RingFinger that broadcasts to a\ncustom list:\nrf = Rinda::RingFinger.new  ['localhost', '192.0.2.1']\nrf.primary\n\nRinda::RingFinger also understands multicast\naddresses and sets them up properly.  This allows you to run multiple\nRingServers on the same host:\nrf = Rinda::RingFinger.new ['239.0.0.1']\nrf.primary\n\nYou can set the hop count (or TTL) for multicast searches using multicast_hops.\nIf you use IPv6 multicast you may need to set both an address and the\noutbound interface index:\nrf = Rinda::RingFinger.new ['ff02::1']\nrf.multicast_interface = 1\nrf.primary\n\nAt this time there is no easy way to get an interface index by name.\n"}, {"c": "Rinda::RingProvider", "d": "\nRingProvider uses a RingServer advertised TupleSpace as a name service. TupleSpace clients can register themselves with\nthe remote TupleSpace and look up other\nprovided services via the remote TupleSpace.\nServices are registered with a tuple of the format [:name, klass, DRbObject, description].\n"}, {"c": "Rinda::RingServer", "d": "\nA RingServer allows a Rinda::TupleSpace to be located via UDP\nbroadcasts. Default service location uses the following steps:\n\nA RingServer begins listening on the network\nbroadcast UDP address.\n\nA RingFinger sends a UDP packet containing\nthe DRb URI where it\nwill listen for a reply.\n\nThe RingServer receives the UDP packet and\nconnects back to the provided DRb URI with the DRb service.\n\nA RingServer requires a TupleSpace:\nts = Rinda::TupleSpace.new\nrs = Rinda::RingServer.new\n\nRingServer can also listen on multicast\naddresses for announcements.  This allows multiple RingServers to run on\nthe same host.  To use network broadcast and multicast:\nts = Rinda::TupleSpace.new\nrs = Rinda::RingServer.new ts, %w[Socket::INADDR_ANY, 239.0.0.1 ff02::1]\n\n"}, {"c": "Rinda::SimpleRenewer", "d": "\nAn SimpleRenewer allows a TupleSpace to check if a TupleEntry is still alive.\n"}, {"c": "Rinda::Template", "d": "\nTemplates are used to match tuples in Rinda.\n"}, {"c": "Rinda::TemplateEntry", "d": "\nA TemplateEntry is a Template together with expiry and cancellation\ndata.\n"}, {"c": "Rinda::Tuple", "d": "\nA tuple is the elementary object in Rinda\nprogramming. Tuples may be matched against templates if the tuple and the\ntemplate are the same size.\n"}, {"c": "Rinda::TupleBag", "d": "\nTupleBag is an unordered collection of tuples.\nIt is the basis of Tuplespace.\n"}, {"c": "Rinda::TupleEntry", "d": "\nA TupleEntry is a Tuple (i.e. a possible entry in some Tuplespace)\ntogether with expiry and cancellation data.\n"}, {"c": "Rinda::TupleSpace", "d": "\nThe Tuplespace manages access to the tuples it contains, ensuring mutual\nexclusion requirements are met.\nThe sec option for the write, take, move, read and notify\nmethods may either be a number of seconds or a Renewer object.\n"}, {"c": "Rinda::TupleSpaceProxy", "d": "\nTupleSpaceProxy allows a remote\nTuplespace to appear as local.\n"}, {"c": "Rinda::WaitTemplateEntry", "d": "\nDocumentation?\n"}, {"c": "Rinda::TupleBag::TupleBin", "d": "\n"}, {"c": "Ripper::Filter", "d": "\nThis class handles only scanner events, which are dispatched in the\n'right' order (same with input).\n"}, {"c": "RSS::Atom", "d": "\nAtom is an XML-based document format that is used\nto describe 'feeds' of related information. A typical use is in a\nnews feed where the information is periodically updated and which users can\nsubscribe to.  The Atom format is described in tools.ietf.org/html/rfc4287\nThe Atom module provides support in reading and\ncreating feeds.\nSee the RSS module for examples consuming and\ncreating feeds.\n"}, {"c": "RSS::BaseDublinCoreModel", "d": "\n"}, {"c": "RSS::BaseListener", "d": "\n"}, {"c": "RSS::BaseModel", "d": "\n"}, {"c": "RSS::BaseParser", "d": "\n"}, {"c": "RSS::BaseTrackBackModel", "d": "\n"}, {"c": "RSS::ContentModel", "d": "\n"}, {"c": "RSS::ConversionError", "d": "\nRaised when a conversion failure occurs.\n"}, {"c": "RSS::Converter", "d": "\n"}, {"c": "RSS::DublincoreModel", "d": "\n"}, {"c": "RSS::Element", "d": "\n"}, {"c": "RSS::Error", "d": "\nThe basic error all other RSS errors stem from.\nRescue this error if you want to handle any given RSS error and you don't care about the details.\n"}, {"c": "RSS::ImageFaviconModel", "d": "\n"}, {"c": "RSS::ImageItemModel", "d": "\n"}, {"c": "RSS::ImageModelUtils", "d": "\n"}, {"c": "RSS::InvalidRSSError", "d": "\nThe InvalidRSSError error is the base\nclass for a variety of errors related to a poorly-formed RSS feed. Rescue this error if you only care that a\nfile could be invalid, but don't care how it is invalid.\n"}, {"c": "RSS::ITunesBaseModel", "d": "\n"}, {"c": "RSS::ITunesChannelModel", "d": "\n"}, {"c": "RSS::ITunesItemModel", "d": "\n"}, {"c": "RSS::ITunesModelUtils", "d": "\n"}, {"c": "RSS::ListenerMixin", "d": "\n"}, {"c": "RSS::Maker", "d": "\nProvides a set of builders for various RSS\nobjects\n\nFeeds\n\nRSS 0.91\n\nRSS 1.0\n\nRSS 2.0\n\nAtom 1.0\n\n\nElements\n\nAtom::Entry\n\n\n"}, {"c": "RSS::MissingAttributeError", "d": "\nCertain attributes are required on specific tags in an RSS feed. If a feed is missing one of these\nattributes, a MissingAttributeError is raised.\n"}, {"c": "RSS::MissingTagError", "d": "\nSince RSS is based on XML,\nit must have opening and closing tags that match. If they don't, a MissingTagError will be raised.\n"}, {"c": "RSS::NotAvailableValueError", "d": "\nAttributes are in key-value form, and if there's no value provided for\nan attribute, a NotAvailableValueError will be\nraised.\n"}, {"c": "RSS::NotExpectedTagError", "d": "\nRaised when an unexpected tag is encountered.\n"}, {"c": "RSS::NotSetError", "d": "\nRaised when a required variable is not set.\n"}, {"c": "RSS::NotValidXMLParser", "d": "\n"}, {"c": "RSS::NotWellFormedError", "d": "\n"}, {"c": "RSS::NSError", "d": "\n"}, {"c": "RSS::OverlappedPrefixError", "d": "\nRSS, being an XML-based format, has namespace\nsupport. If two namespaces are declared with the same name, an OverlappedPrefixError will be raised.\n"}, {"c": "RSS::Parser", "d": "\n"}, {"c": "RSS::RDF", "d": "\n"}, {"c": "RSS::REXMLLikeXMLParser", "d": "\n"}, {"c": "RSS::REXMLListener", "d": "\n"}, {"c": "RSS::REXMLParser", "d": "\n"}, {"c": "RSS::RootElementMixin", "d": "\n"}, {"c": "RSS::Rss", "d": "\nRSS 2.0 support\u00b6 \u2191\nRSS has three different versions. This module\ncontains support for version 2.0\nProducing RSS 2.0\u00b6 \u2191\nProducing our own RSS feeds is easy as well.\nLet's make a very basic feed:\nrequire \"rss\"\n\nrss = RSS::Maker.make(\"2.0\") do |maker|\n  maker.channel.language = \"en\"\n  maker.channel.author = \"matz\"\n  maker.channel.updated = Time.now.to_s\n  maker.channel.link = \"http://www.ruby-lang.org/en/feeds/news.rss\"\n  maker.channel.title = \"Example Feed\"\n  maker.channel.description = \"A longer description of my feed.\"\n  maker.items.new_item do |item|\n    item.link = \"http://www.ruby-lang.org/en/news/2010/12/25/ruby-1-9-2-p136-is-released/\"\n    item.title = \"Ruby 1.9.2-p136 is released\"\n    item.updated = Time.now.to_s\n  end\nend\n\nputs rss\n\nAs you can see, this is a very Builder-like DSL. This code will spit out an\nRSS 2.0 feed with one item. If we needed a second\nitem, we'd make another block with maker.items.new_item and build a\nsecond one.\n"}, {"c": "RSS::RSS09", "d": "\nRSS 0.9 support\u00b6 \u2191\nRSS has three different versions. This module\ncontains support for version 0.9.1.\nProducing RSS 0.9\u00b6 \u2191\nProducing our own RSS feeds is easy as well.\nLet's make a very basic feed:\nrequire \"rss\"\n\nrss = RSS::Maker.make(\"0.91\") do |maker|\n  maker.channel.language = \"en\"\n  maker.channel.author = \"matz\"\n  maker.channel.updated = Time.now.to_s\n  maker.channel.link = \"http://www.ruby-lang.org/en/feeds/news.rss\"\n  maker.channel.title = \"Example Feed\"\n  maker.channel.description = \"A longer description of my feed.\"\n  maker.image.url = \"http://www.ruby-lang.org/images/logo.gif\"\n  maker.image.title = \"An image\"\n  maker.items.new_item do |item|\n    item.link = \"http://www.ruby-lang.org/en/news/2010/12/25/ruby-1-9-2-p136-is-released/\"\n    item.title = \"Ruby 1.9.2-p136 is released\"\n    item.updated = Time.now.to_s\n  end\nend\n\nputs rss\n\nAs you can see, this is a very Builder-like DSL. This code will spit out an\nRSS 0.9 feed with one item. If we needed a second\nitem, we'd make another block with maker.items.new_item and build a\nsecond one.\n"}, {"c": "RSS::RSS10", "d": "\nRSS 1.0 support\u00b6 \u2191\nRSS has three different versions. This module\ncontains support for version 1.0\nProducing RSS 1.0\u00b6 \u2191\nProducing our own RSS feeds is easy as well.\nLet's make a very basic feed:\nrequire \"rss\"\n\nrss = RSS::Maker.make(\"1.0\") do |maker|\n  maker.channel.language = \"en\"\n  maker.channel.author = \"matz\"\n  maker.channel.about = \"About my feed.\"\n  maker.channel.updated = Time.now.to_s\n  maker.channel.link = \"http://www.ruby-lang.org/en/feeds/news.rss\"\n  maker.channel.title = \"Example Feed\"\n  maker.channel.description = \"A longer description of my feed.\"\n  maker.items.new_item do |item|\n    item.link = \"http://www.ruby-lang.org/en/news/2010/12/25/ruby-1-9-2-p136-is-released/\"\n    item.title = \"Ruby 1.9.2-p136 is released\"\n    item.updated = Time.now.to_s\n  end\nend\n\nputs rss\n\nAs you can see, this is a very Builder-like DSL. This code will spit out an\nRSS 1.0 feed with one item. If we needed a second\nitem, we'd make another block with maker.items.new_item and build a\nsecond one.\n"}, {"c": "RSS::SetupMaker", "d": "\n"}, {"c": "RSS::SlashModel", "d": "\n"}, {"c": "RSS::SyndicationModel", "d": "\n"}, {"c": "RSS::TaxonomyTopicModel", "d": "\n"}, {"c": "RSS::TaxonomyTopicsModel", "d": "\n"}, {"c": "RSS::TooMuchTagError", "d": "\nSome tags must only exist a specific number of times in a given RSS feed. If a feed has too many occurrences of one\nof these tags, a TooMuchTagError will be\nraised.\n"}, {"c": "RSS::TrackBackModel10", "d": "\n"}, {"c": "RSS::TrackBackModel20", "d": "\n"}, {"c": "RSS::TrackBackUtils", "d": "\n"}, {"c": "RSS::UnknownConversionMethodError", "d": "\nRaised when an unknown conversion error occurs.\n"}, {"c": "RSS::UnknownTagError", "d": "\nRSS does not allow for free-form tag names, so if\nan RSS feed contains a tag that we don't know\nabout, an UnknownTagError is raised.\n"}, {"c": "RSS::UnsupportedMakerVersionError", "d": "\nRaised when a RSS::Maker attempts to use an\nunknown maker.\n"}, {"c": "RSS::Utils", "d": "\nRSS::Utils is a module that holds various utility\nfunctions that are used across many parts of the rest of the RSS library. Like most modules named some variant of\n'util', its methods are probably not particularly useful to those\nwho aren't developing the library itself.\n"}, {"c": "RSS::XML", "d": "\n"}, {"c": "RSS::XMLParserListener", "d": "\n"}, {"c": "RSS::XMLParserNotFound", "d": "\n"}, {"c": "RSS::XMLParserParser", "d": "\n"}, {"c": "RSS::XMLScanListener", "d": "\n"}, {"c": "RSS::XMLScanParser", "d": "\n"}, {"c": "RSS::XMLStyleSheet", "d": "\n"}, {"c": "RSS::XMLStyleSheetMixin", "d": "\n"}, {"c": "RSS::Atom::CommonModel", "d": "\n"}, {"c": "RSS::Atom::ContentModel", "d": "\n"}, {"c": "RSS::Atom::DateConstruct", "d": "\nElement used to describe an Atom date and time in the ISO 8601 format\nExamples:\n\n2013-03-04T15:30:02Z\n\n2013-03-04T10:30:02-05:00\n\n"}, {"c": "RSS::Atom::DuplicateLinkChecker", "d": "\n"}, {"c": "RSS::Atom::Entry", "d": "\nDefines a top-level Atom Entry element, used as the document element of a\nstand-alone Atom Entry\nDocument. It has the following attributes:\n\nauthor\n\ncategory\n\ncategories\n\ncontent\n\ncontributor\n\nid\n\nlink\n\npublished\n\nrights\n\nsource\n\nsummary\n\ntitle\n\nupdated\n\nReference: validator.w3.org/feed/docs/rfc4287.html#element.entry]\n"}, {"c": "RSS::Atom::Feed", "d": "\nDefines the top-level element of an Atom Feed Document. It consists of a number of children Entry elements, and has the following\nattributes:\n\nauthor\n\ncategories\n\ncategory\n\ncontent\n\ncontributor\n\nentries (aliased as items)\n\nentry\n\ngenerator\n\nicon\n\nid\n\nlink\n\nlogo\n\nrights\n\nsubtitle\n\ntitle\n\nupdated\n\nReference: validator.w3.org/feed/docs/rfc4287.html#element.feed\n"}, {"c": "RSS::Atom::PersonConstruct", "d": "\nThe PersonConstruct module is used to\ndefine a person Atom element that can be used to\ndescribe a person, corporation or similar entity.\nThe PersonConstruct has a Name, Uri and Email child elements.\nReference: validator.w3.org/feed/docs/rfc4287.html#atomPersonConstruct\n"}, {"c": "RSS::Atom::TextConstruct", "d": "\nThe TextConstruct module is used to define\na Text construct Atom element, which is used to\nstore small quantities of human-readable text.\nThe TextConstruct has a type attribute,\ne.g. text, html, xhtml\nReference: validator.w3.org/feed/docs/rfc4287.html#text.constructs\n"}, {"c": "RSS::Atom::URIContentModel", "d": "\n"}, {"c": "RSS::Atom::ContentModel::ClassMethods", "d": "\n"}, {"c": "RSS::Atom::Feed::Author", "d": "\nPersonConstruct that contains\ninformation regarding the author of a Feed or Entry.\nReference: validator.w3.org/feed/docs/rfc4287.html#element.author\n"}, {"c": "RSS::Atom::Feed::Category", "d": "\nContains information about a category associated with a Feed or Entry. It has the\nfollowing attributes:\n\nterm\n\nscheme\n\nlabel\n\nReference: validator.w3.org/feed/docs/rfc4287.html#element.category\n"}, {"c": "RSS::Atom::Feed::Contributor", "d": "\nPersonConstruct that contains\ninformation regarding the contributors of a Feed\nor Entry.\nReference: validator.w3.org/feed/docs/rfc4287.html#element.contributor\n"}, {"c": "RSS::Atom::Feed::Entry", "d": "\nDefines a child Atom Entry element of an Atom Feed element. It\nhas the following attributes:\n\nauthor\n\ncategory\n\ncategories\n\ncontent\n\ncontributor\n\nid\n\nlink\n\npublished\n\nrights\n\nsource\n\nsummary\n\ntitle\n\nupdated\n\nReference: validator.w3.org/feed/docs/rfc4287.html#element.entry\n"}, {"c": "RSS::Atom::Feed::Generator", "d": "\nContains information on the agent used to generate the feed.\nReference: validator.w3.org/feed/docs/rfc4287.html#element.generator\n"}, {"c": "RSS::Atom::Feed::Icon", "d": "\nDefines an image that provides a visual identification for a eed. The image\nshould have an aspect ratio of 1:1.\nReference: validator.w3.org/feed/docs/rfc4287.html#element.icon\n"}, {"c": "RSS::Atom::Feed::Id", "d": "\nDefines the Universally Unique Identifier (UUID) for a Feed or Entry.\nReference: validator.w3.org/feed/docs/rfc4287.html#element.id\n"}, {"c": "RSS::Atom::Feed::Link", "d": "\nDefines a reference to a Web resource. It has the following attributes:\n\nhref\n\nrel\n\ntype\n\nhreflang\n\ntitle\n\nlength\n\nReference: validator.w3.org/feed/docs/rfc4287.html#element.link\n"}, {"c": "RSS::Atom::Feed::Logo", "d": "\nDefines an image that provides a visual identification for the Feed. The image should have an aspect ratio of 2:1\n(horizontal:vertical).\nReference: validator.w3.org/feed/docs/rfc4287.html#element.logo\n"}, {"c": "RSS::Atom::Feed::Rights", "d": "\nTextConstruct that contains copyright\ninformation regarding the content in an Entry or\nFeed. It should not be used to convey machine\nreadable licensing information.\nReference: validator.w3.org/feed/docs/rfc4287.html#element.rights\n"}, {"c": "RSS::Atom::Feed::Subtitle", "d": "\nTextConstruct that conveys a\ndescription or subtitle for a Feed.\nReference: validator.w3.org/feed/docs/rfc4287.html#element.subtitle\n"}, {"c": "RSS::Atom::Feed::Title", "d": "\nTextConstruct that conveys a\ndescription or title for a Feed or Entry.\nReference: validator.w3.org/feed/docs/rfc4287.html#element.title\n"}, {"c": "RSS::Atom::Feed::Updated", "d": "\nDateConstruct indicating the most\nrecent time when a Feed or Entry was modified in a way the publisher considers\nsignificant.\nReference: validator.w3.org/feed/docs/rfc4287.html#element.updated\n"}, {"c": "RSS::Atom::Feed::Entry::Content", "d": "\nContains or links to the content of the Entry.\nIt has the following attributes:\n\ntype\n\nsrc\n\nReference: validator.w3.org/feed/docs/rfc4287.html#element.content\n"}, {"c": "RSS::Atom::Feed::Entry::Published", "d": "\nDateConstruct that usually indicates\nthe time of the initial creation of an Entry.\nReference: validator.w3.org/feed/docs/rfc4287.html#element.published\n"}, {"c": "RSS::Atom::Feed::Entry::Source", "d": "\nDefines a Atom Source element. It has the following attributes:\n\nauthor\n\ncategory\n\ncategories\n\ncontent\n\ncontributor\n\ngenerator\n\nicon\n\nid\n\nlink\n\nlogo\n\nrights\n\nsubtitle\n\ntitle\n\nupdated\n\nReference: validator.w3.org/feed/docs/rfc4287.html#element.source\n"}, {"c": "RSS::Atom::Feed::Entry::Summary", "d": "\nTextConstruct that describes a\nsummary of the Entry.\nReference: validator.w3.org/feed/docs/rfc4287.html#element.summary\n"}, {"c": "RSS::Atom::PersonConstruct::Email", "d": "\nThe email of the person or entity.\nReference: validator.w3.org/feed/docs/rfc4287.html#element.email\n"}, {"c": "RSS::Atom::PersonConstruct::Name", "d": "\nThe name of the person or entity.\nReference: validator.w3.org/feed/docs/rfc4287.html#element.name\n"}, {"c": "RSS::Atom::PersonConstruct::Uri", "d": "\nThe URI of the person or entity.\nReference: validator.w3.org/feed/docs/rfc4287.html#element.uri\n"}, {"c": "RSS::ImageFaviconModel::ImageFavicon", "d": "\n"}, {"c": "RSS::ImageItemModel::ImageItem", "d": "\n"}, {"c": "RSS::ITunesChannelModel::ITunesCategory", "d": "\n"}, {"c": "RSS::ITunesChannelModel::ITunesImage", "d": "\n"}, {"c": "RSS::ITunesChannelModel::ITunesOwner", "d": "\n"}, {"c": "RSS::ITunesItemModel::ITunesDuration", "d": "\n"}, {"c": "RSS::Maker::Atom", "d": "\n"}, {"c": "RSS::Maker::AtomCategory", "d": "\n"}, {"c": "RSS::Maker::AtomGenerator", "d": "\n"}, {"c": "RSS::Maker::AtomLink", "d": "\n"}, {"c": "RSS::Maker::AtomLogo", "d": "\n"}, {"c": "RSS::Maker::AtomPersonConstructBase", "d": "\n"}, {"c": "RSS::Maker::AtomPersons", "d": "\n"}, {"c": "RSS::Maker::AtomTextConstruct", "d": "\n"}, {"c": "RSS::Maker::AtomTextConstructBase", "d": "\n"}, {"c": "RSS::Maker::Base", "d": "\n"}, {"c": "RSS::Maker::ChannelBase", "d": "\n"}, {"c": "RSS::Maker::ContentModel", "d": "\n"}, {"c": "RSS::Maker::DublinCoreModel", "d": "\n"}, {"c": "RSS::Maker::ImageBase", "d": "\n"}, {"c": "RSS::Maker::ImageFaviconModel", "d": "\n"}, {"c": "RSS::Maker::ImageItemModel", "d": "\n"}, {"c": "RSS::Maker::ItemsBase", "d": "\n"}, {"c": "RSS::Maker::ITunesBaseModel", "d": "\n"}, {"c": "RSS::Maker::ITunesChannelModel", "d": "\n"}, {"c": "RSS::Maker::ITunesItemModel", "d": "\n"}, {"c": "RSS::Maker::RSS09", "d": "\n"}, {"c": "RSS::Maker::RSS091", "d": "\n"}, {"c": "RSS::Maker::RSS092", "d": "\n"}, {"c": "RSS::Maker::RSS10", "d": "\n"}, {"c": "RSS::Maker::RSS20", "d": "\n"}, {"c": "RSS::Maker::RSSBase", "d": "\n"}, {"c": "RSS::Maker::SetupDefaultDate", "d": "\n"}, {"c": "RSS::Maker::SetupDefaultLanguage", "d": "\n"}, {"c": "RSS::Maker::SlashModel", "d": "\n"}, {"c": "RSS::Maker::SyndicationModel", "d": "\n"}, {"c": "RSS::Maker::TaxonomyTopicModel", "d": "\n"}, {"c": "RSS::Maker::TaxonomyTopicsModel", "d": "\n"}, {"c": "RSS::Maker::TextinputBase", "d": "\n"}, {"c": "RSS::Maker::TrackBackModel", "d": "\n"}, {"c": "RSS::Maker::XMLStyleSheets", "d": "\n"}, {"c": "RSS::Maker::Atom::Entry", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed", "d": "\n"}, {"c": "RSS::Maker::Atom::Entry::Channel", "d": "\n"}, {"c": "RSS::Maker::Atom::Entry::Image", "d": "\n"}, {"c": "RSS::Maker::Atom::Entry::Items", "d": "\n"}, {"c": "RSS::Maker::Atom::Entry::Textinput", "d": "\n"}, {"c": "RSS::Maker::Atom::Entry::Channel::Cloud", "d": "\n"}, {"c": "RSS::Maker::Atom::Entry::Channel::Description", "d": "\n"}, {"c": "RSS::Maker::Atom::Entry::Channel::Generator", "d": "\n"}, {"c": "RSS::Maker::Atom::Entry::Channel::SkipDays", "d": "\n"}, {"c": "RSS::Maker::Atom::Entry::Channel::SkipHours", "d": "\n"}, {"c": "RSS::Maker::Atom::Entry::Channel::SkipDays::Day", "d": "\n"}, {"c": "RSS::Maker::Atom::Entry::Channel::SkipHours::Hour", "d": "\n"}, {"c": "RSS::Maker::Atom::Entry::Items::Item", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Channel", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Image", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Textinput", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Channel::Categories", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Channel::Cloud", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Channel::Generator", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Channel::Links", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Channel::SkipDays", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Channel::SkipHours", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Channel::Categories::Category", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Channel::Links::Link", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Channel::SkipDays::Day", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Channel::SkipHours::Hour", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Categories", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Content", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Enclosure", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Guid", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Links", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Source", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Categories::Category", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Links::Link", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Source::Categories", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Source::Generator", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Source::Icon", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Source::Links", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Source::Logo", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Source::Categories::Category", "d": "\n"}, {"c": "RSS::Maker::Atom::Feed::Items::Item::Source::Links::Link", "d": "\n"}, {"c": "RSS::Maker::AtomTextConstructBase::EnsureXMLContent", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::AuthorsBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::CategoriesBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::CloudBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::ContributorsBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::CopyrightBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::DescriptionBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::GeneratorBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::ITunesCategories", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::ITunesImage", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::ITunesOwner", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::LinksBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::SkipDaysBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::SkipHoursBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::TitleBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::AuthorsBase::AuthorBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::CategoriesBase::CategoryBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::ContributorsBase::ContributorBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::ITunesCategories::ITunesCategory", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::LinksBase::LinkBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::SkipDaysBase::DayBase", "d": "\n"}, {"c": "RSS::Maker::ChannelBase::SkipHoursBase::HourBase", "d": "\n"}, {"c": "RSS::Maker::ImageFaviconModel::ImageFaviconBase", "d": "\n"}, {"c": "RSS::Maker::ImageItemModel::ImageItemBase", "d": "\n"}, {"c": "RSS::Maker::ItemsBase::ItemBase", "d": "\n"}, {"c": "RSS::Maker::ItemsBase::ItemBase::ContentBase", "d": "\n"}, {"c": "RSS::Maker::ItemsBase::ItemBase::DescriptionBase", "d": "\n"}, {"c": "RSS::Maker::ItemsBase::ItemBase::EnclosureBase", "d": "\n"}, {"c": "RSS::Maker::ItemsBase::ItemBase::GuidBase", "d": "\n"}, {"c": "RSS::Maker::ItemsBase::ItemBase::ITunesDuration", "d": "\n"}, {"c": "RSS::Maker::ItemsBase::ItemBase::RightsBase", "d": "\n"}, {"c": "RSS::Maker::ItemsBase::ItemBase::SourceBase", "d": "\n"}, {"c": "RSS::Maker::ItemsBase::ItemBase::TitleBase", "d": "\n"}, {"c": "RSS::Maker::ItemsBase::ItemBase::SourceBase::IconBase", "d": "\n"}, {"c": "RSS::Maker::ItemsBase::ItemBase::SourceBase::LogoBase", "d": "\n"}, {"c": "RSS::Maker::ItemsBase::ItemBase::SourceBase::RightsBase", "d": "\n"}, {"c": "RSS::Maker::ItemsBase::ItemBase::SourceBase::SubtitleBase", "d": "\n"}, {"c": "RSS::Maker::ItemsBase::ItemBase::SourceBase::TitleBase", "d": "\n"}, {"c": "RSS::Maker::ITunesChannelModel::ITunesCategoriesBase", "d": "\n"}, {"c": "RSS::Maker::ITunesChannelModel::ITunesImageBase", "d": "\n"}, {"c": "RSS::Maker::ITunesChannelModel::ITunesOwnerBase", "d": "\n"}, {"c": "RSS::Maker::ITunesChannelModel::ITunesCategoriesBase::ITunesCategoryBase", "d": "\n"}, {"c": "RSS::Maker::ITunesItemModel::ITunesDurationBase", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel", "d": "\n"}, {"c": "RSS::Maker::RSS09::Image", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items", "d": "\n"}, {"c": "RSS::Maker::RSS09::Textinput", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::Authors", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::Categories", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::Cloud", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::Contributors", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::Copyright", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::Description", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::Generator", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::Links", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::SkipDays", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::SkipHours", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::Title", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::Authors::Author", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::Categories::Category", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::Contributors::Contributor", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::Links::Link", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::SkipDays::Day", "d": "\n"}, {"c": "RSS::Maker::RSS09::Channel::SkipHours::Hour", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Authors", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Categories", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Content", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Contributors", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Description", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Enclosure", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Guid", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Links", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Rights", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Title", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Authors::Author", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Categories::Category", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Contributors::Contributor", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Links::Link", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source::Authors", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source::Categories", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source::Contributors", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source::Generator", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source::Icon", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source::Links", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source::Logo", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source::Rights", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source::Subtitle", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source::Title", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source::Authors::Author", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source::Categories::Category", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source::Contributors::Contributor", "d": "\n"}, {"c": "RSS::Maker::RSS09::Items::Item::Source::Links::Link", "d": "\n"}, {"c": "RSS::Maker::RSS091::Channel", "d": "\n"}, {"c": "RSS::Maker::RSS091::Image", "d": "\n"}, {"c": "RSS::Maker::RSS091::Items", "d": "\n"}, {"c": "RSS::Maker::RSS091::Textinput", "d": "\n"}, {"c": "RSS::Maker::RSS091::Items::Item", "d": "\n"}, {"c": "RSS::Maker::RSS092::Channel", "d": "\n"}, {"c": "RSS::Maker::RSS092::Image", "d": "\n"}, {"c": "RSS::Maker::RSS092::Items", "d": "\n"}, {"c": "RSS::Maker::RSS092::Textinput", "d": "\n"}, {"c": "RSS::Maker::RSS092::Items::Item", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel", "d": "\n"}, {"c": "RSS::Maker::RSS10::Image", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items", "d": "\n"}, {"c": "RSS::Maker::RSS10::Textinput", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::Authors", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::Categories", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::Cloud", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::Contributors", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::Copyright", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::Description", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::Generator", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::Links", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::SkipDays", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::SkipHours", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::Title", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::Authors::Author", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::Categories::Category", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::Contributors::Contributor", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::Links::Link", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::SkipDays::Day", "d": "\n"}, {"c": "RSS::Maker::RSS10::Channel::SkipHours::Hour", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Authors", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Categories", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Content", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Contributors", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Description", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Enclosure", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Guid", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Links", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Rights", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Title", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Authors::Author", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Categories::Category", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Contributors::Contributor", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Links::Link", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source::Authors", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source::Categories", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source::Contributors", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source::Generator", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source::Icon", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source::Links", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source::Logo", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source::Rights", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source::Subtitle", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source::Title", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source::Authors::Author", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source::Categories::Category", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source::Contributors::Contributor", "d": "\n"}, {"c": "RSS::Maker::RSS10::Items::Item::Source::Links::Link", "d": "\n"}, {"c": "RSS::Maker::RSS20::Channel", "d": "\n"}, {"c": "RSS::Maker::RSS20::Image", "d": "\n"}, {"c": "RSS::Maker::RSS20::Items", "d": "\n"}, {"c": "RSS::Maker::RSS20::Textinput", "d": "\n"}, {"c": "RSS::Maker::RSS20::Channel::Categories", "d": "\n"}, {"c": "RSS::Maker::RSS20::Channel::Cloud", "d": "\n"}, {"c": "RSS::Maker::RSS20::Channel::Generator", "d": "\n"}, {"c": "RSS::Maker::RSS20::Channel::SkipDays", "d": "\n"}, {"c": "RSS::Maker::RSS20::Channel::SkipHours", "d": "\n"}, {"c": "RSS::Maker::RSS20::Channel::Categories::Category", "d": "\n"}, {"c": "RSS::Maker::RSS20::Channel::SkipDays::Day", "d": "\n"}, {"c": "RSS::Maker::RSS20::Channel::SkipHours::Hour", "d": "\n"}, {"c": "RSS::Maker::RSS20::Items::Item", "d": "\n"}, {"c": "RSS::Maker::RSS20::Items::Item::Authors", "d": "\n"}, {"c": "RSS::Maker::RSS20::Items::Item::Categories", "d": "\n"}, {"c": "RSS::Maker::RSS20::Items::Item::Enclosure", "d": "\n"}, {"c": "RSS::Maker::RSS20::Items::Item::Guid", "d": "\n"}, {"c": "RSS::Maker::RSS20::Items::Item::Source", "d": "\n"}, {"c": "RSS::Maker::RSS20::Items::Item::Authors::Author", "d": "\n"}, {"c": "RSS::Maker::RSS20::Items::Item::Categories::Category", "d": "\n"}, {"c": "RSS::Maker::RSS20::Items::Item::Source::Links", "d": "\n"}, {"c": "RSS::Maker::RSS20::Items::Item::Source::Links::Link", "d": "\n"}, {"c": "RSS::Maker::TaxonomyTopicModel::TaxonomyTopicsBase", "d": "\n"}, {"c": "RSS::Maker::TaxonomyTopicModel::TaxonomyTopicsBase::TaxonomyTopicBase", "d": "\n"}, {"c": "RSS::Maker::TaxonomyTopicsModel::TaxonomyTopicsBase", "d": "\n"}, {"c": "RSS::Maker::TrackBackModel::TrackBackAboutsBase", "d": "\n"}, {"c": "RSS::Maker::TrackBackModel::TrackBackAboutsBase::TrackBackAboutBase", "d": "\n"}, {"c": "RSS::Maker::XMLStyleSheets::XMLStyleSheet", "d": "\n"}, {"c": "RSS::TaxonomyTopicsModel::TaxonomyTopics::Bag", "d": "\n"}, {"c": "RSS::RDF::Channel", "d": "\n"}, {"c": "RSS::RDF::Image", "d": "\n"}, {"c": "RSS::RDF::Item", "d": "\n"}, {"c": "RSS::RDF::Seq::Li", "d": "\n"}, {"c": "RSS::RDF::Seq", "d": "\n"}, {"c": "RSS::RDF::Textinput", "d": "\n"}, {"c": "RSS::RDF::Channel::Image", "d": "\n"}, {"c": "RSS::RDF::Channel::Items", "d": "\n"}, {"c": "RSS::RDF::Channel::Textinput", "d": "\n"}, {"c": "RSS::Rss::Channel", "d": "\n"}, {"c": "RSS::Rss::Channel::Cloud", "d": "\n"}, {"c": "RSS::Rss::Channel::Image", "d": "\n"}, {"c": "RSS::Rss::Channel::Item", "d": "\n"}, {"c": "RSS::Rss::Channel::SkipDays", "d": "\n"}, {"c": "RSS::Rss::Channel::SkipHours", "d": "\n"}, {"c": "RSS::Rss::Channel::TextInput", "d": "\n"}, {"c": "RSS::Rss::Channel::Item::Category", "d": "\n"}, {"c": "RSS::Rss::Channel::Item::Enclosure", "d": "\n"}, {"c": "RSS::Rss::Channel::Item::Guid", "d": "\n"}, {"c": "RSS::Rss::Channel::Item::Source", "d": "\n"}, {"c": "RSS::Rss::Channel::SkipDays::Day", "d": "\n"}, {"c": "RSS::Rss::Channel::SkipHours::Hour", "d": "\n"}, {"c": "RSS::TaxonomyTopicModel::TaxonomyTopic", "d": "\n"}, {"c": "RSS::TaxonomyTopicsModel::TaxonomyTopics", "d": "\n"}, {"c": "RSS::TrackBackModel10::TrackBackAbout", "d": "\n"}, {"c": "RSS::TrackBackModel10::TrackBackPing", "d": "\n"}, {"c": "RSS::TrackBackModel20::TrackBackAbout", "d": "\n"}, {"c": "RSS::TrackBackModel20::TrackBackPing", "d": "\n"}, {"c": "RSS::Utils::CSV", "d": "\n"}, {"c": "RSS::Utils::ExplicitCleanOther", "d": "\n"}, {"c": "RSS::Utils::InheritedReader", "d": "\n"}, {"c": "RSS::Utils::YesOther", "d": "\n"}, {"c": "RSS::XML::Element", "d": "\n"}, {"c": "RubyToken::TkError", "d": "\n"}, {"c": "RubyToken::TkId", "d": "\n"}, {"c": "RubyToken::TkNode", "d": "\n"}, {"c": "RubyToken::TkOp", "d": "\n"}, {"c": "RubyToken::TkOPASGN", "d": "\n"}, {"c": "RubyToken::TkUnknownChar", "d": "\n"}, {"c": "RubyToken::TkVal", "d": "\n"}, {"c": "RubyToken::Token", "d": "\n"}, {"c": "RubyVM::InstructionSequence", "d": "\nThe InstructionSequence class\nrepresents a compiled sequence of instructions for the Ruby Virtual\nMachine.\nWith it, you can get a handle to the instructions that make up a method or\na proc, compile strings of Ruby code down to VM instructions, and\ndisassemble instruction sequences to strings for easy inspection. It is\nmostly useful if you want to learn how the Ruby VM works, but it also lets\nyou control various settings for the Ruby iseq compiler.\nYou can find the source for the VM instructions in insns.def\nin the Ruby source.\nThe instruction sequence results will almost certainly change as Ruby\nchanges, so example output in this documentation may be different from what\nyou see.\n"}, {"c": "Scanf::FormatSpecifier", "d": "\n"}, {"c": "Scanf::FormatString", "d": "\n"}, {"c": "Shell::AppendFile", "d": "\n"}, {"c": "Shell::AppendIO", "d": "\n"}, {"c": "Shell::BuiltInCommand", "d": "\n"}, {"c": "Shell::Cat", "d": "\n"}, {"c": "Shell::CommandProcessor", "d": "\nIn order to execute a command on your OS, you need to define it as a Shell method.\nAlternatively, you can execute any command via #system even if it is not\ndefined.\n"}, {"c": "Shell::Concat", "d": "\n"}, {"c": "Shell::Echo", "d": "\n"}, {"c": "Shell::Error", "d": "\n"}, {"c": "Shell::Filter", "d": "\nAny result of command execution is a Filter.\nThis class includes Enumerable, therefore\na Filter object can use all Enumerable facilities.\n"}, {"c": "Shell::Glob", "d": "\n"}, {"c": "Shell::ProcessController", "d": "\n"}, {"c": "Shell::SystemCommand", "d": "\n"}, {"c": "Shell::Tee", "d": "\n"}, {"c": "Shell::Thread", "d": "\n"}, {"c": "Shell::Void", "d": "\n"}, {"c": "Socket::AncillaryData", "d": "\nSocket::AncillaryData represents the\nancillary data (control information) used by sendmsg and recvmsg system\ncall.  It contains socket family, control message\n(cmsg) level, cmsg type and cmsg data.\n"}, {"c": "Socket::Constants", "d": "\nSocket::Constants provides socket-related\nconstants.  All possible socket constants are listed in the documentation\nbut they may not all be present on your platform.\nIf the underlying platform doesn't define a constant the corresponding\nRuby constant is not defined.\n"}, {"c": "Socket::Ifaddr", "d": "\nSocket::Ifaddr represents a result of\ngetifaddrs() function.\n"}, {"c": "Socket::Option", "d": "\nSocket::Option represents a socket option used by\nBasicSocket#getsockopt\nand BasicSocket#setsockopt. \nA socket option contains the socket family, protocol level, option name optname and option value data.\n"}, {"c": "Socket::UDPSource", "d": "\nUDP/IP address information used by Socket.udp_server_loop.\n"}, {"c": "StringScanner::Error", "d": "\n"}, {"c": "Sync_m::Err", "d": "\nexceptions\n"}, {"c": "Sync_m::Err::LockModeFailer", "d": "\n"}, {"c": "Sync_m::Err::UnknownLocker", "d": "\n"}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": null, "d": ""}, {"c": "Syslog::Constants", "d": "\n"}, {"c": "Syslog::Facility", "d": "\n"}, {"c": "Syslog::Level", "d": "\n"}, {"c": "Syslog::Logger", "d": "\nSyslog::Logger is a Logger work-alike that logs via syslog instead of to\na file.  You can use Syslog::Logger to aggregate\nlogs between multiple machines.\nBy default, Syslog::Logger uses the program name\n'ruby', but this can be changed via the first argument to ::new.\nNOTE! You can only set the Syslog::Logger program\nname when you initialize Syslog::Logger for the\nfirst time.  This is a limitation of the way Syslog::Logger uses syslog (and in some ways, a\nlimitation of the way syslog(3) works).  Attempts to change\nSyslog::Logger's program name after the first initialization will be\nignored.\nExample\u00b6 \u2191\nThe following will log to syslogd on your local machine:\nrequire 'syslog/logger'\n\nlog = Syslog::Logger.new 'my_program'\nlog.info 'this line will be logged via syslog(3)'\n\nAlso the facility may be set to specify the facility level which will be\nused:\nlog.info 'this line will be logged using Syslog default facility level'\n\nlog_local1 = Syslog::Logger.new 'my_program', Syslog::LOG_LOCAL1\nlog_local1.info 'this line will be logged using local1 facility level'\n\nYou may need to perform some syslog.conf setup first.  For a BSD machine\nadd the following lines to /etc/syslog.conf:\n!my_program\n*.*                                             /var/log/my_program.log\nThen touch /var/log/my_program.log and signal syslogd with a HUP (killall\n-HUP syslogd, on FreeBSD).\nIf you wish to have logs automatically roll over and archive, see the\nnewsyslog.conf(5) and newsyslog(8) man pages.\n"}, {"c": "Syslog::Macros", "d": "\n"}, {"c": "Syslog::Option", "d": "\n"}, {"c": "Syslog::Logger::Formatter", "d": "\nDefault formatter for log messages.\n"}, {"c": "Syslog::Logger::Severity", "d": "\n"}, {"c": "Tempfile::Remover", "d": "\n"}, {"c": "Thread::Backtrace", "d": "\n"}, {"c": "Thread::Backtrace::Location", "d": "\nAn object representation of a stack frame, initialized by Kernel#caller_locations.\nFor example:\n# caller_locations.rb\ndef a(skip)\n  caller_locations(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\n\nc(0..2).map do |call|\n  puts call.to_s\nend\n\nRunning ruby caller_locations.rb will produce:\ncaller_locations.rb:2:in `a'\ncaller_locations.rb:5:in `b'\ncaller_locations.rb:8:in `c'\nHere's another example with a slightly different result:\n# foo.rb\nclass Foo\n  attr_accessor :locations\n  def initialize(skip)\n    @locations = caller_locations(skip)\n  end\nend\n\nFoo.new(0..2).locations.map do |call|\n  puts call.to_s\nend\n\nNow run ruby foo.rb and you should see:\ninit.rb:4:in `initialize'\ninit.rb:8:in `new'\ninit.rb:8:in `<main>'\n"}, {"c": "Timeout::Error", "d": "\nRaised by Timeout#timeout\nwhen the block times out.\n"}, {"c": "Timeout::TimeoutError", "d": "\nRaised by Timeout#timeout\nwhen the block times out.\n"}, {"c": "Tracer::Thread", "d": "\n"}, {"c": "TSort::Cyclic", "d": "\n"}, {"c": "URI::BadURIError", "d": "\nURI is valid, bad usage is not.\n"}, {"c": "URI::Error", "d": "\nBase class for all URI exceptions.\n"}, {"c": "URI::Escape", "d": "\nmodule for escaping unsafe characters with codes.\n"}, {"c": "URI::FTP", "d": "\nFTP URI syntax is defined\nby RFC1738 section 3.2.\nThis class will be redesigned because of difference of implementations; the\nstructure of its path. draft-hoffman-ftp-uri-04 is a draft but it is a good\nsummary about the de facto spec. tools.ietf.org/html/draft-hoffman-ftp-uri-04\n"}, {"c": "URI::Generic", "d": "\nBase class for all URI classes. Implements\ngeneric URI syntax as per RFC 2396.\n"}, {"c": "URI::HTTP", "d": "\nThe syntax of HTTP URIs is defined in RFC1738\nsection 3.3.\nNote that the Ruby URI library allows HTTP URLs containing usernames and passwords. This is\nnot legal as per the RFC, but used to be supported in Internet Explorer 5\nand 6, before the MS04-004 security update. See <URL:support.microsoft.com/kb/834489>.\n"}, {"c": "URI::HTTPS", "d": "\nThe default port for HTTPS URIs is 443, and the\nscheme is 'https:' rather than 'http:'. Other than that, HTTPS URIs are identical to HTTP URIs; see URI::HTTP.\n"}, {"c": "URI::InvalidComponentError", "d": "\nNot a URI component.\n"}, {"c": "URI::InvalidURIError", "d": "\nNot a URI.\n"}, {"c": "URI::LDAP", "d": "\nLDAP URI SCHEMA\n(described in RFC2255) \n\n\nConstants\n\n\nCOMPONENT\n        \n        An Array of the available components for URI::LDAP\nDEFAULT_PORT\n        \n        A Default port of 389 for URI::LDAP\nSCOPE\n        \n        Scopes available for the starting point.\n\nSCOPE_BASE - the Base DN\n\nSCOPE_ONE  - one level under the Base DN, not including the base DN and\nnot including any entries under this.\n\nSCOPE_SUB  - subtress, all entries at all levels\n\n\n\n\n\nPublic Class Methods\n\n\n\nbuild(args)\nclick to toggle source\n\n\nDescription\u00b6 \u2191\nCreate a new URI::LDAP object from components, with\nsyntax checking.\nThe components accepted are host, port, dn, attributes, scope, filter, and\nextensions.\nThe components should be provided either as an Array, or as a Hash with keys formed by preceding the component\nnames with a colon.\nIf an Array is used, the components must be passed in the order [host,\nport, dn, attributes, scope, filter, extensions].\nExample:\nnewuri = URI::LDAP.build({:host => 'ldap.example.com',\n  :dn> => '/dc=example'})\n\nnewuri = URI::LDAP.build([\"ldap.example.com\", nil,\n  \"/dc=example;dc=com\", \"query\", nil, nil, nil])\n\n              Calls superclass method\n              URI::Generic.build\n\n\n# File lib/uri/ldap.rb, line 73\ndef self.build(args)\n  tmp = Util::make_components_hash(self, args)\n\n  if tmp[:dn]\n    tmp[:path] = tmp[:dn]\n  end\n\n  query = []\n  [:extensions, :filter, :scope, :attributes].collect do |x|\n    next if !tmp[x] && query.size == 0\n    query.unshift(tmp[x])\n  end\n\n  tmp[:query] = query.join('?')\n\n  return super(tmp)\nend\n\n\n\n\n\nnew(*arg)\nclick to toggle source\n\n\nDescription\u00b6 \u2191\nCreate a new URI::LDAP object from generic URI components as per RFC 2396. No LDAP-specific\nsyntax checking is performed.\nArguments are scheme, userinfo,\nhost, port, registry,\npath, opaque, query and\nfragment, in that order.\nExample:\nuri = URI::LDAP.new(\"ldap\", nil, \"ldap.example.com\", nil,\n  \"/dc=example;dc=com\", \"query\", nil, nil, nil, nil)\n\nSee also URI::Generic.new\n\n              Calls superclass method\n              URI::Generic.new\n\n\n# File lib/uri/ldap.rb, line 108\ndef initialize(*arg)\n  super(*arg)\n\n  if @fragment\n    raise InvalidURIError, 'bad LDAP URL'\n  end\n\n  parse_dn\n  parse_query\nend\n\n\n\n\n\n\nPublic Instance Methods\n\n\n\nattributes()\nclick to toggle source\n\n\nreturns attributes.\n\n# File lib/uri/ldap.rb, line 177\ndef attributes\n  @attributes\nend\n\n\n\n\n\nattributes=(val)\nclick to toggle source\n\n\nsetter for attributes val\n\n# File lib/uri/ldap.rb, line 190\ndef attributes=(val)\n  set_attributes(val)\n  val\nend\n\n\n\n\n\ndn()\nclick to toggle source\n\n\nreturns dn.\n\n# File lib/uri/ldap.rb, line 158\ndef dn\n  @dn\nend\n\n\n\n\n\ndn=(val)\nclick to toggle source\n\n\nsetter for dn val\n\n# File lib/uri/ldap.rb, line 171\ndef dn=(val)\n  set_dn(val)\n  val\nend\n\n\n\n\n\nextensions()\nclick to toggle source\n\n\nreturns extensions.\n\n# File lib/uri/ldap.rb, line 234\ndef extensions\n  @extensions\nend\n\n\n\n\n\nextensions=(val)\nclick to toggle source\n\n\nsetter for extensions val\n\n# File lib/uri/ldap.rb, line 247\ndef extensions=(val)\n  set_extensions(val)\n  val\nend\n\n\n\n\n\nfilter()\nclick to toggle source\n\n\nreturns filter.\n\n# File lib/uri/ldap.rb, line 215\ndef filter\n  @filter\nend\n\n\n\n\n\nfilter=(val)\nclick to toggle source\n\n\nsetter for filter val\n\n# File lib/uri/ldap.rb, line 228\ndef filter=(val)\n  set_filter(val)\n  val\nend\n\n\n\n\n\nhierarchical?()\nclick to toggle source\n\n\nChecks if URI has a path For URI::LDAP this will return false\n\n# File lib/uri/ldap.rb, line 254\ndef hierarchical?\n  false\nend\n\n\n\n\n\nscope()\nclick to toggle source\n\n\nreturns scope.\n\n# File lib/uri/ldap.rb, line 196\ndef scope\n  @scope\nend\n\n\n\n\n\nscope=(val)\nclick to toggle source\n\n\nsetter for scope val\n\n# File lib/uri/ldap.rb, line 209\ndef scope=(val)\n  set_scope(val)\n  val\nend\n\n\n\n\n\n\nProtected Instance Methods\n\n\n\nset_attributes(val)\nclick to toggle source\n\n\nprivate setter for attributes val\n\n# File lib/uri/ldap.rb, line 182\ndef set_attributes(val)\n  @attributes = val\n  build_path_query\n  @attributes\nend\n\n\n\n\n\nset_dn(val)\nclick to toggle source\n\n\nprivate setter for dn val\n\n# File lib/uri/ldap.rb, line 163\ndef set_dn(val)\n  @dn = val\n  build_path_query\n  @dn\nend\n\n\n\n\n\nset_extensions(val)\nclick to toggle source\n\n\nprivate setter for extensions val\n\n# File lib/uri/ldap.rb, line 239\ndef set_extensions(val)\n  @extensions = val\n  build_path_query\n  @extensions\nend\n\n\n\n\n\nset_filter(val)\nclick to toggle source\n\n\nprivate setter for filter val\n\n# File lib/uri/ldap.rb, line 220\ndef set_filter(val)\n  @filter = val\n  build_path_query\n  @filter\nend\n\n\n\n\n\nset_scope(val)\nclick to toggle source\n\n\nprivate setter for scope val\n\n# File lib/uri/ldap.rb, line 201\ndef set_scope(val)\n  @scope = val\n  build_path_query\n  @scope\nend\n\n\n\n\n\n\nPrivate Instance Methods\n\n\n\nbuild_path_query()\nclick to toggle source\n\n\nprivate method to assemble query from attributes,\nscope, filter and extensions.\n\n# File lib/uri/ldap.rb, line 145\ndef build_path_query\n  @path = '/' + @dn\n\n  query = []\n  [@extensions, @filter, @scope, @attributes].each do |x|\n    next if !x && query.size == 0\n    query.unshift(x)\n  end\n  @query = query.join('?')\nend\n\n\n\n\n\nparse_dn()\nclick to toggle source\n\n\nprivate method to cleanup dn from using the path\ncomponent attribute\n\n# File lib/uri/ldap.rb, line 120\ndef parse_dn\n  @dn = @path[1..-1]\nend\n\n\n\n\n\nparse_query()\nclick to toggle source\n\n\nprivate method to cleanup attributes, scope,\nfilter and extensions, from using the\nquery component attribute\n\n# File lib/uri/ldap.rb, line 127\ndef parse_query\n  @attributes = nil\n  @scope      = nil\n  @filter     = nil\n  @extensions = nil\n\n  if @query\n    attrs, scope, filter, extensions = @query.split('?')\n\n    @attributes = attrs if attrs && attrs.size > 0\n    @scope      = scope if scope && scope.size > 0\n    @filter     = filter if filter && filter.size > 0\n    @extensions = extensions if extensions && extensions.size > 0\n  end\nend\n\n\n\n\n"}, {"c": "URI::LDAPS", "d": "\nThe default port for LDAPS URIs is 636, and the\nscheme is 'ldaps:' rather than 'ldap:'. Other than that, LDAPS URIs are identical to LDAP URIs; see URI::LDAP.\n"}, {"c": "URI::MailTo", "d": "\nRFC6068, The mailto URL scheme\n"}, {"c": "URI::REGEXP", "d": "\n"}, {"c": "URI::RFC2396_Parser", "d": "\nclass that Parses String's into URI's\nIt contains a Hash set of patterns and\nRegexp's that match and validate.\n"}, {"c": "URI::RFC2396_REGEXP", "d": "\nIncludes URI::REGEXP::PATTERN\n"}, {"c": "URI::RFC2396_REGEXP::PATTERN", "d": "\nPatterns used to parse URI's\n"}, {"c": "Vector::ZeroVectorError", "d": "\n"}, {"c": "Warning::buffer", "d": "\n"}, {"c": "WeakRef::RefError", "d": "\nRefError is raised when a referenced object has\nbeen recycled by the garbage collector\n"}, {"c": "WEBrick::AccessLog", "d": "\nAccessLog provides logging to various files in\nvarious formats.\nMultiple logs may be written to at the same time:\naccess_log = [\n  [$stderr, WEBrick::AccessLog::COMMON_LOG_FORMAT],\n  [$stderr, WEBrick::AccessLog::REFERER_LOG_FORMAT],\n]\n\nserver = WEBrick::HTTPServer.new :AccessLog => access_log\n\nCustom log formats may be defined.  WEBrick::AccessLog provides a subset of the\nformatting from Apache's mod_log_config httpd.apache.org/docs/mod/mod_log_config.html#formats.\nSee AccessLog::setup_params for a list of supported options\n"}, {"c": "WEBrick::BasicLog", "d": "\nA generic logging class\n"}, {"c": "WEBrick::CGI", "d": "\nA CGI library using WEBrick requests and responses.\nExample:\nclass MyCGI < WEBrick::CGI\n  def do_GET req, res\n    res.body = 'it worked!'\n    res.status = 200\n  end\nend\n\nMyCGI.new.start\n\n"}, {"c": "WEBrick::Config", "d": "\n"}, {"c": "WEBrick::Cookie", "d": "\nProcesses HTTP cookies\n"}, {"c": "WEBrick::Daemon", "d": "\nA generic module for daemonizing a process\n"}, {"c": "WEBrick::GenericServer", "d": "\nBase TCP server class.  You must subclass GenericServer and provide a run method.\n"}, {"c": "WEBrick::HTMLUtils", "d": "\n"}, {"c": "WEBrick::HTTPAuth", "d": "\nHTTPAuth provides both basic and digest\nauthentication.\nTo enable authentication for requests in WEBrick you will need a user database and an\nauthenticator.  To start, here's an Htpasswd database for use with a DigestAuth authenticator:\nconfig = { :Realm => 'DigestAuth example realm' }\n\nhtpasswd = WEBrick::HTTPAuth::Htpasswd.new 'my_password_file'\nhtpasswd.auth_type = WEBrick::HTTPAuth::DigestAuth\nhtpasswd.set_passwd config[:Realm], 'username', 'password'\nhtpasswd.flush\n\nThe :Realm is used to provide different access to different\ngroups across several resources on a server.  Typically you'll need\nonly one realm for a server.\nThis database can be used to create an authenticator:\nconfig[:UserDB] = htpasswd\n\ndigest_auth = WEBrick::HTTPAuth::DigestAuth.new config\n\nTo authenticate a request call authenticate with a request and response\nobject in a servlet:\ndef do_GET req, res\n  @authenticator.authenticate req, res\nend\n\nFor digest authentication the authenticator must not be created every\nrequest, it must be passed in as an option via WEBrick::HTTPServer#mount.\n"}, {"c": "WEBrick::HTTPProxyServer", "d": "\nAn HTTP Proxy server which proxies GET, HEAD and POST requests.\nTo create a simple proxy server:\nrequire 'webrick'\nrequire 'webrick/httpproxy'\n\nproxy = WEBrick::HTTPProxyServer.new Port: 8000\n\ntrap 'INT'  do proxy.shutdown end\ntrap 'TERM' do proxy.shutdown end\n\nproxy.start\n\nSee ::new for\nproxy-specific configuration items.\nModifying proxied responses\u00b6 \u2191\nTo modify content the proxy server returns use the\n:ProxyContentHandler option:\nhandler = proc do |req, res|\n  if res['content-type'] == 'text/plain' then\n    res.body << \"\\nThis content was proxied!\\n\"\n  end\nend\n\nproxy =\n  WEBrick::HTTPProxyServer.new Port: 8000, ProxyContentHandler: handler\n\n"}, {"c": "WEBrick::HTTPRequest", "d": "\nAn HTTP request.  This is consumed by service and do_* methods in WEBrick servlets\n"}, {"c": "WEBrick::HTTPResponse", "d": "\nAn HTTP response.  This is filled in by the service or do_* methods of a WEBrick HTTP Servlet.\n"}, {"c": "WEBrick::HTTPServer", "d": "\nAn HTTP Server\n"}, {"c": "WEBrick::HTTPServerError", "d": "\n"}, {"c": "WEBrick::HTTPServlet", "d": "\n"}, {"c": "WEBrick::HTTPStatus", "d": "\nThis module is used to manager HTTP status codes.\nSee www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\nfor more information.\n"}, {"c": "WEBrick::HTTPUtils", "d": "\nHTTPUtils provides utility methods for working\nwith the HTTP protocol.\nThis module is generally used internally by WEBrick\n"}, {"c": "WEBrick::HTTPVersion", "d": "\nRepresents an HTTP protocol version\n"}, {"c": "WEBrick::Log", "d": "\nA logging class that prepends a timestamp to each message.\n"}, {"c": "WEBrick::ServerError", "d": "\nServer error exception\n"}, {"c": "WEBrick::SimpleServer", "d": "\nBase server class\n"}, {"c": "WEBrick::SNIRequest", "d": "\n"}, {"c": "WEBrick::Utils", "d": "\n"}, {"c": "WEBrick::AccessLog::AccessLogError", "d": "\nRaised if a parameter such as %e, %i, %o or %n is used without fetching a\nspecific field.\n"}, {"c": "WEBrick::HTTPAuth::Authenticator", "d": "\nModule providing generic support for both\nDigest and Basic authentication schemes.\n"}, {"c": "WEBrick::HTTPAuth::BasicAuth", "d": "\nBasic Authentication for WEBrick\nUse this class to add basic authentication to a WEBrick servlet.\nHere is an example of how to set up a BasicAuth:\nconfig = { :Realm => 'BasicAuth example realm' }\n\nhtpasswd = WEBrick::HTTPAuth::Htpasswd.new 'my_password_file'\nhtpasswd.set_passwd config[:Realm], 'username', 'password'\nhtpasswd.flush\n\nconfig[:UserDB] = htpasswd\n\nbasic_auth = WEBrick::HTTPAuth::BasicAuth.new config\n\n"}, {"c": "WEBrick::HTTPAuth::DigestAuth", "d": "\nRFC 2617 Digest Access Authentication for\nWEBrick\nUse this class to add digest authentication to a WEBrick servlet.\nHere is an example of how to set up DigestAuth:\nconfig = { :Realm => 'DigestAuth example realm' }\n\nhtdigest = WEBrick::HTTPAuth::Htdigest.new 'my_password_file'\nhtdigest.set_passwd config[:Realm], 'username', 'password'\nhtdigest.flush\n\nconfig[:UserDB] = htdigest\n\ndigest_auth = WEBrick::HTTPAuth::DigestAuth.new config\n\nWhen using this as with a servlet be sure not to create a new DigestAuth object in the servlet's\ninitialize.  By default WEBrick creates a\nnew servlet instance for every request and the DigestAuth object must be used across requests.\n"}, {"c": "WEBrick::HTTPAuth::Htdigest", "d": "\nHtdigest accesses apache-compatible digest\npassword files.  Passwords are matched to a realm where they are valid. \nFor security, the path for a digest password database should be stored\noutside of the paths available to the HTTP server.\nHtdigest is intended for use with WEBrick::HTTPAuth::DigestAuth and stores\npasswords using cryptographic hashes.\nhtpasswd = WEBrick::HTTPAuth::Htdigest.new 'my_password_file'\nhtpasswd.set_passwd 'my realm', 'username', 'password'\nhtpasswd.flush\n\n"}, {"c": "WEBrick::HTTPAuth::Htgroup", "d": "\nHtgroup accesses apache-compatible group files. \nHtgroup can be used to provide group-based\nauthentication for users.  Currently Htgroup is\nnot directly integrated with any authenticators in WEBrick.  For security, the path for a digest\npassword database should be stored outside of the paths available to the\nHTTP server.\nExample:\nhtgroup = WEBrick::HTTPAuth::Htgroup.new 'my_group_file'\nhtgroup.add 'superheroes', %w[spiderman batman]\n\nhtgroup.members('superheroes').include? 'magneto' # => false\n\n"}, {"c": "WEBrick::HTTPAuth::Htpasswd", "d": "\nHtpasswd accesses apache-compatible password\nfiles.  Passwords are matched to a realm where they are valid.  For\nsecurity, the path for a password database should be stored outside of the\npaths available to the HTTP server.\nHtpasswd is intended for use with WEBrick::HTTPAuth::BasicAuth.\nTo create an Htpasswd database with a single\nuser:\nhtpasswd = WEBrick::HTTPAuth::Htpasswd.new 'my_password_file'\nhtpasswd.set_passwd 'my realm', 'username', 'password'\nhtpasswd.flush\n\n"}, {"c": "WEBrick::HTTPAuth::ProxyAuthenticator", "d": "\nModule providing generic support for both\nDigest and Basic authentication schemes for\nproxies.\n"}, {"c": "WEBrick::HTTPAuth::ProxyBasicAuth", "d": "\nBasic authentication for proxy servers.  See BasicAuth for details.\n"}, {"c": "WEBrick::HTTPAuth::ProxyDigestAuth", "d": "\nDigest authentication for proxy servers. \nSee DigestAuth for details.\n"}, {"c": "WEBrick::HTTPAuth::UserDB", "d": "\nUser database mixin for HTTPAuth.  This\nmixin dispatches user record access to the underlying #auth_type for this database.\n"}, {"c": "WEBrick::HTTPResponse::ChunkedWrapper", "d": "\n"}, {"c": "WEBrick::HTTPResponse::InvalidHeader", "d": "\n"}, {"c": "WEBrick::HTTPServlet::AbstractServlet", "d": "\nAbstractServlet allows HTTP server\nmodules to be reused across multiple servers and allows encapsulation of\nfunctionality.\nBy default a servlet will respond to GET, HEAD (through an alias to GET)\nand OPTIONS requests.\nBy default a new servlet is initialized for every request.  A servlet\ninstance can be reused by overriding ::get_instance in the\nAbstractServlet subclass.\nA Simple Servlet\u00b6 \u2191\nclass Simple < WEBrick::HTTPServlet::AbstractServlet\n  def do_GET request, response\n    status, content_type, body = do_stuff_with request\n\n    response.status = status\n    response['Content-Type'] = content_type\n    response.body = body\n  end\n\n  def do_stuff_with request\n    return 200, 'text/plain', 'you got a page'\n  end\nend\n\nThis servlet can be mounted on a server at a given path:\nserver.mount '/simple', Simple\n\nServlet Configuration\u00b6 \u2191\nServlets can be configured via initialize.  The first argument is the HTTP\nserver the servlet is being initialized for.\nclass Configurable < Simple\n  def initialize server, color, size\n    super server\n    @color = color\n    @size = size\n  end\n\n  def do_stuff_with request\n    content = \"<p \" \\\n              %q{style=\"color: #{@color}; font-size: #{@size}\"} \\\n              \">Hello, World!\"\n\n    return 200, \"text/html\", content\n  end\nend\nThis servlet must be provided two arguments at mount time:\nserver.mount '/configurable', Configurable, 'red', '2em'\n\n"}, {"c": "WEBrick::HTTPServlet::CGIHandler", "d": "\nServlet for handling CGI scripts\nExample:\nserver.mount('/cgi/my_script', WEBrick::HTTPServlet::CGIHandler,\n             '/path/to/my_script')\n\n"}, {"c": "WEBrick::HTTPServlet::DefaultFileHandler", "d": "\nServlet for serving a single file.  You probably want to use the FileHandler servlet instead as it handles\ndirectories and fancy indexes.\nExample:\nserver.mount('/my_page.txt', WEBrick::HTTPServlet::DefaultFileHandler,\n             '/path/to/my_page.txt')\n\nThis servlet handles If-Modified-Since and Range requests.\n"}, {"c": "WEBrick::HTTPServlet::ERBHandler", "d": "\nERBHandler evaluates an ERB file and returns the result.  This handler is\nautomatically used if there are .rhtml files in a directory served by the\nFileHandler.\nERBHandler supports GET and POST methods.\nThe ERB file is evaluated with the local\nvariables servlet_request and servlet_response\nwhich are a WEBrick::HTTPRequest and WEBrick::HTTPResponse respectively.\nExample .rhtml file:\nRequest to <%= servlet_request.request_uri %>\n\nQuery params <%= servlet_request.query.inspect %>\n"}, {"c": "WEBrick::HTTPServlet::FileHandler", "d": "\nServes a directory including fancy indexing and a variety of other options.\nExample:\nserver.mount('/assets', WEBrick::HTTPServlet::FileHandler,\n             '/path/to/assets')\n\n"}, {"c": "WEBrick::HTTPServlet::HTTPServletError", "d": "\n"}, {"c": "WEBrick::HTTPServlet::ProcHandler", "d": "\nMounts a proc at a path that accepts a request and response.\nInstead of mounting this servlet with WEBrick::HTTPServer#mount use\nWEBrick::HTTPServer#mount_proc:\nserver.mount_proc '/' do |req, res|\n  res.body = 'it worked!'\n  res.status = 200\nend\n\n"}, {"c": "WEBrick::HTTPStatus::ClientError", "d": "\nRoot of the HTTP client error statuses\n"}, {"c": "WEBrick::HTTPStatus::EOFError", "d": "\n"}, {"c": "WEBrick::HTTPStatus::Error", "d": "\nRoot of the HTTP error statuses\n"}, {"c": "WEBrick::HTTPStatus::Info", "d": "\nRoot of the HTTP info statuses\n"}, {"c": "WEBrick::HTTPStatus::Redirect", "d": "\nRoot of the HTTP redirect statuses\n"}, {"c": "WEBrick::HTTPStatus::ServerError", "d": "\nRoot of the HTTP server error statuses\n"}, {"c": "WEBrick::HTTPStatus::Status", "d": "\nRoot of the HTTP status class hierarchy\n"}, {"c": "WEBrick::HTTPStatus::Success", "d": "\nRoot of the HTTP success statuses\n"}, {"c": "WEBrick::HTTPUtils::FormData", "d": "\nStores multipart form data.  FormData objects\nare created when WEBrick::HTTPUtils#parse_form_data\nis called.\n"}, {"c": "WEBrick::Utils::TimeoutHandler", "d": "\nClass used to manage timeout handlers across\nmultiple threads.\nTimeout handlers should be managed by\nusing the class methods which are synchronized.\nid = TimeoutHandler.register(10, Timeout::Error)\nbegin\n  sleep 20\n  puts 'foo'\nensure\n  TimeoutHandler.cancel(id)\nend\n\nwill raise Timeout::Error\nid = TimeoutHandler.register(10, Timeout::Error)\nbegin\n  sleep 5\n  puts 'foo'\nensure\n  TimeoutHandler.cancel(id)\nend\n\nwill print 'foo'\n"}, {"c": "WIN32OLE::VARIANT", "d": "\nThe WIN32OLE::VARIANT module includes constants\nof VARIANT type constants. The constants is used\nwhen creating WIN32OLE_VARIANT\nobject.\nobj = WIN32OLE_VARIANT.new(\"2e3\", WIN32OLE::VARIANT::VT_R4)\nobj.value # => 2000.0\n\n"}, {"c": "XML::Parser", "d": "\n"}, {"c": "XMLEncoding_ja::SJISHandler", "d": "\n"}, {"c": "XMP::StringInputMethod", "d": "\nA custom InputMethod class used by XMP for\nevaluating string io.\n"}, {"c": "YAML::DBM", "d": "\nYAML + DBM = YDBM\nYAML::DBM provides the same interface as ::DBM.\nHowever, while DBM only allows strings for both keys\nand values, this library allows one to use most Ruby objects for values by\nfirst converting them to YAML. Keys must be strings.\nConversion to and from YAML is performed automatically.\nSee the documentation for ::DBM and ::YAML for\nmore information.\n"}, {"c": "YAML::Store", "d": "\nYAML::Store provides the same functionality as PStore, except it uses YAML to dump objects\ninstead of Marshal.\nExample\u00b6 \u2191\nrequire 'yaml/store'\n\nPerson = Struct.new :first_name, :last_name\n\npeople = [Person.new(\"Bob\", \"Smith\"), Person.new(\"Mary\", \"Johnson\")]\n\nstore = YAML::Store.new \"test.store\"\n\nstore.transaction do\n  store[\"people\"] = people\n  store[\"greeting\"] = { \"hello\" => \"world\" }\nend\n\nAfter running the above code, the contents of \u00e2\u20ac\u0153test.store\u00e2\u20ac will be:\n---\npeople:\n- !ruby/struct:Person\n  first_name: Bob\n  last_name: Smith\n- !ruby/struct:Person\n  first_name: Mary\n  last_name: Johnson\ngreeting:\n  hello: world\n"}, {"c": "YAML::Syck", "d": "\nNow that we've got something that is always here, define to_s so when\ncode tries to use this, it at least just shows up like it should.\n"}, {"c": "Zlib::BufError", "d": "\nSubclass of Zlib::Error when zlib returns a\nZ_BUF_ERROR.\nUsually if no progress is possible.\n"}, {"c": "Zlib::DataError", "d": "\nSubclass of Zlib::Error when zlib returns a\nZ_DATA_ERROR.\nUsually if a stream was prematurely freed.\n"}, {"c": "Zlib::Deflate", "d": "\nZlib::Deflate is the class for compressing data.\nSee Zlib::ZStream for more information.\n"}, {"c": "Zlib::Error", "d": "\nThe superclass for all exceptions raised by Ruby/zlib.\nThe following exceptions are defined as subclasses of Zlib::Error. These exceptions are raised when zlib\nlibrary functions return with an error status.\n\nZlib::StreamEnd\n\nZlib::NeedDict\n\nZlib::DataError\n\nZlib::StreamError\n\nZlib::MemError\n\nZlib::BufError\n\nZlib::VersionError\n\n"}, {"c": "Zlib::GzipFile", "d": "\nZlib::GzipFile is an abstract class for\nhandling a gzip formatted compressed file. The operations are defined in\nthe subclasses, Zlib::GzipReader for reading,\nand Zlib::GzipWriter for writing.\nGzipReader should be used by associating an\nIO, or IO-like, object.\nMethod Catalogue\u00b6 \u2191\n\n::wrap\n\nKernel.open\n(Zlib::GzipReader::open and Zlib::GzipWriter.open)\n\nclose\n\nclosed?\n\ncomment\n\ncomment= (Zlib::GzipWriter#comment=)\n\ncrc\n\neof? (Zlib::GzipReader#eof?)\n\nfinish\n\nlevel\n\nlineno (Zlib::GzipReader#lineno)\n\nlineno= (Zlib::GzipReader#lineno=)\n\nmtime\n\nmtime= (Zlib::GzipWriter#mtime=)\n\norig_name\n\n#orig_name\n(Zlib::GzipWriter#orig_name=)\n\nos_code\n\npath (when the underlying IO supports path)\n\nsync\n\nsync=\n\nto_io\n\n(due to internal structure, documentation may appear under Zlib::GzipReader or Zlib::GzipWriter)\n"}, {"c": "Zlib::GzipReader", "d": "\nZlib::GzipReader is the class for reading a\ngzipped file.  GzipReader should be used as\nan IO, or -IO-like, object.\nZlib::GzipReader.open('hoge.gz') {|gz|\n  print gz.read\n}\n\nFile.open('hoge.gz') do |f|\n  gz = Zlib::GzipReader.new(f)\n  print gz.read\n  gz.close\nend\n\nMethod Catalogue\u00b6 \u2191\nThe following methods in Zlib::GzipReader are\njust like their counterparts in IO, but they raise\nZlib::Error or Zlib::GzipFile::Error exception if an error\nwas found in the gzip file.\n\neach\n\neach_line\n\neach_byte\n\ngets\n\ngetc\n\nlineno\n\nlineno=\n\nread\n\nreadchar\n\nreadline\n\nreadlines\n\nungetc\n\nBe careful of the footer of the gzip file. A gzip file has the checksum of\npre-compressed data in its footer. GzipReader\nchecks all uncompressed data against that checksum at the following cases,\nand if it fails, raises Zlib::GzipFile::NoFooter,\nZlib::GzipFile::CRCError, or\nZlib::GzipFile::LengthError exception.\n\nWhen an reading request is received beyond the end of file (the end of\ncompressed data). That is, when #read, #gets, or some other methods for\nreading returns nil.\n\nWhen Zlib::GzipFile#close method\nis called after the object reaches the end of file.\n\nWhen #unused method is called\nafter the object reaches the end of file.\n\nThe rest of the methods are adequately described in their own\ndocumentation.\n"}, {"c": "Zlib::GzipWriter", "d": "\nZlib::GzipWriter is a class for writing\ngzipped files.  GzipWriter should be used\nwith an instance of IO, or IO-like, object.\nFollowing two example generate the same result.\nZlib::GzipWriter.open('hoge.gz') do |gz|\n  gz.write 'jugemu jugemu gokou no surikire...'\nend\n\nFile.open('hoge.gz', 'w') do |f|\n  gz = Zlib::GzipWriter.new(f)\n  gz.write 'jugemu jugemu gokou no surikire...'\n  gz.close\nend\n\nTo make like gzip(1) does, run following:\norig = 'hoge.txt'\nZlib::GzipWriter.open('hoge.gz') do |gz|\n  gz.mtime = File.mtime(orig)\n  gz.orig_name = orig\n  gz.write IO.binread(orig)\nend\n\nNOTE: Due to the limitation of Ruby's finalizer, you must explicitly\nclose GzipWriter objects by Zlib::GzipFile#close etc. \nOtherwise, GzipWriter will be not able to\nwrite the gzip footer and will generate a broken gzip file.\n"}, {"c": "Zlib::Inflate", "d": "\nZlib:Inflate is the class for decompressing compressed data.  Unlike Zlib::Deflate, an instance of this class is not\nable to duplicate (clone, dup) itself.\n"}, {"c": "Zlib::MemError", "d": "\nSubclass of Zlib::Error\nWhen zlib returns a Z_MEM_ERROR, usually if there was not enough memory.\n"}, {"c": "Zlib::NeedDict", "d": "\nSubclass of Zlib::Error\nWhen zlib returns a Z_NEED_DICT if a preset dictionary is needed at this\npoint.\nUsed by Zlib::Inflate.inflate\nand Zlib.inflate\n"}, {"c": "Zlib::StreamEnd", "d": "\nSubclass of Zlib::Error\nWhen zlib returns a Z_STREAM_END is return if the end of the compressed\ndata has been reached and all uncompressed out put has been produced.\n"}, {"c": "Zlib::StreamError", "d": "\nSubclass of Zlib::Error\nWhen zlib returns a Z_STREAM_ERROR, usually if the stream state was\ninconsistent.\n"}, {"c": "Zlib::VersionError", "d": "\nSubclass of Zlib::Error\nWhen zlib returns a Z_VERSION_ERROR, usually if the zlib library version is\nincompatible with the version assumed by the caller.\n"}, {"c": "Zlib::ZStream", "d": "\nZlib::ZStream is the abstract class for the\nstream which handles the compressed data. The operations are defined in the\nsubclasses: Zlib::Deflate for compression, and\nZlib::Inflate for decompression.\nAn instance of Zlib::ZStream has one stream\n(struct zstream in the source) and two variable-length buffers which\nassociated to the input (next_in) of the stream and the output (next_out)\nof the stream. In this document, \u00e2\u20ac\u0153input buffer\u00e2\u20ac means the buffer for input,\nand \u00e2\u20ac\u0153output buffer\u00e2\u20ac means the buffer for output.\nData input into an instance of Zlib::ZStream are temporally stored into the end of\ninput buffer, and then data in input buffer are processed from the\nbeginning of the buffer until no more output from the stream is produced\n(i.e. until #avail_out > 0\nafter processing).  During processing, output buffer is allocated and\nexpanded automatically to hold all output data.\nSome particular instance methods consume the data in output buffer and\nreturn them as a String.\nHere is an ascii art for describing above:\n+================ an instance of Zlib::ZStream ================+\n||                                                            ||\n||     +--------+          +-------+          +--------+      ||\n||  +--| output |<---------|zstream|<---------| input  |<--+  ||\n||  |  | buffer |  next_out+-------+next_in   | buffer |   |  ||\n||  |  +--------+                             +--------+   |  ||\n||  |                                                      |  ||\n+===|======================================================|===+\n    |                                                      |\n    v                                                      |\n\"output data\"                                         \"input data\"\nIf an error occurs during processing input buffer, an exception which is a\nsubclass of Zlib::Error is raised.  At that time,\nboth input and output buffer keep their conditions at the time when the\nerror occurs.\nMethod Catalogue\u00b6 \u2191\nMany of the methods in this class are fairly low-level and unlikely to be\nof interest to users.  In fact, users are unlikely to use this class\ndirectly; rather they will be interested in Zlib::Inflate and Zlib::Deflate.\nThe higher level methods are listed below.\n\ntotal_in\n\ntotal_out\n\ndata_type\n\nadler\n\nreset\n\nfinish\n\nfinished?\n\nclose\n\nclosed?\n\n"}, {"c": "Zlib::GzipFile::CRCError", "d": "\nRaised when the CRC checksum recorded in gzip file footer is not equivalent\nto the CRC checksum of the actual uncompressed data.\n"}, {"c": "Zlib::GzipFile::Error", "d": "\nBase class of errors that occur when processing GZIP files.\n"}, {"c": "Zlib::GzipFile::LengthError", "d": "\nRaised when the data length recorded in the gzip file footer is not\nequivalent to the length of the actual uncompressed data.\n"}, {"c": "Zlib::GzipFile::NoFooter", "d": "\nRaised when gzip file footer is not found.\n"}]