[{"p": "ACL", "m": "ALLOW_DENY", "r": ""}, {"p": "ACL", "m": "DENY_ALLOW", "r": ""}, {"p": "ACL", "m": "VERSION", "r": ""}, {"p": "Addrinfo", "m": "afamily", "r": "integer"}, {"p": "Addrinfo", "m": "canonname", "r": "string or nil"}, {"p": "Addrinfo", "m": "connect([opts])", "r": ""}, {"p": "Addrinfo", "m": "connect([opts]) {|socket| ... }", "r": ""}, {"p": "Addrinfo", "m": "connect_from([local_addr_args], [opts])", "r": ""}, {"p": "Addrinfo", "m": "connect_from([local_addr_args], [opts]) {|socket| ... }", "r": ""}, {"p": "Addrinfo", "m": "connect_to([remote_addr_args], [opts])", "r": ""}, {"p": "Addrinfo", "m": "connect_to([remote_addr_args], [opts]) {|socket| ... }", "r": ""}, {"p": "Addrinfo", "m": "getaddrinfo(nodename, service)", "r": "[addrinfo, ...]"}, {"p": "Addrinfo", "m": "getaddrinfo(nodename, service, family)", "r": "[addrinfo, ...]"}, {"p": "Addrinfo", "m": "getaddrinfo(nodename, service, family, socktype)", "r": "[addrinfo, ...]"}, {"p": "Addrinfo", "m": "getaddrinfo(nodename, service, family, socktype, protocol)", "r": "[addrinfo, ...]"}, {"p": "Addrinfo", "m": "getaddrinfo(nodename, service, family, socktype, protocol, flags)", "r": "[addrinfo, ...]"}, {"p": "Addrinfo", "m": "getnameinfo", "r": "[nodename, service]"}, {"p": "Addrinfo", "m": "getnameinfo(flags)", "r": "[nodename, service]"}, {"p": "Addrinfo", "m": "inspect", "r": "string"}, {"p": "Addrinfo", "m": "inspect_sockaddr", "r": "string"}, {"p": "Addrinfo", "m": "ip(host)", "r": "addrinfo"}, {"p": "Addrinfo", "m": "ip?", "r": "true or false"}, {"p": "Addrinfo", "m": "ip_address", "r": "string"}, {"p": "Addrinfo", "m": "ip_port", "r": "port"}, {"p": "Addrinfo", "m": "ip_unpack", "r": "[addr, port]"}, {"p": "Addrinfo", "m": "ipv4?", "r": "true or false"}, {"p": "Addrinfo", "m": "ipv6?", "r": "true or false"}, {"p": "Addrinfo", "m": "new(sockaddr)", "r": "addrinfo"}, {"p": "Addrinfo", "m": "new(sockaddr, family)", "r": "addrinfo"}, {"p": "Addrinfo", "m": "new(sockaddr, family, socktype)", "r": "addrinfo"}, {"p": "Addrinfo", "m": "new(sockaddr, family, socktype, protocol)", "r": "addrinfo"}, {"p": "Addrinfo", "m": "pfamily", "r": "integer"}, {"p": "Addrinfo", "m": "protocol", "r": "integer"}, {"p": "Addrinfo", "m": "socktype", "r": "integer"}, {"p": "Addrinfo", "m": "tcp(host, port)", "r": "addrinfo"}, {"p": "Addrinfo", "m": "to_s", "r": "string"}, {"p": "Addrinfo", "m": "to_sockaddr", "r": "string"}, {"p": "Addrinfo", "m": "udp(host, port)", "r": "addrinfo"}, {"p": "Addrinfo", "m": "unix(path [, socktype])", "r": "addrinfo"}, {"p": "Addrinfo", "m": "unix?", "r": "true or false"}, {"p": "Addrinfo", "m": "unix_path", "r": "path"}, {"p": "ARGF", "m": "argv", "r": "ARGV"}, {"p": "ARGF", "m": "binmode", "r": "ARGF"}, {"p": "ARGF", "m": "binmode?", "r": "true or false"}, {"p": "ARGF", "m": "bytes", "r": "an_enumerator"}, {"p": "ARGF", "m": "bytes     {|byte| block }", "r": "ARGF"}, {"p": "ARGF", "m": "close", "r": "ARGF"}, {"p": "ARGF", "m": "closed?", "r": "true or false"}, {"p": "ARGF", "m": "each(...)", "r": "an_enumerator"}, {"p": "ARGF", "m": "each(sep=$/)             {|line| block }", "r": "ARGF"}, {"p": "ARGF", "m": "each(sep=$/, limit)      {|line| block }", "r": "ARGF"}, {"p": "ARGF", "m": "each_byte", "r": "an_enumerator"}, {"p": "ARGF", "m": "each_byte {|byte| block }", "r": "ARGF"}, {"p": "ARGF", "m": "each_char", "r": "an_enumerator"}, {"p": "ARGF", "m": "each_char {|char| block }", "r": "ARGF"}, {"p": "ARGF", "m": "each_codepoint", "r": "an_enumerator"}, {"p": "ARGF", "m": "each_codepoint {|codepoint| block }", "r": "ARGF"}, {"p": "ARGF", "m": "each_line(...)", "r": "an_enumerator"}, {"p": "ARGF", "m": "each_line(sep=$/)        {|line| block }", "r": "ARGF"}, {"p": "ARGF", "m": "each_line(sep=$/, limit) {|line| block }", "r": "ARGF"}, {"p": "ARGF", "m": "eof", "r": "true or false"}, {"p": "ARGF", "m": "eof?", "r": "true or false"}, {"p": "ARGF", "m": "external_encoding", "r": "encoding"}, {"p": "ARGF", "m": "file", "r": "IO or File object"}, {"p": "ARGF", "m": "filename", "r": "String"}, {"p": "ARGF", "m": "fileno", "r": "integer"}, {"p": "ARGF", "m": "getbyte", "r": "Integer or nil"}, {"p": "ARGF", "m": "getc", "r": "String or nil"}, {"p": "ARGF", "m": "gets(limit [, getline_args])", "r": "string or nil"}, {"p": "ARGF", "m": "gets(sep, limit [, getline_args])", "r": "string or nil"}, {"p": "ARGF", "m": "gets(sep=$/ [, getline_args])", "r": "string or nil"}, {"p": "ARGF", "m": "inplace_mode", "r": "String"}, {"p": "ARGF", "m": "inplace_mode = ext", "r": "ARGF"}, {"p": "ARGF", "m": "internal_encoding", "r": "encoding"}, {"p": "ARGF", "m": "lineno", "r": "integer"}, {"p": "ARGF", "m": "lineno = integer", "r": "integer"}, {"p": "ARGF", "m": "path", "r": "String"}, {"p": "ARGF", "m": "pos", "r": "Integer"}, {"p": "ARGF", "m": "pos = position", "r": "Integer"}, {"p": "ARGF", "m": "print", "r": "nil"}, {"p": "ARGF", "m": "print(obj, ...)", "r": "nil"}, {"p": "ARGF", "m": "printf(format_string [, obj, ...])", "r": "nil"}, {"p": "ARGF", "m": "putc(obj)", "r": "obj"}, {"p": "ARGF", "m": "puts(obj, ...)", "r": "nil"}, {"p": "ARGF", "m": "read([length [, outbuf]])", "r": "string, outbuf, or nil"}, {"p": "ARGF", "m": "read_nonblock(maxlen, outbuf[, options])", "r": "outbuf"}, {"p": "ARGF", "m": "read_nonblock(maxlen[, options])", "r": "string"}, {"p": "ARGF", "m": "readbyte", "r": "Integer"}, {"p": "ARGF", "m": "readchar", "r": "String or nil"}, {"p": "ARGF", "m": "readline(limit)", "r": "string"}, {"p": "ARGF", "m": "readline(sep, limit)", "r": "string"}, {"p": "ARGF", "m": "readline(sep=$/)", "r": "string"}, {"p": "ARGF", "m": "readlines(limit)", "r": "array"}, {"p": "ARGF", "m": "readlines(sep, limit)", "r": "array"}, {"p": "ARGF", "m": "readlines(sep=$/)", "r": "array"}, {"p": "ARGF", "m": "readpartial(maxlen)", "r": "string"}, {"p": "ARGF", "m": "readpartial(maxlen, outbuf)", "r": "outbuf"}, {"p": "ARGF", "m": "rewind", "r": "0"}, {"p": "ARGF", "m": "seek(amount, whence=IO::SEEK_SET)", "r": "0"}, {"p": "ARGF", "m": "set_encoding(\"ext_enc:int_enc\")", "r": "ARGF"}, {"p": "ARGF", "m": "set_encoding(\"ext_enc:int_enc\", opt)", "r": "ARGF"}, {"p": "ARGF", "m": "set_encoding(ext_enc)", "r": "ARGF"}, {"p": "ARGF", "m": "set_encoding(ext_enc, int_enc)", "r": "ARGF"}, {"p": "ARGF", "m": "set_encoding(ext_enc, int_enc, opt)", "r": "ARGF"}, {"p": "ARGF", "m": "skip", "r": "ARGF"}, {"p": "ARGF", "m": "tell", "r": "Integer"}, {"p": "ARGF", "m": "to_a(limit)", "r": "array"}, {"p": "ARGF", "m": "to_a(sep, limit)", "r": "array"}, {"p": "ARGF", "m": "to_a(sep=$/)", "r": "array"}, {"p": "ARGF", "m": "to_i", "r": "integer"}, {"p": "ARGF", "m": "to_io", "r": "IO"}, {"p": "ARGF", "m": "to_s", "r": "String"}, {"p": "ARGF", "m": "to_write_io", "r": "io"}, {"p": "ARGF", "m": "write(string)", "r": "integer"}, {"p": "Array", "m": "any? [{ |obj| block }]", "r": "true or false"}, {"p": "Array", "m": "ary & other_ary", "r": "new_ary"}, {"p": "Array", "m": "ary * int", "r": "new_ary"}, {"p": "Array", "m": "ary * str", "r": "new_string"}, {"p": "Array", "m": "ary + other_ary", "r": "new_ary"}, {"p": "Array", "m": "ary - other_ary", "r": "new_ary"}, {"p": "Array", "m": "ary << obj", "r": "ary"}, {"p": "Array", "m": "ary <=> other_ary", "r": "-1, 0, +1 or nil"}, {"p": "Array", "m": "ary == other_ary", "r": "bool"}, {"p": "Array", "m": "ary | other_ary", "r": "new_ary"}, {"p": "Array", "m": "ary[index]", "r": "obj     or nil"}, {"p": "Array", "m": "ary[index]         = obj", "r": "obj"}, {"p": "Array", "m": "ary[range]", "r": "new_ary or nil"}, {"p": "Array", "m": "ary[range]         = obj or other_ary or nil", "r": "obj or other_ary or nil"}, {"p": "Array", "m": "ary[start, length]", "r": "new_ary or nil"}, {"p": "Array", "m": "ary[start, length] = obj or other_ary or nil", "r": "obj or other_ary or nil"}, {"p": "Array", "m": "assoc(obj)", "r": "element_ary  or  nil"}, {"p": "Array", "m": "at(index)", "r": "obj  or nil"}, {"p": "Array", "m": "bsearch {|x| block }", "r": "elem"}, {"p": "Array", "m": "bsearch_index {|x| block }", "r": "int or nil"}, {"p": "Array", "m": "clear", "r": "ary"}, {"p": "Array", "m": "collect", "r": "Enumerator"}, {"p": "Array", "m": "collect { |item| block }", "r": "new_ary"}, {"p": "Array", "m": "collect!", "r": "Enumerator"}, {"p": "Array", "m": "collect! {|item| block }", "r": "ary"}, {"p": "Array", "m": "combination(n)", "r": "Enumerator"}, {"p": "Array", "m": "combination(n) { |c| block }", "r": "ary"}, {"p": "Array", "m": "compact", "r": "new_ary"}, {"p": "Array", "m": "compact!", "r": "ary  or  nil"}, {"p": "Array", "m": "concat(other_ary1, other_ary2,...)", "r": "ary"}, {"p": "Array", "m": "count", "r": "int"}, {"p": "Array", "m": "count { |item| block }", "r": "int"}, {"p": "Array", "m": "count(obj)", "r": "int"}, {"p": "Array", "m": "cycle(n=nil)", "r": "Enumerator"}, {"p": "Array", "m": "cycle(n=nil) { |obj| block }", "r": "nil"}, {"p": "Array", "m": "delete(obj)", "r": "item or nil"}, {"p": "Array", "m": "delete(obj) { block }", "r": "item or result of block"}, {"p": "Array", "m": "delete_at(index)", "r": "obj or nil"}, {"p": "Array", "m": "delete_if", "r": "Enumerator"}, {"p": "Array", "m": "delete_if { |item| block }", "r": "ary"}, {"p": "Array", "m": "dig(idx, ...)", "r": "object"}, {"p": "Array", "m": "drop(n)", "r": "new_ary"}, {"p": "Array", "m": "drop_while", "r": "Enumerator"}, {"p": "Array", "m": "drop_while { |obj| block }", "r": "new_ary"}, {"p": "Array", "m": "each", "r": "Enumerator"}, {"p": "Array", "m": "each { |item| block }", "r": "ary"}, {"p": "Array", "m": "each_index", "r": "Enumerator"}, {"p": "Array", "m": "each_index { |index| block }", "r": "ary"}, {"p": "Array", "m": "empty?", "r": "true or false"}, {"p": "Array", "m": "eql?(other)", "r": "true or false"}, {"p": "Array", "m": "fetch(index)", "r": "obj"}, {"p": "Array", "m": "fetch(index) { |index| block }", "r": "obj"}, {"p": "Array", "m": "fetch(index, default)", "r": "obj"}, {"p": "Array", "m": "fill { |index| block }", "r": "ary"}, {"p": "Array", "m": "fill(obj)", "r": "ary"}, {"p": "Array", "m": "fill(obj, range )", "r": "ary"}, {"p": "Array", "m": "fill(obj, start [, length])", "r": "ary"}, {"p": "Array", "m": "fill(range) { |index| block }", "r": "ary"}, {"p": "Array", "m": "fill(start [, length] ) { |index| block }", "r": "ary"}, {"p": "Array", "m": "find_index", "r": "Enumerator"}, {"p": "Array", "m": "find_index { |item| block }", "r": "int or nil"}, {"p": "Array", "m": "find_index(obj)", "r": "int or nil"}, {"p": "Array", "m": "first", "r": "obj or nil"}, {"p": "Array", "m": "first(n)", "r": "new_ary"}, {"p": "Array", "m": "flatten", "r": "new_ary"}, {"p": "Array", "m": "flatten!", "r": "ary or nil"}, {"p": "Array", "m": "flatten!(level)", "r": "ary or nil"}, {"p": "Array", "m": "flatten(level)", "r": "new_ary"}, {"p": "Array", "m": "frozen?", "r": "true or false"}, {"p": "Array", "m": "hash", "r": "integer"}, {"p": "Array", "m": "include?(object)", "r": "true or false"}, {"p": "Array", "m": "index", "r": "Enumerator"}, {"p": "Array", "m": "index { |item| block }", "r": "int or nil"}, {"p": "Array", "m": "index(obj)", "r": "int or nil"}, {"p": "Array", "m": "initialize_copy(other_ary)", "r": "ary"}, {"p": "Array", "m": "insert(index, obj...)", "r": "ary"}, {"p": "Array", "m": "inspect", "r": "string"}, {"p": "Array", "m": "join(separator=$,)", "r": "str"}, {"p": "Array", "m": "keep_if", "r": "Enumerator"}, {"p": "Array", "m": "keep_if { |item| block }", "r": "ary"}, {"p": "Array", "m": "last", "r": "obj or nil"}, {"p": "Array", "m": "last(n)", "r": "new_ary"}, {"p": "Array", "m": "length", "r": "int"}, {"p": "Array", "m": "map", "r": "Enumerator"}, {"p": "Array", "m": "map     { |item| block }", "r": "new_ary"}, {"p": "Array", "m": "map!", "r": "Enumerator"}, {"p": "Array", "m": "map!     {|item| block }", "r": "ary"}, {"p": "Array", "m": "max", "r": "obj"}, {"p": "Array", "m": "max { |a, b| block }", "r": "obj"}, {"p": "Array", "m": "max(n)", "r": "array"}, {"p": "Array", "m": "max(n) { |a, b| block }", "r": "array"}, {"p": "Array", "m": "min", "r": "obj"}, {"p": "Array", "m": "min {| a,b | block }", "r": "obj"}, {"p": "Array", "m": "min(n)", "r": "array"}, {"p": "Array", "m": "min(n) {| a,b | block }", "r": "array"}, {"p": "Array", "m": "new(array)", "r": ""}, {"p": "Array", "m": "new(size) {|index| block }", "r": ""}, {"p": "Array", "m": "new(size=0, default=nil)", "r": ""}, {"p": "Array", "m": "pack( aTemplateString )", "r": "aBinaryString"}, {"p": "Array", "m": "pack( aTemplateString, buffer: aBufferString )", "r": "aBufferString"}, {"p": "Array", "m": "permutation", "r": "Enumerator"}, {"p": "Array", "m": "permutation { |p| block }", "r": "ary"}, {"p": "Array", "m": "permutation(n)", "r": "Enumerator"}, {"p": "Array", "m": "permutation(n) { |p| block }", "r": "ary"}, {"p": "Array", "m": "pop", "r": "obj or nil"}, {"p": "Array", "m": "pop(n)", "r": "new_ary"}, {"p": "Array", "m": "product(other_ary, ...)", "r": "new_ary"}, {"p": "Array", "m": "product(other_ary, ...) { |p| block }", "r": "ary"}, {"p": "Array", "m": "push(obj, ... )", "r": "ary"}, {"p": "Array", "m": "rassoc(obj)", "r": "element_ary or nil"}, {"p": "Array", "m": "reject", "r": "Enumerator"}, {"p": "Array", "m": "reject  {|item| block }", "r": "new_ary"}, {"p": "Array", "m": "reject!", "r": "Enumerator"}, {"p": "Array", "m": "reject! { |item| block }", "r": "ary or nil"}, {"p": "Array", "m": "repeated_combination(n)", "r": "Enumerator"}, {"p": "Array", "m": "repeated_combination(n) { |c| block }", "r": "ary"}, {"p": "Array", "m": "repeated_permutation(n)", "r": "Enumerator"}, {"p": "Array", "m": "repeated_permutation(n) { |p| block }", "r": "ary"}, {"p": "Array", "m": "replace(other_ary)", "r": "ary"}, {"p": "Array", "m": "reverse", "r": "new_ary"}, {"p": "Array", "m": "reverse!", "r": "ary"}, {"p": "Array", "m": "reverse_each", "r": "Enumerator"}, {"p": "Array", "m": "reverse_each { |item| block }", "r": "ary"}, {"p": "Array", "m": "rindex", "r": "Enumerator"}, {"p": "Array", "m": "rindex { |item| block }", "r": "int or nil"}, {"p": "Array", "m": "rindex(obj)", "r": "int or nil"}, {"p": "Array", "m": "rotate!(count=1)", "r": "ary"}, {"p": "Array", "m": "rotate(count=1)", "r": "new_ary"}, {"p": "Array", "m": "sample", "r": "obj"}, {"p": "Array", "m": "sample(n)", "r": "new_ary"}, {"p": "Array", "m": "sample(n, random: rng)", "r": "new_ary"}, {"p": "Array", "m": "sample(random: rng)", "r": "obj"}, {"p": "Array", "m": "select", "r": "Enumerator"}, {"p": "Array", "m": "select { |item| block }", "r": "new_ary"}, {"p": "Array", "m": "select!", "r": "Enumerator"}, {"p": "Array", "m": "select!  {|item| block }", "r": "ary or nil"}, {"p": "Array", "m": "shelljoin", "r": "string"}, {"p": "Array", "m": "shift", "r": "obj or nil"}, {"p": "Array", "m": "shift(n)", "r": "new_ary"}, {"p": "Array", "m": "shuffle", "r": "new_ary"}, {"p": "Array", "m": "shuffle!", "r": "ary"}, {"p": "Array", "m": "shuffle!(random: rng)", "r": "ary"}, {"p": "Array", "m": "shuffle(random: rng)", "r": "new_ary"}, {"p": "Array", "m": "slice!(index)", "r": "obj or nil"}, {"p": "Array", "m": "slice!(range)", "r": "new_ary or nil"}, {"p": "Array", "m": "slice!(start, length)", "r": "new_ary or nil"}, {"p": "Array", "m": "slice(index)", "r": "obj     or nil"}, {"p": "Array", "m": "slice(range)", "r": "new_ary or nil"}, {"p": "Array", "m": "slice(start, length)", "r": "new_ary or nil"}, {"p": "Array", "m": "sort", "r": "new_ary"}, {"p": "Array", "m": "sort { |a, b| block }", "r": "new_ary"}, {"p": "Array", "m": "sort!", "r": "ary"}, {"p": "Array", "m": "sort! { |a, b| block }", "r": "ary"}, {"p": "Array", "m": "sort_by!", "r": "Enumerator"}, {"p": "Array", "m": "sort_by! { |obj| block }", "r": "ary"}, {"p": "Array", "m": "sum(init=0)", "r": "number"}, {"p": "Array", "m": "sum(init=0) {|e| expr }", "r": "number"}, {"p": "Array", "m": "take(n)", "r": "new_ary"}, {"p": "Array", "m": "take_while", "r": "Enumerator"}, {"p": "Array", "m": "take_while { |obj| block }", "r": "new_ary"}, {"p": "Array", "m": "to_a", "r": "ary"}, {"p": "Array", "m": "to_ary", "r": "ary"}, {"p": "Array", "m": "to_h", "r": "hash"}, {"p": "Array", "m": "to_s", "r": "string"}, {"p": "Array", "m": "transpose", "r": "new_ary"}, {"p": "Array", "m": "try_convert(obj)", "r": "array or nil"}, {"p": "Array", "m": "uniq", "r": "new_ary"}, {"p": "Array", "m": "uniq { |item| ... }", "r": "new_ary"}, {"p": "Array", "m": "uniq!", "r": "ary or nil"}, {"p": "Array", "m": "uniq! { |item| ... }", "r": "ary or nil"}, {"p": "Array", "m": "unshift(obj, ...)", "r": "ary"}, {"p": "Array", "m": "values_at(selector, ...)", "r": "new_ary"}, {"p": "Array", "m": "zip(arg, ...)", "r": "new_ary"}, {"p": "Array", "m": "zip(arg, ...) { |arr| block }", "r": "nil"}, {"p": "BasicObject", "m": "!obj", "r": "true or false"}, {"p": "BasicObject", "m": "__id__", "r": "integer"}, {"p": "BasicObject", "m": "__send__(string [, args...])", "r": "obj"}, {"p": "BasicObject", "m": "__send__(symbol [, args...])", "r": "obj"}, {"p": "BasicObject", "m": "equal?(other)", "r": "true or false"}, {"p": "BasicObject", "m": "instance_eval {|obj| block }", "r": "obj"}, {"p": "BasicObject", "m": "instance_eval(string [, filename [, lineno]] )", "r": "obj"}, {"p": "BasicObject", "m": "instance_exec(arg...) {|var...| block }", "r": "obj"}, {"p": "BasicObject", "m": "method_missing(symbol [, *args] )", "r": "result"}, {"p": "BasicObject", "m": "obj != other", "r": "true or false"}, {"p": "BasicObject", "m": "obj == other", "r": "true or false"}, {"p": "BasicObject", "m": "object_id", "r": "integer"}, {"p": "BasicObject", "m": "send(string [, args...])", "r": "obj"}, {"p": "BasicObject", "m": "send(symbol [, args...])", "r": "obj"}, {"p": "BasicObject", "m": "singleton_method_added(symbol)", "r": ""}, {"p": "BasicObject", "m": "singleton_method_removed(symbol)", "r": ""}, {"p": "BasicObject", "m": "singleton_method_undefined(symbol)", "r": ""}, {"p": "BasicSocket", "m": "close_read", "r": "nil"}, {"p": "BasicSocket", "m": "close_write", "r": "nil"}, {"p": "BasicSocket", "m": "do_not_reverse_lookup = bool", "r": ""}, {"p": "BasicSocket", "m": "do_not_reverse_lookup", "r": "true or false"}, {"p": "BasicSocket", "m": "for_fd(fd)", "r": "basicsocket"}, {"p": "BasicSocket", "m": "getpeereid", "r": "[euid, egid]"}, {"p": "BasicSocket", "m": "getpeername", "r": "sockaddr"}, {"p": "BasicSocket", "m": "getsockname", "r": "sockaddr"}, {"p": "BasicSocket", "m": "getsockopt(level, optname)", "r": "socketoption"}, {"p": "BasicSocket", "m": "local_address", "r": "addrinfo"}, {"p": "BasicSocket", "m": "recv(maxlen[, flags[, outbuf]])", "r": "mesg"}, {"p": "BasicSocket", "m": "recv_nonblock(maxlen [, flags [, buf [, options ]]])", "r": "mesg"}, {"p": "BasicSocket", "m": "recvmsg(maxmesglen=nil, flags=0, maxcontrollen=nil, opts={})", "r": "[mesg, sender_addrinfo, rflags, *controls]"}, {"p": "BasicSocket", "m": "recvmsg_nonblock(maxdatalen=nil, flags=0, maxcontrollen=nil, opts={})", "r": "[data, sender_addrinfo, rflags, *controls]"}, {"p": "BasicSocket", "m": "remote_address", "r": "addrinfo"}, {"p": "BasicSocket", "m": "send(mesg, flags [, dest_sockaddr])", "r": "numbytes_sent"}, {"p": "BasicSocket", "m": "sendmsg(mesg, flags=0, dest_sockaddr=nil, *controls)", "r": "numbytes_sent"}, {"p": "BasicSocket", "m": "sendmsg_nonblock(mesg, flags=0, dest_sockaddr=nil, *controls, opts={})", "r": "numbytes_sent"}, {"p": "BasicSocket", "m": "setsockopt(level, optname, optval)", "r": ""}, {"p": "BasicSocket", "m": "setsockopt(socketoption)", "r": ""}, {"p": "BasicSocket", "m": "shutdown([how])", "r": "0"}, {"p": "Benchmark", "m": "CAPTION", "r": ""}, {"p": "Benchmark", "m": "FORMAT", "r": ""}, {"p": "BigDecimal", "m": "+big_decimal", "r": "big_decimal"}, {"p": "BigDecimal", "m": "-big_decimal", "r": "big_decimal"}, {"p": "BigDecimal", "m": "_dump", "r": ""}, {"p": "BigDecimal", "m": "a % b", "r": ""}, {"p": "BigDecimal", "m": "a ** n", "r": "bigdecimal"}, {"p": "BigDecimal", "m": "a - b", "r": "bigdecimal"}, {"p": "BigDecimal", "m": "a / b", "r": "bigdecimal"}, {"p": "BigDecimal", "m": "a < b", "r": ""}, {"p": "BigDecimal", "m": "a <= b", "r": ""}, {"p": "BigDecimal", "m": "a > b", "r": ""}, {"p": "BigDecimal", "m": "a >= b", "r": ""}, {"p": "BigDecimal", "m": "abs", "r": "big_decimal"}, {"p": "BigDecimal", "m": "add(value, digits)", "r": ""}, {"p": "BigDecimal", "m": "ceil(n)", "r": ""}, {"p": "BigDecimal", "m": "div(value, digits)", "r": "bigdecimal or integer"}, {"p": "BigDecimal", "m": "divmod(value)", "r": ""}, {"p": "BigDecimal", "m": "double_fig", "r": ""}, {"p": "BigDecimal", "m": "floor(n)", "r": ""}, {"p": "BigDecimal", "m": "hash", "r": ""}, {"p": "BigDecimal", "m": "limit(digits)", "r": ""}, {"p": "BigDecimal", "m": "mode(mode, value)", "r": ""}, {"p": "BigDecimal", "m": "modulo(b)", "r": ""}, {"p": "BigDecimal", "m": "mult(value, digits)", "r": ""}, {"p": "BigDecimal", "m": "new(initial, digits)", "r": ""}, {"p": "BigDecimal", "m": "power(n)", "r": ""}, {"p": "BigDecimal", "m": "power(n, prec)", "r": ""}, {"p": "BigDecimal", "m": "precs", "r": "array"}, {"p": "BigDecimal", "m": "quo(value)", "r": "bigdecimal"}, {"p": "BigDecimal", "m": "remainder(value)", "r": ""}, {"p": "BigDecimal", "m": "round(n, mode)", "r": ""}, {"p": "BigDecimal", "m": "save_exception_mode { ... }", "r": ""}, {"p": "BigDecimal", "m": "save_limit { ... }", "r": ""}, {"p": "BigDecimal", "m": "save_rounding_mode { ... }", "r": ""}, {"p": "BigDecimal", "m": "sqrt(n)", "r": ""}, {"p": "BigDecimal", "m": "sub(value, digits)", "r": "bigdecimal"}, {"p": "BigDecimal", "m": "to_d", "r": "bigdecimal"}, {"p": "BigDecimal", "m": "to_digits", "r": "string"}, {"p": "BigDecimal", "m": "to_s(s)", "r": ""}, {"p": "BigDecimal", "m": "truncate(n)", "r": ""}, {"p": "BigDecimal", "m": "BASE", "r": ""}, {"p": "BigDecimal", "m": "EXCEPTION_ALL", "r": ""}, {"p": "BigDecimal", "m": "EXCEPTION_INFINITY", "r": ""}, {"p": "BigDecimal", "m": "EXCEPTION_NaN", "r": ""}, {"p": "BigDecimal", "m": "EXCEPTION_OVERFLOW", "r": ""}, {"p": "BigDecimal", "m": "EXCEPTION_UNDERFLOW", "r": ""}, {"p": "BigDecimal", "m": "EXCEPTION_ZERODIVIDE", "r": ""}, {"p": "BigDecimal", "m": "INFINITY", "r": ""}, {"p": "BigDecimal", "m": "NAN", "r": ""}, {"p": "BigDecimal", "m": "ROUND_CEILING", "r": ""}, {"p": "BigDecimal", "m": "ROUND_DOWN", "r": ""}, {"p": "BigDecimal", "m": "ROUND_FLOOR", "r": ""}, {"p": "BigDecimal", "m": "ROUND_HALF_DOWN", "r": ""}, {"p": "BigDecimal", "m": "ROUND_HALF_EVEN", "r": ""}, {"p": "BigDecimal", "m": "ROUND_HALF_UP", "r": ""}, {"p": "BigDecimal", "m": "ROUND_MODE", "r": ""}, {"p": "BigDecimal", "m": "ROUND_UP", "r": ""}, {"p": "BigDecimal", "m": "SIGN_NEGATIVE_FINITE", "r": ""}, {"p": "BigDecimal", "m": "SIGN_NEGATIVE_INFINITE", "r": ""}, {"p": "BigDecimal", "m": "SIGN_NEGATIVE_ZERO", "r": ""}, {"p": "BigDecimal", "m": "SIGN_NaN", "r": ""}, {"p": "BigDecimal", "m": "SIGN_POSITIVE_FINITE", "r": ""}, {"p": "BigDecimal", "m": "SIGN_POSITIVE_INFINITE", "r": ""}, {"p": "BigDecimal", "m": "SIGN_POSITIVE_ZERO", "r": ""}, {"p": "BigDecimal", "m": "VERSION", "r": ""}, {"p": "BigMath", "m": "E(numeric)", "r": "BigDecimal"}, {"p": "BigMath", "m": "PI(numeric)", "r": "BigDecimal"}, {"p": "BigMath", "m": "atan(decimal, numeric)", "r": "BigDecimal"}, {"p": "BigMath", "m": "cos(decimal, numeric)", "r": "BigDecimal"}, {"p": "BigMath", "m": "exp(decimal, numeric)", "r": "BigDecimal"}, {"p": "BigMath", "m": "log(decimal, numeric)", "r": "BigDecimal"}, {"p": "BigMath", "m": "sin(decimal, numeric)", "r": "BigDecimal"}, {"p": "BigMath", "m": "sqrt(decimal, numeric)", "r": "BigDecimal"}, {"p": "Binding", "m": "eval(string [, filename [,lineno]])", "r": "obj"}, {"p": "Binding", "m": "local_variable_defined?(symbol)", "r": "obj"}, {"p": "Binding", "m": "local_variable_get(symbol)", "r": "obj"}, {"p": "Binding", "m": "local_variable_set(symbol, obj)", "r": "obj"}, {"p": "Binding", "m": "local_variables", "r": "Array"}, {"p": "Binding", "m": "receiver", "r": "object"}, {"p": "CGI", "m": "http_header(content_type_string=\"text/html\")", "r": ""}, {"p": "CGI", "m": "http_header(headers_hash)", "r": ""}, {"p": "CGI", "m": "new(options_hash = {}) { block }", "r": ""}, {"p": "CGI", "m": "new(tag_maker) { block }", "r": ""}, {"p": "CGI", "m": "out(content_type_string='text/html')", "r": ""}, {"p": "CGI", "m": "out(headers_hash)", "r": ""}, {"p": "CGI", "m": "CR", "r": ""}, {"p": "CGI", "m": "EOL", "r": ""}, {"p": "CGI", "m": "HTTP_STATUS", "r": ""}, {"p": "CGI", "m": "LF", "r": ""}, {"p": "CGI", "m": "MAX_MULTIPART_COUNT", "r": ""}, {"p": "CGI", "m": "NEEDS_BINMODE", "r": ""}, {"p": "CGI", "m": "PATH_SEPARATOR", "r": ""}, {"p": "Class", "m": "allocate()", "r": "obj"}, {"p": "Class", "m": "inherited(subclass)", "r": ""}, {"p": "Class", "m": "new(args, ...)", "r": "obj"}, {"p": "Class", "m": "new(super_class=Object)", "r": "a_class"}, {"p": "Class", "m": "new(super_class=Object) { |mod| ... }", "r": "a_class"}, {"p": "Class", "m": "superclass", "r": "a_super_class or nil"}, {"p": "Comparable", "m": "between?(min, max)", "r": "true or false"}, {"p": "Comparable", "m": "clamp(min, max)", "r": "obj"}, {"p": "Comparable", "m": "obj < other", "r": "true or false"}, {"p": "Comparable", "m": "obj <= other", "r": "true or false"}, {"p": "Comparable", "m": "obj == other", "r": "true or false"}, {"p": "Comparable", "m": "obj > other", "r": "true or false"}, {"p": "Comparable", "m": "obj >= other", "r": "true or false"}, {"p": "Complex", "m": "-cmp", "r": "complex"}, {"p": "Complex", "m": "abs", "r": "real"}, {"p": "Complex", "m": "abs2", "r": "real"}, {"p": "Complex", "m": "angle", "r": "float"}, {"p": "Complex", "m": "arg", "r": "float"}, {"p": "Complex", "m": "cmp * numeric", "r": "complex"}, {"p": "Complex", "m": "cmp ** numeric", "r": "complex"}, {"p": "Complex", "m": "cmp + numeric", "r": "complex"}, {"p": "Complex", "m": "cmp - numeric", "r": "complex"}, {"p": "Complex", "m": "cmp / numeric", "r": "complex"}, {"p": "Complex", "m": "cmp == object", "r": "true or false"}, {"p": "Complex", "m": "conj", "r": "complex"}, {"p": "Complex", "m": "conjugate", "r": "complex"}, {"p": "Complex", "m": "denominator", "r": "integer"}, {"p": "Complex", "m": "fdiv(numeric)", "r": "complex"}, {"p": "Complex", "m": "finite?", "r": "true or false"}, {"p": "Complex", "m": "imag", "r": "real"}, {"p": "Complex", "m": "imaginary", "r": "real"}, {"p": "Complex", "m": "infinite?", "r": "nil or 1"}, {"p": "Complex", "m": "inspect", "r": "string"}, {"p": "Complex", "m": "magnitude", "r": "real"}, {"p": "Complex", "m": "numerator", "r": "numeric"}, {"p": "Complex", "m": "phase", "r": "float"}, {"p": "Complex", "m": "polar", "r": "array"}, {"p": "Complex", "m": "polar(abs[, arg])", "r": "complex"}, {"p": "Complex", "m": "quo(numeric)", "r": "complex"}, {"p": "Complex", "m": "rationalize([eps])", "r": "rational"}, {"p": "Complex", "m": "real", "r": "real"}, {"p": "Complex", "m": "real?", "r": "false"}, {"p": "Complex", "m": "rect", "r": "array"}, {"p": "Complex", "m": "rect(real[, imag])", "r": "complex"}, {"p": "Complex", "m": "rectangular", "r": "array"}, {"p": "Complex", "m": "rectangular(real[, imag])", "r": "complex"}, {"p": "Complex", "m": "to_c", "r": "self"}, {"p": "Complex", "m": "to_f", "r": "float"}, {"p": "Complex", "m": "to_i", "r": "integer"}, {"p": "Complex", "m": "to_r", "r": "rational"}, {"p": "Complex", "m": "to_s", "r": "string"}, {"p": "Complex", "m": "I", "r": ""}, {"p": "ConditionVariable", "m": "wait(mutex, timeout=nil)", "r": ""}, {"p": "Continuation", "m": "call(args, ...)", "r": ""}, {"p": "Continuation", "m": "cont[args, ...]", "r": ""}, {"p": "Coverage", "m": "peek_result", "r": "hash"}, {"p": "Coverage", "m": "result", "r": "hash"}, {"p": "Coverage", "m": "running?", "r": "bool"}, {"p": "Coverage", "m": "start", "r": "nil"}, {"p": "CSV", "m": "convert { |field, field_info| ... }", "r": ""}, {"p": "CSV", "m": "convert { |field| ... }", "r": ""}, {"p": "CSV", "m": "convert( name )", "r": ""}, {"p": "CSV", "m": "filter( **options ) { |row| ... }", "r": ""}, {"p": "CSV", "m": "filter( input, **options ) { |row| ... }", "r": ""}, {"p": "CSV", "m": "filter( input, output, **options ) { |row| ... }", "r": ""}, {"p": "CSV", "m": "generate( **options ) { |csv| ... }", "r": ""}, {"p": "CSV", "m": "generate( str, **options ) { |csv| ... }", "r": ""}, {"p": "CSV", "m": "header_convert { |field, field_info| ... }", "r": ""}, {"p": "CSV", "m": "header_convert { |field| ... }", "r": ""}, {"p": "CSV", "m": "header_convert( name )", "r": ""}, {"p": "CSV", "m": "open( filename, **options )", "r": ""}, {"p": "CSV", "m": "open( filename, **options ) { |faster_csv| ... }", "r": ""}, {"p": "CSV", "m": "open( filename, mode = \"rb\", **options )", "r": ""}, {"p": "CSV", "m": "open( filename, mode = \"rb\", **options ) { |faster_csv| ... }", "r": ""}, {"p": "CSV", "m": "parse( str, **options )", "r": ""}, {"p": "CSV", "m": "parse( str, **options ) { |row| ... }", "r": ""}, {"p": "CSV", "m": "ConverterEncoding", "r": ""}, {"p": "CSV", "m": "Converters", "r": ""}, {"p": "CSV", "m": "DEFAULT_OPTIONS", "r": ""}, {"p": "CSV", "m": "DateMatcher", "r": ""}, {"p": "CSV", "m": "DateTimeMatcher", "r": ""}, {"p": "CSV", "m": "FieldInfo", "r": ""}, {"p": "CSV", "m": "HeaderConverters", "r": ""}, {"p": "CSV", "m": "VERSION", "r": ""}, {"p": "Date", "m": "_httpdate(string)", "r": "hash"}, {"p": "Date", "m": "_iso8601(string)", "r": "hash"}, {"p": "Date", "m": "_jisx0301(string)", "r": "hash"}, {"p": "Date", "m": "_parse(string[, comp=true])", "r": "hash"}, {"p": "Date", "m": "_rfc2822(string)", "r": "hash"}, {"p": "Date", "m": "_rfc3339(string)", "r": "hash"}, {"p": "Date", "m": "_rfc822(string)", "r": "hash"}, {"p": "Date", "m": "_strptime(string[, format='%F'])", "r": "hash"}, {"p": "Date", "m": "_xmlschema(string)", "r": "hash"}, {"p": "Date", "m": "ajd", "r": "rational"}, {"p": "Date", "m": "amjd", "r": "rational"}, {"p": "Date", "m": "asctime", "r": "string"}, {"p": "Date", "m": "civil([year=-4712[, month=1[, mday=1[, start=Date::ITALY]]]])", "r": "date"}, {"p": "Date", "m": "commercial([cwyear=-4712[, cweek=1[, cwday=1[, start=Date::ITALY]]]])", "r": "date"}, {"p": "Date", "m": "ctime", "r": "string"}, {"p": "Date", "m": "cwday", "r": "fixnum"}, {"p": "Date", "m": "cweek", "r": "fixnum"}, {"p": "Date", "m": "cwyear", "r": "integer"}, {"p": "Date", "m": "d + other", "r": "date"}, {"p": "Date", "m": "d - other", "r": "date or rational"}, {"p": "Date", "m": "d << n", "r": "date"}, {"p": "Date", "m": "d <=> other", "r": "-1, 0, +1 or nil"}, {"p": "Date", "m": "d === other", "r": "bool"}, {"p": "Date", "m": "d >> n", "r": "date"}, {"p": "Date", "m": "day", "r": "fixnum"}, {"p": "Date", "m": "day_fraction", "r": "rational"}, {"p": "Date", "m": "downto(min)", "r": "enumerator"}, {"p": "Date", "m": "downto(min){|date| ...}", "r": "self"}, {"p": "Date", "m": "england", "r": "date"}, {"p": "Date", "m": "friday?", "r": "bool"}, {"p": "Date", "m": "gregorian", "r": "date"}, {"p": "Date", "m": "gregorian?", "r": "bool"}, {"p": "Date", "m": "gregorian_leap?(year)", "r": "bool"}, {"p": "Date", "m": "hour", "r": "fixnum"}, {"p": "Date", "m": "httpdate", "r": "string"}, {"p": "Date", "m": "httpdate(string='Mon, 01 Jan -4712 00:00:00 GMT'[, start=Date::ITALY])", "r": "date"}, {"p": "Date", "m": "inspect", "r": "string"}, {"p": "Date", "m": "iso8601", "r": "string"}, {"p": "Date", "m": "iso8601(string='-4712-01-01'[, start=Date::ITALY])", "r": "date"}, {"p": "Date", "m": "italy", "r": "date"}, {"p": "Date", "m": "jd", "r": "integer"}, {"p": "Date", "m": "jd([jd=0[, start=Date::ITALY]])", "r": "date"}, {"p": "Date", "m": "jisx0301", "r": "string"}, {"p": "Date", "m": "jisx0301(string='-4712-01-01'[, start=Date::ITALY])", "r": "date"}, {"p": "Date", "m": "julian", "r": "date"}, {"p": "Date", "m": "julian?", "r": "bool"}, {"p": "Date", "m": "julian_leap?(year)", "r": "bool"}, {"p": "Date", "m": "ld", "r": "integer"}, {"p": "Date", "m": "leap?", "r": "bool"}, {"p": "Date", "m": "leap?(year)", "r": "bool"}, {"p": "Date", "m": "mday", "r": "fixnum"}, {"p": "Date", "m": "min", "r": "fixnum"}, {"p": "Date", "m": "minute", "r": "fixnum"}, {"p": "Date", "m": "mjd", "r": "integer"}, {"p": "Date", "m": "mon", "r": "fixnum"}, {"p": "Date", "m": "monday?", "r": "bool"}, {"p": "Date", "m": "month", "r": "fixnum"}, {"p": "Date", "m": "new([year=-4712[, month=1[, mday=1[, start=Date::ITALY]]]])", "r": "date"}, {"p": "Date", "m": "new_offset([offset=0])", "r": "date"}, {"p": "Date", "m": "new_start([start=Date::ITALY])", "r": "date"}, {"p": "Date", "m": "next", "r": "date"}, {"p": "Date", "m": "next_day([n=1])", "r": "date"}, {"p": "Date", "m": "next_month([n=1])", "r": "date"}, {"p": "Date", "m": "next_year([n=1])", "r": "date"}, {"p": "Date", "m": "offset", "r": "rational"}, {"p": "Date", "m": "ordinal([year=-4712[, yday=1[, start=Date::ITALY]]])", "r": "date"}, {"p": "Date", "m": "parse(string='-4712-01-01'[, comp=true[, start=Date::ITALY]])", "r": "date"}, {"p": "Date", "m": "prev_day([n=1])", "r": "date"}, {"p": "Date", "m": "prev_month([n=1])", "r": "date"}, {"p": "Date", "m": "prev_year([n=1])", "r": "date"}, {"p": "Date", "m": "rfc2822", "r": "string"}, {"p": "Date", "m": "rfc2822(string='Mon, 1 Jan -4712 00:00:00 +0000'[, start=Date::ITALY])", "r": "date"}, {"p": "Date", "m": "rfc3339", "r": "string"}, {"p": "Date", "m": "rfc3339(string='-4712-01-01T00:00:00+00:00'[, start=Date::ITALY])", "r": "date"}, {"p": "Date", "m": "rfc822", "r": "string"}, {"p": "Date", "m": "rfc822(string='Mon, 1 Jan -4712 00:00:00 +0000'[, start=Date::ITALY])", "r": "date"}, {"p": "Date", "m": "saturday?", "r": "bool"}, {"p": "Date", "m": "sec", "r": "fixnum"}, {"p": "Date", "m": "sec_fraction", "r": "rational"}, {"p": "Date", "m": "second", "r": "fixnum"}, {"p": "Date", "m": "second_fraction", "r": "rational"}, {"p": "Date", "m": "start", "r": "float"}, {"p": "Date", "m": "step(limit[, step=1])", "r": "enumerator"}, {"p": "Date", "m": "step(limit[, step=1]){|date| ...}", "r": "self"}, {"p": "Date", "m": "strftime([format='%F'])", "r": "string"}, {"p": "Date", "m": "strptime([string='-4712-01-01'[, format='%F'[, start=Date::ITALY]]])", "r": "date"}, {"p": "Date", "m": "succ", "r": "date"}, {"p": "Date", "m": "sunday?", "r": "bool"}, {"p": "Date", "m": "thursday?", "r": "bool"}, {"p": "Date", "m": "to_date", "r": "self"}, {"p": "Date", "m": "to_datetime", "r": "datetime"}, {"p": "Date", "m": "to_s", "r": "string"}, {"p": "Date", "m": "to_time", "r": "time"}, {"p": "Date", "m": "today([start=Date::ITALY])", "r": "date"}, {"p": "Date", "m": "tuesday?", "r": "bool"}, {"p": "Date", "m": "upto(max)", "r": "enumerator"}, {"p": "Date", "m": "upto(max){|date| ...}", "r": "self"}, {"p": "Date", "m": "valid_civil?(year, month, mday[, start=Date::ITALY])", "r": "bool"}, {"p": "Date", "m": "valid_commercial?(cwyear, cweek, cwday[, start=Date::ITALY])", "r": "bool"}, {"p": "Date", "m": "valid_date?(year, month, mday[, start=Date::ITALY])", "r": "bool"}, {"p": "Date", "m": "valid_jd?(jd[, start=Date::ITALY])", "r": "bool"}, {"p": "Date", "m": "valid_ordinal?(year, yday[, start=Date::ITALY])", "r": "bool"}, {"p": "Date", "m": "wday", "r": "fixnum"}, {"p": "Date", "m": "wednesday?", "r": "bool"}, {"p": "Date", "m": "xmlschema", "r": "string"}, {"p": "Date", "m": "xmlschema(string='-4712-01-01'[, start=Date::ITALY])", "r": "date"}, {"p": "Date", "m": "yday", "r": "fixnum"}, {"p": "Date", "m": "year", "r": "integer"}, {"p": "Date", "m": "zone", "r": "string"}, {"p": "Date", "m": "ABBR_DAYNAMES", "r": ""}, {"p": "Date", "m": "ABBR_MONTHNAMES", "r": ""}, {"p": "Date", "m": "DAYNAMES", "r": ""}, {"p": "Date", "m": "ENGLAND", "r": ""}, {"p": "Date", "m": "GREGORIAN", "r": ""}, {"p": "Date", "m": "ITALY", "r": ""}, {"p": "Date", "m": "JULIAN", "r": ""}, {"p": "Date", "m": "MONTHNAMES", "r": ""}, {"p": "DateTime", "m": "_strptime(string[, format='%FT%T%z'])", "r": "hash"}, {"p": "DateTime", "m": "civil([year=-4712[, month=1[, mday=1[, hour=0[, minute=0[, second=0[, offset=0[, start=Date::ITALY]]]]]]]])", "r": "datetime"}, {"p": "DateTime", "m": "commercial([cwyear=-4712[, cweek=1[, cwday=1[, hour=0[, minute=0[, second=0[, offset=0[, start=Date::ITALY]]]]]]]])", "r": "datetime"}, {"p": "DateTime", "m": "httpdate(string='Mon, 01 Jan -4712 00:00:00 GMT'[, start=Date::ITALY])", "r": "datetime"}, {"p": "DateTime", "m": "iso8601([n=0])", "r": "string"}, {"p": "DateTime", "m": "iso8601(string='-4712-01-01T00:00:00+00:00'[, start=Date::ITALY])", "r": "datetime"}, {"p": "DateTime", "m": "jd([jd=0[, hour=0[, minute=0[, second=0[, offset=0[, start=Date::ITALY]]]]]])", "r": "datetime"}, {"p": "DateTime", "m": "jisx0301([n=0])", "r": "string"}, {"p": "DateTime", "m": "jisx0301(string='-4712-01-01T00:00:00+00:00'[, start=Date::ITALY])", "r": "datetime"}, {"p": "DateTime", "m": "new([year=-4712[, month=1[, mday=1[, hour=0[, minute=0[, second=0[, offset=0[, start=Date::ITALY]]]]]]]])", "r": "datetime"}, {"p": "DateTime", "m": "now([start=Date::ITALY])", "r": "datetime"}, {"p": "DateTime", "m": "ordinal([year=-4712[, yday=1[, hour=0[, minute=0[, second=0[, offset=0[, start=Date::ITALY]]]]]]])", "r": "datetime"}, {"p": "DateTime", "m": "parse(string='-4712-01-01T00:00:00+00:00'[, comp=true[, start=Date::ITALY]])", "r": "datetime"}, {"p": "DateTime", "m": "rfc2822(string='Mon, 1 Jan -4712 00:00:00 +0000'[, start=Date::ITALY])", "r": "datetime"}, {"p": "DateTime", "m": "rfc3339([n=0])", "r": "string"}, {"p": "DateTime", "m": "rfc3339(string='-4712-01-01T00:00:00+00:00'[, start=Date::ITALY])", "r": "datetime"}, {"p": "DateTime", "m": "rfc822(string='Mon, 1 Jan -4712 00:00:00 +0000'[, start=Date::ITALY])", "r": "datetime"}, {"p": "DateTime", "m": "strftime([format='%FT%T%:z'])", "r": "string"}, {"p": "DateTime", "m": "strptime([string='-4712-01-01T00:00:00+00:00'[, format='%FT%T%z'[ ,start=Date::ITALY]]])", "r": "datetime"}, {"p": "DateTime", "m": "to_date", "r": "date"}, {"p": "DateTime", "m": "to_datetime", "r": "self"}, {"p": "DateTime", "m": "to_s", "r": "string"}, {"p": "DateTime", "m": "to_time", "r": "time"}, {"p": "DateTime", "m": "xmlschema([n=0])", "r": "string"}, {"p": "DateTime", "m": "xmlschema(string='-4712-01-01T00:00:00+00:00'[, start=Date::ITALY])", "r": "datetime"}, {"p": "DBM", "m": "clear", "r": ""}, {"p": "DBM", "m": "close", "r": ""}, {"p": "DBM", "m": "closed?", "r": "true or false"}, {"p": "DBM", "m": "dbm[key] = value", "r": ""}, {"p": "DBM", "m": "dbm[key]", "r": "string value or nil"}, {"p": "DBM", "m": "delete(key)", "r": ""}, {"p": "DBM", "m": "delete_if {|key, value| block}", "r": "self"}, {"p": "DBM", "m": "each_key {|key| block}", "r": "self"}, {"p": "DBM", "m": "each_pair {|key,value| block}", "r": "self"}, {"p": "DBM", "m": "each_value {|value| block}", "r": "self"}, {"p": "DBM", "m": "empty?", "r": ""}, {"p": "DBM", "m": "fetch(key[, ifnone])", "r": "value"}, {"p": "DBM", "m": "has_key?(key)", "r": "boolean"}, {"p": "DBM", "m": "has_value?(value)", "r": "boolean"}, {"p": "DBM", "m": "include?(key)", "r": "boolean"}, {"p": "DBM", "m": "invert", "r": "hash"}, {"p": "DBM", "m": "key(value)", "r": "string"}, {"p": "DBM", "m": "key?(key)", "r": "boolean"}, {"p": "DBM", "m": "keys", "r": "array"}, {"p": "DBM", "m": "length", "r": "integer"}, {"p": "DBM", "m": "member?(key)", "r": "boolean"}, {"p": "DBM", "m": "new(filename[, mode[, flags]])", "r": "dbm"}, {"p": "DBM", "m": "open(filename[, mode[, flags]]) {|dbm| block}", "r": ""}, {"p": "DBM", "m": "open(filename[, mode[, flags]])", "r": "dbm"}, {"p": "DBM", "m": "reject {|key,value| block}", "r": "Hash"}, {"p": "DBM", "m": "reject! {|key, value| block}", "r": "self"}, {"p": "DBM", "m": "replace(obj)", "r": ""}, {"p": "DBM", "m": "select {|key, value| block}", "r": "array"}, {"p": "DBM", "m": "shift()", "r": "[key, value]"}, {"p": "DBM", "m": "size", "r": "integer"}, {"p": "DBM", "m": "store(key, value)", "r": "value"}, {"p": "DBM", "m": "to_a", "r": "array"}, {"p": "DBM", "m": "to_hash", "r": "hash"}, {"p": "DBM", "m": "update(obj)", "r": ""}, {"p": "DBM", "m": "value?(value)", "r": "boolean"}, {"p": "DBM", "m": "values", "r": "array"}, {"p": "DBM", "m": "values_at(key, ...)", "r": "Array"}, {"p": "DBM", "m": "NEWDB", "r": ""}, {"p": "DBM", "m": "READER", "r": ""}, {"p": "DBM", "m": "VERSION", "r": ""}, {"p": "DBM", "m": "WRCREAT", "r": ""}, {"p": "DBM", "m": "WRITER", "r": ""}, {"p": "Digest", "m": "bubblebabble(string)", "r": "bubblebabble_string"}, {"p": "Digest", "m": "hexencode(string)", "r": "hexencoded_string"}, {"p": "Digest", "m": "REQUIRE_MUTEX", "r": ""}, {"p": "Dir", "m": "Dir[ string [, string ...] [, base: path] ]", "r": "array"}, {"p": "Dir", "m": "chdir( [ string] ) {| path | block }", "r": "anObject"}, {"p": "Dir", "m": "chdir( [ string] )", "r": "0"}, {"p": "Dir", "m": "children( dirname )", "r": "array"}, {"p": "Dir", "m": "children( dirname, encoding: enc )", "r": "array"}, {"p": "Dir", "m": "chroot( string )", "r": "0"}, {"p": "Dir", "m": "close", "r": "nil"}, {"p": "Dir", "m": "delete( string )", "r": "0"}, {"p": "Dir", "m": "each", "r": "an_enumerator"}, {"p": "Dir", "m": "each { |filename| block }", "r": "dir"}, {"p": "Dir", "m": "each_child( dirname )", "r": "an_enumerator"}, {"p": "Dir", "m": "each_child( dirname ) {| filename | block }", "r": "nil"}, {"p": "Dir", "m": "each_child( dirname, encoding: enc )", "r": "an_enumerator"}, {"p": "Dir", "m": "each_child( dirname, encoding: enc ) {| filename | block }", "r": "nil"}, {"p": "Dir", "m": "empty?(path_name)", "r": "true or false"}, {"p": "Dir", "m": "entries( dirname )", "r": "array"}, {"p": "Dir", "m": "entries( dirname, encoding: enc )", "r": "array"}, {"p": "Dir", "m": "exist?(file_name)", "r": "true or false"}, {"p": "Dir", "m": "exists?(file_name)", "r": "true or false"}, {"p": "Dir", "m": "fileno", "r": "integer"}, {"p": "Dir", "m": "foreach( dirname )", "r": "an_enumerator"}, {"p": "Dir", "m": "foreach( dirname ) {| filename | block }", "r": "nil"}, {"p": "Dir", "m": "foreach( dirname, encoding: enc )", "r": "an_enumerator"}, {"p": "Dir", "m": "foreach( dirname, encoding: enc ) {| filename | block }", "r": "nil"}, {"p": "Dir", "m": "getwd", "r": "string"}, {"p": "Dir", "m": "glob( pattern, [flags], [base: path] )", "r": "array"}, {"p": "Dir", "m": "glob( pattern, [flags], [base: path] ) { |filename| block }", "r": "nil"}, {"p": "Dir", "m": "home(\"root\")", "r": "\"/root\""}, {"p": "Dir", "m": "home()", "r": "\"/home/me\""}, {"p": "Dir", "m": "inspect", "r": "string"}, {"p": "Dir", "m": "mkdir( string [, integer] )", "r": "0"}, {"p": "Dir", "m": "new( string )", "r": "aDir"}, {"p": "Dir", "m": "new( string, encoding: enc )", "r": "aDir"}, {"p": "Dir", "m": "open( string ) {| aDir | block }", "r": "anObject"}, {"p": "Dir", "m": "open( string )", "r": "aDir"}, {"p": "Dir", "m": "open( string, encoding: enc ) {| aDir | block }", "r": "anObject"}, {"p": "Dir", "m": "open( string, encoding: enc )", "r": "aDir"}, {"p": "Dir", "m": "path", "r": "string or nil"}, {"p": "Dir", "m": "pos = integer", "r": "integer"}, {"p": "Dir", "m": "pos", "r": "integer"}, {"p": "Dir", "m": "pwd", "r": "string"}, {"p": "Dir", "m": "read", "r": "string or nil"}, {"p": "Dir", "m": "rewind", "r": "dir"}, {"p": "Dir", "m": "rmdir( string )", "r": "0"}, {"p": "Dir", "m": "seek( integer )", "r": "dir"}, {"p": "Dir", "m": "tell", "r": "integer"}, {"p": "Dir", "m": "to_path", "r": "string or nil"}, {"p": "Dir", "m": "unlink( string )", "r": "0"}, {"p": "Encoding", "m": "aliases -> {\"alias1\" => \"orig1\", \"alias2\"", "r": "\"orig2\", ...}"}, {"p": "Encoding", "m": "ascii_compatible?", "r": "true or false"}, {"p": "Encoding", "m": "compatible?(obj1, obj2)", "r": "enc or nil"}, {"p": "Encoding", "m": "default_external = enc", "r": ""}, {"p": "Encoding", "m": "default_external", "r": "enc"}, {"p": "Encoding", "m": "default_internal = enc or nil", "r": ""}, {"p": "Encoding", "m": "default_internal", "r": "enc"}, {"p": "Encoding", "m": "dummy?", "r": "true or false"}, {"p": "Encoding", "m": "find(string)", "r": "enc"}, {"p": "Encoding", "m": "inspect", "r": "string"}, {"p": "Encoding", "m": "list", "r": "[enc1, enc2, ...]"}, {"p": "Encoding", "m": "locale_charmap", "r": "string"}, {"p": "Encoding", "m": "name", "r": "string"}, {"p": "Encoding", "m": "name_list", "r": "[\"enc1\", \"enc2\", ...]"}, {"p": "Encoding", "m": "names", "r": "array"}, {"p": "Encoding", "m": "replicate(name)", "r": "encoding"}, {"p": "Encoding", "m": "to_s", "r": "string"}, {"p": "Enumerable", "m": "all? [{ |obj| block } ]", "r": "true or false"}, {"p": "Enumerable", "m": "all?(pattern)", "r": "true or false"}, {"p": "Enumerable", "m": "any? [{ |obj| block }]", "r": "true or false"}, {"p": "Enumerable", "m": "any?(pattern)", "r": "true or false"}, {"p": "Enumerable", "m": "chunk { |elt| ... }", "r": "an_enumerator"}, {"p": "Enumerable", "m": "chunk_while {|elt_before, elt_after| bool }", "r": "an_enumerator"}, {"p": "Enumerable", "m": "collect", "r": "an_enumerator"}, {"p": "Enumerable", "m": "collect { |obj| block }", "r": "array"}, {"p": "Enumerable", "m": "collect_concat", "r": "an_enumerator"}, {"p": "Enumerable", "m": "collect_concat { |obj| block }", "r": "array"}, {"p": "Enumerable", "m": "count", "r": "int"}, {"p": "Enumerable", "m": "count { |obj| block }", "r": "int"}, {"p": "Enumerable", "m": "count(item)", "r": "int"}, {"p": "Enumerable", "m": "cycle(n=nil)", "r": "an_enumerator"}, {"p": "Enumerable", "m": "cycle(n=nil) { |obj| block }", "r": "nil"}, {"p": "Enumerable", "m": "detect(ifnone = nil)", "r": "an_enumerator"}, {"p": "Enumerable", "m": "detect(ifnone = nil) { |obj| block }", "r": "obj or nil"}, {"p": "Enumerable", "m": "drop(n)", "r": "array"}, {"p": "Enumerable", "m": "drop_while", "r": "an_enumerator"}, {"p": "Enumerable", "m": "drop_while { |obj| block }", "r": "array"}, {"p": "Enumerable", "m": "each_cons(n)", "r": "an_enumerator"}, {"p": "Enumerable", "m": "each_cons(n) { ... }", "r": "nil"}, {"p": "Enumerable", "m": "each_entry", "r": "an_enumerator"}, {"p": "Enumerable", "m": "each_entry { |obj| block }", "r": "enum"}, {"p": "Enumerable", "m": "each_slice(n)", "r": "an_enumerator"}, {"p": "Enumerable", "m": "each_slice(n) { ... }", "r": "nil"}, {"p": "Enumerable", "m": "each_with_index(*args)", "r": "an_enumerator"}, {"p": "Enumerable", "m": "each_with_index(*args) { |obj, i| block }", "r": "enum"}, {"p": "Enumerable", "m": "each_with_object(obj)", "r": "an_enumerator"}, {"p": "Enumerable", "m": "each_with_object(obj) { |(*args), memo_obj| ... }", "r": "obj"}, {"p": "Enumerable", "m": "entries(*args)", "r": "array"}, {"p": "Enumerable", "m": "find(ifnone = nil)", "r": "an_enumerator"}, {"p": "Enumerable", "m": "find(ifnone = nil)   { |obj| block }", "r": "obj or nil"}, {"p": "Enumerable", "m": "find_all", "r": "an_enumerator"}, {"p": "Enumerable", "m": "find_all { |obj| block }", "r": "array"}, {"p": "Enumerable", "m": "find_index", "r": "an_enumerator"}, {"p": "Enumerable", "m": "find_index { |obj| block }", "r": "int or nil"}, {"p": "Enumerable", "m": "find_index(value)", "r": "int or nil"}, {"p": "Enumerable", "m": "first", "r": "obj or nil"}, {"p": "Enumerable", "m": "first(n)", "r": "an_array"}, {"p": "Enumerable", "m": "flat_map", "r": "an_enumerator"}, {"p": "Enumerable", "m": "flat_map       { |obj| block }", "r": "array"}, {"p": "Enumerable", "m": "grep(pattern)", "r": "array"}, {"p": "Enumerable", "m": "grep(pattern) { |obj| block }", "r": "array"}, {"p": "Enumerable", "m": "grep_v(pattern)", "r": "array"}, {"p": "Enumerable", "m": "grep_v(pattern) { |obj| block }", "r": "array"}, {"p": "Enumerable", "m": "group_by", "r": "an_enumerator"}, {"p": "Enumerable", "m": "group_by { |obj| block }", "r": "a_hash"}, {"p": "Enumerable", "m": "include?(obj)", "r": "true or false"}, {"p": "Enumerable", "m": "inject          { |memo, obj| block }", "r": "obj"}, {"p": "Enumerable", "m": "inject(initial) { |memo, obj| block }", "r": "obj"}, {"p": "Enumerable", "m": "inject(initial, sym)", "r": "obj"}, {"p": "Enumerable", "m": "inject(sym)", "r": "obj"}, {"p": "Enumerable", "m": "lazy", "r": "lazy_enumerator"}, {"p": "Enumerable", "m": "map", "r": "an_enumerator"}, {"p": "Enumerable", "m": "map     { |obj| block }", "r": "array"}, {"p": "Enumerable", "m": "max", "r": "obj"}, {"p": "Enumerable", "m": "max { |a, b| block }", "r": "obj"}, {"p": "Enumerable", "m": "max(n)", "r": "array"}, {"p": "Enumerable", "m": "max(n) { |a, b| block }", "r": "array"}, {"p": "Enumerable", "m": "max_by", "r": "an_enumerator"}, {"p": "Enumerable", "m": "max_by {|obj| block }", "r": "obj"}, {"p": "Enumerable", "m": "max_by(n)", "r": "an_enumerator"}, {"p": "Enumerable", "m": "max_by(n) {|obj| block }", "r": "obj"}, {"p": "Enumerable", "m": "member?(obj)", "r": "true or false"}, {"p": "Enumerable", "m": "min", "r": "obj"}, {"p": "Enumerable", "m": "min { |a, b| block }", "r": "obj"}, {"p": "Enumerable", "m": "min(n)", "r": "array"}, {"p": "Enumerable", "m": "min(n) { |a, b| block }", "r": "array"}, {"p": "Enumerable", "m": "min_by", "r": "an_enumerator"}, {"p": "Enumerable", "m": "min_by {|obj| block }", "r": "obj"}, {"p": "Enumerable", "m": "min_by(n)", "r": "an_enumerator"}, {"p": "Enumerable", "m": "min_by(n) {|obj| block }", "r": "array"}, {"p": "Enumerable", "m": "minmax", "r": "[min, max]"}, {"p": "Enumerable", "m": "minmax { |a, b| block }", "r": "[min, max]"}, {"p": "Enumerable", "m": "minmax_by", "r": "an_enumerator"}, {"p": "Enumerable", "m": "minmax_by { |obj| block }", "r": "[min, max]"}, {"p": "Enumerable", "m": "none? [{ |obj| block }]", "r": "true or false"}, {"p": "Enumerable", "m": "none?(pattern)", "r": "true or false"}, {"p": "Enumerable", "m": "one? [{ |obj| block }]", "r": "true or false"}, {"p": "Enumerable", "m": "one?(pattern)", "r": "true or false"}, {"p": "Enumerable", "m": "partition", "r": "an_enumerator"}, {"p": "Enumerable", "m": "partition { |obj| block }", "r": "[ true_array, false_array ]"}, {"p": "Enumerable", "m": "reduce          { |memo, obj| block }", "r": "obj"}, {"p": "Enumerable", "m": "reduce(initial) { |memo, obj| block }", "r": "obj"}, {"p": "Enumerable", "m": "reduce(initial, sym)", "r": "obj"}, {"p": "Enumerable", "m": "reduce(sym)", "r": "obj"}, {"p": "Enumerable", "m": "reject", "r": "an_enumerator"}, {"p": "Enumerable", "m": "reject { |obj| block }", "r": "array"}, {"p": "Enumerable", "m": "reverse_each(*args)", "r": "an_enumerator"}, {"p": "Enumerable", "m": "reverse_each(*args) { |item| block }", "r": "enum"}, {"p": "Enumerable", "m": "select", "r": "an_enumerator"}, {"p": "Enumerable", "m": "select   { |obj| block }", "r": "array"}, {"p": "Enumerable", "m": "slice_after { |elt| bool }", "r": "an_enumerator"}, {"p": "Enumerable", "m": "slice_after(pattern)", "r": "an_enumerator"}, {"p": "Enumerable", "m": "slice_before { |elt| bool }", "r": "an_enumerator"}, {"p": "Enumerable", "m": "slice_before(pattern)", "r": "an_enumerator"}, {"p": "Enumerable", "m": "slice_when {|elt_before, elt_after| bool }", "r": "an_enumerator"}, {"p": "Enumerable", "m": "sort", "r": "array"}, {"p": "Enumerable", "m": "sort { |a, b| block }", "r": "array"}, {"p": "Enumerable", "m": "sort_by", "r": "an_enumerator"}, {"p": "Enumerable", "m": "sort_by { |obj| block }", "r": "array"}, {"p": "Enumerable", "m": "sum(init=0)", "r": "number"}, {"p": "Enumerable", "m": "sum(init=0) {|e| expr }", "r": "number"}, {"p": "Enumerable", "m": "take(n)", "r": "array"}, {"p": "Enumerable", "m": "take_while", "r": "an_enumerator"}, {"p": "Enumerable", "m": "take_while { |obj| block }", "r": "array"}, {"p": "Enumerable", "m": "to_a(*args)", "r": "array"}, {"p": "Enumerable", "m": "to_h(*args)", "r": "hash"}, {"p": "Enumerable", "m": "uniq", "r": "new_ary"}, {"p": "Enumerable", "m": "uniq { |item| ... }", "r": "new_ary"}, {"p": "Enumerable", "m": "zip(arg, ...)", "r": "an_array_of_array"}, {"p": "Enumerable", "m": "zip(arg, ...) { |arr| block }", "r": "nil"}, {"p": "Enumerator", "m": "each", "r": "enum"}, {"p": "Enumerator", "m": "each { |elm| block }", "r": "obj"}, {"p": "Enumerator", "m": "each(*appending_args)", "r": "an_enumerator"}, {"p": "Enumerator", "m": "each(*appending_args) { |elm| block }", "r": "obj"}, {"p": "Enumerator", "m": "each_with_index", "r": ""}, {"p": "Enumerator", "m": "each_with_index {|(*args), idx| ... }", "r": ""}, {"p": "Enumerator", "m": "each_with_object(obj)", "r": ""}, {"p": "Enumerator", "m": "each_with_object(obj) {|(*args), obj| ... }", "r": ""}, {"p": "Enumerator", "m": "feed obj", "r": "nil"}, {"p": "Enumerator", "m": "inspect", "r": "string"}, {"p": "Enumerator", "m": "new(obj, method = :each, *args)", "r": ""}, {"p": "Enumerator", "m": "new(size = nil) { |yielder| ... }", "r": ""}, {"p": "Enumerator", "m": "next", "r": "object"}, {"p": "Enumerator", "m": "next_values", "r": "array"}, {"p": "Enumerator", "m": "peek", "r": "object"}, {"p": "Enumerator", "m": "peek_values", "r": "array"}, {"p": "Enumerator", "m": "rewind", "r": "e"}, {"p": "Enumerator", "m": "size", "r": "int, Float::INFINITY or nil"}, {"p": "Enumerator", "m": "with_index(offset = 0)", "r": ""}, {"p": "Enumerator", "m": "with_index(offset = 0) {|(*args), idx| ... }", "r": ""}, {"p": "Enumerator", "m": "with_object(obj)", "r": ""}, {"p": "Enumerator", "m": "with_object(obj) {|(*args), obj| ... }", "r": ""}, {"p": "ENV", "m": "ENV[name] = value", "r": ""}, {"p": "ENV", "m": "ENV[name]", "r": "value"}, {"p": "ENV", "m": "assoc(name)", "r": "Array or nil"}, {"p": "ENV", "m": "clear", "r": ""}, {"p": "ENV", "m": "delete(name)", "r": "value"}, {"p": "ENV", "m": "delete(name) { |name| }", "r": "value"}, {"p": "ENV", "m": "delete_if", "r": "Enumerator"}, {"p": "ENV", "m": "delete_if { |name, value| }", "r": "Hash"}, {"p": "ENV", "m": "each", "r": "Enumerator"}, {"p": "ENV", "m": "each      { |name, value| }", "r": "Hash"}, {"p": "ENV", "m": "each_key", "r": "Enumerator"}, {"p": "ENV", "m": "each_key { |name| }", "r": "Hash"}, {"p": "ENV", "m": "each_pair", "r": "Enumerator"}, {"p": "ENV", "m": "each_pair { |name, value| }", "r": "Hash"}, {"p": "ENV", "m": "each_value", "r": "Enumerator"}, {"p": "ENV", "m": "each_value { |value| }", "r": "Hash"}, {"p": "ENV", "m": "empty?", "r": "true or false"}, {"p": "ENV", "m": "fetch(name)", "r": "value"}, {"p": "ENV", "m": "fetch(name) { |missing_name| ... }", "r": "value"}, {"p": "ENV", "m": "fetch(name, default)", "r": "value"}, {"p": "ENV", "m": "has_key?(name)", "r": "true or false"}, {"p": "ENV", "m": "has_value?(value)", "r": "true or false"}, {"p": "ENV", "m": "include?(name)", "r": "true or false"}, {"p": "ENV", "m": "index(value)", "r": "key"}, {"p": "ENV", "m": "inspect", "r": "string"}, {"p": "ENV", "m": "invert", "r": "Hash"}, {"p": "ENV", "m": "keep_if", "r": "Enumerator"}, {"p": "ENV", "m": "keep_if { |name, value| }", "r": "Hash"}, {"p": "ENV", "m": "key(value)", "r": "name"}, {"p": "ENV", "m": "key?(name)", "r": "true or false"}, {"p": "ENV", "m": "keys", "r": "Array"}, {"p": "ENV", "m": "length", "r": ""}, {"p": "ENV", "m": "member?(name)", "r": "true or false"}, {"p": "ENV", "m": "rassoc(value)", "r": ""}, {"p": "ENV", "m": "rehash", "r": ""}, {"p": "ENV", "m": "reject", "r": "Enumerator"}, {"p": "ENV", "m": "reject { |name, value| }", "r": "Hash"}, {"p": "ENV", "m": "reject!", "r": "Enumerator"}, {"p": "ENV", "m": "reject! { |name, value| }", "r": "ENV or nil"}, {"p": "ENV", "m": "replace(hash)", "r": "env"}, {"p": "ENV", "m": "select", "r": "Enumerator"}, {"p": "ENV", "m": "select { |name, value| }", "r": "Hash"}, {"p": "ENV", "m": "select!", "r": "Enumerator"}, {"p": "ENV", "m": "select! { |name, value| }", "r": "ENV or nil"}, {"p": "ENV", "m": "shift", "r": "Array or nil"}, {"p": "ENV", "m": "size", "r": ""}, {"p": "ENV", "m": "store(name, value)", "r": "value"}, {"p": "ENV", "m": "to_a", "r": "Array"}, {"p": "ENV", "m": "to_h", "r": "hash"}, {"p": "ENV", "m": "to_hash", "r": "hash"}, {"p": "ENV", "m": "to_s", "r": "\"ENV\""}, {"p": "ENV", "m": "update(hash)", "r": "Hash"}, {"p": "ENV", "m": "update(hash) { |name, old_value, new_value| }", "r": "Hash"}, {"p": "ENV", "m": "value?(value)", "r": "true or false"}, {"p": "ENV", "m": "values", "r": "Array"}, {"p": "ENV", "m": "values_at(name, ...)", "r": "Array"}, {"p": "Etc", "m": "getgrgid(group_id)", "r": "Group"}, {"p": "Etc", "m": "getgrnam(name)", "r": "Group"}, {"p": "Etc", "m": "getlogin", "r": "String"}, {"p": "Etc", "m": "getpwnam(name)", "r": "Passwd"}, {"p": "Etc", "m": "getpwuid(uid)", "r": "Passwd"}, {"p": "Etc", "m": "passwd", "r": "Passwd"}, {"p": "Etc", "m": "passwd { |struct| block }", "r": "Passwd"}, {"p": "Etc", "m": "Group", "r": ""}, {"p": "Etc", "m": "Passwd", "r": ""}, {"p": "Exception", "m": "backtrace", "r": "array"}, {"p": "Exception", "m": "backtrace_locations", "r": "array"}, {"p": "Exception", "m": "cause", "r": "an_exception or nil"}, {"p": "Exception", "m": "exc == obj", "r": "true or false"}, {"p": "Exception", "m": "exception(string)", "r": "an_exception or exc"}, {"p": "Exception", "m": "full_message(highlight: bool, order: [:top or :bottom])", "r": "string"}, {"p": "Exception", "m": "inspect", "r": "string"}, {"p": "Exception", "m": "message", "r": "string"}, {"p": "Exception", "m": "new(msg = nil)", "r": "exception"}, {"p": "Exception", "m": "set_backtrace(backtrace)", "r": "array"}, {"p": "Exception", "m": "to_s", "r": "string"}, {"p": "Exception", "m": "to_tty?", "r": "true or false"}, {"p": "FalseClass", "m": "false & obj", "r": "false"}, {"p": "FalseClass", "m": "false ^ obj", "r": "true or false"}, {"p": "FalseClass", "m": "false | obj", "r": "true or false"}, {"p": "FalseClass", "m": "nil   ^ obj", "r": "true or false"}, {"p": "FalseClass", "m": "nil   | obj", "r": "true or false"}, {"p": "FalseClass", "m": "nil & obj", "r": "false"}, {"p": "FalseClass", "m": "obj === other", "r": "true or false"}, {"p": "FalseClass", "m": "to_s", "r": "\"false\""}, {"p": "Fcntl", "m": "FD_CLOEXEC", "r": ""}, {"p": "Fcntl", "m": "F_DUPFD", "r": ""}, {"p": "Fcntl", "m": "F_GETFD", "r": ""}, {"p": "Fcntl", "m": "F_GETFL", "r": ""}, {"p": "Fcntl", "m": "F_GETLK", "r": ""}, {"p": "Fcntl", "m": "F_RDLCK", "r": ""}, {"p": "Fcntl", "m": "F_SETFD", "r": ""}, {"p": "Fcntl", "m": "F_SETFL", "r": ""}, {"p": "Fcntl", "m": "F_SETLK", "r": ""}, {"p": "Fcntl", "m": "F_SETLKW", "r": ""}, {"p": "Fcntl", "m": "F_UNLCK", "r": ""}, {"p": "Fcntl", "m": "F_WRLCK", "r": ""}, {"p": "Fcntl", "m": "O_ACCMODE", "r": ""}, {"p": "Fcntl", "m": "O_APPEND", "r": ""}, {"p": "Fcntl", "m": "O_CREAT", "r": ""}, {"p": "Fcntl", "m": "O_EXCL", "r": ""}, {"p": "Fcntl", "m": "O_NDELAY", "r": ""}, {"p": "Fcntl", "m": "O_NOCTTY", "r": ""}, {"p": "Fcntl", "m": "O_NONBLOCK", "r": ""}, {"p": "Fcntl", "m": "O_RDONLY", "r": ""}, {"p": "Fcntl", "m": "O_RDWR", "r": ""}, {"p": "Fcntl", "m": "O_TRUNC", "r": ""}, {"p": "Fcntl", "m": "O_WRONLY", "r": ""}, {"p": "Fiber", "m": "alive?", "r": "true or false"}, {"p": "Fiber", "m": "current()", "r": "fiber"}, {"p": "Fiber", "m": "resume(args, ...)", "r": "obj"}, {"p": "Fiber", "m": "to_s", "r": "string"}, {"p": "Fiber", "m": "transfer(args, ...)", "r": "obj"}, {"p": "Fiber", "m": "yield(args, ...)", "r": "obj"}, {"p": "Fiddle", "m": "dlopen(library)", "r": "Fiddle::Handle"}, {"p": "Fiddle", "m": "dlunwrap(addr)", "r": ""}, {"p": "Fiddle", "m": "dlwrap(val)", "r": ""}, {"p": "Fiddle", "m": "free(addr)", "r": ""}, {"p": "Fiddle", "m": "malloc(size)", "r": ""}, {"p": "Fiddle", "m": "realloc(addr, size)", "r": ""}, {"p": "Fiddle", "m": "ALIGN_CHAR", "r": ""}, {"p": "Fiddle", "m": "ALIGN_DOUBLE", "r": ""}, {"p": "Fiddle", "m": "ALIGN_FLOAT", "r": ""}, {"p": "Fiddle", "m": "ALIGN_INT", "r": ""}, {"p": "Fiddle", "m": "ALIGN_INTPTR_T", "r": ""}, {"p": "Fiddle", "m": "ALIGN_LONG", "r": ""}, {"p": "Fiddle", "m": "ALIGN_LONG_LONG", "r": ""}, {"p": "Fiddle", "m": "ALIGN_PTRDIFF_T", "r": ""}, {"p": "Fiddle", "m": "ALIGN_SHORT", "r": ""}, {"p": "Fiddle", "m": "ALIGN_SIZE_T", "r": ""}, {"p": "Fiddle", "m": "ALIGN_SSIZE_T", "r": ""}, {"p": "Fiddle", "m": "ALIGN_UINTPTR_T", "r": ""}, {"p": "Fiddle", "m": "ALIGN_VOIDP", "r": ""}, {"p": "Fiddle", "m": "BUILD_RUBY_PLATFORM", "r": ""}, {"p": "Fiddle", "m": "RUBY_FREE", "r": ""}, {"p": "Fiddle", "m": "SIZEOF_CHAR", "r": ""}, {"p": "Fiddle", "m": "SIZEOF_DOUBLE", "r": ""}, {"p": "Fiddle", "m": "SIZEOF_FLOAT", "r": ""}, {"p": "Fiddle", "m": "SIZEOF_INT", "r": ""}, {"p": "Fiddle", "m": "SIZEOF_INTPTR_T", "r": ""}, {"p": "Fiddle", "m": "SIZEOF_LONG", "r": ""}, {"p": "Fiddle", "m": "SIZEOF_LONG_LONG", "r": ""}, {"p": "Fiddle", "m": "SIZEOF_PTRDIFF_T", "r": ""}, {"p": "Fiddle", "m": "SIZEOF_SHORT", "r": ""}, {"p": "Fiddle", "m": "SIZEOF_SIZE_T", "r": ""}, {"p": "Fiddle", "m": "SIZEOF_SSIZE_T", "r": ""}, {"p": "Fiddle", "m": "SIZEOF_UINTPTR_T", "r": ""}, {"p": "Fiddle", "m": "SIZEOF_VOIDP", "r": ""}, {"p": "Fiddle", "m": "TYPE_CHAR", "r": ""}, {"p": "Fiddle", "m": "TYPE_DOUBLE", "r": ""}, {"p": "Fiddle", "m": "TYPE_FLOAT", "r": ""}, {"p": "Fiddle", "m": "TYPE_INT", "r": ""}, {"p": "Fiddle", "m": "TYPE_INTPTR_T", "r": ""}, {"p": "Fiddle", "m": "TYPE_LONG", "r": ""}, {"p": "Fiddle", "m": "TYPE_LONG_LONG", "r": ""}, {"p": "Fiddle", "m": "TYPE_PTRDIFF_T", "r": ""}, {"p": "Fiddle", "m": "TYPE_SHORT", "r": ""}, {"p": "Fiddle", "m": "TYPE_SIZE_T", "r": ""}, {"p": "Fiddle", "m": "TYPE_SSIZE_T", "r": ""}, {"p": "Fiddle", "m": "TYPE_UINTPTR_T", "r": ""}, {"p": "Fiddle", "m": "TYPE_VOID", "r": ""}, {"p": "Fiddle", "m": "TYPE_VOIDP", "r": ""}, {"p": "Fiddle", "m": "WINDOWS", "r": ""}, {"p": "File", "m": "absolute_path(file_name [, dir_string] )", "r": "abs_file_name"}, {"p": "File", "m": "atime", "r": "time"}, {"p": "File", "m": "atime(file_name)", "r": "time"}, {"p": "File", "m": "basename(file_name [, suffix] )", "r": "base_name"}, {"p": "File", "m": "birthtime", "r": "time"}, {"p": "File", "m": "birthtime(file_name)", "r": "time"}, {"p": "File", "m": "blockdev?(file_name)", "r": "true or false"}, {"p": "File", "m": "chardev?(file_name)", "r": "true or false"}, {"p": "File", "m": "chmod(mode_int)", "r": "0"}, {"p": "File", "m": "chmod(mode_int, file_name, ... )", "r": "integer"}, {"p": "File", "m": "chown(owner_int, group_int )", "r": "0"}, {"p": "File", "m": "chown(owner_int, group_int, file_name,... )", "r": "integer"}, {"p": "File", "m": "ctime", "r": "time"}, {"p": "File", "m": "ctime(file_name)", "r": "time"}, {"p": "File", "m": "delete(file_name, ...)", "r": "integer"}, {"p": "File", "m": "directory?(file_name)", "r": "true or false"}, {"p": "File", "m": "dirname(file_name)", "r": "dir_name"}, {"p": "File", "m": "executable?(file_name)", "r": "true or false"}, {"p": "File", "m": "executable_real?(file_name)", "r": "true or false"}, {"p": "File", "m": "exist?(file_name)", "r": "true or false"}, {"p": "File", "m": "exists?(file_name)", "r": "true or false"}, {"p": "File", "m": "expand_path(file_name [, dir_string] )", "r": "abs_file_name"}, {"p": "File", "m": "extname(path)", "r": "string"}, {"p": "File", "m": "file?(file)", "r": "true or false"}, {"p": "File", "m": "flock(locking_constant)", "r": "0 or false"}, {"p": "File", "m": "fnmatch( pattern, path, [flags] )", "r": "(true or false)"}, {"p": "File", "m": "fnmatch?( pattern, path, [flags] )", "r": "(true or false)"}, {"p": "File", "m": "ftype(file_name)", "r": "string"}, {"p": "File", "m": "grpowned?(file_name)", "r": "true or false"}, {"p": "File", "m": "identical?(file_1, file_2)", "r": "true or false"}, {"p": "File", "m": "join(string, ...)", "r": "string"}, {"p": "File", "m": "lchmod(mode_int, file_name, ...)", "r": "integer"}, {"p": "File", "m": "lchown(owner_int, group_int, file_name,..)", "r": "integer"}, {"p": "File", "m": "link(old_name, new_name)", "r": "0"}, {"p": "File", "m": "lstat", "r": "stat"}, {"p": "File", "m": "lstat(file_name)", "r": "stat"}, {"p": "File", "m": "lutime(atime, mtime, file_name,...)", "r": "integer"}, {"p": "File", "m": "mkfifo(file_name, mode=0666)", "r": "0"}, {"p": "File", "m": "mtime", "r": "time"}, {"p": "File", "m": "mtime(file_name)", "r": "time"}, {"p": "File", "m": "new(filename [, mode [, perm]] [, opt])", "r": "file"}, {"p": "File", "m": "new(filename, mode=\"r\" [, opt])", "r": "file"}, {"p": "File", "m": "open(filename [, mode [, perm]] [, opt])", "r": "file"}, {"p": "File", "m": "open(filename [, mode [, perm]] [, opt]) {|file| block }", "r": "obj"}, {"p": "File", "m": "open(filename, mode=\"r\" [, opt])", "r": "file"}, {"p": "File", "m": "open(filename, mode=\"r\" [, opt]) {|file| block }", "r": "obj"}, {"p": "File", "m": "owned?(file_name)", "r": "true or false"}, {"p": "File", "m": "path", "r": "filename"}, {"p": "File", "m": "path(path)", "r": "string"}, {"p": "File", "m": "pipe?(file_name)", "r": "true or false"}, {"p": "File", "m": "readable?(file_name)", "r": "true or false"}, {"p": "File", "m": "readable_real?(file_name)", "r": "true or false"}, {"p": "File", "m": "readlink(link_name)", "r": "file_name"}, {"p": "File", "m": "realdirpath(pathname [, dir_string])", "r": "real_pathname"}, {"p": "File", "m": "realpath(pathname [, dir_string])", "r": "real_pathname"}, {"p": "File", "m": "rename(old_name, new_name)", "r": "0"}, {"p": "File", "m": "setgid?(file_name)", "r": "true or false"}, {"p": "File", "m": "setuid?(file_name)", "r": "true or false"}, {"p": "File", "m": "size", "r": "integer"}, {"p": "File", "m": "size(file_name)", "r": "integer"}, {"p": "File", "m": "size?(file_name)", "r": "Integer or nil"}, {"p": "File", "m": "socket?(file_name)", "r": "true or false"}, {"p": "File", "m": "split(file_name)", "r": "array"}, {"p": "File", "m": "stat(file_name)", "r": "stat"}, {"p": "File", "m": "sticky?(file_name)", "r": "true or false"}, {"p": "File", "m": "symlink(old_name, new_name)", "r": "0"}, {"p": "File", "m": "symlink?(file_name)", "r": "true or false"}, {"p": "File", "m": "to_path", "r": "filename"}, {"p": "File", "m": "truncate(file_name, integer)", "r": "0"}, {"p": "File", "m": "truncate(integer)", "r": "0"}, {"p": "File", "m": "umask()", "r": "integer"}, {"p": "File", "m": "umask(integer)", "r": "integer"}, {"p": "File", "m": "unlink(file_name, ...)", "r": "integer"}, {"p": "File", "m": "utime(atime, mtime, file_name,...)", "r": "integer"}, {"p": "File", "m": "world_readable?(file_name)", "r": "integer or nil"}, {"p": "File", "m": "world_writable?(file_name)", "r": "integer or nil"}, {"p": "File", "m": "writable?(file_name)", "r": "true or false"}, {"p": "File", "m": "writable_real?(file_name)", "r": "true or false"}, {"p": "File", "m": "zero?(file_name)", "r": "true or false"}, {"p": "File", "m": "ALT_SEPARATOR", "r": ""}, {"p": "File", "m": "PATH_SEPARATOR", "r": ""}, {"p": "File", "m": "SEPARATOR", "r": ""}, {"p": "File", "m": "Separator", "r": ""}, {"p": "FileTest", "m": "blockdev?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "chardev?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "directory?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "executable?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "executable_real?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "exist?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "exists?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "file?(file)", "r": "true or false"}, {"p": "FileTest", "m": "grpowned?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "identical?(file_1, file_2)", "r": "true or false"}, {"p": "FileTest", "m": "owned?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "pipe?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "readable?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "readable_real?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "setgid?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "setuid?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "size(file_name)", "r": "integer"}, {"p": "FileTest", "m": "size?(file_name)", "r": "Integer or nil"}, {"p": "FileTest", "m": "socket?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "sticky?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "symlink?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "world_readable?(file_name)", "r": "integer or nil"}, {"p": "FileTest", "m": "world_writable?(file_name)", "r": "integer or nil"}, {"p": "FileTest", "m": "writable?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "writable_real?(file_name)", "r": "true or false"}, {"p": "FileTest", "m": "zero?(file_name)", "r": "true or false"}, {"p": "FileUtils", "m": "ln(target,  dir, force: nil, noop: nil, verbose: nil)", "r": ""}, {"p": "FileUtils", "m": "ln(target, link, force: nil, noop: nil, verbose: nil)", "r": ""}, {"p": "FileUtils", "m": "ln(targets, dir, force: nil, noop: nil, verbose: nil)", "r": ""}, {"p": "FileUtils", "m": "ln_s(target,  dir, force: nil, noop: nil, verbose: nil)", "r": ""}, {"p": "FileUtils", "m": "ln_s(target, link, force: nil, noop: nil, verbose: nil)", "r": ""}, {"p": "FileUtils", "m": "ln_s(targets, dir, force: nil, noop: nil, verbose: nil)", "r": ""}, {"p": "FileUtils", "m": "ln_sf(*args)", "r": ""}, {"p": "FileUtils", "m": "LOW_METHODS", "r": ""}, {"p": "FileUtils", "m": "METHODS", "r": ""}, {"p": "FileUtils", "m": "VERSION", "r": ""}, {"p": "Float", "m": "-float", "r": "float"}, {"p": "Float", "m": "abs", "r": "float"}, {"p": "Float", "m": "angle", "r": "0 or float"}, {"p": "Float", "m": "arg", "r": "0 or float"}, {"p": "Float", "m": "ceil([ndigits])", "r": "integer or float"}, {"p": "Float", "m": "coerce(numeric)", "r": "array"}, {"p": "Float", "m": "denominator", "r": "integer"}, {"p": "Float", "m": "divmod(numeric)", "r": "array"}, {"p": "Float", "m": "eql?(obj)", "r": "true or false"}, {"p": "Float", "m": "fdiv(numeric)", "r": "float"}, {"p": "Float", "m": "finite?", "r": "true or false"}, {"p": "Float", "m": "float % other", "r": "float"}, {"p": "Float", "m": "float * other", "r": "float"}, {"p": "Float", "m": "float ** other", "r": "float"}, {"p": "Float", "m": "float + other", "r": "float"}, {"p": "Float", "m": "float - other", "r": "float"}, {"p": "Float", "m": "float / other", "r": "float"}, {"p": "Float", "m": "float < real", "r": "true or false"}, {"p": "Float", "m": "float <= real", "r": "true or false"}, {"p": "Float", "m": "float <=> real", "r": "-1, 0, +1, or nil"}, {"p": "Float", "m": "float == obj", "r": "true or false"}, {"p": "Float", "m": "float > real", "r": "true or false"}, {"p": "Float", "m": "float >= real", "r": "true or false"}, {"p": "Float", "m": "floor([ndigits])", "r": "integer or float"}, {"p": "Float", "m": "hash", "r": "integer"}, {"p": "Float", "m": "infinite?", "r": "-1, 1, or nil"}, {"p": "Float", "m": "magnitude", "r": "float"}, {"p": "Float", "m": "modulo(other)", "r": "float"}, {"p": "Float", "m": "nan?", "r": "true or false"}, {"p": "Float", "m": "negative?", "r": "true or false"}, {"p": "Float", "m": "next_float", "r": "float"}, {"p": "Float", "m": "numerator", "r": "integer"}, {"p": "Float", "m": "phase", "r": "0 or float"}, {"p": "Float", "m": "positive?", "r": "true or false"}, {"p": "Float", "m": "prev_float", "r": "float"}, {"p": "Float", "m": "quo(numeric)", "r": "float"}, {"p": "Float", "m": "rationalize([eps])", "r": "rational"}, {"p": "Float", "m": "round([ndigits] [, half: mode])", "r": "integer or float"}, {"p": "Float", "m": "to_d", "r": "bigdecimal"}, {"p": "Float", "m": "to_d(precision)", "r": "bigdecimal"}, {"p": "Float", "m": "to_f", "r": "self"}, {"p": "Float", "m": "to_i", "r": "integer"}, {"p": "Float", "m": "to_int", "r": "integer"}, {"p": "Float", "m": "to_r", "r": "rational"}, {"p": "Float", "m": "to_s", "r": "string"}, {"p": "Float", "m": "truncate([ndigits])", "r": "integer or float"}, {"p": "Float", "m": "zero?", "r": "true or false"}, {"p": "Float", "m": "DIG", "r": ""}, {"p": "Float", "m": "EPSILON", "r": ""}, {"p": "Float", "m": "INFINITY", "r": ""}, {"p": "Float", "m": "MANT_DIG", "r": ""}, {"p": "Float", "m": "MAX", "r": ""}, {"p": "Float", "m": "MAX_10_EXP", "r": ""}, {"p": "Float", "m": "MAX_EXP", "r": ""}, {"p": "Float", "m": "MIN", "r": ""}, {"p": "Float", "m": "MIN_10_EXP", "r": ""}, {"p": "Float", "m": "MIN_EXP", "r": ""}, {"p": "Float", "m": "NAN", "r": ""}, {"p": "Float", "m": "RADIX", "r": ""}, {"p": "Float", "m": "ROUNDS", "r": ""}, {"p": "Forwardable", "m": "delegate [method, method, ...]", "r": "accessor"}, {"p": "Forwardable", "m": "delegate method", "r": "accessor"}, {"p": "Forwardable", "m": "FORWARDABLE_VERSION", "r": ""}, {"p": "GC", "m": "count", "r": "Integer"}, {"p": "GC", "m": "disable", "r": "true or false"}, {"p": "GC", "m": "enable", "r": "true or false"}, {"p": "GC", "m": "garbage_collect", "r": "nil"}, {"p": "GC", "m": "garbage_collect(full_mark: true, immediate_sweep: true)", "r": "nil"}, {"p": "GC", "m": "include GC; garbage_collect", "r": "nil"}, {"p": "GC", "m": "latest_gc_info -> {:gc_by", "r": ":newobj}"}, {"p": "GC", "m": "latest_gc_info(:major_by)", "r": ":malloc"}, {"p": "GC", "m": "latest_gc_info(hash)", "r": "hash"}, {"p": "GC", "m": "malloc_allocated_size", "r": "Integer"}, {"p": "GC", "m": "malloc_allocations", "r": "Integer"}, {"p": "GC", "m": "start", "r": "nil"}, {"p": "GC", "m": "start(full_mark: true, immediate_sweep: true)", "r": "nil"}, {"p": "GC", "m": "stat", "r": "Hash"}, {"p": "GC", "m": "stat(:key)", "r": "Numeric"}, {"p": "GC", "m": "stat(hash)", "r": "hash"}, {"p": "GC", "m": "stress", "r": "integer, true or false"}, {"p": "GC", "m": "stress = flag", "r": "flag"}, {"p": "GC", "m": "verify_internal_consistency", "r": "nil"}, {"p": "GC", "m": "INTERNAL_CONSTANTS", "r": ""}, {"p": "GC", "m": "OPTS", "r": ""}, {"p": "GDBM", "m": "cachesize = size", "r": "size"}, {"p": "GDBM", "m": "clear", "r": "gdbm"}, {"p": "GDBM", "m": "close", "r": "nil"}, {"p": "GDBM", "m": "closed?", "r": "true or false"}, {"p": "GDBM", "m": "delete(key)", "r": "value or nil"}, {"p": "GDBM", "m": "delete_if { |key, value| block }", "r": "gdbm"}, {"p": "GDBM", "m": "each_key { |key| block }", "r": "gdbm"}, {"p": "GDBM", "m": "each_pair { |key, value| block }", "r": "gdbm"}, {"p": "GDBM", "m": "each_value { |value| block }", "r": "gdbm"}, {"p": "GDBM", "m": "empty?", "r": "true or false"}, {"p": "GDBM", "m": "fastmode = boolean", "r": "boolean"}, {"p": "GDBM", "m": "fetch(key [, default])", "r": "value"}, {"p": "GDBM", "m": "gdbm[key]", "r": "value"}, {"p": "GDBM", "m": "gdbm[key]= value", "r": "value"}, {"p": "GDBM", "m": "has_key?(k)", "r": "true or false"}, {"p": "GDBM", "m": "has_value?(v)", "r": "true or false"}, {"p": "GDBM", "m": "include?(k)", "r": "true or false"}, {"p": "GDBM", "m": "invert", "r": "hash"}, {"p": "GDBM", "m": "key(value)", "r": "key"}, {"p": "GDBM", "m": "key?(k)", "r": "true or false"}, {"p": "GDBM", "m": "keys", "r": "array"}, {"p": "GDBM", "m": "length", "r": "fixnum"}, {"p": "GDBM", "m": "member?(k)", "r": "true or false"}, {"p": "GDBM", "m": "new(filename, mode = 0666, flags = nil)", "r": ""}, {"p": "GDBM", "m": "open(filename, mode = 0666, flags = nil)", "r": ""}, {"p": "GDBM", "m": "open(filename, mode = 0666, flags = nil) { |gdbm| ... }", "r": ""}, {"p": "GDBM", "m": "reject { |key, value| block }", "r": "hash"}, {"p": "GDBM", "m": "reject! { |key, value| block }", "r": "gdbm"}, {"p": "GDBM", "m": "reorganize", "r": "gdbm"}, {"p": "GDBM", "m": "replace(other)", "r": "gdbm"}, {"p": "GDBM", "m": "select { |key, value| block }", "r": "array"}, {"p": "GDBM", "m": "shift", "r": "(key, value) or nil"}, {"p": "GDBM", "m": "size", "r": "fixnum"}, {"p": "GDBM", "m": "store(key, value)", "r": "value"}, {"p": "GDBM", "m": "sync", "r": "gdbm"}, {"p": "GDBM", "m": "syncmode = boolean", "r": "boolean"}, {"p": "GDBM", "m": "to_a", "r": "array"}, {"p": "GDBM", "m": "to_hash", "r": "hash"}, {"p": "GDBM", "m": "update(other)", "r": "gdbm"}, {"p": "GDBM", "m": "value?(v)", "r": "true or false"}, {"p": "GDBM", "m": "values", "r": "array"}, {"p": "GDBM", "m": "values_at(key, ...)", "r": "array"}, {"p": "GDBM", "m": "FAST", "r": ""}, {"p": "GDBM", "m": "NEWDB", "r": ""}, {"p": "GDBM", "m": "NOLOCK", "r": ""}, {"p": "GDBM", "m": "READER", "r": ""}, {"p": "GDBM", "m": "SYNC", "r": ""}, {"p": "GDBM", "m": "VERSION", "r": ""}, {"p": "GDBM", "m": "WRCREAT", "r": ""}, {"p": "GDBM", "m": "WRITER", "r": ""}, {"p": "Gem", "m": "DEFAULT_HOST", "r": ""}, {"p": "Gem", "m": "GEM_DEP_FILES", "r": ""}, {"p": "Gem", "m": "LOADED_SPECS_MUTEX", "r": ""}, {"p": "Gem", "m": "MARSHAL_SPEC_DIR", "r": ""}, {"p": "Gem", "m": "RDoc", "r": ""}, {"p": "Gem", "m": "READ_BINARY_ERRORS", "r": ""}, {"p": "Gem", "m": "REPOSITORY_DEFAULT_GEM_SUBDIRECTORIES", "r": ""}, {"p": "Gem", "m": "REPOSITORY_SUBDIRECTORIES", "r": ""}, {"p": "Gem", "m": "RUBYGEMS_DIR", "r": ""}, {"p": "Gem", "m": "VERSION", "r": ""}, {"p": "Gem", "m": "WIN_PATTERNS", "r": ""}, {"p": "Gem", "m": "WRITE_BINARY_ERRORS", "r": ""}, {"p": "GetoptLong", "m": "ARGUMENT_FLAGS", "r": ""}, {"p": "GetoptLong", "m": "ORDERINGS", "r": ""}, {"p": "GetoptLong", "m": "STATUS_TERMINATED", "r": ""}, {"p": "Hash", "m": "Hash[ [ [key, value], ... ] ]", "r": "new_hash"}, {"p": "Hash", "m": "Hash[ key, value, ... ]", "r": "new_hash"}, {"p": "Hash", "m": "Hash[ object ]", "r": "new_hash"}, {"p": "Hash", "m": "any? [{ |(key, value)| block }]", "r": "true or false"}, {"p": "Hash", "m": "assoc(obj)", "r": "an_array  or  nil"}, {"p": "Hash", "m": "clear", "r": "hsh"}, {"p": "Hash", "m": "compact", "r": "new_hash"}, {"p": "Hash", "m": "compact!", "r": "hsh or nil"}, {"p": "Hash", "m": "compare_by_identity", "r": "hsh"}, {"p": "Hash", "m": "compare_by_identity?", "r": "true or false"}, {"p": "Hash", "m": "default = obj", "r": "obj"}, {"p": "Hash", "m": "default(key=nil)", "r": "obj"}, {"p": "Hash", "m": "default_proc = proc_obj or nil", "r": ""}, {"p": "Hash", "m": "default_proc", "r": "anObject"}, {"p": "Hash", "m": "delete(key)", "r": "value"}, {"p": "Hash", "m": "delete(key) {| key | block }", "r": "value"}, {"p": "Hash", "m": "delete_if", "r": "an_enumerator"}, {"p": "Hash", "m": "delete_if {| key, value | block }", "r": "hsh"}, {"p": "Hash", "m": "dig(key, ...)", "r": "object"}, {"p": "Hash", "m": "each", "r": "an_enumerator"}, {"p": "Hash", "m": "each      {| key, value | block }", "r": "hsh"}, {"p": "Hash", "m": "each_key", "r": "an_enumerator"}, {"p": "Hash", "m": "each_key {| key | block }", "r": "hsh"}, {"p": "Hash", "m": "each_pair", "r": "an_enumerator"}, {"p": "Hash", "m": "each_pair {| key, value | block }", "r": "hsh"}, {"p": "Hash", "m": "each_value", "r": "an_enumerator"}, {"p": "Hash", "m": "each_value {| value | block }", "r": "hsh"}, {"p": "Hash", "m": "empty?", "r": "true or false"}, {"p": "Hash", "m": "eql?(other)", "r": "true or false"}, {"p": "Hash", "m": "fetch(key [, default] )", "r": "obj"}, {"p": "Hash", "m": "fetch(key) {| key | block }", "r": "obj"}, {"p": "Hash", "m": "fetch_values(key, ...)", "r": "array"}, {"p": "Hash", "m": "fetch_values(key, ...) { |key| block }", "r": "array"}, {"p": "Hash", "m": "flatten", "r": "an_array"}, {"p": "Hash", "m": "flatten(level)", "r": "an_array"}, {"p": "Hash", "m": "has_key?(key)", "r": "true or false"}, {"p": "Hash", "m": "has_value?(value)", "r": "true or false"}, {"p": "Hash", "m": "hash", "r": "integer"}, {"p": "Hash", "m": "hash < other", "r": "true or false"}, {"p": "Hash", "m": "hash <= other", "r": "true or false"}, {"p": "Hash", "m": "hash > other", "r": "true or false"}, {"p": "Hash", "m": "hash >= other", "r": "true or false"}, {"p": "Hash", "m": "hsh == other_hash", "r": "true or false"}, {"p": "Hash", "m": "hsh[key]", "r": "value"}, {"p": "Hash", "m": "hsh[key] = value", "r": "value"}, {"p": "Hash", "m": "include?(key)", "r": "true or false"}, {"p": "Hash", "m": "inspect", "r": "string"}, {"p": "Hash", "m": "invert", "r": "new_hash"}, {"p": "Hash", "m": "keep_if", "r": "an_enumerator"}, {"p": "Hash", "m": "keep_if {| key, value | block }", "r": "hsh"}, {"p": "Hash", "m": "key(value)", "r": "key"}, {"p": "Hash", "m": "key?(key)", "r": "true or false"}, {"p": "Hash", "m": "keys", "r": "array"}, {"p": "Hash", "m": "length", "r": "integer"}, {"p": "Hash", "m": "member?(key)", "r": "true or false"}, {"p": "Hash", "m": "merge!(other_hash)", "r": "hsh"}, {"p": "Hash", "m": "merge!(other_hash){|key, oldval, newval| block}", "r": "hsh"}, {"p": "Hash", "m": "merge(other_hash)", "r": "new_hash"}, {"p": "Hash", "m": "merge(other_hash){|key, oldval, newval| block}", "r": "new_hash"}, {"p": "Hash", "m": "new", "r": "new_hash"}, {"p": "Hash", "m": "new {|hash, key| block }", "r": "new_hash"}, {"p": "Hash", "m": "new(obj)", "r": "new_hash"}, {"p": "Hash", "m": "rassoc(obj)", "r": "an_array or nil"}, {"p": "Hash", "m": "rehash", "r": "hsh"}, {"p": "Hash", "m": "reject", "r": "an_enumerator"}, {"p": "Hash", "m": "reject {|key, value| block}", "r": "a_hash"}, {"p": "Hash", "m": "reject!", "r": "an_enumerator"}, {"p": "Hash", "m": "reject! {| key, value | block }", "r": "hsh or nil"}, {"p": "Hash", "m": "replace(other_hash)", "r": "hsh"}, {"p": "Hash", "m": "select", "r": "an_enumerator"}, {"p": "Hash", "m": "select {|key, value| block}", "r": "a_hash"}, {"p": "Hash", "m": "select!", "r": "an_enumerator"}, {"p": "Hash", "m": "select! {| key, value | block }", "r": "hsh or nil"}, {"p": "Hash", "m": "shift", "r": "anArray or obj"}, {"p": "Hash", "m": "size", "r": "integer"}, {"p": "Hash", "m": "slice(*keys)", "r": "a_hash"}, {"p": "Hash", "m": "store(key, value)", "r": "value"}, {"p": "Hash", "m": "to_a", "r": "array"}, {"p": "Hash", "m": "to_h", "r": "hsh or new_hash"}, {"p": "Hash", "m": "to_hash", "r": "hsh"}, {"p": "Hash", "m": "to_s", "r": "string"}, {"p": "Hash", "m": "transform_keys", "r": "an_enumerator"}, {"p": "Hash", "m": "transform_keys {|key| block }", "r": "new_hash"}, {"p": "Hash", "m": "transform_keys!", "r": "an_enumerator"}, {"p": "Hash", "m": "transform_keys! {|key| block }", "r": "hsh"}, {"p": "Hash", "m": "transform_values", "r": "an_enumerator"}, {"p": "Hash", "m": "transform_values {|value| block }", "r": "new_hash"}, {"p": "Hash", "m": "transform_values!", "r": "an_enumerator"}, {"p": "Hash", "m": "transform_values! {|value| block }", "r": "hsh"}, {"p": "Hash", "m": "try_convert(obj)", "r": "hash or nil"}, {"p": "Hash", "m": "update(other_hash)", "r": "hsh"}, {"p": "Hash", "m": "update(other_hash){|key, oldval, newval| block}", "r": "hsh"}, {"p": "Hash", "m": "value?(value)", "r": "true or false"}, {"p": "Hash", "m": "values", "r": "array"}, {"p": "Hash", "m": "values_at(key, ...)", "r": "array"}, {"p": "HTTPMovedTemporarily", "m": "HAS_BODY", "r": ""}, {"p": "HTTPMultipleChoice", "m": "HAS_BODY", "r": ""}, {"p": "HTTPRequestURITooLarge", "m": "HAS_BODY", "r": ""}, {"p": "Integer", "m": "-int", "r": "integer"}, {"p": "Integer", "m": "abs", "r": "integer"}, {"p": "Integer", "m": "allbits?(mask)", "r": "true or false"}, {"p": "Integer", "m": "anybits?(mask)", "r": "true or false"}, {"p": "Integer", "m": "bit_length", "r": "integer"}, {"p": "Integer", "m": "ceil([ndigits])", "r": "integer or float"}, {"p": "Integer", "m": "chr([encoding])", "r": "string"}, {"p": "Integer", "m": "coerce(numeric)", "r": "array"}, {"p": "Integer", "m": "denominator", "r": "1"}, {"p": "Integer", "m": "digits", "r": "array"}, {"p": "Integer", "m": "digits(base)", "r": "array"}, {"p": "Integer", "m": "div(numeric)", "r": "integer"}, {"p": "Integer", "m": "divmod(numeric)", "r": "array"}, {"p": "Integer", "m": "downto(limit)", "r": "an_enumerator"}, {"p": "Integer", "m": "downto(limit) {|i| block }", "r": "self"}, {"p": "Integer", "m": "even?", "r": "true or false"}, {"p": "Integer", "m": "fdiv(numeric)", "r": "float"}, {"p": "Integer", "m": "floor([ndigits])", "r": "integer or float"}, {"p": "Integer", "m": "gcd(other_int)", "r": "integer"}, {"p": "Integer", "m": "gcdlcm(other_int)", "r": "array"}, {"p": "Integer", "m": "int % other", "r": "real"}, {"p": "Integer", "m": "int & other_int", "r": "integer"}, {"p": "Integer", "m": "int * numeric", "r": "numeric_result"}, {"p": "Integer", "m": "int ** numeric", "r": "numeric_result"}, {"p": "Integer", "m": "int + numeric", "r": "numeric_result"}, {"p": "Integer", "m": "int - numeric", "r": "numeric_result"}, {"p": "Integer", "m": "int / numeric", "r": "numeric_result"}, {"p": "Integer", "m": "int < real", "r": "true or false"}, {"p": "Integer", "m": "int << count", "r": "integer"}, {"p": "Integer", "m": "int <= real", "r": "true or false"}, {"p": "Integer", "m": "int <=> numeric", "r": "-1, 0, +1, or nil"}, {"p": "Integer", "m": "int == other", "r": "true or false"}, {"p": "Integer", "m": "int > real", "r": "true or false"}, {"p": "Integer", "m": "int >= real", "r": "true or false"}, {"p": "Integer", "m": "int >> count", "r": "integer"}, {"p": "Integer", "m": "int ^ other_int", "r": "integer"}, {"p": "Integer", "m": "int | other_int", "r": "integer"}, {"p": "Integer", "m": "int[n]", "r": "0, 1"}, {"p": "Integer", "m": "integer?", "r": "true"}, {"p": "Integer", "m": "lcm(other_int)", "r": "integer"}, {"p": "Integer", "m": "magnitude", "r": "integer"}, {"p": "Integer", "m": "modulo(other)", "r": "real"}, {"p": "Integer", "m": "next", "r": "integer"}, {"p": "Integer", "m": "nobits?(mask)", "r": "true or false"}, {"p": "Integer", "m": "numerator", "r": "self"}, {"p": "Integer", "m": "odd?", "r": "true or false"}, {"p": "Integer", "m": "ord", "r": "self"}, {"p": "Integer", "m": "pow(integer, integer)", "r": "integer"}, {"p": "Integer", "m": "pow(numeric)", "r": "numeric"}, {"p": "Integer", "m": "pred", "r": "integer"}, {"p": "Integer", "m": "rationalize([eps])", "r": "rational"}, {"p": "Integer", "m": "remainder(numeric)", "r": "real"}, {"p": "Integer", "m": "round([ndigits] [, half: mode])", "r": "integer or float"}, {"p": "Integer", "m": "size", "r": "int"}, {"p": "Integer", "m": "sqrt(n)", "r": "integer"}, {"p": "Integer", "m": "succ", "r": "integer"}, {"p": "Integer", "m": "times", "r": "an_enumerator"}, {"p": "Integer", "m": "times {|i| block }", "r": "self"}, {"p": "Integer", "m": "to_d", "r": "bigdecimal"}, {"p": "Integer", "m": "to_f", "r": "float"}, {"p": "Integer", "m": "to_i", "r": "integer"}, {"p": "Integer", "m": "to_int", "r": "integer"}, {"p": "Integer", "m": "to_r", "r": "rational"}, {"p": "Integer", "m": "to_s(base=10)", "r": "string"}, {"p": "Integer", "m": "truncate([ndigits])", "r": "integer or float"}, {"p": "Integer", "m": "upto(limit)", "r": "an_enumerator"}, {"p": "Integer", "m": "upto(limit) {|i| block }", "r": "self"}, {"p": "Integer", "m": "~int", "r": "integer"}, {"p": "Integer", "m": "GMP_VERSION", "r": ""}, {"p": "IO", "m": "IO#expect(pattern,timeout=9999999)", "r": "Array"}, {"p": "IO", "m": "IO#expect(pattern,timeout=9999999) { |result| ... }", "r": "nil"}, {"p": "IO", "m": "advise(advice, offset=0, len=0)", "r": "nil"}, {"p": "IO", "m": "autoclose = bool", "r": "true or false"}, {"p": "IO", "m": "autoclose?", "r": "true or false"}, {"p": "IO", "m": "binmode", "r": "ios"}, {"p": "IO", "m": "binmode?", "r": "true or false"}, {"p": "IO", "m": "binread(name, [length [, offset]] )", "r": "string"}, {"p": "IO", "m": "binwrite(name, string, [offset] )", "r": "integer"}, {"p": "IO", "m": "binwrite(name, string, [offset], open_args )", "r": "integer"}, {"p": "IO", "m": "close", "r": "nil"}, {"p": "IO", "m": "close_on_exec = bool", "r": "true or false"}, {"p": "IO", "m": "close_on_exec?", "r": "true or false"}, {"p": "IO", "m": "close_read", "r": "nil"}, {"p": "IO", "m": "close_write", "r": "nil"}, {"p": "IO", "m": "closed?", "r": "true or false"}, {"p": "IO", "m": "codepoints", "r": "an_enumerator"}, {"p": "IO", "m": "codepoints     {|c| block }", "r": "ios"}, {"p": "IO", "m": "console", "r": "#<File:/dev/tty>"}, {"p": "IO", "m": "console(sym, *args)", "r": ""}, {"p": "IO", "m": "cooked {|io| }", "r": ""}, {"p": "IO", "m": "cooked!", "r": ""}, {"p": "IO", "m": "copy_stream(src, dst)", "r": ""}, {"p": "IO", "m": "copy_stream(src, dst, copy_length)", "r": ""}, {"p": "IO", "m": "copy_stream(src, dst, copy_length, src_offset)", "r": ""}, {"p": "IO", "m": "each(...)", "r": "an_enumerator"}, {"p": "IO", "m": "each(limit [, getline_args])           {|line| block }", "r": "ios"}, {"p": "IO", "m": "each(sep, limit [, getline_args])      {|line| block }", "r": "ios"}, {"p": "IO", "m": "each(sep=$/ [, getline_args])          {|line| block }", "r": "ios"}, {"p": "IO", "m": "each_byte", "r": "an_enumerator"}, {"p": "IO", "m": "each_byte {|byte| block }", "r": "ios"}, {"p": "IO", "m": "each_char", "r": "an_enumerator"}, {"p": "IO", "m": "each_char {|c| block }", "r": "ios"}, {"p": "IO", "m": "each_codepoint", "r": "an_enumerator"}, {"p": "IO", "m": "each_codepoint {|c| block }", "r": "ios"}, {"p": "IO", "m": "each_line(...)", "r": "an_enumerator"}, {"p": "IO", "m": "each_line(limit [, getline_args])      {|line| block }", "r": "ios"}, {"p": "IO", "m": "each_line(sep, limit [, getline_args]) {|line| block }", "r": "ios"}, {"p": "IO", "m": "each_line(sep=$/ [, getline_args])     {|line| block }", "r": "ios"}, {"p": "IO", "m": "echo = flag", "r": ""}, {"p": "IO", "m": "echo?", "r": "true or false"}, {"p": "IO", "m": "eof", "r": "true or false"}, {"p": "IO", "m": "eof?", "r": "true or false"}, {"p": "IO", "m": "external_encoding", "r": "encoding"}, {"p": "IO", "m": "fcntl(integer_cmd, arg)", "r": "integer"}, {"p": "IO", "m": "fdatasync", "r": "0 or nil"}, {"p": "IO", "m": "fileno", "r": "integer"}, {"p": "IO", "m": "flush", "r": "ios"}, {"p": "IO", "m": "for_fd(fd, mode [, opt])", "r": "io"}, {"p": "IO", "m": "foreach(...)", "r": "an_enumerator"}, {"p": "IO", "m": "foreach(name, limit [, getline_args, open_args]) {|line| block }", "r": "nil"}, {"p": "IO", "m": "foreach(name, sep, limit [, getline_args, open_args]) {|line| block }", "r": "nil"}, {"p": "IO", "m": "foreach(name, sep=$/ [, getline_args, open_args]) {|line| block }", "r": "nil"}, {"p": "IO", "m": "fsync", "r": "0 or nil"}, {"p": "IO", "m": "getbyte", "r": "integer or nil"}, {"p": "IO", "m": "getc", "r": "string or nil"}, {"p": "IO", "m": "getch(min: nil, time: nil)", "r": "char"}, {"p": "IO", "m": "getpass(prompt=nil)", "r": "string"}, {"p": "IO", "m": "gets(limit [, getline_args])", "r": "string or nil"}, {"p": "IO", "m": "gets(sep, limit [, getline_args])", "r": "string or nil"}, {"p": "IO", "m": "gets(sep=$/ [, getline_args])", "r": "string or nil"}, {"p": "IO", "m": "iflush", "r": ""}, {"p": "IO", "m": "inspect", "r": "string"}, {"p": "IO", "m": "internal_encoding", "r": "encoding"}, {"p": "IO", "m": "ioctl(integer_cmd, arg)", "r": "integer"}, {"p": "IO", "m": "ioflush", "r": ""}, {"p": "IO", "m": "ios << obj", "r": "ios"}, {"p": "IO", "m": "isatty", "r": "true or false"}, {"p": "IO", "m": "lineno", "r": "integer"}, {"p": "IO", "m": "lineno = integer", "r": "integer"}, {"p": "IO", "m": "new(fd [, mode] [, opt])", "r": "io"}, {"p": "IO", "m": "noecho {|io| }", "r": ""}, {"p": "IO", "m": "nonblock = boolean", "r": "boolean"}, {"p": "IO", "m": "nonblock {|io| }", "r": "io"}, {"p": "IO", "m": "nonblock(boolean) {|io| }", "r": "io"}, {"p": "IO", "m": "nonblock?", "r": "boolean"}, {"p": "IO", "m": "nread", "r": "int"}, {"p": "IO", "m": "oflush", "r": ""}, {"p": "IO", "m": "open(fd, mode=\"r\" [, opt])", "r": "io"}, {"p": "IO", "m": "open(fd, mode=\"r\" [, opt]) {|io| block }", "r": "obj"}, {"p": "IO", "m": "pid", "r": "integer"}, {"p": "IO", "m": "pipe", "r": "[read_io, write_io]"}, {"p": "IO", "m": "pipe(\"ext_enc:int_enc\" [, opt])", "r": "[read_io, write_io]"}, {"p": "IO", "m": "pipe(...) {|read_io, write_io| ... }", "r": ""}, {"p": "IO", "m": "pipe(ext_enc)", "r": "[read_io, write_io]"}, {"p": "IO", "m": "pipe(ext_enc, int_enc [, opt])", "r": "[read_io, write_io]"}, {"p": "IO", "m": "popen([env,] cmd, mode=\"r\" [, opt])", "r": "io"}, {"p": "IO", "m": "popen([env,] cmd, mode=\"r\" [, opt]) {|io| block }", "r": "obj"}, {"p": "IO", "m": "pos", "r": "integer"}, {"p": "IO", "m": "pos = integer", "r": "integer"}, {"p": "IO", "m": "pread(maxlen, offset[, outbuf])", "r": "string"}, {"p": "IO", "m": "print", "r": "nil"}, {"p": "IO", "m": "print(obj, ...)", "r": "nil"}, {"p": "IO", "m": "printf(format_string [, obj, ...])", "r": "nil"}, {"p": "IO", "m": "putc(obj)", "r": "obj"}, {"p": "IO", "m": "puts(obj, ...)", "r": "nil"}, {"p": "IO", "m": "pwrite(string, offset)", "r": "integer"}, {"p": "IO", "m": "raw!(min: nil, time: nil)", "r": ""}, {"p": "IO", "m": "raw(min: nil, time: nil) {|io| }", "r": ""}, {"p": "IO", "m": "read([length [, outbuf]])", "r": "string, outbuf, or nil"}, {"p": "IO", "m": "read(name, [length [, offset]] [, opt] )", "r": "string"}, {"p": "IO", "m": "read_nonblock(maxlen [, options])", "r": "string"}, {"p": "IO", "m": "read_nonblock(maxlen, outbuf [, options])", "r": "outbuf"}, {"p": "IO", "m": "readbyte", "r": "integer"}, {"p": "IO", "m": "readchar", "r": "string"}, {"p": "IO", "m": "readline(limit [, getline_args])", "r": "string"}, {"p": "IO", "m": "readline(sep, limit [, getline_args])", "r": "string"}, {"p": "IO", "m": "readline(sep=$/ [, getline_args])", "r": "string"}, {"p": "IO", "m": "readlines(limit [, getline_args])", "r": "array"}, {"p": "IO", "m": "readlines(name, limit [, getline_args, open_args])", "r": "array"}, {"p": "IO", "m": "readlines(name, sep, limit [, getline_args, open_args])", "r": "array"}, {"p": "IO", "m": "readlines(name, sep=$/ [, getline_args, open_args])", "r": "array"}, {"p": "IO", "m": "readlines(sep, limit [, getline_args])", "r": "array"}, {"p": "IO", "m": "readlines(sep=$/ [, getline_args])", "r": "array"}, {"p": "IO", "m": "readpartial(maxlen)", "r": "string"}, {"p": "IO", "m": "readpartial(maxlen, outbuf)", "r": "outbuf"}, {"p": "IO", "m": "ready?", "r": "true, false or nil"}, {"p": "IO", "m": "reopen(other_IO)", "r": "ios"}, {"p": "IO", "m": "reopen(path, mode_str)", "r": "ios"}, {"p": "IO", "m": "rewind", "r": "0"}, {"p": "IO", "m": "seek(amount, whence=IO::SEEK_SET)", "r": "0"}, {"p": "IO", "m": "select(read_array [, write_array [, error_array [, timeout]]])", "r": "array or nil"}, {"p": "IO", "m": "set_encoding(\"ext_enc:int_enc\")", "r": "io"}, {"p": "IO", "m": "set_encoding(\"ext_enc:int_enc\", opt)", "r": "io"}, {"p": "IO", "m": "set_encoding(ext_enc)", "r": "io"}, {"p": "IO", "m": "set_encoding(ext_enc, int_enc)", "r": "io"}, {"p": "IO", "m": "set_encoding(ext_enc, int_enc, opt)", "r": "io"}, {"p": "IO", "m": "stat", "r": "stat"}, {"p": "IO", "m": "sync", "r": "true or false"}, {"p": "IO", "m": "sync = boolean", "r": "boolean"}, {"p": "IO", "m": "sysopen(path, [mode, [perm]])", "r": "integer"}, {"p": "IO", "m": "sysread(maxlen[, outbuf])", "r": "string"}, {"p": "IO", "m": "sysseek(offset, whence=IO::SEEK_SET)", "r": "integer"}, {"p": "IO", "m": "syswrite(string)", "r": "integer"}, {"p": "IO", "m": "tell", "r": "integer"}, {"p": "IO", "m": "to_i", "r": "integer"}, {"p": "IO", "m": "to_io", "r": "ios"}, {"p": "IO", "m": "try_convert(obj)", "r": "io or nil"}, {"p": "IO", "m": "tty?", "r": "true or false"}, {"p": "IO", "m": "ungetbyte(integer)", "r": "nil"}, {"p": "IO", "m": "ungetbyte(string)", "r": "nil"}, {"p": "IO", "m": "ungetc(string)", "r": "nil"}, {"p": "IO", "m": "wait(timeout = nil, mode = :read)", "r": "IO, true or nil"}, {"p": "IO", "m": "wait_readable", "r": "IO, true or nil"}, {"p": "IO", "m": "wait_readable(timeout)", "r": "IO, true or nil"}, {"p": "IO", "m": "wait_writable", "r": "IO"}, {"p": "IO", "m": "wait_writable(timeout)", "r": "IO or nil"}, {"p": "IO", "m": "winsize", "r": "[rows, columns]"}, {"p": "IO", "m": "winsize = [rows, columns]", "r": ""}, {"p": "IO", "m": "write(name, string [, offset] [, opt])", "r": "integer"}, {"p": "IO", "m": "write(name, string [, offset])", "r": "integer"}, {"p": "IO", "m": "write(string, ...)", "r": "integer"}, {"p": "IO", "m": "write_nonblock(string [, options])", "r": "integer"}, {"p": "IO", "m": "write_nonblock(string)", "r": "integer"}, {"p": "IO", "m": "EWOULDBLOCKWaitReadable", "r": ""}, {"p": "IO", "m": "EWOULDBLOCKWaitWritable", "r": ""}, {"p": "IO", "m": "SEEK_CUR", "r": ""}, {"p": "IO", "m": "SEEK_DATA", "r": ""}, {"p": "IO", "m": "SEEK_END", "r": ""}, {"p": "IO", "m": "SEEK_HOLE", "r": ""}, {"p": "IO", "m": "SEEK_SET", "r": ""}, {"p": "IPAddr", "m": "IN4MASK", "r": ""}, {"p": "IPAddr", "m": "IN6FORMAT", "r": ""}, {"p": "IPAddr", "m": "IN6MASK", "r": ""}, {"p": "IPAddr", "m": "RE_IPV4ADDRLIKE", "r": ""}, {"p": "IPAddr", "m": "RE_IPV6ADDRLIKE_COMPRESSED", "r": ""}, {"p": "IPAddr", "m": "RE_IPV6ADDRLIKE_FULL", "r": ""}, {"p": "IPSocket", "m": "addr([reverse_lookup])", "r": "[address_family, port, hostname, numeric_address]"}, {"p": "IPSocket", "m": "getaddress(host)", "r": "ipaddress"}, {"p": "IPSocket", "m": "inspect", "r": "string"}, {"p": "IPSocket", "m": "peeraddr([reverse_lookup])", "r": "[address_family, port, hostname, numeric_address]"}, {"p": "IPSocket", "m": "recvfrom(maxlen)", "r": "[mesg, ipaddr]"}, {"p": "IPSocket", "m": "recvfrom(maxlen, flags)", "r": "[mesg, ipaddr]"}, {"p": "JSON", "m": "Infinity", "r": ""}, {"p": "JSON", "m": "JSON_LOADED", "r": ""}, {"p": "JSON", "m": "MinusInfinity", "r": ""}, {"p": "JSON", "m": "NaN", "r": ""}, {"p": "JSON", "m": "UnparserError", "r": ""}, {"p": "JSON", "m": "VERSION", "r": ""}, {"p": "Kconv", "m": "guess(str)", "r": "encoding"}, {"p": "Kconv", "m": "iseuc(str)", "r": "true or false"}, {"p": "Kconv", "m": "isjis(str)", "r": "true or false"}, {"p": "Kconv", "m": "issjis(str)", "r": "true or false"}, {"p": "Kconv", "m": "isutf8(str)", "r": "true or false"}, {"p": "Kconv", "m": "kconv(str, to_enc, from_enc=nil)", "r": ""}, {"p": "Kconv", "m": "toeuc(str)", "r": "string"}, {"p": "Kconv", "m": "tojis(str)", "r": "string"}, {"p": "Kconv", "m": "tolocale", "r": "string"}, {"p": "Kconv", "m": "tosjis(str)", "r": "string"}, {"p": "Kconv", "m": "toutf16(str)", "r": "string"}, {"p": "Kconv", "m": "toutf32(str)", "r": "string"}, {"p": "Kconv", "m": "toutf8(str)", "r": "string"}, {"p": "Kconv", "m": "ASCII", "r": ""}, {"p": "Kconv", "m": "AUTO", "r": ""}, {"p": "Kconv", "m": "BINARY", "r": ""}, {"p": "Kconv", "m": "EUC", "r": ""}, {"p": "Kconv", "m": "JIS", "r": ""}, {"p": "Kconv", "m": "NOCONV", "r": ""}, {"p": "Kconv", "m": "SJIS", "r": ""}, {"p": "Kconv", "m": "UNKNOWN", "r": ""}, {"p": "Kconv", "m": "UTF16", "r": ""}, {"p": "Kconv", "m": "UTF32", "r": ""}, {"p": "Kconv", "m": "UTF8", "r": ""}, {"p": "Kernel", "m": "Array(arg)", "r": "array"}, {"p": "Kernel", "m": "Complex(x[, y])", "r": "numeric"}, {"p": "Kernel", "m": "Hash(arg)", "r": "hash"}, {"p": "Kernel", "m": "Integer(arg, base=0)", "r": "integer"}, {"p": "Kernel", "m": "Kernel::abort([msg])", "r": ""}, {"p": "Kernel", "m": "Kernel::exit(status=true)", "r": ""}, {"p": "Kernel", "m": "Pathname(path)", "r": "pathname"}, {"p": "Kernel", "m": "Process::exit(status=true)", "r": ""}, {"p": "Kernel", "m": "Rational(arg)", "r": "rational"}, {"p": "Kernel", "m": "Rational(x, y)", "r": "rational"}, {"p": "Kernel", "m": "String(arg)", "r": "string"}, {"p": "Kernel", "m": "__callee__", "r": "symbol"}, {"p": "Kernel", "m": "__dir__", "r": "string"}, {"p": "Kernel", "m": "__method__", "r": "symbol"}, {"p": "Kernel", "m": "`cmd`", "r": "string"}, {"p": "Kernel", "m": "abort", "r": ""}, {"p": "Kernel", "m": "abort([msg])", "r": ""}, {"p": "Kernel", "m": "at_exit { block }", "r": "proc"}, {"p": "Kernel", "m": "autoload(module, filename)", "r": "nil"}, {"p": "Kernel", "m": "autoload?(name)", "r": "String or nil"}, {"p": "Kernel", "m": "binding", "r": "a_binding"}, {"p": "Kernel", "m": "block_given?", "r": "true or false"}, {"p": "Kernel", "m": "callcc {|cont| block }", "r": "obj"}, {"p": "Kernel", "m": "caller(range)", "r": "array or nil"}, {"p": "Kernel", "m": "caller(start=1, length=nil)", "r": "array or nil"}, {"p": "Kernel", "m": "caller_locations(range)", "r": "array or nil"}, {"p": "Kernel", "m": "caller_locations(start=1, length=nil)", "r": "array or nil"}, {"p": "Kernel", "m": "catch([tag]) {|tag| block }", "r": "obj"}, {"p": "Kernel", "m": "chomp", "r": "$_"}, {"p": "Kernel", "m": "chomp(string)", "r": "$_"}, {"p": "Kernel", "m": "chop", "r": "$_"}, {"p": "Kernel", "m": "eval(string [, binding [, filename [,lineno]]])", "r": "obj"}, {"p": "Kernel", "m": "exec([env,] command... [,options])", "r": ""}, {"p": "Kernel", "m": "exit!(status=false)", "r": ""}, {"p": "Kernel", "m": "exit(status=true)", "r": ""}, {"p": "Kernel", "m": "fail", "r": ""}, {"p": "Kernel", "m": "fail(exception [, string [, array]])", "r": ""}, {"p": "Kernel", "m": "fail(string)", "r": ""}, {"p": "Kernel", "m": "fork  [{ block }]", "r": "integer or nil"}, {"p": "Kernel", "m": "fork [{ block }]", "r": "integer or nil"}, {"p": "Kernel", "m": "format(format_string [, arguments...] )", "r": "string"}, {"p": "Kernel", "m": "gets(limit [, getline_args])", "r": "string or nil"}, {"p": "Kernel", "m": "gets(sep, limit [, getline_args])", "r": "string or nil"}, {"p": "Kernel", "m": "gets(sep=$/ [, getline_args])", "r": "string or nil"}, {"p": "Kernel", "m": "global_variables", "r": "array"}, {"p": "Kernel", "m": "gsub(pattern) {|...| block }", "r": "$_"}, {"p": "Kernel", "m": "gsub(pattern, replacement)", "r": "$_"}, {"p": "Kernel", "m": "iterator?", "r": "true or false"}, {"p": "Kernel", "m": "lambda { |...| block }", "r": "a_proc"}, {"p": "Kernel", "m": "load(filename, wrap=false)", "r": "true"}, {"p": "Kernel", "m": "local_variables", "r": "array"}, {"p": "Kernel", "m": "loop", "r": "an_enumerator"}, {"p": "Kernel", "m": "loop { block }", "r": ""}, {"p": "Kernel", "m": "open(path [, mode [, perm]] [, opt])", "r": "io or nil"}, {"p": "Kernel", "m": "open(path [, mode [, perm]] [, opt]) {|io| block }", "r": "obj"}, {"p": "Kernel", "m": "p()", "r": "nil"}, {"p": "Kernel", "m": "p(obj)", "r": "obj"}, {"p": "Kernel", "m": "p(obj1, obj2, ...)", "r": "[obj, ...]"}, {"p": "Kernel", "m": "print(obj, ...)", "r": "nil"}, {"p": "Kernel", "m": "printf(io, string [, obj ... ])", "r": "nil"}, {"p": "Kernel", "m": "printf(string [, obj ... ])", "r": "nil"}, {"p": "Kernel", "m": "proc   { |...| block }", "r": "a_proc"}, {"p": "Kernel", "m": "putc(int)", "r": "int"}, {"p": "Kernel", "m": "puts(obj, ...)", "r": "nil"}, {"p": "Kernel", "m": "raise", "r": ""}, {"p": "Kernel", "m": "raise(exception [, string [, array]])", "r": ""}, {"p": "Kernel", "m": "raise(string)", "r": ""}, {"p": "Kernel", "m": "rand(max=0)", "r": "number"}, {"p": "Kernel", "m": "readline(limit)", "r": "string"}, {"p": "Kernel", "m": "readline(sep, limit)", "r": "string"}, {"p": "Kernel", "m": "readline(sep=$/)", "r": "string"}, {"p": "Kernel", "m": "readlines(limit)", "r": "array"}, {"p": "Kernel", "m": "readlines(sep, limit)", "r": "array"}, {"p": "Kernel", "m": "readlines(sep=$/)", "r": "array"}, {"p": "Kernel", "m": "require_relative(string)", "r": "true or false"}, {"p": "Kernel", "m": "select(read_array [, write_array [, error_array [, timeout]]])", "r": "array or nil"}, {"p": "Kernel", "m": "set_trace_func(nil)", "r": "nil"}, {"p": "Kernel", "m": "set_trace_func(proc)", "r": "proc"}, {"p": "Kernel", "m": "sleep([duration])", "r": "integer"}, {"p": "Kernel", "m": "spawn([env,] command... [,options])", "r": "pid"}, {"p": "Kernel", "m": "sprintf(format_string [, arguments...] )", "r": "string"}, {"p": "Kernel", "m": "srand(number = Random.new_seed)", "r": "old_seed"}, {"p": "Kernel", "m": "sub(pattern) {|...| block }", "r": "$_"}, {"p": "Kernel", "m": "sub(pattern, replacement)", "r": "$_"}, {"p": "Kernel", "m": "syscall(num [, args...])", "r": "integer"}, {"p": "Kernel", "m": "system([env,] command... [,options])", "r": "true, false or nil"}, {"p": "Kernel", "m": "test(cmd, file1 [, file2] )", "r": "obj"}, {"p": "Kernel", "m": "throw(tag [, obj])", "r": ""}, {"p": "Kernel", "m": "trace_var(symbol) {|val| block }", "r": "nil"}, {"p": "Kernel", "m": "trace_var(symbol, cmd )", "r": "nil"}, {"p": "Kernel", "m": "trap( signal ) {| | block }", "r": "obj"}, {"p": "Kernel", "m": "trap( signal, command )", "r": "obj"}, {"p": "Kernel", "m": "untrace_var(symbol [, cmd] )", "r": "array or nil"}, {"p": "Kernel", "m": "warn(msg, ...)", "r": "nil"}, {"p": "KeyError", "m": "key", "r": "object"}, {"p": "KeyError", "m": "receiver", "r": "object"}, {"p": "LocalJumpError", "m": "exit_value", "r": "obj"}, {"p": "LocalJumpError", "m": "reason", "r": "symbol"}, {"p": "Logger", "m": "Logger#add(severity, message = nil, progname = nil) { ... }", "r": ""}, {"p": "Logger", "m": "Logger#reopen", "r": ""}, {"p": "Logger", "m": "Logger#reopen(logdev)", "r": ""}, {"p": "Logger", "m": "info(message)", "r": ""}, {"p": "Logger", "m": "info(progname, &block)", "r": ""}, {"p": "Logger", "m": "new(logdev, datetime_format: '%Y-%m-%d %H:%M:%S')", "r": ""}, {"p": "Logger", "m": "new(logdev, formatter: formatter)", "r": ""}, {"p": "Logger", "m": "new(logdev, level: :info)", "r": ""}, {"p": "Logger", "m": "new(logdev, progname: 'progname')", "r": ""}, {"p": "Logger", "m": "new(logdev, shift_age = 'weekly')", "r": ""}, {"p": "Logger", "m": "new(logdev, shift_age = 0, shift_size = 1048576)", "r": ""}, {"p": "Logger", "m": "ProgName", "r": ""}, {"p": "Logger", "m": "SEV_LABEL", "r": ""}, {"p": "Logger", "m": "VERSION", "r": ""}, {"p": "MakeMakefile", "m": "dir_config(target)", "r": ""}, {"p": "MakeMakefile", "m": "dir_config(target, idefault, ldefault)", "r": ""}, {"p": "MakeMakefile", "m": "dir_config(target, prefix)", "r": ""}, {"p": "MakeMakefile", "m": "ASSEMBLE_C", "r": ""}, {"p": "MakeMakefile", "m": "ASSEMBLE_CXX", "r": ""}, {"p": "MakeMakefile", "m": "CLEANINGS", "r": ""}, {"p": "MakeMakefile", "m": "COMMON_HEADERS", "r": ""}, {"p": "MakeMakefile", "m": "COMMON_LIBS", "r": ""}, {"p": "MakeMakefile", "m": "COMPILE_C", "r": ""}, {"p": "MakeMakefile", "m": "COMPILE_CXX", "r": ""}, {"p": "MakeMakefile", "m": "COMPILE_RULES", "r": ""}, {"p": "MakeMakefile", "m": "CONFIG", "r": ""}, {"p": "MakeMakefile", "m": "CXX_EXT", "r": ""}, {"p": "MakeMakefile", "m": "C_EXT", "r": ""}, {"p": "MakeMakefile", "m": "EXPORT_PREFIX", "r": ""}, {"p": "MakeMakefile", "m": "HDR_EXT", "r": ""}, {"p": "MakeMakefile", "m": "LIBARG", "r": ""}, {"p": "MakeMakefile", "m": "LIBPATHFLAG", "r": ""}, {"p": "MakeMakefile", "m": "LINK_SO", "r": ""}, {"p": "MakeMakefile", "m": "MAIN_DOES_NOTHING", "r": ""}, {"p": "MakeMakefile", "m": "ORIG_LIBPATH", "r": ""}, {"p": "MakeMakefile", "m": "RPATHFLAG", "r": ""}, {"p": "MakeMakefile", "m": "RULE_SUBST", "r": ""}, {"p": "MakeMakefile", "m": "SRC_EXT", "r": ""}, {"p": "MakeMakefile", "m": "TRY_LINK", "r": ""}, {"p": "MakeMakefile", "m": "UNIVERSAL_INTS", "r": ""}, {"p": "Marshal", "m": "dump( obj [, anIO] , limit=-1 )", "r": "anIO"}, {"p": "Marshal", "m": "load( source [, proc] )", "r": "obj"}, {"p": "Marshal", "m": "restore( source [, proc] )", "r": "obj"}, {"p": "Marshal", "m": "MAJOR_VERSION", "r": ""}, {"p": "Marshal", "m": "MINOR_VERSION", "r": ""}, {"p": "MatchData", "m": "begin(n)", "r": "integer"}, {"p": "MatchData", "m": "captures", "r": "array"}, {"p": "MatchData", "m": "end(n)", "r": "integer"}, {"p": "MatchData", "m": "eql?(mtch2)", "r": "true or false"}, {"p": "MatchData", "m": "hash", "r": "integer"}, {"p": "MatchData", "m": "inspect", "r": "str"}, {"p": "MatchData", "m": "length", "r": "integer"}, {"p": "MatchData", "m": "mtch == mtch2", "r": "true or false"}, {"p": "MatchData", "m": "mtch[i]", "r": "str or nil"}, {"p": "MatchData", "m": "mtch[name]", "r": "str or nil"}, {"p": "MatchData", "m": "mtch[range]", "r": "array"}, {"p": "MatchData", "m": "mtch[start, length]", "r": "array"}, {"p": "MatchData", "m": "named_captures", "r": "hash"}, {"p": "MatchData", "m": "names", "r": "[name1, name2, ...]"}, {"p": "MatchData", "m": "offset(n)", "r": "array"}, {"p": "MatchData", "m": "post_match", "r": "str"}, {"p": "MatchData", "m": "pre_match", "r": "str"}, {"p": "MatchData", "m": "regexp", "r": "regexp"}, {"p": "MatchData", "m": "size", "r": "integer"}, {"p": "MatchData", "m": "string", "r": "str"}, {"p": "MatchData", "m": "to_a", "r": "anArray"}, {"p": "MatchData", "m": "to_s", "r": "str"}, {"p": "MatchData", "m": "values_at([index]*)", "r": "array"}, {"p": "Math", "m": "acos(x)", "r": "Float"}, {"p": "Math", "m": "acosh(x)", "r": "Float"}, {"p": "Math", "m": "asin(x)", "r": "Float"}, {"p": "Math", "m": "asinh(x)", "r": "Float"}, {"p": "Math", "m": "atan(x)", "r": "Float"}, {"p": "Math", "m": "atan2(y, x)", "r": "Float"}, {"p": "Math", "m": "atanh(x)", "r": "Float"}, {"p": "Math", "m": "cbrt(x)", "r": "Float"}, {"p": "Math", "m": "cos(x)", "r": "Float"}, {"p": "Math", "m": "cosh(x)", "r": "Float"}, {"p": "Math", "m": "erf(x)", "r": "Float"}, {"p": "Math", "m": "erfc(x)", "r": "Float"}, {"p": "Math", "m": "exp(x)", "r": "Float"}, {"p": "Math", "m": "frexp(x)", "r": "[fraction, exponent]"}, {"p": "Math", "m": "gamma(x)", "r": "Float"}, {"p": "Math", "m": "hypot(x, y)", "r": "Float"}, {"p": "Math", "m": "ldexp(fraction, exponent)", "r": "float"}, {"p": "Math", "m": "lgamma(x)", "r": "[float, -1 or 1]"}, {"p": "Math", "m": "log(x)", "r": "Float"}, {"p": "Math", "m": "log(x, base)", "r": "Float"}, {"p": "Math", "m": "log10(x)", "r": "Float"}, {"p": "Math", "m": "log2(x)", "r": "Float"}, {"p": "Math", "m": "sin(x)", "r": "Float"}, {"p": "Math", "m": "sinh(x)", "r": "Float"}, {"p": "Math", "m": "sqrt(x)", "r": "Float"}, {"p": "Math", "m": "tan(x)", "r": "Float"}, {"p": "Math", "m": "tanh(x)", "r": "Float"}, {"p": "Math", "m": "E", "r": ""}, {"p": "Math", "m": "PI", "r": ""}, {"p": "Matrix", "m": "index(selector = :all)", "r": "an_enumerator"}, {"p": "Matrix", "m": "index(selector = :all){ block }", "r": "[row, column]"}, {"p": "Matrix", "m": "index(value, selector = :all)", "r": "[row, column]"}, {"p": "Matrix", "m": "SELECTORS", "r": ""}, {"p": "Method", "m": "arity", "r": "integer"}, {"p": "Method", "m": "call(params,...)", "r": "obj"}, {"p": "Method", "m": "clone", "r": "new_method"}, {"p": "Method", "m": "curry", "r": "proc"}, {"p": "Method", "m": "curry(arity)", "r": "proc"}, {"p": "Method", "m": "eql?(other_meth)", "r": "true or false"}, {"p": "Method", "m": "hash", "r": "integer"}, {"p": "Method", "m": "inspect", "r": "string"}, {"p": "Method", "m": "meth == other_meth", "r": "true or false"}, {"p": "Method", "m": "name", "r": "symbol"}, {"p": "Method", "m": "original_name", "r": "symbol"}, {"p": "Method", "m": "owner", "r": "class_or_module"}, {"p": "Method", "m": "parameters", "r": "array"}, {"p": "Method", "m": "prc[params,...]", "r": "obj"}, {"p": "Method", "m": "proc === obj", "r": "result_of_proc"}, {"p": "Method", "m": "receiver", "r": "object"}, {"p": "Method", "m": "source_location", "r": "[String, Integer]"}, {"p": "Method", "m": "super_method", "r": "method"}, {"p": "Method", "m": "to_proc", "r": "proc"}, {"p": "Method", "m": "to_s", "r": "string"}, {"p": "Method", "m": "unbind", "r": "unbound_method"}, {"p": "Module", "m": "alias_method(new_name, old_name)", "r": "self"}, {"p": "Module", "m": "ancestors", "r": "array"}, {"p": "Module", "m": "append_features(mod)", "r": "mod"}, {"p": "Module", "m": "attr(name, ...)", "r": "nil"}, {"p": "Module", "m": "attr(name, false)", "r": "nil"}, {"p": "Module", "m": "attr(name, true)", "r": "nil"}, {"p": "Module", "m": "attr(string, ...)", "r": "nil"}, {"p": "Module", "m": "attr(symbol, ...)", "r": "nil"}, {"p": "Module", "m": "attr_accessor(string, ...)", "r": "nil"}, {"p": "Module", "m": "attr_accessor(symbol, ...)", "r": "nil"}, {"p": "Module", "m": "attr_reader(string, ...)", "r": "nil"}, {"p": "Module", "m": "attr_reader(symbol, ...)", "r": "nil"}, {"p": "Module", "m": "attr_writer(string, ...)", "r": "nil"}, {"p": "Module", "m": "attr_writer(symbol, ...)", "r": "nil"}, {"p": "Module", "m": "autoload(module, filename)", "r": "nil"}, {"p": "Module", "m": "autoload?(name)", "r": "String or nil"}, {"p": "Module", "m": "class_eval {|mod| block }", "r": "obj"}, {"p": "Module", "m": "class_eval(string [, filename [, lineno]])", "r": "obj"}, {"p": "Module", "m": "class_exec(arg...) {|var...| block }", "r": "obj"}, {"p": "Module", "m": "class_variable_defined?(string)", "r": "true or false"}, {"p": "Module", "m": "class_variable_defined?(symbol)", "r": "true or false"}, {"p": "Module", "m": "class_variable_get(string)", "r": "obj"}, {"p": "Module", "m": "class_variable_get(symbol)", "r": "obj"}, {"p": "Module", "m": "class_variable_set(string, obj)", "r": "obj"}, {"p": "Module", "m": "class_variable_set(symbol, obj)", "r": "obj"}, {"p": "Module", "m": "class_variables(inherit=true)", "r": "array"}, {"p": "Module", "m": "const_defined?(str, inherit=true)", "r": "true or false"}, {"p": "Module", "m": "const_defined?(sym, inherit=true)", "r": "true or false"}, {"p": "Module", "m": "const_get(str, inherit=true)", "r": "obj"}, {"p": "Module", "m": "const_get(sym, inherit=true)", "r": "obj"}, {"p": "Module", "m": "const_missing(sym)", "r": "obj"}, {"p": "Module", "m": "const_set(str, obj)", "r": "obj"}, {"p": "Module", "m": "const_set(sym, obj)", "r": "obj"}, {"p": "Module", "m": "constants", "r": "array"}, {"p": "Module", "m": "constants(inherit=true)", "r": "array"}, {"p": "Module", "m": "constants(inherited)", "r": "array"}, {"p": "Module", "m": "define_method(symbol) { block }", "r": "symbol"}, {"p": "Module", "m": "define_method(symbol, method)", "r": "symbol"}, {"p": "Module", "m": "deprecate_constant(symbol, ...)", "r": "mod"}, {"p": "Module", "m": "eql?(other)", "r": "true or false"}, {"p": "Module", "m": "equal?(other)", "r": "true or false"}, {"p": "Module", "m": "extend_object(obj)", "r": "obj"}, {"p": "Module", "m": "extended(othermod)", "r": ""}, {"p": "Module", "m": "freeze", "r": "mod"}, {"p": "Module", "m": "include(module, ...)", "r": "self"}, {"p": "Module", "m": "include?(module)", "r": "true or false"}, {"p": "Module", "m": "included(othermod)", "r": ""}, {"p": "Module", "m": "included_modules", "r": "array"}, {"p": "Module", "m": "instance_method(symbol)", "r": "unbound_method"}, {"p": "Module", "m": "instance_methods(include_super=true)", "r": "array"}, {"p": "Module", "m": "method_added(method_name)", "r": ""}, {"p": "Module", "m": "method_defined?(string)", "r": "true or false"}, {"p": "Module", "m": "method_defined?(symbol)", "r": "true or false"}, {"p": "Module", "m": "method_removed(method_name)", "r": ""}, {"p": "Module", "m": "mod < other", "r": "true, false, or nil"}, {"p": "Module", "m": "mod <= other", "r": "true, false, or nil"}, {"p": "Module", "m": "mod === obj", "r": "true or false"}, {"p": "Module", "m": "mod > other", "r": "true, false, or nil"}, {"p": "Module", "m": "mod >= other", "r": "true, false, or nil"}, {"p": "Module", "m": "module <=> other_module", "r": "-1, 0, +1, or nil"}, {"p": "Module", "m": "module_eval {|mod| block }", "r": "obj"}, {"p": "Module", "m": "module_eval(string [, filename [, lineno]])", "r": "obj"}, {"p": "Module", "m": "module_exec(arg...) {|var...| block }", "r": "obj"}, {"p": "Module", "m": "module_function(string, ...)", "r": "self"}, {"p": "Module", "m": "module_function(symbol, ...)", "r": "self"}, {"p": "Module", "m": "name", "r": "string"}, {"p": "Module", "m": "nesting", "r": "array"}, {"p": "Module", "m": "new", "r": "mod"}, {"p": "Module", "m": "new {|mod| block }", "r": "mod"}, {"p": "Module", "m": "obj == other", "r": "true or false"}, {"p": "Module", "m": "prepend(module, ...)", "r": "self"}, {"p": "Module", "m": "prepend_features(mod)", "r": "mod"}, {"p": "Module", "m": "prepended(othermod)", "r": ""}, {"p": "Module", "m": "private", "r": "self"}, {"p": "Module", "m": "private(string, ...)", "r": "self"}, {"p": "Module", "m": "private(symbol, ...)", "r": "self"}, {"p": "Module", "m": "private_class_method(string, ...)", "r": "mod"}, {"p": "Module", "m": "private_class_method(symbol, ...)", "r": "mod"}, {"p": "Module", "m": "private_constant(symbol, ...)", "r": "mod"}, {"p": "Module", "m": "private_instance_methods(include_super=true)", "r": "array"}, {"p": "Module", "m": "private_method_defined?(string)", "r": "true or false"}, {"p": "Module", "m": "private_method_defined?(symbol)", "r": "true or false"}, {"p": "Module", "m": "protected", "r": "self"}, {"p": "Module", "m": "protected(string, ...)", "r": "self"}, {"p": "Module", "m": "protected(symbol, ...)", "r": "self"}, {"p": "Module", "m": "protected_instance_methods(include_super=true)", "r": "array"}, {"p": "Module", "m": "protected_method_defined?(string)", "r": "true or false"}, {"p": "Module", "m": "protected_method_defined?(symbol)", "r": "true or false"}, {"p": "Module", "m": "public", "r": "self"}, {"p": "Module", "m": "public(string, ...)", "r": "self"}, {"p": "Module", "m": "public(symbol, ...)", "r": "self"}, {"p": "Module", "m": "public_class_method(string, ...)", "r": "mod"}, {"p": "Module", "m": "public_class_method(symbol, ...)", "r": "mod"}, {"p": "Module", "m": "public_constant(symbol, ...)", "r": "mod"}, {"p": "Module", "m": "public_instance_method(symbol)", "r": "unbound_method"}, {"p": "Module", "m": "public_instance_methods(include_super=true)", "r": "array"}, {"p": "Module", "m": "public_method_defined?(string)", "r": "true or false"}, {"p": "Module", "m": "public_method_defined?(symbol)", "r": "true or false"}, {"p": "Module", "m": "refine(mod) { block }", "r": "module"}, {"p": "Module", "m": "remove_class_variable(sym)", "r": "obj"}, {"p": "Module", "m": "remove_const(sym)", "r": "obj"}, {"p": "Module", "m": "remove_method(string)", "r": "self"}, {"p": "Module", "m": "remove_method(symbol)", "r": "self"}, {"p": "Module", "m": "singleton_class?", "r": "true or false"}, {"p": "Module", "m": "to_s", "r": "string"}, {"p": "Module", "m": "undef_method(string)", "r": "self"}, {"p": "Module", "m": "undef_method(symbol)", "r": "self"}, {"p": "Module", "m": "used_modules", "r": "array"}, {"p": "Module", "m": "using(module)", "r": "self"}, {"p": "Mutex", "m": "lock", "r": "self"}, {"p": "Mutex", "m": "locked?", "r": "true or false"}, {"p": "Mutex", "m": "new", "r": "mutex"}, {"p": "Mutex", "m": "owned?", "r": "true or false"}, {"p": "Mutex", "m": "sleep(timeout = nil)", "r": "number"}, {"p": "Mutex", "m": "synchronize { ... }", "r": "result of the block"}, {"p": "Mutex", "m": "try_lock", "r": "true or false"}, {"p": "Mutex", "m": "unlock", "r": "self"}, {"p": "NameError", "m": "local_variables", "r": "array"}, {"p": "NameError", "m": "name", "r": "string or nil"}, {"p": "NameError", "m": "new([msg, *, name])", "r": "name_error"}, {"p": "NameError", "m": "receiver", "r": "object"}, {"p": "Net", "m": "APOPSession", "r": ""}, {"p": "Net", "m": "HTTPMovedTemporarily", "r": ""}, {"p": "Net", "m": "HTTPMultipleChoice", "r": ""}, {"p": "Net", "m": "HTTPRequestURITooLarge", "r": ""}, {"p": "NilClass", "m": "false & obj", "r": "false"}, {"p": "NilClass", "m": "false ^ obj", "r": "true or false"}, {"p": "NilClass", "m": "false | obj", "r": "true or false"}, {"p": "NilClass", "m": "inspect", "r": "\"nil\""}, {"p": "NilClass", "m": "nil   ^ obj", "r": "true or false"}, {"p": "NilClass", "m": "nil   | obj", "r": "true or false"}, {"p": "NilClass", "m": "nil & obj", "r": "false"}, {"p": "NilClass", "m": "nil?", "r": "true"}, {"p": "NilClass", "m": "obj === other", "r": "true or false"}, {"p": "NilClass", "m": "rationalize([eps])", "r": "(0/1)"}, {"p": "NilClass", "m": "to_a", "r": "[]"}, {"p": "NilClass", "m": "to_c", "r": "(0+0i)"}, {"p": "NilClass", "m": "to_f", "r": "0.0"}, {"p": "NilClass", "m": "to_h", "r": "{}"}, {"p": "NilClass", "m": "to_i", "r": "0"}, {"p": "NilClass", "m": "to_r", "r": "(0/1)"}, {"p": "NilClass", "m": "to_s", "r": "\"\""}, {"p": "NKF", "m": "guess(str)", "r": "encoding"}, {"p": "NKF", "m": "nkf(opt, str)", "r": "string"}, {"p": "NKF", "m": "ASCII", "r": ""}, {"p": "NKF", "m": "AUTO", "r": ""}, {"p": "NKF", "m": "BINARY", "r": ""}, {"p": "NKF", "m": "EUC", "r": ""}, {"p": "NKF", "m": "JIS", "r": ""}, {"p": "NKF", "m": "NKF_RELEASE_DATE", "r": ""}, {"p": "NKF", "m": "NKF_VERSION", "r": ""}, {"p": "NKF", "m": "NOCONV", "r": ""}, {"p": "NKF", "m": "SJIS", "r": ""}, {"p": "NKF", "m": "UNKNOWN", "r": ""}, {"p": "NKF", "m": "UTF16", "r": ""}, {"p": "NKF", "m": "UTF32", "r": ""}, {"p": "NKF", "m": "UTF8", "r": ""}, {"p": "NKF", "m": "VERSION", "r": ""}, {"p": "NoMethodError", "m": "args", "r": "obj"}, {"p": "NoMethodError", "m": "new([msg, *, name [, args]])", "r": "no_method_error"}, {"p": "Numeric", "m": "+num", "r": "num"}, {"p": "Numeric", "m": "-num", "r": "numeric"}, {"p": "Numeric", "m": "abs", "r": "numeric"}, {"p": "Numeric", "m": "abs2", "r": "real"}, {"p": "Numeric", "m": "angle", "r": "0 or float"}, {"p": "Numeric", "m": "arg", "r": "0 or float"}, {"p": "Numeric", "m": "ceil([ndigits])", "r": "integer or float"}, {"p": "Numeric", "m": "clone(freeze: true)", "r": "num"}, {"p": "Numeric", "m": "coerce(numeric)", "r": "array"}, {"p": "Numeric", "m": "conj", "r": "self"}, {"p": "Numeric", "m": "conjugate", "r": "self"}, {"p": "Numeric", "m": "denominator", "r": "integer"}, {"p": "Numeric", "m": "div(numeric)", "r": "integer"}, {"p": "Numeric", "m": "divmod(numeric)", "r": "array"}, {"p": "Numeric", "m": "dup", "r": "num"}, {"p": "Numeric", "m": "eql?(numeric)", "r": "true or false"}, {"p": "Numeric", "m": "fdiv(numeric)", "r": "float"}, {"p": "Numeric", "m": "finite?", "r": "true or false"}, {"p": "Numeric", "m": "floor([ndigits])", "r": "integer or float"}, {"p": "Numeric", "m": "i", "r": "Complex(0, num)"}, {"p": "Numeric", "m": "imag", "r": "0"}, {"p": "Numeric", "m": "imaginary", "r": "0"}, {"p": "Numeric", "m": "infinite?", "r": "-1, 1, or nil"}, {"p": "Numeric", "m": "integer?", "r": "true or false"}, {"p": "Numeric", "m": "magnitude", "r": "numeric"}, {"p": "Numeric", "m": "modulo(numeric)", "r": "real"}, {"p": "Numeric", "m": "negative?", "r": "true or false"}, {"p": "Numeric", "m": "nonzero?", "r": "self or nil"}, {"p": "Numeric", "m": "number <=> other", "r": "0 or nil"}, {"p": "Numeric", "m": "numerator", "r": "integer"}, {"p": "Numeric", "m": "phase", "r": "0 or float"}, {"p": "Numeric", "m": "polar", "r": "array"}, {"p": "Numeric", "m": "positive?", "r": "true or false"}, {"p": "Numeric", "m": "quo(flo)", "r": "flo"}, {"p": "Numeric", "m": "quo(int_or_rat)", "r": "rat"}, {"p": "Numeric", "m": "real", "r": "self"}, {"p": "Numeric", "m": "real?", "r": "true or false"}, {"p": "Numeric", "m": "rect", "r": "array"}, {"p": "Numeric", "m": "rectangular", "r": "array"}, {"p": "Numeric", "m": "remainder(numeric)", "r": "real"}, {"p": "Numeric", "m": "round([ndigits])", "r": "integer or float"}, {"p": "Numeric", "m": "step(by: step, to: limit)", "r": "an_enumerator"}, {"p": "Numeric", "m": "step(by: step, to: limit) {|i| block }", "r": "self"}, {"p": "Numeric", "m": "step(limit=nil, step=1)", "r": "an_enumerator"}, {"p": "Numeric", "m": "step(limit=nil, step=1) {|i| block }", "r": "self"}, {"p": "Numeric", "m": "to_c", "r": "complex"}, {"p": "Numeric", "m": "to_int", "r": "integer"}, {"p": "Numeric", "m": "truncate([ndigits])", "r": "integer or float"}, {"p": "Numeric", "m": "zero?", "r": "true or false"}, {"p": "Object", "m": "Digest(name)", "r": "digest_subclass"}, {"p": "Object", "m": "__id__", "r": "integer"}, {"p": "Object", "m": "__send__(string [, args...])", "r": "obj"}, {"p": "Object", "m": "__send__(symbol [, args...])", "r": "obj"}, {"p": "Object", "m": "class", "r": "class"}, {"p": "Object", "m": "clone(freeze: true)", "r": "an_object"}, {"p": "Object", "m": "define_singleton_method(symbol) { block }", "r": "symbol"}, {"p": "Object", "m": "define_singleton_method(symbol, method)", "r": "symbol"}, {"p": "Object", "m": "display(port=$>)", "r": "nil"}, {"p": "Object", "m": "dup", "r": "an_object"}, {"p": "Object", "m": "enum_for(method = :each, *args)", "r": "enum"}, {"p": "Object", "m": "enum_for(method = :each, *args){|*args| block}", "r": "enum"}, {"p": "Object", "m": "eql?(other)", "r": "true or false"}, {"p": "Object", "m": "equal?(other)", "r": "true or false"}, {"p": "Object", "m": "extend(module, ...)", "r": "obj"}, {"p": "Object", "m": "freeze", "r": "obj"}, {"p": "Object", "m": "frozen?", "r": "true or false"}, {"p": "Object", "m": "inspect", "r": "string"}, {"p": "Object", "m": "instance_of?(class)", "r": "true or false"}, {"p": "Object", "m": "instance_variable_defined?(string)", "r": "true or false"}, {"p": "Object", "m": "instance_variable_defined?(symbol)", "r": "true or false"}, {"p": "Object", "m": "instance_variable_get(string)", "r": "obj"}, {"p": "Object", "m": "instance_variable_get(symbol)", "r": "obj"}, {"p": "Object", "m": "instance_variable_set(string, obj)", "r": "obj"}, {"p": "Object", "m": "instance_variable_set(symbol, obj)", "r": "obj"}, {"p": "Object", "m": "instance_variables", "r": "array"}, {"p": "Object", "m": "is_a?(class)", "r": "true or false"}, {"p": "Object", "m": "itself", "r": "obj"}, {"p": "Object", "m": "kind_of?(class)", "r": "true or false"}, {"p": "Object", "m": "method(sym)", "r": "method"}, {"p": "Object", "m": "methods(regular=true)", "r": "array"}, {"p": "Object", "m": "nil?", "r": "true or false"}, {"p": "Object", "m": "obj !~ other", "r": "true or false"}, {"p": "Object", "m": "obj <=> other", "r": "0 or nil"}, {"p": "Object", "m": "obj == other", "r": "true or false"}, {"p": "Object", "m": "obj === other", "r": "true or false"}, {"p": "Object", "m": "obj =~ other", "r": "nil"}, {"p": "Object", "m": "object_id", "r": "integer"}, {"p": "Object", "m": "private_methods(all=true)", "r": "array"}, {"p": "Object", "m": "protected_methods(all=true)", "r": "array"}, {"p": "Object", "m": "public_method(sym)", "r": "method"}, {"p": "Object", "m": "public_methods(all=true)", "r": "array"}, {"p": "Object", "m": "public_send(string [, args...])", "r": "obj"}, {"p": "Object", "m": "public_send(symbol [, args...])", "r": "obj"}, {"p": "Object", "m": "remove_instance_variable(symbol)", "r": "obj"}, {"p": "Object", "m": "respond_to?(string, include_all=false)", "r": "true or false"}, {"p": "Object", "m": "respond_to?(symbol, include_all=false)", "r": "true or false"}, {"p": "Object", "m": "respond_to_missing?(string, include_all)", "r": "true or false"}, {"p": "Object", "m": "respond_to_missing?(symbol, include_all)", "r": "true or false"}, {"p": "Object", "m": "send(string [, args...])", "r": "obj"}, {"p": "Object", "m": "send(symbol [, args...])", "r": "obj"}, {"p": "Object", "m": "singleton_class", "r": "class"}, {"p": "Object", "m": "singleton_method(sym)", "r": "method"}, {"p": "Object", "m": "singleton_methods(all=true)", "r": "array"}, {"p": "Object", "m": "taint", "r": "obj"}, {"p": "Object", "m": "tainted?", "r": "true or false"}, {"p": "Object", "m": "tap {|x| block }", "r": "obj"}, {"p": "Object", "m": "to_enum(method = :each, *args)", "r": "enum"}, {"p": "Object", "m": "to_enum(method = :each, *args) {|*args| block}", "r": "enum"}, {"p": "Object", "m": "to_s", "r": "string"}, {"p": "Object", "m": "to_yaml(options = {})", "r": ""}, {"p": "Object", "m": "trust", "r": "obj"}, {"p": "Object", "m": "untaint", "r": "obj"}, {"p": "Object", "m": "untrust", "r": "obj"}, {"p": "Object", "m": "untrusted?", "r": "true or false"}, {"p": "Object", "m": "yield_self {|x| block }", "r": "an_object"}, {"p": "Object", "m": "ARGF", "r": ""}, {"p": "Object", "m": "ARGV", "r": ""}, {"p": "Object", "m": "Bignum", "r": ""}, {"p": "Object", "m": "DATA", "r": ""}, {"p": "Object", "m": "ENV", "r": ""}, {"p": "Object", "m": "FALSE", "r": ""}, {"p": "Object", "m": "Fixnum", "r": ""}, {"p": "Object", "m": "NIL", "r": ""}, {"p": "Object", "m": "ParseError", "r": ""}, {"p": "Object", "m": "RUBY_COPYRIGHT", "r": ""}, {"p": "Object", "m": "RUBY_DESCRIPTION", "r": ""}, {"p": "Object", "m": "RUBY_ENGINE", "r": ""}, {"p": "Object", "m": "RUBY_ENGINE_VERSION", "r": ""}, {"p": "Object", "m": "RUBY_PATCHLEVEL", "r": ""}, {"p": "Object", "m": "RUBY_PLATFORM", "r": ""}, {"p": "Object", "m": "RUBY_RELEASE_DATE", "r": ""}, {"p": "Object", "m": "RUBY_REVISION", "r": ""}, {"p": "Object", "m": "RUBY_VERSION", "r": ""}, {"p": "Object", "m": "STDERR", "r": ""}, {"p": "Object", "m": "STDIN", "r": ""}, {"p": "Object", "m": "STDOUT", "r": ""}, {"p": "Object", "m": "Synchronizer", "r": ""}, {"p": "Object", "m": "Synchronizer_m", "r": ""}, {"p": "Object", "m": "TOPLEVEL_BINDING", "r": ""}, {"p": "Object", "m": "TRUE", "r": ""}, {"p": "Object", "m": "ThWait", "r": ""}, {"p": "Object", "m": "TimeoutError", "r": ""}, {"p": "ObjectSpace", "m": "_id2ref(object_id)", "r": "an_object"}, {"p": "ObjectSpace", "m": "allocation_class_path(object)", "r": "string"}, {"p": "ObjectSpace", "m": "allocation_generation(object)", "r": "integer or nil"}, {"p": "ObjectSpace", "m": "allocation_method_id(object)", "r": "string"}, {"p": "ObjectSpace", "m": "allocation_sourcefile(object)", "r": "string"}, {"p": "ObjectSpace", "m": "allocation_sourceline(object)", "r": "integer"}, {"p": "ObjectSpace", "m": "count_imemo_objects([result_hash])", "r": "hash"}, {"p": "ObjectSpace", "m": "count_nodes([result_hash])", "r": "hash"}, {"p": "ObjectSpace", "m": "count_objects([result_hash])", "r": "hash"}, {"p": "ObjectSpace", "m": "count_objects_size([result_hash])", "r": "hash"}, {"p": "ObjectSpace", "m": "count_symbols([result_hash])", "r": "hash"}, {"p": "ObjectSpace", "m": "count_tdata_objects([result_hash])", "r": "hash"}, {"p": "ObjectSpace", "m": "define_finalizer(obj, aProc=proc())", "r": ""}, {"p": "ObjectSpace", "m": "dump(obj, output: :file)     #", "r": "#<File:/tmp/rubyobj20131125-88733-1xkfmpv.json>"}, {"p": "ObjectSpace", "m": "dump(obj, output: :stdout)   #", "r": "nil"}, {"p": "ObjectSpace", "m": "dump(obj[, output: :string]) #", "r": "\"{ ... }\""}, {"p": "ObjectSpace", "m": "dump_all([output: :file]) #", "r": "#<File:/tmp/rubyheap20131125-88469-laoj3v.json>"}, {"p": "ObjectSpace", "m": "dump_all(output:", "r": ""}, {"p": "ObjectSpace", "m": "dump_all(output: :stdout) #", "r": "nil"}, {"p": "ObjectSpace", "m": "dump_all(output: :string) #", "r": "\"{...}\\n{...}\\n...\""}, {"p": "ObjectSpace", "m": "each_object([module])", "r": "an_enumerator"}, {"p": "ObjectSpace", "m": "each_object([module]) {|obj| ... }", "r": "integer"}, {"p": "ObjectSpace", "m": "garbage_collect", "r": "nil"}, {"p": "ObjectSpace", "m": "garbage_collect(full_mark: true, immediate_sweep: true)", "r": "nil"}, {"p": "ObjectSpace", "m": "include GC; garbage_collect", "r": "nil"}, {"p": "ObjectSpace", "m": "include GC; garbage_collect(full_mark: true, immediate_sweep: true)", "r": "nil"}, {"p": "ObjectSpace", "m": "internal_class_of(obj)", "r": "Class or Module"}, {"p": "ObjectSpace", "m": "internal_super_of(cls)", "r": "Class or Module"}, {"p": "ObjectSpace", "m": "memsize_of(obj)", "r": "Integer"}, {"p": "ObjectSpace", "m": "memsize_of_all([klass])", "r": "Integer"}, {"p": "ObjectSpace", "m": "open('heap.json','w'))         #", "r": "#<File:heap.json>"}, {"p": "ObjectSpace", "m": "reachable_objects_from(obj)", "r": "array or nil"}, {"p": "ObjectSpace", "m": "reachable_objects_from_root", "r": "hash"}, {"p": "ObjectSpace", "m": "start", "r": "nil"}, {"p": "ObjectSpace", "m": "start(full_mark: true, immediate_sweep: true)", "r": "nil"}, {"p": "ObjectSpace", "m": "trace_object_allocations { block }", "r": ""}, {"p": "ObjectSpace", "m": "trace_object_allocations_clear", "r": ""}, {"p": "ObjectSpace", "m": "trace_object_allocations_start", "r": ""}, {"p": "ObjectSpace", "m": "trace_object_allocations_stop", "r": ""}, {"p": "ObjectSpace", "m": "undefine_finalizer(obj)", "r": ""}, {"p": "OpenSSL", "m": "debug = boolean", "r": "boolean"}, {"p": "OpenSSL", "m": "debug", "r": "true | false"}, {"p": "OpenSSL", "m": "errors", "r": "[String...]"}, {"p": "OpenSSL", "m": "fips_mode = boolean", "r": "boolean"}, {"p": "OpenSSL", "m": "mem_check_start", "r": "nil"}, {"p": "OpenSSL", "m": "print_mem_leaks", "r": "true | false"}, {"p": "OpenSSL", "m": "OPENSSL_FIPS", "r": ""}, {"p": "OpenSSL", "m": "OPENSSL_LIBRARY_VERSION", "r": ""}, {"p": "OpenSSL", "m": "OPENSSL_VERSION", "r": ""}, {"p": "OpenSSL", "m": "OPENSSL_VERSION_NUMBER", "r": ""}, {"p": "OpenSSL", "m": "VERSION", "r": ""}, {"p": "OpenStruct", "m": "dig(name, ...)", "r": "object"}, {"p": "OpenStruct", "m": "each_pair", "r": "Enumerator"}, {"p": "OpenStruct", "m": "each_pair {|name, value| block }", "r": "ostruct"}, {"p": "OpenStruct", "m": "ostruct[name]", "r": "object"}, {"p": "OpenStruct", "m": "ostruct[name] = obj", "r": "obj"}, {"p": "OpenURI", "m": "Options", "r": ""}, {"p": "OptionParser", "m": "DecimalInteger", "r": ""}, {"p": "OptionParser", "m": "DecimalNumeric", "r": ""}, {"p": "OptionParser", "m": "OctalInteger", "r": ""}, {"p": "Pathname", "m": "atime", "r": "time"}, {"p": "Pathname", "m": "binread([length [, offset]])", "r": "string"}, {"p": "Pathname", "m": "binwrite(string, [offset] )", "r": "fixnum"}, {"p": "Pathname", "m": "binwrite(string, [offset], open_args )", "r": "fixnum"}, {"p": "Pathname", "m": "birthtime", "r": "time"}, {"p": "Pathname", "m": "chmod", "r": "integer"}, {"p": "Pathname", "m": "chown", "r": "integer"}, {"p": "Pathname", "m": "ctime", "r": "time"}, {"p": "Pathname", "m": "each_line {|line| ... }", "r": ""}, {"p": "Pathname", "m": "each_line(...)", "r": "an_enumerator"}, {"p": "Pathname", "m": "each_line(limit [, open_args]) {|line| block }", "r": "nil"}, {"p": "Pathname", "m": "each_line(sep, limit [, open_args]) {|line| block }", "r": "nil"}, {"p": "Pathname", "m": "each_line(sep=$/ [, open_args]) {|line| block }", "r": "nil"}, {"p": "Pathname", "m": "fnmatch(pattern, [flags])", "r": "string"}, {"p": "Pathname", "m": "fnmatch?(pattern, [flags])", "r": "string"}, {"p": "Pathname", "m": "freeze", "r": "obj"}, {"p": "Pathname", "m": "ftype", "r": "string"}, {"p": "Pathname", "m": "lchmod", "r": "integer"}, {"p": "Pathname", "m": "lchown", "r": "integer"}, {"p": "Pathname", "m": "make_link(old)", "r": ""}, {"p": "Pathname", "m": "make_symlink(old)", "r": ""}, {"p": "Pathname", "m": "mtime", "r": "time"}, {"p": "Pathname", "m": "read([length [, offset]])", "r": "string"}, {"p": "Pathname", "m": "read([length [, offset]], open_args)", "r": "string"}, {"p": "Pathname", "m": "readlines(limit [, open_args])", "r": "array"}, {"p": "Pathname", "m": "readlines(sep, limit [, open_args])", "r": "array"}, {"p": "Pathname", "m": "readlines(sep=$/ [, open_args])", "r": "array"}, {"p": "Pathname", "m": "sysopen([mode, [perm]])", "r": "fixnum"}, {"p": "Pathname", "m": "taint", "r": "obj"}, {"p": "Pathname", "m": "to_path", "r": "string"}, {"p": "Pathname", "m": "to_s", "r": "string"}, {"p": "Pathname", "m": "untaint", "r": "obj"}, {"p": "Pathname", "m": "write(string, [offset] )", "r": "fixnum"}, {"p": "Pathname", "m": "write(string, [offset], open_args )", "r": "fixnum"}, {"p": "Proc", "m": "arity", "r": "integer"}, {"p": "Proc", "m": "binding", "r": "binding"}, {"p": "Proc", "m": "call(params,...)", "r": "obj"}, {"p": "Proc", "m": "curry", "r": "a_proc"}, {"p": "Proc", "m": "curry(arity)", "r": "a_proc"}, {"p": "Proc", "m": "hash", "r": "integer"}, {"p": "Proc", "m": "lambda?", "r": "true or false"}, {"p": "Proc", "m": "new", "r": "a_proc"}, {"p": "Proc", "m": "new {|...| block }", "r": "a_proc"}, {"p": "Proc", "m": "parameters", "r": "array"}, {"p": "Proc", "m": "prc[params,...]", "r": "obj"}, {"p": "Proc", "m": "proc === obj", "r": "result_of_proc"}, {"p": "Proc", "m": "source_location", "r": "[String, Integer]"}, {"p": "Proc", "m": "to_proc", "r": "proc"}, {"p": "Proc", "m": "to_s", "r": "string"}, {"p": "Proc", "m": "yield(params,...)", "r": "obj"}, {"p": "Process", "m": "Kernel::abort([msg])", "r": ""}, {"p": "Process", "m": "Kernel::exit(status=true)", "r": ""}, {"p": "Process", "m": "Process::GID.eid", "r": "integer"}, {"p": "Process", "m": "Process::GID.rid", "r": "integer"}, {"p": "Process", "m": "Process::Sys.geteid", "r": "integer"}, {"p": "Process", "m": "Process::Sys.geteuid", "r": "integer"}, {"p": "Process", "m": "Process::Sys.getgid", "r": "integer"}, {"p": "Process", "m": "Process::Sys.getuid", "r": "integer"}, {"p": "Process", "m": "Process::UID.eid", "r": "integer"}, {"p": "Process", "m": "Process::UID.rid", "r": "integer"}, {"p": "Process", "m": "Process::exit(status=true)", "r": ""}, {"p": "Process", "m": "abort", "r": ""}, {"p": "Process", "m": "abort([msg])", "r": ""}, {"p": "Process", "m": "argv0", "r": "frozen_string"}, {"p": "Process", "m": "clock_getres(clock_id [, unit])", "r": "number"}, {"p": "Process", "m": "clock_gettime(clock_id [, unit])", "r": "number"}, {"p": "Process", "m": "daemon()", "r": "0"}, {"p": "Process", "m": "daemon(nochdir=nil,noclose=nil)", "r": "0"}, {"p": "Process", "m": "detach(pid)", "r": "thread"}, {"p": "Process", "m": "egid", "r": "integer"}, {"p": "Process", "m": "egid = integer", "r": "integer"}, {"p": "Process", "m": "euid", "r": "integer"}, {"p": "Process", "m": "euid= user", "r": ""}, {"p": "Process", "m": "exec([env,] command... [,options])", "r": ""}, {"p": "Process", "m": "exit!(status=false)", "r": ""}, {"p": "Process", "m": "exit(status=true)", "r": ""}, {"p": "Process", "m": "fork  [{ block }]", "r": "integer or nil"}, {"p": "Process", "m": "fork [{ block }]", "r": "integer or nil"}, {"p": "Process", "m": "getpgid(pid)", "r": "integer"}, {"p": "Process", "m": "getpgrp", "r": "integer"}, {"p": "Process", "m": "getpriority(kind, integer)", "r": "integer"}, {"p": "Process", "m": "getrlimit(resource)", "r": "[cur_limit, max_limit]"}, {"p": "Process", "m": "getsid()", "r": "integer"}, {"p": "Process", "m": "getsid(pid)", "r": "integer"}, {"p": "Process", "m": "gid", "r": "integer"}, {"p": "Process", "m": "gid= integer", "r": "integer"}, {"p": "Process", "m": "groups", "r": "array"}, {"p": "Process", "m": "groups= array", "r": "array"}, {"p": "Process", "m": "initgroups(username, gid)", "r": "array"}, {"p": "Process", "m": "kill(signal, pid, ...)", "r": "integer"}, {"p": "Process", "m": "last_status", "r": "Process::Status or nil"}, {"p": "Process", "m": "maxgroups", "r": "integer"}, {"p": "Process", "m": "maxgroups= integer", "r": "integer"}, {"p": "Process", "m": "pid", "r": "integer"}, {"p": "Process", "m": "ppid", "r": "integer"}, {"p": "Process", "m": "setpgid(pid, integer)", "r": "0"}, {"p": "Process", "m": "setpgrp", "r": "0"}, {"p": "Process", "m": "setpriority(kind, integer, priority)", "r": "0"}, {"p": "Process", "m": "setproctitle(string)", "r": "string"}, {"p": "Process", "m": "setrlimit(resource, cur_limit)", "r": "nil"}, {"p": "Process", "m": "setrlimit(resource, cur_limit, max_limit)", "r": "nil"}, {"p": "Process", "m": "setsid", "r": "integer"}, {"p": "Process", "m": "spawn([env,] command... [,options])", "r": "pid"}, {"p": "Process", "m": "times", "r": "aProcessTms"}, {"p": "Process", "m": "uid", "r": "integer"}, {"p": "Process", "m": "uid= user", "r": "numeric"}, {"p": "Process", "m": "wait()", "r": "integer"}, {"p": "Process", "m": "wait(pid=-1, flags=0)", "r": "integer"}, {"p": "Process", "m": "wait2(pid=-1, flags=0)", "r": "[pid, status]"}, {"p": "Process", "m": "waitall", "r": "[ [pid1,status1], ...]"}, {"p": "Process", "m": "waitpid(pid=-1, flags=0)", "r": "integer"}, {"p": "Process", "m": "waitpid2(pid=-1, flags=0)", "r": "[pid, status]"}, {"p": "Process", "m": "CLOCK_BOOTTIME", "r": ""}, {"p": "Process", "m": "CLOCK_BOOTTIME_ALARM", "r": ""}, {"p": "Process", "m": "CLOCK_MONOTONIC", "r": ""}, {"p": "Process", "m": "CLOCK_MONOTONIC_COARSE", "r": ""}, {"p": "Process", "m": "CLOCK_MONOTONIC_FAST", "r": ""}, {"p": "Process", "m": "CLOCK_MONOTONIC_PRECISE", "r": ""}, {"p": "Process", "m": "CLOCK_MONOTONIC_RAW", "r": ""}, {"p": "Process", "m": "CLOCK_MONOTONIC_RAW_APPROX", "r": ""}, {"p": "Process", "m": "CLOCK_PROCESS_CPUTIME_ID", "r": ""}, {"p": "Process", "m": "CLOCK_PROF", "r": ""}, {"p": "Process", "m": "CLOCK_REALTIME", "r": ""}, {"p": "Process", "m": "CLOCK_REALTIME_ALARM", "r": ""}, {"p": "Process", "m": "CLOCK_REALTIME_COARSE", "r": ""}, {"p": "Process", "m": "CLOCK_REALTIME_FAST", "r": ""}, {"p": "Process", "m": "CLOCK_REALTIME_PRECISE", "r": ""}, {"p": "Process", "m": "CLOCK_SECOND", "r": ""}, {"p": "Process", "m": "CLOCK_THREAD_CPUTIME_ID", "r": ""}, {"p": "Process", "m": "CLOCK_UPTIME", "r": ""}, {"p": "Process", "m": "CLOCK_UPTIME_FAST", "r": ""}, {"p": "Process", "m": "CLOCK_UPTIME_PRECISE", "r": ""}, {"p": "Process", "m": "CLOCK_UPTIME_RAW", "r": ""}, {"p": "Process", "m": "CLOCK_UPTIME_RAW_APPROX", "r": ""}, {"p": "Process", "m": "CLOCK_VIRTUAL", "r": ""}, {"p": "Process", "m": "PRIO_PGRP", "r": ""}, {"p": "Process", "m": "PRIO_PROCESS", "r": ""}, {"p": "Process", "m": "PRIO_USER", "r": ""}, {"p": "Process", "m": "RLIMIT_AS", "r": ""}, {"p": "Process", "m": "RLIMIT_CORE", "r": ""}, {"p": "Process", "m": "RLIMIT_CPU", "r": ""}, {"p": "Process", "m": "RLIMIT_DATA", "r": ""}, {"p": "Process", "m": "RLIMIT_FSIZE", "r": ""}, {"p": "Process", "m": "RLIMIT_MEMLOCK", "r": ""}, {"p": "Process", "m": "RLIMIT_MSGQUEUE", "r": ""}, {"p": "Process", "m": "RLIMIT_NICE", "r": ""}, {"p": "Process", "m": "RLIMIT_NOFILE", "r": ""}, {"p": "Process", "m": "RLIMIT_NPROC", "r": ""}, {"p": "Process", "m": "RLIMIT_RSS", "r": ""}, {"p": "Process", "m": "RLIMIT_RTPRIO", "r": ""}, {"p": "Process", "m": "RLIMIT_RTTIME", "r": ""}, {"p": "Process", "m": "RLIMIT_SBSIZE", "r": ""}, {"p": "Process", "m": "RLIMIT_SIGPENDING", "r": ""}, {"p": "Process", "m": "RLIMIT_STACK", "r": ""}, {"p": "Process", "m": "RLIM_INFINITY", "r": ""}, {"p": "Process", "m": "RLIM_SAVED_CUR", "r": ""}, {"p": "Process", "m": "RLIM_SAVED_MAX", "r": ""}, {"p": "Process", "m": "WNOHANG", "r": ""}, {"p": "Process", "m": "WUNTRACED", "r": ""}, {"p": "PStore", "m": "CHECKSUM_ALGO", "r": ""}, {"p": "PStore", "m": "EMPTY_MARSHAL_CHECKSUM", "r": ""}, {"p": "PStore", "m": "EMPTY_MARSHAL_DATA", "r": ""}, {"p": "PStore", "m": "EMPTY_STRING", "r": ""}, {"p": "PStore", "m": "RDWR_ACCESS", "r": ""}, {"p": "PStore", "m": "RD_ACCESS", "r": ""}, {"p": "PStore", "m": "WR_ACCESS", "r": ""}, {"p": "Psych", "m": "dump(o)", "r": "string of yaml"}, {"p": "Psych", "m": "dump(o, io)", "r": "io object passed in"}, {"p": "Psych", "m": "dump(o, io, options)", "r": "io object passed in"}, {"p": "Psych", "m": "dump(o, options)", "r": "string of yaml"}, {"p": "Psych", "m": "libyaml_version", "r": ""}, {"p": "Psych", "m": "DEFAULT_SNAKEYAML_VERSION", "r": ""}, {"p": "Psych", "m": "LIBYAML_VERSION", "r": ""}, {"p": "Psych", "m": "VERSION", "r": ""}, {"p": "PTY", "m": "check(pid, raise = false)", "r": "Process::Status or nil"}, {"p": "PTY", "m": "check(pid, true)", "r": "nil or raises PTY::ChildExited"}, {"p": "PTY", "m": "open {|master_io, slave_file| ... }", "r": "block value"}, {"p": "PTY", "m": "open", "r": "[master_io, slave_file]"}, {"p": "PTY", "m": "spawn(command, arguments, ...)  { |r, w, pid| ... }", "r": ""}, {"p": "PTY", "m": "spawn(command, arguments, ...)", "r": "[r, w, pid]"}, {"p": "PTY", "m": "spawn(command_line)  { |r, w, pid| ... }", "r": ""}, {"p": "PTY", "m": "spawn(command_line)", "r": "[r, w, pid]"}, {"p": "Queue", "m": "<<(object)", "r": ""}, {"p": "Queue", "m": "close", "r": ""}, {"p": "Queue", "m": "closed?", "r": ""}, {"p": "Queue", "m": "deq(non_block=false)", "r": ""}, {"p": "Queue", "m": "empty?", "r": ""}, {"p": "Queue", "m": "enq(object)", "r": ""}, {"p": "Queue", "m": "length", "r": ""}, {"p": "Queue", "m": "pop(non_block=false)", "r": ""}, {"p": "Queue", "m": "push(object)", "r": ""}, {"p": "Queue", "m": "shift(non_block=false)", "r": ""}, {"p": "Queue", "m": "size", "r": ""}, {"p": "Random", "m": "bytes(size)", "r": "a_string"}, {"p": "Random", "m": "new(seed = Random.new_seed)", "r": "prng"}, {"p": "Random", "m": "new_seed", "r": "integer"}, {"p": "Random", "m": "prng1 == prng2", "r": "true or false"}, {"p": "Random", "m": "rand", "r": "float"}, {"p": "Random", "m": "rand(max)", "r": "number"}, {"p": "Random", "m": "seed", "r": "integer"}, {"p": "Random", "m": "srand(number = Random.new_seed)", "r": "old_seed"}, {"p": "Random", "m": "urandom(size)", "r": "string"}, {"p": "Random", "m": "DEFAULT", "r": ""}, {"p": "Range", "m": "begin", "r": "obj"}, {"p": "Range", "m": "bsearch {|obj| block }", "r": "value"}, {"p": "Range", "m": "cover?(obj)", "r": "true or false"}, {"p": "Range", "m": "each", "r": "an_enumerator"}, {"p": "Range", "m": "each {| i | block }", "r": "rng"}, {"p": "Range", "m": "end", "r": "obj"}, {"p": "Range", "m": "eql?(obj)", "r": "true or false"}, {"p": "Range", "m": "exclude_end?", "r": "true or false"}, {"p": "Range", "m": "first", "r": "obj"}, {"p": "Range", "m": "first(n)", "r": "an_array"}, {"p": "Range", "m": "hash", "r": "integer"}, {"p": "Range", "m": "include?(obj)", "r": "true or false"}, {"p": "Range", "m": "inspect", "r": "string"}, {"p": "Range", "m": "last", "r": "obj"}, {"p": "Range", "m": "last(n)", "r": "an_array"}, {"p": "Range", "m": "max", "r": "obj"}, {"p": "Range", "m": "max {| a,b | block }", "r": "obj"}, {"p": "Range", "m": "max(n)", "r": "obj"}, {"p": "Range", "m": "max(n) {| a,b | block }", "r": "obj"}, {"p": "Range", "m": "member?(obj)", "r": "true or false"}, {"p": "Range", "m": "min", "r": "obj"}, {"p": "Range", "m": "min {| a,b | block }", "r": "obj"}, {"p": "Range", "m": "min(n)", "r": "array"}, {"p": "Range", "m": "min(n) {| a,b | block }", "r": "array"}, {"p": "Range", "m": "new(begin, end, exclude_end=false)", "r": "rng"}, {"p": "Range", "m": "rng == obj", "r": "true or false"}, {"p": "Range", "m": "rng === obj", "r": "true or false"}, {"p": "Range", "m": "size", "r": "num"}, {"p": "Range", "m": "step(n=1)", "r": "an_enumerator"}, {"p": "Range", "m": "step(n=1) {| obj | block }", "r": "rng"}, {"p": "Range", "m": "to_s", "r": "string"}, {"p": "Rational", "m": "-rat", "r": "rational"}, {"p": "Rational", "m": "abs", "r": "rational"}, {"p": "Rational", "m": "ceil([ndigits])", "r": "integer or rational"}, {"p": "Rational", "m": "denominator", "r": "integer"}, {"p": "Rational", "m": "fdiv(numeric)", "r": "float"}, {"p": "Rational", "m": "floor([ndigits])", "r": "integer or rational"}, {"p": "Rational", "m": "inspect", "r": "string"}, {"p": "Rational", "m": "magnitude", "r": "rational"}, {"p": "Rational", "m": "negative?", "r": "true or false"}, {"p": "Rational", "m": "numerator", "r": "integer"}, {"p": "Rational", "m": "positive?", "r": "true or false"}, {"p": "Rational", "m": "quo(numeric)", "r": "numeric"}, {"p": "Rational", "m": "rat * numeric", "r": "numeric"}, {"p": "Rational", "m": "rat ** numeric", "r": "numeric"}, {"p": "Rational", "m": "rat + numeric", "r": "numeric"}, {"p": "Rational", "m": "rat - numeric", "r": "numeric"}, {"p": "Rational", "m": "rat / numeric", "r": "numeric"}, {"p": "Rational", "m": "rat == object", "r": "true or false"}, {"p": "Rational", "m": "rational <=> numeric", "r": "-1, 0, +1, or nil"}, {"p": "Rational", "m": "rationalize", "r": "self"}, {"p": "Rational", "m": "rationalize(eps)", "r": "rational"}, {"p": "Rational", "m": "round([ndigits] [, half: mode])", "r": "integer or rational"}, {"p": "Rational", "m": "to_d(precision)", "r": "bigdecimal"}, {"p": "Rational", "m": "to_f", "r": "float"}, {"p": "Rational", "m": "to_i", "r": "integer"}, {"p": "Rational", "m": "to_r", "r": "self"}, {"p": "Rational", "m": "to_s", "r": "string"}, {"p": "Rational", "m": "truncate([ndigits])", "r": "integer or rational"}, {"p": "Readline", "m": "basic_quote_characters = string", "r": ""}, {"p": "Readline", "m": "basic_quote_characters", "r": "string"}, {"p": "Readline", "m": "basic_word_break_characters = string", "r": ""}, {"p": "Readline", "m": "basic_word_break_characters", "r": "string"}, {"p": "Readline", "m": "completer_quote_characters = string", "r": ""}, {"p": "Readline", "m": "completer_quote_characters", "r": "string"}, {"p": "Readline", "m": "completer_word_break_characters = string", "r": ""}, {"p": "Readline", "m": "completer_word_break_characters", "r": "string"}, {"p": "Readline", "m": "completion_append_character = char", "r": ""}, {"p": "Readline", "m": "completion_append_character", "r": "char"}, {"p": "Readline", "m": "completion_case_fold = bool", "r": ""}, {"p": "Readline", "m": "completion_case_fold", "r": "bool"}, {"p": "Readline", "m": "completion_proc = proc", "r": ""}, {"p": "Readline", "m": "completion_proc", "r": "proc"}, {"p": "Readline", "m": "delete_text()", "r": "self"}, {"p": "Readline", "m": "delete_text([start[, length]])", "r": "self"}, {"p": "Readline", "m": "delete_text(start..end)", "r": "self"}, {"p": "Readline", "m": "emacs_editing_mode", "r": "nil"}, {"p": "Readline", "m": "emacs_editing_mode?", "r": "bool"}, {"p": "Readline", "m": "filename_quote_characters = string", "r": ""}, {"p": "Readline", "m": "filename_quote_characters", "r": "string"}, {"p": "Readline", "m": "get_screen_size", "r": "[rows, columns]"}, {"p": "Readline", "m": "input = input", "r": ""}, {"p": "Readline", "m": "insert_text(string)", "r": "self"}, {"p": "Readline", "m": "line_buffer", "r": "string"}, {"p": "Readline", "m": "output = output", "r": ""}, {"p": "Readline", "m": "point = int", "r": ""}, {"p": "Readline", "m": "point", "r": "int"}, {"p": "Readline", "m": "pre_input_hook = proc", "r": ""}, {"p": "Readline", "m": "pre_input_hook", "r": "proc"}, {"p": "Readline", "m": "quoting_detection_proc = proc", "r": ""}, {"p": "Readline", "m": "quoting_detection_proc", "r": "proc"}, {"p": "Readline", "m": "readline(prompt = \"\", add_hist = false)", "r": "string or nil"}, {"p": "Readline", "m": "redisplay", "r": "self"}, {"p": "Readline", "m": "refresh_line", "r": "nil"}, {"p": "Readline", "m": "set_screen_size(rows, columns)", "r": "self"}, {"p": "Readline", "m": "special_prefixes = string", "r": ""}, {"p": "Readline", "m": "special_prefixes", "r": "string"}, {"p": "Readline", "m": "vi_editing_mode", "r": "nil"}, {"p": "Readline", "m": "vi_editing_mode?", "r": "bool"}, {"p": "Readline", "m": "FILENAME_COMPLETION_PROC", "r": ""}, {"p": "Readline", "m": "HISTORY", "r": ""}, {"p": "Readline", "m": "USERNAME_COMPLETION_PROC", "r": ""}, {"p": "Readline", "m": "VERSION", "r": ""}, {"p": "Regexp", "m": "casefold?", "r": "true or false"}, {"p": "Regexp", "m": "compile(regexp)", "r": "regexp"}, {"p": "Regexp", "m": "compile(string, [options])", "r": "regexp"}, {"p": "Regexp", "m": "encoding", "r": "encoding"}, {"p": "Regexp", "m": "eql?(other_rxp)", "r": "true or false"}, {"p": "Regexp", "m": "escape(str)", "r": "string"}, {"p": "Regexp", "m": "fixed_encoding?", "r": "true or false"}, {"p": "Regexp", "m": "hash", "r": "integer"}, {"p": "Regexp", "m": "inspect", "r": "string"}, {"p": "Regexp", "m": "last_match", "r": "matchdata"}, {"p": "Regexp", "m": "last_match(n)", "r": "str"}, {"p": "Regexp", "m": "match(str)", "r": "matchdata or nil"}, {"p": "Regexp", "m": "match(str,pos)", "r": "matchdata or nil"}, {"p": "Regexp", "m": "match?(str)", "r": "true or false"}, {"p": "Regexp", "m": "match?(str,pos)", "r": "true or false"}, {"p": "Regexp", "m": "named_captures", "r": "hash"}, {"p": "Regexp", "m": "names", "r": "[name1, name2, ...]"}, {"p": "Regexp", "m": "new(regexp)", "r": "regexp"}, {"p": "Regexp", "m": "new(string, [options])", "r": "regexp"}, {"p": "Regexp", "m": "options", "r": "integer"}, {"p": "Regexp", "m": "quote(str)", "r": "string"}, {"p": "Regexp", "m": "rxp == other_rxp", "r": "true or false"}, {"p": "Regexp", "m": "rxp === str", "r": "true or false"}, {"p": "Regexp", "m": "rxp =~ str", "r": "integer or nil"}, {"p": "Regexp", "m": "source", "r": "str"}, {"p": "Regexp", "m": "to_s", "r": "str"}, {"p": "Regexp", "m": "try_convert(obj)", "r": "re or nil"}, {"p": "Regexp", "m": "union(pat1, pat2, ...)", "r": "new_regexp"}, {"p": "Regexp", "m": "union(pats_ary)", "r": "new_regexp"}, {"p": "Regexp", "m": "~ rxp", "r": "integer or nil"}, {"p": "Regexp", "m": "EXTENDED", "r": ""}, {"p": "Regexp", "m": "FIXEDENCODING", "r": ""}, {"p": "Regexp", "m": "IGNORECASE", "r": ""}, {"p": "Regexp", "m": "MULTILINE", "r": ""}, {"p": "Regexp", "m": "NOENCODING", "r": ""}, {"p": "Resolv", "m": "AddressRegex", "r": ""}, {"p": "Resolv", "m": "DefaultResolver", "r": ""}, {"p": "REXML", "m": "COPYRIGHT", "r": ""}, {"p": "REXML", "m": "Copyright", "r": ""}, {"p": "REXML", "m": "DATE", "r": ""}, {"p": "REXML", "m": "REVISION", "r": ""}, {"p": "REXML", "m": "VERSION", "r": ""}, {"p": "REXML", "m": "Version", "r": ""}, {"p": "Rinda", "m": "Ring_PORT", "r": ""}, {"p": "Ripper", "m": "column", "r": "Integer"}, {"p": "Ripper", "m": "encoding", "r": "encoding"}, {"p": "Ripper", "m": "end_seen?", "r": "Boolean"}, {"p": "Ripper", "m": "error?", "r": "Boolean"}, {"p": "Ripper", "m": "filename", "r": "String"}, {"p": "Ripper", "m": "lineno", "r": "Integer"}, {"p": "Ripper", "m": "new(src, filename=\"(ripper)\", lineno=1)", "r": "ripper"}, {"p": "Ripper", "m": "parse", "r": ""}, {"p": "Ripper", "m": "state", "r": "Integer"}, {"p": "Ripper", "m": "yydebug", "r": "true or false"}, {"p": "Ripper", "m": "yydebug = flag", "r": ""}, {"p": "Ripper", "m": "EVENTS", "r": ""}, {"p": "Ripper", "m": "PARSER_EVENTS", "r": ""}, {"p": "Ripper", "m": "SCANNER_EVENTS", "r": ""}, {"p": "Ripper", "m": "Version", "r": ""}, {"p": "RSS", "m": "AVAILABLE_PARSERS", "r": ""}, {"p": "RSS", "m": "AVAILABLE_PARSER_LIBRARIES", "r": ""}, {"p": "RSS", "m": "CONTENT_PREFIX", "r": ""}, {"p": "RSS", "m": "CONTENT_URI", "r": ""}, {"p": "RSS", "m": "DC_PREFIX", "r": ""}, {"p": "RSS", "m": "DC_URI", "r": ""}, {"p": "RSS", "m": "DublincoreModel", "r": ""}, {"p": "RSS", "m": "IMAGE_ELEMENTS", "r": ""}, {"p": "RSS", "m": "IMAGE_PREFIX", "r": ""}, {"p": "RSS", "m": "IMAGE_URI", "r": ""}, {"p": "RSS", "m": "ITUNES_PREFIX", "r": ""}, {"p": "RSS", "m": "ITUNES_URI", "r": ""}, {"p": "RSS", "m": "SLASH_PREFIX", "r": ""}, {"p": "RSS", "m": "SLASH_URI", "r": ""}, {"p": "RSS", "m": "SY_PREFIX", "r": ""}, {"p": "RSS", "m": "SY_URI", "r": ""}, {"p": "RSS", "m": "TAXO_ELEMENTS", "r": ""}, {"p": "RSS", "m": "TAXO_PREFIX", "r": ""}, {"p": "RSS", "m": "TAXO_URI", "r": ""}, {"p": "RSS", "m": "URI", "r": ""}, {"p": "RSS", "m": "VERSION", "r": ""}, {"p": "RubyVM", "m": "stat", "r": "Hash"}, {"p": "RubyVM", "m": "stat(Symbol)", "r": "Numeric"}, {"p": "RubyVM", "m": "stat(hsh)", "r": "hsh"}, {"p": "RubyVM", "m": "DEFAULT_PARAMS", "r": ""}, {"p": "RubyVM", "m": "INSTRUCTION_NAMES", "r": ""}, {"p": "RubyVM", "m": "OPTS", "r": ""}, {"p": "SDBM", "m": "clear", "r": "self"}, {"p": "SDBM", "m": "close", "r": "nil"}, {"p": "SDBM", "m": "closed?", "r": "true or false"}, {"p": "SDBM", "m": "delete(key) { |key, value| ... }", "r": ""}, {"p": "SDBM", "m": "delete(key)", "r": "value or nil"}, {"p": "SDBM", "m": "delete_if { |key, value| ... }", "r": "self"}, {"p": "SDBM", "m": "each", "r": ""}, {"p": "SDBM", "m": "each { |key, value| ... }", "r": ""}, {"p": "SDBM", "m": "each_key", "r": ""}, {"p": "SDBM", "m": "each_key { |key| ... }", "r": ""}, {"p": "SDBM", "m": "each_pair", "r": ""}, {"p": "SDBM", "m": "each_pair { |key, value| ... }", "r": ""}, {"p": "SDBM", "m": "each_value", "r": ""}, {"p": "SDBM", "m": "each_value { |value| ... }", "r": ""}, {"p": "SDBM", "m": "empty?", "r": "true or false"}, {"p": "SDBM", "m": "fetch(key) { |key| ... }", "r": ""}, {"p": "SDBM", "m": "fetch(key)", "r": "value or nil"}, {"p": "SDBM", "m": "has_key?(key)", "r": "true or false"}, {"p": "SDBM", "m": "has_value?(key)", "r": "true or false"}, {"p": "SDBM", "m": "include?(key)", "r": "true or false"}, {"p": "SDBM", "m": "invert", "r": "Hash"}, {"p": "SDBM", "m": "key(value)", "r": "key"}, {"p": "SDBM", "m": "key?(key)", "r": "true or false"}, {"p": "SDBM", "m": "keys", "r": "Array"}, {"p": "SDBM", "m": "length", "r": "integer"}, {"p": "SDBM", "m": "member?(key)", "r": "true or false"}, {"p": "SDBM", "m": "new(filename, mode = 0666)", "r": ""}, {"p": "SDBM", "m": "open(filename, mode = 0666)", "r": ""}, {"p": "SDBM", "m": "open(filename, mode = 0666) { |sdbm| ... }", "r": ""}, {"p": "SDBM", "m": "reject { |key, value| ... }", "r": "Hash"}, {"p": "SDBM", "m": "reject!   { |key, value| ... }", "r": "self"}, {"p": "SDBM", "m": "replace(pairs)", "r": "self"}, {"p": "SDBM", "m": "sdbm[key] = value", "r": "value"}, {"p": "SDBM", "m": "sdbm[key]", "r": "value or nil"}, {"p": "SDBM", "m": "select { |key, value| ... }", "r": "Array"}, {"p": "SDBM", "m": "shift", "r": "Array or nil"}, {"p": "SDBM", "m": "size", "r": "integer"}, {"p": "SDBM", "m": "store(key, value)", "r": "value"}, {"p": "SDBM", "m": "to_a", "r": "Array"}, {"p": "SDBM", "m": "to_hash", "r": "Hash"}, {"p": "SDBM", "m": "update(pairs)", "r": "self"}, {"p": "SDBM", "m": "value?(key)", "r": "true or false"}, {"p": "SDBM", "m": "values", "r": "Array"}, {"p": "SDBM", "m": "values_at(key, ...)", "r": "Array"}, {"p": "Shell", "m": "alias_command(alias, command, *opts, &block)", "r": ""}, {"p": "Shell", "m": "cd(path)", "r": ""}, {"p": "Shell", "m": "chdir(path)", "r": ""}, {"p": "Shell", "m": "def_system_command(command, path = command)", "r": ""}, {"p": "Shell", "m": "install_system_commands(pre = \"sys_\")", "r": ""}, {"p": "Shell", "m": "kill(signal, job)", "r": ""}, {"p": "Shell", "m": "new(pwd, umask)", "r": "obj"}, {"p": "Shell", "m": "pushdir(path)", "r": ""}, {"p": "Shell", "m": "pushdir(path) { &block }", "r": ""}, {"p": "Signal", "m": "list", "r": "a_hash"}, {"p": "Signal", "m": "signame(signo)", "r": "string or nil"}, {"p": "Signal", "m": "trap( signal ) {| | block }", "r": "obj"}, {"p": "Signal", "m": "trap( signal, command )", "r": "obj"}, {"p": "SignalException", "m": "new(sig_name)", "r": "signal_exception"}, {"p": "SignalException", "m": "new(sig_number [, name])", "r": "signal_exception"}, {"p": "SignalException", "m": "signo", "r": "num"}, {"p": "SingleForwardable", "m": "def_single_delegator(accessor, method, new_name=method)", "r": ""}, {"p": "SingleForwardable", "m": "delegate [method, method, ...]", "r": "accessor"}, {"p": "SingleForwardable", "m": "delegate method", "r": "accessor"}, {"p": "SizedQueue", "m": "<<(object)", "r": ""}, {"p": "SizedQueue", "m": "close", "r": ""}, {"p": "SizedQueue", "m": "deq(non_block=false)", "r": ""}, {"p": "SizedQueue", "m": "empty?", "r": ""}, {"p": "SizedQueue", "m": "enq(object, non_block=false)", "r": ""}, {"p": "SizedQueue", "m": "max=(number)", "r": ""}, {"p": "SizedQueue", "m": "new(max)", "r": ""}, {"p": "SizedQueue", "m": "pop(non_block=false)", "r": ""}, {"p": "SizedQueue", "m": "push(object, non_block=false)", "r": ""}, {"p": "SizedQueue", "m": "shift(non_block=false)", "r": ""}, {"p": "Socket", "m": "accept", "r": "[client_socket, client_addrinfo]"}, {"p": "Socket", "m": "accept_nonblock([options])", "r": "[client_socket, client_addrinfo]"}, {"p": "Socket", "m": "bind(local_sockaddr)", "r": "0"}, {"p": "Socket", "m": "connect(remote_sockaddr)", "r": "0"}, {"p": "Socket", "m": "connect_nonblock(remote_sockaddr, [options])", "r": "0"}, {"p": "Socket", "m": "getaddrinfo(nodename, servname[, family[, socktype[, protocol[, flags[, reverse_lookup]]]]])", "r": "array"}, {"p": "Socket", "m": "gethostbyaddr(address_string [, address_family])", "r": "hostent"}, {"p": "Socket", "m": "gethostbyname(hostname)", "r": "[official_hostname, alias_hostnames, address_family, *address_list]"}, {"p": "Socket", "m": "gethostname", "r": "hostname"}, {"p": "Socket", "m": "getifaddrs", "r": "[ifaddr1, ...]"}, {"p": "Socket", "m": "getnameinfo(sockaddr [, flags])", "r": "[hostname, servicename]"}, {"p": "Socket", "m": "getservbyname(service_name)", "r": "port_number"}, {"p": "Socket", "m": "getservbyname(service_name, protocol_name)", "r": "port_number"}, {"p": "Socket", "m": "getservbyport(port [, protocol_name])", "r": "service"}, {"p": "Socket", "m": "ip_address_list", "r": "array"}, {"p": "Socket", "m": "listen( int )", "r": "0"}, {"p": "Socket", "m": "new(domain, socktype [, protocol])", "r": "socket"}, {"p": "Socket", "m": "pack_sockaddr_in(port, host)", "r": "sockaddr"}, {"p": "Socket", "m": "pack_sockaddr_un(path)", "r": "sockaddr"}, {"p": "Socket", "m": "pair(domain, type, protocol)", "r": "[socket1, socket2]"}, {"p": "Socket", "m": "recvfrom(maxlen)", "r": "[mesg, sender_addrinfo]"}, {"p": "Socket", "m": "recvfrom(maxlen, flags)", "r": "[mesg, sender_addrinfo]"}, {"p": "Socket", "m": "recvfrom_nonblock(maxlen[, flags[, outbuf[, opts]]])", "r": "[mesg, sender_addrinfo]"}, {"p": "Socket", "m": "sockaddr_in(port, host)", "r": "sockaddr"}, {"p": "Socket", "m": "sockaddr_un(path)", "r": "sockaddr"}, {"p": "Socket", "m": "socketpair(domain, type, protocol)", "r": "[socket1, socket2]"}, {"p": "Socket", "m": "sysaccept", "r": "[client_socket_fd, client_addrinfo]"}, {"p": "Socket", "m": "tcp(host, port, local_host=nil, local_port=nil, [opts])", "r": ""}, {"p": "Socket", "m": "tcp(host, port, local_host=nil, local_port=nil, [opts]) {|socket| ... }", "r": ""}, {"p": "Socket", "m": "udp_server_loop(host, port) {|msg, msg_src| ... }", "r": ""}, {"p": "Socket", "m": "udp_server_loop(port) {|msg, msg_src| ... }", "r": ""}, {"p": "Socket", "m": "udp_server_loop_on(sockets) {|msg, msg_src| ... }", "r": ""}, {"p": "Socket", "m": "udp_server_recv(sockets) {|msg, msg_src| ... }", "r": ""}, {"p": "Socket", "m": "udp_server_sockets([host, ] port)", "r": ""}, {"p": "Socket", "m": "unpack_sockaddr_in(sockaddr)", "r": "[port, ip_address]"}, {"p": "Socket", "m": "unpack_sockaddr_un(sockaddr)", "r": "path"}, {"p": "Socket", "m": "AF_APPLETALK", "r": ""}, {"p": "Socket", "m": "AF_ATM", "r": ""}, {"p": "Socket", "m": "AF_AX25", "r": ""}, {"p": "Socket", "m": "AF_CCITT", "r": ""}, {"p": "Socket", "m": "AF_CHAOS", "r": ""}, {"p": "Socket", "m": "AF_CNT", "r": ""}, {"p": "Socket", "m": "AF_COIP", "r": ""}, {"p": "Socket", "m": "AF_DATAKIT", "r": ""}, {"p": "Socket", "m": "AF_DEC", "r": ""}, {"p": "Socket", "m": "AF_DLI", "r": ""}, {"p": "Socket", "m": "AF_E164", "r": ""}, {"p": "Socket", "m": "AF_ECMA", "r": ""}, {"p": "Socket", "m": "AF_HYLINK", "r": ""}, {"p": "Socket", "m": "AF_IMPLINK", "r": ""}, {"p": "Socket", "m": "AF_INET", "r": ""}, {"p": "Socket", "m": "AF_INET6", "r": ""}, {"p": "Socket", "m": "AF_IPX", "r": ""}, {"p": "Socket", "m": "AF_ISDN", "r": ""}, {"p": "Socket", "m": "AF_ISO", "r": ""}, {"p": "Socket", "m": "AF_LAT", "r": ""}, {"p": "Socket", "m": "AF_LINK", "r": ""}, {"p": "Socket", "m": "AF_LOCAL", "r": ""}, {"p": "Socket", "m": "AF_MAX", "r": ""}, {"p": "Socket", "m": "AF_NATM", "r": ""}, {"p": "Socket", "m": "AF_NDRV", "r": ""}, {"p": "Socket", "m": "AF_NETBIOS", "r": ""}, {"p": "Socket", "m": "AF_NETGRAPH", "r": ""}, {"p": "Socket", "m": "AF_NS", "r": ""}, {"p": "Socket", "m": "AF_OSI", "r": ""}, {"p": "Socket", "m": "AF_PACKET", "r": ""}, {"p": "Socket", "m": "AF_PPP", "r": ""}, {"p": "Socket", "m": "AF_PUP", "r": ""}, {"p": "Socket", "m": "AF_ROUTE", "r": ""}, {"p": "Socket", "m": "AF_SIP", "r": ""}, {"p": "Socket", "m": "AF_SNA", "r": ""}, {"p": "Socket", "m": "AF_SYSTEM", "r": ""}, {"p": "Socket", "m": "AF_UNIX", "r": ""}, {"p": "Socket", "m": "AF_UNSPEC", "r": ""}, {"p": "Socket", "m": "AI_ADDRCONFIG", "r": ""}, {"p": "Socket", "m": "AI_ALL", "r": ""}, {"p": "Socket", "m": "AI_CANONNAME", "r": ""}, {"p": "Socket", "m": "AI_DEFAULT", "r": ""}, {"p": "Socket", "m": "AI_MASK", "r": ""}, {"p": "Socket", "m": "AI_NUMERICHOST", "r": ""}, {"p": "Socket", "m": "AI_NUMERICSERV", "r": ""}, {"p": "Socket", "m": "AI_PASSIVE", "r": ""}, {"p": "Socket", "m": "AI_V4MAPPED", "r": ""}, {"p": "Socket", "m": "AI_V4MAPPED_CFG", "r": ""}, {"p": "Socket", "m": "EAI_ADDRFAMILY", "r": ""}, {"p": "Socket", "m": "EAI_AGAIN", "r": ""}, {"p": "Socket", "m": "EAI_BADFLAGS", "r": ""}, {"p": "Socket", "m": "EAI_BADHINTS", "r": ""}, {"p": "Socket", "m": "EAI_FAIL", "r": ""}, {"p": "Socket", "m": "EAI_FAMILY", "r": ""}, {"p": "Socket", "m": "EAI_MAX", "r": ""}, {"p": "Socket", "m": "EAI_MEMORY", "r": ""}, {"p": "Socket", "m": "EAI_NODATA", "r": ""}, {"p": "Socket", "m": "EAI_NONAME", "r": ""}, {"p": "Socket", "m": "EAI_OVERFLOW", "r": ""}, {"p": "Socket", "m": "EAI_PROTOCOL", "r": ""}, {"p": "Socket", "m": "EAI_SERVICE", "r": ""}, {"p": "Socket", "m": "EAI_SOCKTYPE", "r": ""}, {"p": "Socket", "m": "EAI_SYSTEM", "r": ""}, {"p": "Socket", "m": "IFF_802_1Q_VLAN", "r": ""}, {"p": "Socket", "m": "IFF_ALLMULTI", "r": ""}, {"p": "Socket", "m": "IFF_ALTPHYS", "r": ""}, {"p": "Socket", "m": "IFF_AUTOMEDIA", "r": ""}, {"p": "Socket", "m": "IFF_BONDING", "r": ""}, {"p": "Socket", "m": "IFF_BRIDGE_PORT", "r": ""}, {"p": "Socket", "m": "IFF_BROADCAST", "r": ""}, {"p": "Socket", "m": "IFF_CANTCHANGE", "r": ""}, {"p": "Socket", "m": "IFF_CANTCONFIG", "r": ""}, {"p": "Socket", "m": "IFF_DEBUG", "r": ""}, {"p": "Socket", "m": "IFF_DISABLE_NETPOLL", "r": ""}, {"p": "Socket", "m": "IFF_DONT_BRIDGE", "r": ""}, {"p": "Socket", "m": "IFF_DORMANT", "r": ""}, {"p": "Socket", "m": "IFF_DRV_OACTIVE", "r": ""}, {"p": "Socket", "m": "IFF_DRV_RUNNING", "r": ""}, {"p": "Socket", "m": "IFF_DYING", "r": ""}, {"p": "Socket", "m": "IFF_DYNAMIC", "r": ""}, {"p": "Socket", "m": "IFF_EBRIDGE", "r": ""}, {"p": "Socket", "m": "IFF_ECHO", "r": ""}, {"p": "Socket", "m": "IFF_ISATAP", "r": ""}, {"p": "Socket", "m": "IFF_LINK0", "r": ""}, {"p": "Socket", "m": "IFF_LINK1", "r": ""}, {"p": "Socket", "m": "IFF_LINK2", "r": ""}, {"p": "Socket", "m": "IFF_LIVE_ADDR_CHANGE", "r": ""}, {"p": "Socket", "m": "IFF_LOOPBACK", "r": ""}, {"p": "Socket", "m": "IFF_LOWER_UP", "r": ""}, {"p": "Socket", "m": "IFF_MACVLAN_PORT", "r": ""}, {"p": "Socket", "m": "IFF_MASTER", "r": ""}, {"p": "Socket", "m": "IFF_MASTER_8023AD", "r": ""}, {"p": "Socket", "m": "IFF_MASTER_ALB", "r": ""}, {"p": "Socket", "m": "IFF_MASTER_ARPMON", "r": ""}, {"p": "Socket", "m": "IFF_MONITOR", "r": ""}, {"p": "Socket", "m": "IFF_MULTICAST", "r": ""}, {"p": "Socket", "m": "IFF_NOARP", "r": ""}, {"p": "Socket", "m": "IFF_NOTRAILERS", "r": ""}, {"p": "Socket", "m": "IFF_OACTIVE", "r": ""}, {"p": "Socket", "m": "IFF_OVS_DATAPATH", "r": ""}, {"p": "Socket", "m": "IFF_POINTOPOINT", "r": ""}, {"p": "Socket", "m": "IFF_PORTSEL", "r": ""}, {"p": "Socket", "m": "IFF_PPROMISC", "r": ""}, {"p": "Socket", "m": "IFF_PROMISC", "r": ""}, {"p": "Socket", "m": "IFF_RENAMING", "r": ""}, {"p": "Socket", "m": "IFF_ROUTE", "r": ""}, {"p": "Socket", "m": "IFF_RUNNING", "r": ""}, {"p": "Socket", "m": "IFF_SIMPLEX", "r": ""}, {"p": "Socket", "m": "IFF_SLAVE", "r": ""}, {"p": "Socket", "m": "IFF_SLAVE_INACTIVE", "r": ""}, {"p": "Socket", "m": "IFF_SLAVE_NEEDARP", "r": ""}, {"p": "Socket", "m": "IFF_SMART", "r": ""}, {"p": "Socket", "m": "IFF_STATICARP", "r": ""}, {"p": "Socket", "m": "IFF_SUPP_NOFCS", "r": ""}, {"p": "Socket", "m": "IFF_TEAM_PORT", "r": ""}, {"p": "Socket", "m": "IFF_TX_SKB_SHARING", "r": ""}, {"p": "Socket", "m": "IFF_UNICAST_FLT", "r": ""}, {"p": "Socket", "m": "IFF_UP", "r": ""}, {"p": "Socket", "m": "IFF_VOLATILE", "r": ""}, {"p": "Socket", "m": "IFF_WAN_HDLC", "r": ""}, {"p": "Socket", "m": "IFF_XMIT_DST_RELEASE", "r": ""}, {"p": "Socket", "m": "IFNAMSIZ", "r": ""}, {"p": "Socket", "m": "IF_NAMESIZE", "r": ""}, {"p": "Socket", "m": "INADDR_ALLHOSTS_GROUP", "r": ""}, {"p": "Socket", "m": "INADDR_ANY", "r": ""}, {"p": "Socket", "m": "INADDR_BROADCAST", "r": ""}, {"p": "Socket", "m": "INADDR_LOOPBACK", "r": ""}, {"p": "Socket", "m": "INADDR_MAX_LOCAL_GROUP", "r": ""}, {"p": "Socket", "m": "INADDR_NONE", "r": ""}, {"p": "Socket", "m": "INADDR_UNSPEC_GROUP", "r": ""}, {"p": "Socket", "m": "INET6_ADDRSTRLEN", "r": ""}, {"p": "Socket", "m": "INET_ADDRSTRLEN", "r": ""}, {"p": "Socket", "m": "IPPORT_RESERVED", "r": ""}, {"p": "Socket", "m": "IPPORT_USERRESERVED", "r": ""}, {"p": "Socket", "m": "IPPROTO_AH", "r": ""}, {"p": "Socket", "m": "IPPROTO_BIP", "r": ""}, {"p": "Socket", "m": "IPPROTO_DSTOPTS", "r": ""}, {"p": "Socket", "m": "IPPROTO_EGP", "r": ""}, {"p": "Socket", "m": "IPPROTO_EON", "r": ""}, {"p": "Socket", "m": "IPPROTO_ESP", "r": ""}, {"p": "Socket", "m": "IPPROTO_FRAGMENT", "r": ""}, {"p": "Socket", "m": "IPPROTO_GGP", "r": ""}, {"p": "Socket", "m": "IPPROTO_HELLO", "r": ""}, {"p": "Socket", "m": "IPPROTO_HOPOPTS", "r": ""}, {"p": "Socket", "m": "IPPROTO_ICMP", "r": ""}, {"p": "Socket", "m": "IPPROTO_ICMPV6", "r": ""}, {"p": "Socket", "m": "IPPROTO_IDP", "r": ""}, {"p": "Socket", "m": "IPPROTO_IGMP", "r": ""}, {"p": "Socket", "m": "IPPROTO_IP", "r": ""}, {"p": "Socket", "m": "IPPROTO_IPV6", "r": ""}, {"p": "Socket", "m": "IPPROTO_MAX", "r": ""}, {"p": "Socket", "m": "IPPROTO_ND", "r": ""}, {"p": "Socket", "m": "IPPROTO_NONE", "r": ""}, {"p": "Socket", "m": "IPPROTO_PUP", "r": ""}, {"p": "Socket", "m": "IPPROTO_RAW", "r": ""}, {"p": "Socket", "m": "IPPROTO_ROUTING", "r": ""}, {"p": "Socket", "m": "IPPROTO_TCP", "r": ""}, {"p": "Socket", "m": "IPPROTO_TP", "r": ""}, {"p": "Socket", "m": "IPPROTO_UDP", "r": ""}, {"p": "Socket", "m": "IPPROTO_XTP", "r": ""}, {"p": "Socket", "m": "IPV6_CHECKSUM", "r": ""}, {"p": "Socket", "m": "IPV6_DONTFRAG", "r": ""}, {"p": "Socket", "m": "IPV6_DSTOPTS", "r": ""}, {"p": "Socket", "m": "IPV6_HOPLIMIT", "r": ""}, {"p": "Socket", "m": "IPV6_HOPOPTS", "r": ""}, {"p": "Socket", "m": "IPV6_JOIN_GROUP", "r": ""}, {"p": "Socket", "m": "IPV6_LEAVE_GROUP", "r": ""}, {"p": "Socket", "m": "IPV6_MULTICAST_HOPS", "r": ""}, {"p": "Socket", "m": "IPV6_MULTICAST_IF", "r": ""}, {"p": "Socket", "m": "IPV6_MULTICAST_LOOP", "r": ""}, {"p": "Socket", "m": "IPV6_NEXTHOP", "r": ""}, {"p": "Socket", "m": "IPV6_PATHMTU", "r": ""}, {"p": "Socket", "m": "IPV6_PKTINFO", "r": ""}, {"p": "Socket", "m": "IPV6_RECVDSTOPTS", "r": ""}, {"p": "Socket", "m": "IPV6_RECVHOPLIMIT", "r": ""}, {"p": "Socket", "m": "IPV6_RECVHOPOPTS", "r": ""}, {"p": "Socket", "m": "IPV6_RECVPATHMTU", "r": ""}, {"p": "Socket", "m": "IPV6_RECVPKTINFO", "r": ""}, {"p": "Socket", "m": "IPV6_RECVRTHDR", "r": ""}, {"p": "Socket", "m": "IPV6_RECVTCLASS", "r": ""}, {"p": "Socket", "m": "IPV6_RTHDR", "r": ""}, {"p": "Socket", "m": "IPV6_RTHDRDSTOPTS", "r": ""}, {"p": "Socket", "m": "IPV6_RTHDR_TYPE_0", "r": ""}, {"p": "Socket", "m": "IPV6_TCLASS", "r": ""}, {"p": "Socket", "m": "IPV6_UNICAST_HOPS", "r": ""}, {"p": "Socket", "m": "IPV6_USE_MIN_MTU", "r": ""}, {"p": "Socket", "m": "IPV6_V6ONLY", "r": ""}, {"p": "Socket", "m": "IPX_TYPE", "r": ""}, {"p": "Socket", "m": "IP_ADD_MEMBERSHIP", "r": ""}, {"p": "Socket", "m": "IP_ADD_SOURCE_MEMBERSHIP", "r": ""}, {"p": "Socket", "m": "IP_BLOCK_SOURCE", "r": ""}, {"p": "Socket", "m": "IP_DEFAULT_MULTICAST_LOOP", "r": ""}, {"p": "Socket", "m": "IP_DEFAULT_MULTICAST_TTL", "r": ""}, {"p": "Socket", "m": "IP_DONTFRAG", "r": ""}, {"p": "Socket", "m": "IP_DROP_MEMBERSHIP", "r": ""}, {"p": "Socket", "m": "IP_DROP_SOURCE_MEMBERSHIP", "r": ""}, {"p": "Socket", "m": "IP_FREEBIND", "r": ""}, {"p": "Socket", "m": "IP_HDRINCL", "r": ""}, {"p": "Socket", "m": "IP_IPSEC_POLICY", "r": ""}, {"p": "Socket", "m": "IP_MAX_MEMBERSHIPS", "r": ""}, {"p": "Socket", "m": "IP_MINTTL", "r": ""}, {"p": "Socket", "m": "IP_MSFILTER", "r": ""}, {"p": "Socket", "m": "IP_MTU", "r": ""}, {"p": "Socket", "m": "IP_MTU_DISCOVER", "r": ""}, {"p": "Socket", "m": "IP_MULTICAST_IF", "r": ""}, {"p": "Socket", "m": "IP_MULTICAST_LOOP", "r": ""}, {"p": "Socket", "m": "IP_MULTICAST_TTL", "r": ""}, {"p": "Socket", "m": "IP_ONESBCAST", "r": ""}, {"p": "Socket", "m": "IP_OPTIONS", "r": ""}, {"p": "Socket", "m": "IP_PASSSEC", "r": ""}, {"p": "Socket", "m": "IP_PKTINFO", "r": ""}, {"p": "Socket", "m": "IP_PKTOPTIONS", "r": ""}, {"p": "Socket", "m": "IP_PMTUDISC_DO", "r": ""}, {"p": "Socket", "m": "IP_PMTUDISC_DONT", "r": ""}, {"p": "Socket", "m": "IP_PMTUDISC_WANT", "r": ""}, {"p": "Socket", "m": "IP_PORTRANGE", "r": ""}, {"p": "Socket", "m": "IP_RECVDSTADDR", "r": ""}, {"p": "Socket", "m": "IP_RECVERR", "r": ""}, {"p": "Socket", "m": "IP_RECVIF", "r": ""}, {"p": "Socket", "m": "IP_RECVOPTS", "r": ""}, {"p": "Socket", "m": "IP_RECVRETOPTS", "r": ""}, {"p": "Socket", "m": "IP_RECVSLLA", "r": ""}, {"p": "Socket", "m": "IP_RECVTOS", "r": ""}, {"p": "Socket", "m": "IP_RECVTTL", "r": ""}, {"p": "Socket", "m": "IP_RETOPTS", "r": ""}, {"p": "Socket", "m": "IP_ROUTER_ALERT", "r": ""}, {"p": "Socket", "m": "IP_SENDSRCADDR", "r": ""}, {"p": "Socket", "m": "IP_TOS", "r": ""}, {"p": "Socket", "m": "IP_TRANSPARENT", "r": ""}, {"p": "Socket", "m": "IP_TTL", "r": ""}, {"p": "Socket", "m": "IP_UNBLOCK_SOURCE", "r": ""}, {"p": "Socket", "m": "IP_XFRM_POLICY", "r": ""}, {"p": "Socket", "m": "LOCAL_CONNWAIT", "r": ""}, {"p": "Socket", "m": "LOCAL_CREDS", "r": ""}, {"p": "Socket", "m": "LOCAL_PEERCRED", "r": ""}, {"p": "Socket", "m": "MCAST_BLOCK_SOURCE", "r": ""}, {"p": "Socket", "m": "MCAST_EXCLUDE", "r": ""}, {"p": "Socket", "m": "MCAST_INCLUDE", "r": ""}, {"p": "Socket", "m": "MCAST_JOIN_GROUP", "r": ""}, {"p": "Socket", "m": "MCAST_JOIN_SOURCE_GROUP", "r": ""}, {"p": "Socket", "m": "MCAST_LEAVE_GROUP", "r": ""}, {"p": "Socket", "m": "MCAST_LEAVE_SOURCE_GROUP", "r": ""}, {"p": "Socket", "m": "MCAST_MSFILTER", "r": ""}, {"p": "Socket", "m": "MCAST_UNBLOCK_SOURCE", "r": ""}, {"p": "Socket", "m": "MSG_COMPAT", "r": ""}, {"p": "Socket", "m": "MSG_CONFIRM", "r": ""}, {"p": "Socket", "m": "MSG_CTRUNC", "r": ""}, {"p": "Socket", "m": "MSG_DONTROUTE", "r": ""}, {"p": "Socket", "m": "MSG_DONTWAIT", "r": ""}, {"p": "Socket", "m": "MSG_EOF", "r": ""}, {"p": "Socket", "m": "MSG_EOR", "r": ""}, {"p": "Socket", "m": "MSG_ERRQUEUE", "r": ""}, {"p": "Socket", "m": "MSG_FASTOPEN", "r": ""}, {"p": "Socket", "m": "MSG_FIN", "r": ""}, {"p": "Socket", "m": "MSG_FLUSH", "r": ""}, {"p": "Socket", "m": "MSG_HAVEMORE", "r": ""}, {"p": "Socket", "m": "MSG_HOLD", "r": ""}, {"p": "Socket", "m": "MSG_MORE", "r": ""}, {"p": "Socket", "m": "MSG_NOSIGNAL", "r": ""}, {"p": "Socket", "m": "MSG_OOB", "r": ""}, {"p": "Socket", "m": "MSG_PEEK", "r": ""}, {"p": "Socket", "m": "MSG_PROXY", "r": ""}, {"p": "Socket", "m": "MSG_RCVMORE", "r": ""}, {"p": "Socket", "m": "MSG_RST", "r": ""}, {"p": "Socket", "m": "MSG_SEND", "r": ""}, {"p": "Socket", "m": "MSG_SYN", "r": ""}, {"p": "Socket", "m": "MSG_TRUNC", "r": ""}, {"p": "Socket", "m": "MSG_WAITALL", "r": ""}, {"p": "Socket", "m": "NI_DGRAM", "r": ""}, {"p": "Socket", "m": "NI_MAXHOST", "r": ""}, {"p": "Socket", "m": "NI_MAXSERV", "r": ""}, {"p": "Socket", "m": "NI_NAMEREQD", "r": ""}, {"p": "Socket", "m": "NI_NOFQDN", "r": ""}, {"p": "Socket", "m": "NI_NUMERICHOST", "r": ""}, {"p": "Socket", "m": "NI_NUMERICSERV", "r": ""}, {"p": "Socket", "m": "PF_APPLETALK", "r": ""}, {"p": "Socket", "m": "PF_ATM", "r": ""}, {"p": "Socket", "m": "PF_AX25", "r": ""}, {"p": "Socket", "m": "PF_CCITT", "r": ""}, {"p": "Socket", "m": "PF_CHAOS", "r": ""}, {"p": "Socket", "m": "PF_CNT", "r": ""}, {"p": "Socket", "m": "PF_COIP", "r": ""}, {"p": "Socket", "m": "PF_DATAKIT", "r": ""}, {"p": "Socket", "m": "PF_DEC", "r": ""}, {"p": "Socket", "m": "PF_DLI", "r": ""}, {"p": "Socket", "m": "PF_ECMA", "r": ""}, {"p": "Socket", "m": "PF_HYLINK", "r": ""}, {"p": "Socket", "m": "PF_IMPLINK", "r": ""}, {"p": "Socket", "m": "PF_INET", "r": ""}, {"p": "Socket", "m": "PF_INET6", "r": ""}, {"p": "Socket", "m": "PF_IPX", "r": ""}, {"p": "Socket", "m": "PF_ISDN", "r": ""}, {"p": "Socket", "m": "PF_ISO", "r": ""}, {"p": "Socket", "m": "PF_KEY", "r": ""}, {"p": "Socket", "m": "PF_LAT", "r": ""}, {"p": "Socket", "m": "PF_LINK", "r": ""}, {"p": "Socket", "m": "PF_LOCAL", "r": ""}, {"p": "Socket", "m": "PF_MAX", "r": ""}, {"p": "Socket", "m": "PF_NATM", "r": ""}, {"p": "Socket", "m": "PF_NDRV", "r": ""}, {"p": "Socket", "m": "PF_NETBIOS", "r": ""}, {"p": "Socket", "m": "PF_NETGRAPH", "r": ""}, {"p": "Socket", "m": "PF_NS", "r": ""}, {"p": "Socket", "m": "PF_OSI", "r": ""}, {"p": "Socket", "m": "PF_PACKET", "r": ""}, {"p": "Socket", "m": "PF_PIP", "r": ""}, {"p": "Socket", "m": "PF_PPP", "r": ""}, {"p": "Socket", "m": "PF_PUP", "r": ""}, {"p": "Socket", "m": "PF_ROUTE", "r": ""}, {"p": "Socket", "m": "PF_RTIP", "r": ""}, {"p": "Socket", "m": "PF_SIP", "r": ""}, {"p": "Socket", "m": "PF_SNA", "r": ""}, {"p": "Socket", "m": "PF_SYSTEM", "r": ""}, {"p": "Socket", "m": "PF_UNIX", "r": ""}, {"p": "Socket", "m": "PF_UNSPEC", "r": ""}, {"p": "Socket", "m": "PF_XTP", "r": ""}, {"p": "Socket", "m": "SCM_BINTIME", "r": ""}, {"p": "Socket", "m": "SCM_CREDENTIALS", "r": ""}, {"p": "Socket", "m": "SCM_CREDS", "r": ""}, {"p": "Socket", "m": "SCM_RIGHTS", "r": ""}, {"p": "Socket", "m": "SCM_TIMESTAMP", "r": ""}, {"p": "Socket", "m": "SCM_TIMESTAMPING", "r": ""}, {"p": "Socket", "m": "SCM_TIMESTAMPNS", "r": ""}, {"p": "Socket", "m": "SCM_UCRED", "r": ""}, {"p": "Socket", "m": "SCM_WIFI_STATUS", "r": ""}, {"p": "Socket", "m": "SHUT_RD", "r": ""}, {"p": "Socket", "m": "SHUT_RDWR", "r": ""}, {"p": "Socket", "m": "SHUT_WR", "r": ""}, {"p": "Socket", "m": "SOCK_DGRAM", "r": ""}, {"p": "Socket", "m": "SOCK_PACKET", "r": ""}, {"p": "Socket", "m": "SOCK_RAW", "r": ""}, {"p": "Socket", "m": "SOCK_RDM", "r": ""}, {"p": "Socket", "m": "SOCK_SEQPACKET", "r": ""}, {"p": "Socket", "m": "SOCK_STREAM", "r": ""}, {"p": "Socket", "m": "SOL_ATALK", "r": ""}, {"p": "Socket", "m": "SOL_AX25", "r": ""}, {"p": "Socket", "m": "SOL_IP", "r": ""}, {"p": "Socket", "m": "SOL_IPX", "r": ""}, {"p": "Socket", "m": "SOL_SOCKET", "r": ""}, {"p": "Socket", "m": "SOL_TCP", "r": ""}, {"p": "Socket", "m": "SOL_UDP", "r": ""}, {"p": "Socket", "m": "SOMAXCONN", "r": ""}, {"p": "Socket", "m": "SOPRI_BACKGROUND", "r": ""}, {"p": "Socket", "m": "SOPRI_INTERACTIVE", "r": ""}, {"p": "Socket", "m": "SOPRI_NORMAL", "r": ""}, {"p": "Socket", "m": "SO_ACCEPTCONN", "r": ""}, {"p": "Socket", "m": "SO_ACCEPTFILTER", "r": ""}, {"p": "Socket", "m": "SO_ALLZONES", "r": ""}, {"p": "Socket", "m": "SO_ATTACH_FILTER", "r": ""}, {"p": "Socket", "m": "SO_BINDTODEVICE", "r": ""}, {"p": "Socket", "m": "SO_BINTIME", "r": ""}, {"p": "Socket", "m": "SO_BPF_EXTENSIONS", "r": ""}, {"p": "Socket", "m": "SO_BROADCAST", "r": ""}, {"p": "Socket", "m": "SO_BUSY_POLL", "r": ""}, {"p": "Socket", "m": "SO_DEBUG", "r": ""}, {"p": "Socket", "m": "SO_DETACH_FILTER", "r": ""}, {"p": "Socket", "m": "SO_DOMAIN", "r": ""}, {"p": "Socket", "m": "SO_DONTROUTE", "r": ""}, {"p": "Socket", "m": "SO_DONTTRUNC", "r": ""}, {"p": "Socket", "m": "SO_ERROR", "r": ""}, {"p": "Socket", "m": "SO_GET_FILTER", "r": ""}, {"p": "Socket", "m": "SO_KEEPALIVE", "r": ""}, {"p": "Socket", "m": "SO_LINGER", "r": ""}, {"p": "Socket", "m": "SO_LOCK_FILTER", "r": ""}, {"p": "Socket", "m": "SO_MAC_EXEMPT", "r": ""}, {"p": "Socket", "m": "SO_MARK", "r": ""}, {"p": "Socket", "m": "SO_MAX_PACING_RATE", "r": ""}, {"p": "Socket", "m": "SO_NKE", "r": ""}, {"p": "Socket", "m": "SO_NOFCS", "r": ""}, {"p": "Socket", "m": "SO_NOSIGPIPE", "r": ""}, {"p": "Socket", "m": "SO_NO_CHECK", "r": ""}, {"p": "Socket", "m": "SO_NREAD", "r": ""}, {"p": "Socket", "m": "SO_OOBINLINE", "r": ""}, {"p": "Socket", "m": "SO_PASSCRED", "r": ""}, {"p": "Socket", "m": "SO_PASSSEC", "r": ""}, {"p": "Socket", "m": "SO_PEEK_OFF", "r": ""}, {"p": "Socket", "m": "SO_PEERCRED", "r": ""}, {"p": "Socket", "m": "SO_PEERNAME", "r": ""}, {"p": "Socket", "m": "SO_PEERSEC", "r": ""}, {"p": "Socket", "m": "SO_PRIORITY", "r": ""}, {"p": "Socket", "m": "SO_PROTOCOL", "r": ""}, {"p": "Socket", "m": "SO_RCVBUF", "r": ""}, {"p": "Socket", "m": "SO_RCVBUFFORCE", "r": ""}, {"p": "Socket", "m": "SO_RCVLOWAT", "r": ""}, {"p": "Socket", "m": "SO_RCVTIMEO", "r": ""}, {"p": "Socket", "m": "SO_RECVUCRED", "r": ""}, {"p": "Socket", "m": "SO_REUSEADDR", "r": ""}, {"p": "Socket", "m": "SO_REUSEPORT", "r": ""}, {"p": "Socket", "m": "SO_RXQ_OVFL", "r": ""}, {"p": "Socket", "m": "SO_SECURITY_AUTHENTICATION", "r": ""}, {"p": "Socket", "m": "SO_SECURITY_ENCRYPTION_NETWORK", "r": ""}, {"p": "Socket", "m": "SO_SECURITY_ENCRYPTION_TRANSPORT", "r": ""}, {"p": "Socket", "m": "SO_SELECT_ERR_QUEUE", "r": ""}, {"p": "Socket", "m": "SO_SNDBUF", "r": ""}, {"p": "Socket", "m": "SO_SNDBUFFORCE", "r": ""}, {"p": "Socket", "m": "SO_SNDLOWAT", "r": ""}, {"p": "Socket", "m": "SO_SNDTIMEO", "r": ""}, {"p": "Socket", "m": "SO_TIMESTAMP", "r": ""}, {"p": "Socket", "m": "SO_TIMESTAMPING", "r": ""}, {"p": "Socket", "m": "SO_TIMESTAMPNS", "r": ""}, {"p": "Socket", "m": "SO_TYPE", "r": ""}, {"p": "Socket", "m": "SO_USELOOPBACK", "r": ""}, {"p": "Socket", "m": "SO_WANTMORE", "r": ""}, {"p": "Socket", "m": "SO_WANTOOBFLAG", "r": ""}, {"p": "Socket", "m": "SO_WIFI_STATUS", "r": ""}, {"p": "Socket", "m": "TCP_CONGESTION", "r": ""}, {"p": "Socket", "m": "TCP_COOKIE_TRANSACTIONS", "r": ""}, {"p": "Socket", "m": "TCP_CORK", "r": ""}, {"p": "Socket", "m": "TCP_DEFER_ACCEPT", "r": ""}, {"p": "Socket", "m": "TCP_FASTOPEN", "r": ""}, {"p": "Socket", "m": "TCP_INFO", "r": ""}, {"p": "Socket", "m": "TCP_KEEPCNT", "r": ""}, {"p": "Socket", "m": "TCP_KEEPIDLE", "r": ""}, {"p": "Socket", "m": "TCP_KEEPINTVL", "r": ""}, {"p": "Socket", "m": "TCP_LINGER2", "r": ""}, {"p": "Socket", "m": "TCP_MAXSEG", "r": ""}, {"p": "Socket", "m": "TCP_MD5SIG", "r": ""}, {"p": "Socket", "m": "TCP_NODELAY", "r": ""}, {"p": "Socket", "m": "TCP_NOOPT", "r": ""}, {"p": "Socket", "m": "TCP_NOPUSH", "r": ""}, {"p": "Socket", "m": "TCP_QUEUE_SEQ", "r": ""}, {"p": "Socket", "m": "TCP_QUICKACK", "r": ""}, {"p": "Socket", "m": "TCP_REPAIR", "r": ""}, {"p": "Socket", "m": "TCP_REPAIR_OPTIONS", "r": ""}, {"p": "Socket", "m": "TCP_REPAIR_QUEUE", "r": ""}, {"p": "Socket", "m": "TCP_SYNCNT", "r": ""}, {"p": "Socket", "m": "TCP_THIN_DUPACK", "r": ""}, {"p": "Socket", "m": "TCP_THIN_LINEAR_TIMEOUTS", "r": ""}, {"p": "Socket", "m": "TCP_TIMESTAMP", "r": ""}, {"p": "Socket", "m": "TCP_USER_TIMEOUT", "r": ""}, {"p": "Socket", "m": "TCP_WINDOW_CLAMP", "r": ""}, {"p": "Socket", "m": "UDP_CORK", "r": ""}, {"p": "SOCKSSocket", "m": "new(host, serv)", "r": "socket"}, {"p": "StopIteration", "m": "result", "r": "value"}, {"p": "String", "m": "+str", "r": "str (mutable)"}, {"p": "String", "m": "-str", "r": "str (frozen)"}, {"p": "String", "m": "String#iseuc", "r": "true or false"}, {"p": "String", "m": "String#isjis", "r": "true or false"}, {"p": "String", "m": "String#issjis", "r": "true or false"}, {"p": "String", "m": "String#isutf8", "r": "true or false"}, {"p": "String", "m": "String#kconv(to_enc, from_enc)", "r": ""}, {"p": "String", "m": "String#toeuc", "r": "string"}, {"p": "String", "m": "String#tojis", "r": "string"}, {"p": "String", "m": "String#tolocale", "r": "string"}, {"p": "String", "m": "String#tosjis", "r": "string"}, {"p": "String", "m": "String#toutf16", "r": "string"}, {"p": "String", "m": "String#toutf32", "r": "string"}, {"p": "String", "m": "String#toutf8", "r": "string"}, {"p": "String", "m": "ascii_only?", "r": "true or false"}, {"p": "String", "m": "b", "r": "str"}, {"p": "String", "m": "bytes", "r": "an_array"}, {"p": "String", "m": "bytesize", "r": "integer"}, {"p": "String", "m": "byteslice(integer)", "r": "new_str or nil"}, {"p": "String", "m": "byteslice(integer, integer)", "r": "new_str or nil"}, {"p": "String", "m": "byteslice(range)", "r": "new_str or nil"}, {"p": "String", "m": "capitalize", "r": "new_str"}, {"p": "String", "m": "capitalize!", "r": "str or nil"}, {"p": "String", "m": "capitalize!([options])", "r": "str or nil"}, {"p": "String", "m": "capitalize([options])", "r": "new_str"}, {"p": "String", "m": "casecmp(other_str)", "r": "-1, 0, +1, or nil"}, {"p": "String", "m": "casecmp?(other_str)", "r": "true, false, or nil"}, {"p": "String", "m": "center(width, padstr=' ')", "r": "new_str"}, {"p": "String", "m": "chars", "r": "an_array"}, {"p": "String", "m": "chomp!(separator=$/)", "r": "str or nil"}, {"p": "String", "m": "chomp(separator=$/)", "r": "new_str"}, {"p": "String", "m": "chop", "r": "new_str"}, {"p": "String", "m": "chop!", "r": "str or nil"}, {"p": "String", "m": "chr", "r": "string"}, {"p": "String", "m": "clear", "r": "string"}, {"p": "String", "m": "codepoints", "r": "an_array"}, {"p": "String", "m": "concat(obj1, obj2,...)", "r": "str"}, {"p": "String", "m": "count([other_str]+)", "r": "integer"}, {"p": "String", "m": "crypt(salt_str)", "r": "new_str"}, {"p": "String", "m": "delete!([other_str]+)", "r": "str or nil"}, {"p": "String", "m": "delete([other_str]+)", "r": "new_str"}, {"p": "String", "m": "delete_prefix!(prefix)", "r": "self or nil"}, {"p": "String", "m": "delete_prefix(prefix)", "r": "new_str"}, {"p": "String", "m": "delete_suffix!(suffix)", "r": "self or nil"}, {"p": "String", "m": "delete_suffix(suffix)", "r": "new_str"}, {"p": "String", "m": "downcase", "r": "new_str"}, {"p": "String", "m": "downcase!", "r": "str or nil"}, {"p": "String", "m": "downcase!([options])", "r": "str or nil"}, {"p": "String", "m": "downcase([options])", "r": "new_str"}, {"p": "String", "m": "dump", "r": "new_str"}, {"p": "String", "m": "each_byte", "r": "an_enumerator"}, {"p": "String", "m": "each_byte {|integer| block }", "r": "str"}, {"p": "String", "m": "each_char", "r": "an_enumerator"}, {"p": "String", "m": "each_char {|cstr| block }", "r": "str"}, {"p": "String", "m": "each_codepoint", "r": "an_enumerator"}, {"p": "String", "m": "each_codepoint {|integer| block }", "r": "str"}, {"p": "String", "m": "each_grapheme_cluster", "r": "an_enumerator"}, {"p": "String", "m": "each_grapheme_cluster {|cstr| block }", "r": "str"}, {"p": "String", "m": "each_line(separator=$/ [, getline_args])", "r": "an_enumerator"}, {"p": "String", "m": "each_line(separator=$/ [, getline_args]) {|substr| block }", "r": "str"}, {"p": "String", "m": "empty?", "r": "true or false"}, {"p": "String", "m": "encode!(dst_encoding, src_encoding [, options] )", "r": "str"}, {"p": "String", "m": "encode!(encoding [, options] )", "r": "str"}, {"p": "String", "m": "encode([options])", "r": "str"}, {"p": "String", "m": "encode(dst_encoding, src_encoding [, options] )", "r": "str"}, {"p": "String", "m": "encode(encoding [, options] )", "r": "str"}, {"p": "String", "m": "encoding", "r": "encoding"}, {"p": "String", "m": "end_with?([suffixes]+)", "r": "true or false"}, {"p": "String", "m": "eql?(other)", "r": "true or false"}, {"p": "String", "m": "force_encoding(encoding)", "r": "str"}, {"p": "String", "m": "getbyte(index)", "r": "0 .. 255"}, {"p": "String", "m": "grapheme_clusters", "r": "an_array"}, {"p": "String", "m": "gsub!(pattern)", "r": "an_enumerator"}, {"p": "String", "m": "gsub!(pattern) {|match| block }", "r": "str or nil"}, {"p": "String", "m": "gsub!(pattern, hash)", "r": "str or nil"}, {"p": "String", "m": "gsub!(pattern, replacement)", "r": "str or nil"}, {"p": "String", "m": "gsub(pattern)", "r": "enumerator"}, {"p": "String", "m": "gsub(pattern) {|match| block }", "r": "new_str"}, {"p": "String", "m": "gsub(pattern, hash)", "r": "new_str"}, {"p": "String", "m": "gsub(pattern, replacement)", "r": "new_str"}, {"p": "String", "m": "hash", "r": "integer"}, {"p": "String", "m": "hex", "r": "integer"}, {"p": "String", "m": "include? other_str", "r": "true or false"}, {"p": "String", "m": "index(regexp [, offset])", "r": "integer or nil"}, {"p": "String", "m": "index(substring [, offset])", "r": "integer or nil"}, {"p": "String", "m": "insert(index, other_str)", "r": "str"}, {"p": "String", "m": "inspect", "r": "string"}, {"p": "String", "m": "intern", "r": "symbol"}, {"p": "String", "m": "length", "r": "integer"}, {"p": "String", "m": "lines(separator=$/)", "r": "an_array"}, {"p": "String", "m": "ljust(integer, padstr=' ')", "r": "new_str"}, {"p": "String", "m": "lstrip", "r": "new_str"}, {"p": "String", "m": "lstrip!", "r": "self or nil"}, {"p": "String", "m": "match(pattern)", "r": "matchdata or nil"}, {"p": "String", "m": "match(pattern, pos)", "r": "matchdata or nil"}, {"p": "String", "m": "match?(pattern)", "r": "true or false"}, {"p": "String", "m": "match?(pattern, pos)", "r": "true or false"}, {"p": "String", "m": "new(str=\"\")", "r": "new_str"}, {"p": "String", "m": "new(str=\"\", capacity: size)", "r": "new_str"}, {"p": "String", "m": "new(str=\"\", encoding: enc)", "r": "new_str"}, {"p": "String", "m": "next", "r": "new_str"}, {"p": "String", "m": "next!", "r": "str"}, {"p": "String", "m": "oct", "r": "integer"}, {"p": "String", "m": "ord", "r": "integer"}, {"p": "String", "m": "partition(regexp)", "r": "[head, match, tail]"}, {"p": "String", "m": "partition(sep)", "r": "[head, sep, tail]"}, {"p": "String", "m": "prepend(other_str1, other_str2,...)", "r": "str"}, {"p": "String", "m": "replace(other_str)", "r": "str"}, {"p": "String", "m": "reverse", "r": "new_str"}, {"p": "String", "m": "reverse!", "r": "str"}, {"p": "String", "m": "rindex(regexp [, integer])", "r": "integer or nil"}, {"p": "String", "m": "rindex(substring [, integer])", "r": "integer or nil"}, {"p": "String", "m": "rjust(integer, padstr=' ')", "r": "new_str"}, {"p": "String", "m": "rpartition(regexp)", "r": "[head, match, tail]"}, {"p": "String", "m": "rpartition(sep)", "r": "[head, sep, tail]"}, {"p": "String", "m": "rstrip", "r": "new_str"}, {"p": "String", "m": "rstrip!", "r": "self or nil"}, {"p": "String", "m": "scan(pattern)", "r": "array"}, {"p": "String", "m": "scan(pattern) {|match, ...| block }", "r": "str"}, {"p": "String", "m": "scrub", "r": "new_str"}, {"p": "String", "m": "scrub!", "r": "str"}, {"p": "String", "m": "scrub!(repl)", "r": "str"}, {"p": "String", "m": "scrub!{|bytes|}", "r": "str"}, {"p": "String", "m": "scrub(repl)", "r": "new_str"}, {"p": "String", "m": "scrub{|bytes|}", "r": "new_str"}, {"p": "String", "m": "setbyte(index, integer)", "r": "integer"}, {"p": "String", "m": "shellescape", "r": "string"}, {"p": "String", "m": "shellsplit", "r": "array"}, {"p": "String", "m": "size", "r": "integer"}, {"p": "String", "m": "slice!(integer)", "r": "new_str or nil"}, {"p": "String", "m": "slice!(integer, integer)", "r": "new_str or nil"}, {"p": "String", "m": "slice!(other_str)", "r": "new_str or nil"}, {"p": "String", "m": "slice!(range)", "r": "new_str or nil"}, {"p": "String", "m": "slice!(regexp)", "r": "new_str or nil"}, {"p": "String", "m": "slice(index)", "r": "new_str or nil"}, {"p": "String", "m": "slice(match_str)", "r": "new_str or nil"}, {"p": "String", "m": "slice(range)", "r": "new_str or nil"}, {"p": "String", "m": "slice(regexp)", "r": "new_str or nil"}, {"p": "String", "m": "slice(regexp, capture)", "r": "new_str or nil"}, {"p": "String", "m": "slice(start, length)", "r": "new_str or nil"}, {"p": "String", "m": "split(pattern=nil, [limit])", "r": "an_array"}, {"p": "String", "m": "squeeze!([other_str]*)", "r": "str or nil"}, {"p": "String", "m": "squeeze([other_str]*)", "r": "new_str"}, {"p": "String", "m": "start_with?([prefixes]+)", "r": "true or false"}, {"p": "String", "m": "str % arg", "r": "new_str"}, {"p": "String", "m": "str * integer", "r": "new_str"}, {"p": "String", "m": "str + other_str", "r": "new_str"}, {"p": "String", "m": "str << integer", "r": "str"}, {"p": "String", "m": "str << obj", "r": "str"}, {"p": "String", "m": "str == obj", "r": "true or false"}, {"p": "String", "m": "str === obj", "r": "true or false"}, {"p": "String", "m": "str =~ obj", "r": "integer or nil"}, {"p": "String", "m": "str[index]", "r": "new_str or nil"}, {"p": "String", "m": "str[integer, integer] = new_str", "r": ""}, {"p": "String", "m": "str[integer] = new_str", "r": ""}, {"p": "String", "m": "str[match_str]", "r": "new_str or nil"}, {"p": "String", "m": "str[other_str] = new_str", "r": ""}, {"p": "String", "m": "str[range]", "r": "new_str or nil"}, {"p": "String", "m": "str[range] = aString", "r": ""}, {"p": "String", "m": "str[regexp, capture]", "r": "new_str or nil"}, {"p": "String", "m": "str[regexp, integer] = new_str", "r": ""}, {"p": "String", "m": "str[regexp, name] = new_str", "r": ""}, {"p": "String", "m": "str[regexp]", "r": "new_str or nil"}, {"p": "String", "m": "str[regexp] = new_str", "r": ""}, {"p": "String", "m": "str[start, length]", "r": "new_str or nil"}, {"p": "String", "m": "string <=> other_string", "r": "-1, 0, +1, or nil"}, {"p": "String", "m": "strip", "r": "new_str"}, {"p": "String", "m": "strip!", "r": "str or nil"}, {"p": "String", "m": "sub!(pattern) {|match| block }", "r": "str or nil"}, {"p": "String", "m": "sub!(pattern, replacement)", "r": "str or nil"}, {"p": "String", "m": "sub(pattern) {|match| block }", "r": "new_str"}, {"p": "String", "m": "sub(pattern, hash)", "r": "new_str"}, {"p": "String", "m": "sub(pattern, replacement)", "r": "new_str"}, {"p": "String", "m": "succ", "r": "new_str"}, {"p": "String", "m": "succ!", "r": "str"}, {"p": "String", "m": "sum(n=16)", "r": "integer"}, {"p": "String", "m": "swapcase", "r": "new_str"}, {"p": "String", "m": "swapcase!", "r": "str or nil"}, {"p": "String", "m": "swapcase!([options])", "r": "str or nil"}, {"p": "String", "m": "swapcase([options])", "r": "new_str"}, {"p": "String", "m": "to_c", "r": "complex"}, {"p": "String", "m": "to_d", "r": "bigdecimal"}, {"p": "String", "m": "to_f", "r": "float"}, {"p": "String", "m": "to_i(base=10)", "r": "integer"}, {"p": "String", "m": "to_r", "r": "rational"}, {"p": "String", "m": "to_s", "r": "str"}, {"p": "String", "m": "to_str", "r": "str"}, {"p": "String", "m": "to_sym", "r": "symbol"}, {"p": "String", "m": "tr!(from_str, to_str)", "r": "str or nil"}, {"p": "String", "m": "tr(from_str, to_str)", "r": "new_str"}, {"p": "String", "m": "tr_s!(from_str, to_str)", "r": "str or nil"}, {"p": "String", "m": "tr_s(from_str, to_str)", "r": "new_str"}, {"p": "String", "m": "try_convert(obj)", "r": "string or nil"}, {"p": "String", "m": "undump", "r": "new_str"}, {"p": "String", "m": "unicode_normalize!(form=:nfc)", "r": ""}, {"p": "String", "m": "unicode_normalize(form=:nfc)", "r": ""}, {"p": "String", "m": "unicode_normalized?(form=:nfc)", "r": ""}, {"p": "String", "m": "unpack(format)", "r": "anArray"}, {"p": "String", "m": "unpack1(format)", "r": "obj"}, {"p": "String", "m": "upcase", "r": "new_str"}, {"p": "String", "m": "upcase!", "r": "str or nil"}, {"p": "String", "m": "upcase!([options])", "r": "str or nil"}, {"p": "String", "m": "upcase([options])", "r": "new_str"}, {"p": "String", "m": "upto(other_str, exclusive=false)", "r": "an_enumerator"}, {"p": "String", "m": "upto(other_str, exclusive=false) {|s| block }", "r": "str"}, {"p": "String", "m": "valid_encoding?", "r": "true or false"}, {"p": "StringIO", "m": "close", "r": "nil"}, {"p": "StringIO", "m": "close_read", "r": "nil"}, {"p": "StringIO", "m": "close_write", "r": "nil"}, {"p": "StringIO", "m": "closed?", "r": "true or false"}, {"p": "StringIO", "m": "closed_read?", "r": "true or false"}, {"p": "StringIO", "m": "closed_write?", "r": "true or false"}, {"p": "StringIO", "m": "each(...)", "r": "anEnumerator"}, {"p": "StringIO", "m": "each(limit) {|line| block }", "r": "strio"}, {"p": "StringIO", "m": "each(sep, limit) {|line| block }", "r": "strio"}, {"p": "StringIO", "m": "each(sep=$/) {|line| block }", "r": "strio"}, {"p": "StringIO", "m": "each_byte", "r": "anEnumerator"}, {"p": "StringIO", "m": "each_byte {|byte| block }", "r": "strio"}, {"p": "StringIO", "m": "each_char", "r": "anEnumerator"}, {"p": "StringIO", "m": "each_char {|char| block }", "r": "strio"}, {"p": "StringIO", "m": "each_codepoint", "r": "anEnumerator"}, {"p": "StringIO", "m": "each_codepoint {|c| block }", "r": "strio"}, {"p": "StringIO", "m": "each_line(...)", "r": "anEnumerator"}, {"p": "StringIO", "m": "each_line(limit) {|line| block }", "r": "strio"}, {"p": "StringIO", "m": "each_line(sep,limit) {|line| block }", "r": "strio"}, {"p": "StringIO", "m": "each_line(sep=$/) {|line| block }", "r": "strio"}, {"p": "StringIO", "m": "eof", "r": "true or false"}, {"p": "StringIO", "m": "eof?", "r": "true or false"}, {"p": "StringIO", "m": "external_encoding", "r": "encoding"}, {"p": "StringIO", "m": "getbyte", "r": "fixnum or nil"}, {"p": "StringIO", "m": "getc", "r": "string or nil"}, {"p": "StringIO", "m": "gets(limit)", "r": "string or nil"}, {"p": "StringIO", "m": "gets(sep, limit)", "r": "string or nil"}, {"p": "StringIO", "m": "gets(sep=$/)", "r": "string or nil"}, {"p": "StringIO", "m": "internal_encoding", "r": "encoding"}, {"p": "StringIO", "m": "length", "r": "integer"}, {"p": "StringIO", "m": "lineno", "r": "integer"}, {"p": "StringIO", "m": "lineno = integer", "r": "integer"}, {"p": "StringIO", "m": "new(string=\"\"[, mode])", "r": ""}, {"p": "StringIO", "m": "open(string=\"\"[, mode]) {|strio| ...}", "r": ""}, {"p": "StringIO", "m": "pos", "r": "integer"}, {"p": "StringIO", "m": "pos = integer", "r": "integer"}, {"p": "StringIO", "m": "putc(obj)", "r": "obj"}, {"p": "StringIO", "m": "read([length [, outbuf]])", "r": "string, outbuf, or nil"}, {"p": "StringIO", "m": "readlines(limit)", "r": "array"}, {"p": "StringIO", "m": "readlines(sep,limit)", "r": "array"}, {"p": "StringIO", "m": "readlines(sep=$/)", "r": "array"}, {"p": "StringIO", "m": "reopen(other_StrIO)", "r": "strio"}, {"p": "StringIO", "m": "reopen(string, mode)", "r": "strio"}, {"p": "StringIO", "m": "rewind", "r": "0"}, {"p": "StringIO", "m": "seek(amount, whence=SEEK_SET)", "r": "0"}, {"p": "StringIO", "m": "set_encoding(ext_enc, [int_enc[, opt]])", "r": "strio"}, {"p": "StringIO", "m": "size", "r": "integer"}, {"p": "StringIO", "m": "string", "r": "string"}, {"p": "StringIO", "m": "string = string", "r": "string"}, {"p": "StringIO", "m": "sync", "r": "true"}, {"p": "StringIO", "m": "syswrite(string)", "r": "integer"}, {"p": "StringIO", "m": "tell", "r": "integer"}, {"p": "StringIO", "m": "truncate(integer)", "r": "0"}, {"p": "StringIO", "m": "ungetbyte(fixnum)", "r": "nil"}, {"p": "StringIO", "m": "ungetc(string)", "r": "nil"}, {"p": "StringIO", "m": "write(string, ...)", "r": "integer"}, {"p": "StringScanner", "m": "<<(str)", "r": ""}, {"p": "StringScanner", "m": "[](n)", "r": ""}, {"p": "StringScanner", "m": "captures", "r": ""}, {"p": "StringScanner", "m": "check(pattern)", "r": ""}, {"p": "StringScanner", "m": "check_until(pattern)", "r": ""}, {"p": "StringScanner", "m": "clear", "r": ""}, {"p": "StringScanner", "m": "clone", "r": ""}, {"p": "StringScanner", "m": "concat(str)", "r": ""}, {"p": "StringScanner", "m": "dup", "r": ""}, {"p": "StringScanner", "m": "exist?(pattern)", "r": ""}, {"p": "StringScanner", "m": "match?(pattern)", "r": ""}, {"p": "StringScanner", "m": "must_C_version", "r": ""}, {"p": "StringScanner", "m": "new(string, dup = false)", "r": ""}, {"p": "StringScanner", "m": "peek(len)", "r": ""}, {"p": "StringScanner", "m": "pos=(n)", "r": ""}, {"p": "StringScanner", "m": "scan(pattern)", "r": "String"}, {"p": "StringScanner", "m": "scan_full(pattern, advance_pointer_p, return_string_p)", "r": ""}, {"p": "StringScanner", "m": "scan_until(pattern)", "r": ""}, {"p": "StringScanner", "m": "search_full(pattern, advance_pointer_p, return_string_p)", "r": ""}, {"p": "StringScanner", "m": "size", "r": ""}, {"p": "StringScanner", "m": "skip(pattern)", "r": ""}, {"p": "StringScanner", "m": "skip_until(pattern)", "r": ""}, {"p": "StringScanner", "m": "string=(str)", "r": ""}, {"p": "StringScanner", "m": "terminate", "r": ""}, {"p": "StringScanner", "m": "values_at( i1, i2, ... iN )", "r": "an_array"}, {"p": "Struct", "m": "StructClass[value, ...]", "r": "object"}, {"p": "Struct", "m": "dig(key, ...)", "r": "object"}, {"p": "Struct", "m": "each", "r": "enumerator"}, {"p": "Struct", "m": "each {|obj| block }", "r": "struct"}, {"p": "Struct", "m": "each_pair", "r": "enumerator"}, {"p": "Struct", "m": "each_pair {|sym, obj| block }", "r": "struct"}, {"p": "Struct", "m": "eql?(other)", "r": "true or false"}, {"p": "Struct", "m": "hash", "r": "integer"}, {"p": "Struct", "m": "inspect", "r": "string"}, {"p": "Struct", "m": "length", "r": "integer"}, {"p": "Struct", "m": "members", "r": "array"}, {"p": "Struct", "m": "new([class_name] [, member_name]+)", "r": "StructClass"}, {"p": "Struct", "m": "new([class_name] [, member_name]+) {|StructClass| block }", "r": "StructClass"}, {"p": "Struct", "m": "new([class_name] [, member_name]+, keyword_init: true)", "r": "StructClass"}, {"p": "Struct", "m": "new(value, ...)", "r": "object"}, {"p": "Struct", "m": "select", "r": "enumerator"}, {"p": "Struct", "m": "select {|obj| block }", "r": "array"}, {"p": "Struct", "m": "size", "r": "integer"}, {"p": "Struct", "m": "struct == other", "r": "true or false"}, {"p": "Struct", "m": "struct[index]", "r": "object"}, {"p": "Struct", "m": "struct[index]  = obj", "r": "obj"}, {"p": "Struct", "m": "struct[member]", "r": "object"}, {"p": "Struct", "m": "struct[member] = obj", "r": "obj"}, {"p": "Struct", "m": "to_a", "r": "array"}, {"p": "Struct", "m": "to_h", "r": "hash"}, {"p": "Struct", "m": "to_s", "r": "string"}, {"p": "Struct", "m": "values", "r": "array"}, {"p": "Struct", "m": "values_at(selector, ...)", "r": "array"}, {"p": "Struct", "m": "Group", "r": ""}, {"p": "Struct", "m": "Passwd", "r": ""}, {"p": "Struct", "m": "Tms", "r": ""}, {"p": "Symbol", "m": "all_symbols", "r": "array"}, {"p": "Symbol", "m": "capitalize", "r": "symbol"}, {"p": "Symbol", "m": "capitalize([options])", "r": "symbol"}, {"p": "Symbol", "m": "casecmp(other_symbol)", "r": "-1, 0, +1, or nil"}, {"p": "Symbol", "m": "casecmp?(other_symbol)", "r": "true, false, or nil"}, {"p": "Symbol", "m": "downcase", "r": "symbol"}, {"p": "Symbol", "m": "downcase([options])", "r": "symbol"}, {"p": "Symbol", "m": "empty?", "r": "true or false"}, {"p": "Symbol", "m": "encoding", "r": "encoding"}, {"p": "Symbol", "m": "id2name", "r": "string"}, {"p": "Symbol", "m": "inspect", "r": "string"}, {"p": "Symbol", "m": "intern", "r": "sym"}, {"p": "Symbol", "m": "length", "r": "integer"}, {"p": "Symbol", "m": "match(pattern)", "r": "matchdata or nil"}, {"p": "Symbol", "m": "match(pattern, pos)", "r": "matchdata or nil"}, {"p": "Symbol", "m": "match?(pattern)", "r": "true or false"}, {"p": "Symbol", "m": "match?(pattern, pos)", "r": "true or false"}, {"p": "Symbol", "m": "size", "r": "integer"}, {"p": "Symbol", "m": "slice(b, n)", "r": "string"}, {"p": "Symbol", "m": "slice(idx)", "r": "char"}, {"p": "Symbol", "m": "succ", "r": ""}, {"p": "Symbol", "m": "swapcase", "r": "symbol"}, {"p": "Symbol", "m": "swapcase([options])", "r": "symbol"}, {"p": "Symbol", "m": "sym == obj", "r": "true or false"}, {"p": "Symbol", "m": "sym =~ obj", "r": "integer or nil"}, {"p": "Symbol", "m": "sym[b, n]", "r": "string"}, {"p": "Symbol", "m": "sym[idx]", "r": "char"}, {"p": "Symbol", "m": "symbol <=> other_symbol", "r": "-1, 0, +1, or nil"}, {"p": "Symbol", "m": "to_proc", "r": ""}, {"p": "Symbol", "m": "to_s", "r": "string"}, {"p": "Symbol", "m": "to_sym", "r": "sym"}, {"p": "Symbol", "m": "upcase", "r": "symbol"}, {"p": "Symbol", "m": "upcase([options])", "r": "symbol"}, {"p": "Synchronizer_m", "m": "EX", "r": ""}, {"p": "Synchronizer_m", "m": "SH", "r": ""}, {"p": "Synchronizer_m", "m": "UN", "r": ""}, {"p": "Sync_m", "m": "EX", "r": ""}, {"p": "Sync_m", "m": "SH", "r": ""}, {"p": "Sync_m", "m": "UN", "r": ""}, {"p": "SyntaxError", "m": "new([msg])", "r": "syntax_error"}, {"p": "Syslog", "m": "log(priority, format_string, *format_args)", "r": ""}, {"p": "Syslog", "m": "mask=(priority_mask)", "r": ""}, {"p": "Syslog", "m": "open(ident, options, facility)", "r": "syslog"}, {"p": "Syslog", "m": "opened?", "r": ""}, {"p": "Syslog", "m": "reopen(ident, options, facility)", "r": "syslog"}, {"p": "SystemCallError", "m": "errno", "r": "integer"}, {"p": "SystemCallError", "m": "new(msg, errno)", "r": "system_call_error_subclass"}, {"p": "SystemCallError", "m": "system_call_error === other", "r": "true or false"}, {"p": "SystemExit", "m": "new", "r": "system_exit"}, {"p": "SystemExit", "m": "new(msg)", "r": "system_exit"}, {"p": "SystemExit", "m": "new(status)", "r": "system_exit"}, {"p": "SystemExit", "m": "new(status, msg)", "r": "system_exit"}, {"p": "SystemExit", "m": "status", "r": "integer"}, {"p": "SystemExit", "m": "success?", "r": "true or false"}, {"p": "TCPServer", "m": "accept", "r": "tcpsocket"}, {"p": "TCPServer", "m": "accept_nonblock([options])", "r": "tcpsocket"}, {"p": "TCPServer", "m": "listen( int )", "r": "0"}, {"p": "TCPServer", "m": "new([hostname,] port)", "r": "tcpserver"}, {"p": "TCPServer", "m": "sysaccept", "r": "file_descriptor"}, {"p": "TCPSocket", "m": "gethostbyname(hostname)", "r": "[official_hostname, alias_hostnames, address_family, *address_list]"}, {"p": "TCPSocket", "m": "new(remote_host, remote_port, local_host=nil, local_port=nil)", "r": ""}, {"p": "Tempfile", "m": "new(basename = \"\", [tmpdir = Dir.tmpdir], [options])", "r": ""}, {"p": "Thread", "m": "DEBUG", "r": "num"}, {"p": "Thread", "m": "DEBUG = num", "r": ""}, {"p": "Thread", "m": "abort_on_exception", "r": "true or false"}, {"p": "Thread", "m": "abort_on_exception= boolean", "r": "true or false"}, {"p": "Thread", "m": "add_trace_func(proc)", "r": "proc"}, {"p": "Thread", "m": "alive?", "r": "true or false"}, {"p": "Thread", "m": "backtrace", "r": "array"}, {"p": "Thread", "m": "backtrace_locations(*args)", "r": "array or nil"}, {"p": "Thread", "m": "current", "r": "thread"}, {"p": "Thread", "m": "exclusive { block }", "r": "obj"}, {"p": "Thread", "m": "exit", "r": "thr or nil"}, {"p": "Thread", "m": "exit", "r": "thread"}, {"p": "Thread", "m": "fork([args]*) {|args| block }", "r": "thread"}, {"p": "Thread", "m": "group", "r": "thgrp or nil"}, {"p": "Thread", "m": "handle_interrupt(hash) { ... }", "r": "result of the block"}, {"p": "Thread", "m": "join", "r": "thr"}, {"p": "Thread", "m": "join(limit)", "r": "thr"}, {"p": "Thread", "m": "key?(sym)", "r": "true or false"}, {"p": "Thread", "m": "keys", "r": "array"}, {"p": "Thread", "m": "kill", "r": "thr or nil"}, {"p": "Thread", "m": "kill(thread)", "r": "thread"}, {"p": "Thread", "m": "list", "r": "array"}, {"p": "Thread", "m": "main", "r": "thread"}, {"p": "Thread", "m": "name", "r": "string"}, {"p": "Thread", "m": "name=(name)", "r": "string"}, {"p": "Thread", "m": "new { ... }", "r": "thread"}, {"p": "Thread", "m": "new(*args) { |args| ... }", "r": "thread"}, {"p": "Thread", "m": "new(*args, &proc)", "r": "thread"}, {"p": "Thread", "m": "pass", "r": "nil"}, {"p": "Thread", "m": "pending_interrupt?(error = nil)", "r": "true/false"}, {"p": "Thread", "m": "priority", "r": "integer"}, {"p": "Thread", "m": "priority= integer", "r": "thr"}, {"p": "Thread", "m": "raise", "r": ""}, {"p": "Thread", "m": "raise(exception [, string [, array]])", "r": ""}, {"p": "Thread", "m": "raise(string)", "r": ""}, {"p": "Thread", "m": "report_on_exception", "r": "true or false"}, {"p": "Thread", "m": "report_on_exception= boolean", "r": "true or false"}, {"p": "Thread", "m": "run", "r": "thr"}, {"p": "Thread", "m": "safe_level", "r": "integer"}, {"p": "Thread", "m": "set_trace_func(nil)", "r": "nil"}, {"p": "Thread", "m": "set_trace_func(proc)", "r": "proc"}, {"p": "Thread", "m": "start([args]*) {|args| block }", "r": "thread"}, {"p": "Thread", "m": "status", "r": "string, false or nil"}, {"p": "Thread", "m": "stop", "r": "nil"}, {"p": "Thread", "m": "stop?", "r": "true or false"}, {"p": "Thread", "m": "terminate", "r": "thr or nil"}, {"p": "Thread", "m": "thr[sym]", "r": "obj or nil"}, {"p": "Thread", "m": "thr[sym] = obj", "r": "obj"}, {"p": "Thread", "m": "thread_variable?(key)", "r": "true or false"}, {"p": "Thread", "m": "thread_variable_get(key)", "r": "obj or nil"}, {"p": "Thread", "m": "thread_variable_set(key, value)", "r": ""}, {"p": "Thread", "m": "thread_variables", "r": "array"}, {"p": "Thread", "m": "to_s", "r": "string"}, {"p": "Thread", "m": "value", "r": "obj"}, {"p": "Thread", "m": "wakeup", "r": "thr"}, {"p": "ThreadGroup", "m": "add(thread)", "r": "thgrp"}, {"p": "ThreadGroup", "m": "enclose", "r": "thgrp"}, {"p": "ThreadGroup", "m": "enclosed?", "r": "true or false"}, {"p": "ThreadGroup", "m": "list", "r": "array"}, {"p": "ThreadGroup", "m": "Default", "r": ""}, {"p": "Time", "m": "asctime", "r": "string"}, {"p": "Time", "m": "at(seconds, microseconds, :microsecond)", "r": "time"}, {"p": "Time", "m": "at(seconds, microseconds, :usec)", "r": "time"}, {"p": "Time", "m": "at(seconds, microseconds_with_frac)", "r": "time"}, {"p": "Time", "m": "at(seconds, milliseconds, :millisecond)", "r": "time"}, {"p": "Time", "m": "at(seconds, nanoseconds, :nanosecond)", "r": "time"}, {"p": "Time", "m": "at(seconds, nanoseconds, :nsec)", "r": "time"}, {"p": "Time", "m": "at(seconds_with_frac)", "r": "time"}, {"p": "Time", "m": "at(time)", "r": "time"}, {"p": "Time", "m": "ctime", "r": "string"}, {"p": "Time", "m": "day", "r": "integer"}, {"p": "Time", "m": "dst?", "r": "true or false"}, {"p": "Time", "m": "eql?(other_time)", "r": ""}, {"p": "Time", "m": "friday?", "r": "true or false"}, {"p": "Time", "m": "getgm", "r": "new_time"}, {"p": "Time", "m": "getlocal", "r": "new_time"}, {"p": "Time", "m": "getlocal(utc_offset)", "r": "new_time"}, {"p": "Time", "m": "getutc", "r": "new_time"}, {"p": "Time", "m": "gm(sec, min, hour, day, month, year, dummy, dummy, dummy, dummy)", "r": "time"}, {"p": "Time", "m": "gm(year)", "r": "time"}, {"p": "Time", "m": "gm(year, month)", "r": "time"}, {"p": "Time", "m": "gm(year, month, day)", "r": "time"}, {"p": "Time", "m": "gm(year, month, day, hour)", "r": "time"}, {"p": "Time", "m": "gm(year, month, day, hour, min)", "r": "time"}, {"p": "Time", "m": "gm(year, month, day, hour, min, sec, usec_with_frac)", "r": "time"}, {"p": "Time", "m": "gm(year, month, day, hour, min, sec_with_frac)", "r": "time"}, {"p": "Time", "m": "gmt?", "r": "true or false"}, {"p": "Time", "m": "gmt_offset", "r": "integer"}, {"p": "Time", "m": "gmtime", "r": "time"}, {"p": "Time", "m": "gmtoff", "r": "integer"}, {"p": "Time", "m": "hash", "r": "integer"}, {"p": "Time", "m": "hour", "r": "integer"}, {"p": "Time", "m": "inspect", "r": "string"}, {"p": "Time", "m": "isdst", "r": "true or false"}, {"p": "Time", "m": "local(sec, min, hour, day, month, year, dummy, dummy, isdst, dummy)", "r": "time"}, {"p": "Time", "m": "local(year)", "r": "time"}, {"p": "Time", "m": "local(year, month)", "r": "time"}, {"p": "Time", "m": "local(year, month, day)", "r": "time"}, {"p": "Time", "m": "local(year, month, day, hour)", "r": "time"}, {"p": "Time", "m": "local(year, month, day, hour, min)", "r": "time"}, {"p": "Time", "m": "local(year, month, day, hour, min, sec, usec_with_frac)", "r": "time"}, {"p": "Time", "m": "local(year, month, day, hour, min, sec_with_frac)", "r": "time"}, {"p": "Time", "m": "localtime", "r": "time"}, {"p": "Time", "m": "localtime(utc_offset)", "r": "time"}, {"p": "Time", "m": "mday", "r": "integer"}, {"p": "Time", "m": "min", "r": "integer"}, {"p": "Time", "m": "mktime(sec, min, hour, day, month, year, dummy, dummy, isdst, dummy)", "r": "time"}, {"p": "Time", "m": "mktime(year)", "r": "time"}, {"p": "Time", "m": "mktime(year, month)", "r": "time"}, {"p": "Time", "m": "mktime(year, month, day)", "r": "time"}, {"p": "Time", "m": "mktime(year, month, day, hour)", "r": "time"}, {"p": "Time", "m": "mktime(year, month, day, hour, min)", "r": "time"}, {"p": "Time", "m": "mktime(year, month, day, hour, min, sec, usec_with_frac)", "r": "time"}, {"p": "Time", "m": "mktime(year, month, day, hour, min, sec_with_frac)", "r": "time"}, {"p": "Time", "m": "mon", "r": "integer"}, {"p": "Time", "m": "monday?", "r": "true or false"}, {"p": "Time", "m": "month", "r": "integer"}, {"p": "Time", "m": "new", "r": "time"}, {"p": "Time", "m": "new(year, month=nil, day=nil, hour=nil, min=nil, sec=nil, utc_offset=nil)", "r": "time"}, {"p": "Time", "m": "now", "r": "time"}, {"p": "Time", "m": "nsec", "r": "int"}, {"p": "Time", "m": "round([ndigits])", "r": "new_time"}, {"p": "Time", "m": "saturday?", "r": "true or false"}, {"p": "Time", "m": "sec", "r": "integer"}, {"p": "Time", "m": "strftime( string )", "r": "string"}, {"p": "Time", "m": "subsec", "r": "number"}, {"p": "Time", "m": "succ", "r": "new_time"}, {"p": "Time", "m": "sunday?", "r": "true or false"}, {"p": "Time", "m": "thursday?", "r": "true or false"}, {"p": "Time", "m": "time + numeric", "r": "time"}, {"p": "Time", "m": "time - numeric", "r": "time"}, {"p": "Time", "m": "time - other_time", "r": "float"}, {"p": "Time", "m": "time <=> other_time", "r": "-1, 0, +1 or nil"}, {"p": "Time", "m": "to_a", "r": "array"}, {"p": "Time", "m": "to_date", "r": "date"}, {"p": "Time", "m": "to_datetime", "r": "datetime"}, {"p": "Time", "m": "to_f", "r": "float"}, {"p": "Time", "m": "to_i", "r": "int"}, {"p": "Time", "m": "to_r", "r": "a_rational"}, {"p": "Time", "m": "to_s", "r": "string"}, {"p": "Time", "m": "to_time", "r": "time"}, {"p": "Time", "m": "tuesday?", "r": "true or false"}, {"p": "Time", "m": "tv_nsec", "r": "int"}, {"p": "Time", "m": "tv_sec", "r": "int"}, {"p": "Time", "m": "tv_usec", "r": "int"}, {"p": "Time", "m": "usec", "r": "int"}, {"p": "Time", "m": "utc", "r": "time"}, {"p": "Time", "m": "utc(sec, min, hour, day, month, year, dummy, dummy, dummy, dummy)", "r": "time"}, {"p": "Time", "m": "utc(year)", "r": "time"}, {"p": "Time", "m": "utc(year, month)", "r": "time"}, {"p": "Time", "m": "utc(year, month, day)", "r": "time"}, {"p": "Time", "m": "utc(year, month, day, hour)", "r": "time"}, {"p": "Time", "m": "utc(year, month, day, hour, min)", "r": "time"}, {"p": "Time", "m": "utc(year, month, day, hour, min, sec, usec_with_frac)", "r": "time"}, {"p": "Time", "m": "utc(year, month, day, hour, min, sec_with_frac)", "r": "time"}, {"p": "Time", "m": "utc?", "r": "true or false"}, {"p": "Time", "m": "utc_offset", "r": "integer"}, {"p": "Time", "m": "wday", "r": "integer"}, {"p": "Time", "m": "wednesday?", "r": "true or false"}, {"p": "Time", "m": "yday", "r": "integer"}, {"p": "Time", "m": "year", "r": "integer"}, {"p": "Time", "m": "zone", "r": "string"}, {"p": "TracePoint", "m": "disable", "r": "true or false"}, {"p": "TracePoint", "m": "disable { block }", "r": "obj"}, {"p": "TracePoint", "m": "enable", "r": "true or false"}, {"p": "TracePoint", "m": "enable { block }", "r": "obj"}, {"p": "TracePoint", "m": "enabled?", "r": "true or false"}, {"p": "TracePoint", "m": "inspect", "r": "string"}, {"p": "TracePoint", "m": "new(*events) { |obj| block }", "r": "obj"}, {"p": "TracePoint", "m": "stat", "r": "obj"}, {"p": "TracePoint", "m": "trace(*events) { |obj| block }", "r": "obj"}, {"p": "Tracer", "m": "EVENT_SYMBOL", "r": ""}, {"p": "Tracer", "m": "Single", "r": ""}, {"p": "Tracer", "m": "display_c_call", "r": ""}, {"p": "Tracer", "m": "display_process_id", "r": ""}, {"p": "Tracer", "m": "display_thread_id", "r": ""}, {"p": "Tracer", "m": "stdout", "r": ""}, {"p": "Tracer", "m": "verbose", "r": ""}, {"p": "TrueClass", "m": "obj === other", "r": "true or false"}, {"p": "TrueClass", "m": "to_s", "r": "\"true\""}, {"p": "TrueClass", "m": "true & obj", "r": "true or false"}, {"p": "TrueClass", "m": "true ^ obj", "r": "!obj"}, {"p": "TrueClass", "m": "true | obj", "r": "true"}, {"p": "UDPSocket", "m": "bind(host, port) #", "r": "0"}, {"p": "UDPSocket", "m": "connect(host, port)", "r": "0"}, {"p": "UDPSocket", "m": "new([address_family])", "r": "socket"}, {"p": "UDPSocket", "m": "recvfrom_nonblock(maxlen [, flags[, outbuf [, options]]])", "r": "[mesg, sender_inet_addr]"}, {"p": "UDPSocket", "m": "send(mesg, flags)", "r": "numbytes_sent"}, {"p": "UDPSocket", "m": "send(mesg, flags, host, port)", "r": "numbytes_sent"}, {"p": "UDPSocket", "m": "send(mesg, flags, sockaddr_to)", "r": "numbytes_sent"}, {"p": "UnboundMethod", "m": "arity", "r": "integer"}, {"p": "UnboundMethod", "m": "bind(obj)", "r": "method"}, {"p": "UnboundMethod", "m": "clone", "r": "new_method"}, {"p": "UnboundMethod", "m": "eql?(other_meth)", "r": "true or false"}, {"p": "UnboundMethod", "m": "hash", "r": "integer"}, {"p": "UnboundMethod", "m": "inspect", "r": "string"}, {"p": "UnboundMethod", "m": "meth == other_meth", "r": "true or false"}, {"p": "UnboundMethod", "m": "name", "r": "symbol"}, {"p": "UnboundMethod", "m": "original_name", "r": "symbol"}, {"p": "UnboundMethod", "m": "owner", "r": "class_or_module"}, {"p": "UnboundMethod", "m": "parameters", "r": "array"}, {"p": "UnboundMethod", "m": "source_location", "r": "[String, Integer]"}, {"p": "UnboundMethod", "m": "super_method", "r": "method"}, {"p": "UnboundMethod", "m": "to_s", "r": "string"}, {"p": "UncaughtThrowError", "m": "tag", "r": "obj"}, {"p": "UncaughtThrowError", "m": "to_s", "r": "string"}, {"p": "UncaughtThrowError", "m": "value", "r": "obj"}, {"p": "UNIXServer", "m": "accept", "r": "unixsocket"}, {"p": "UNIXServer", "m": "accept_nonblock([options])", "r": "unixsocket"}, {"p": "UNIXServer", "m": "listen( int )", "r": "0"}, {"p": "UNIXServer", "m": "new(path)", "r": "unixserver"}, {"p": "UNIXServer", "m": "sysaccept", "r": "file_descriptor"}, {"p": "UNIXSocket", "m": "addr", "r": "[address_family, unix_path]"}, {"p": "UNIXSocket", "m": "new(path)", "r": "unixsocket"}, {"p": "UNIXSocket", "m": "pair([type [, protocol]])", "r": "[unixsocket1, unixsocket2]"}, {"p": "UNIXSocket", "m": "path", "r": "path"}, {"p": "UNIXSocket", "m": "peeraddr", "r": "[address_family, unix_path]"}, {"p": "UNIXSocket", "m": "recv_io([klass [, mode]])", "r": "io"}, {"p": "UNIXSocket", "m": "recvfrom(maxlen [, flags[, outbuf]])", "r": "[mesg, unixaddress]"}, {"p": "UNIXSocket", "m": "send_io(io)", "r": "nil"}, {"p": "UNIXSocket", "m": "socketpair([type [, protocol]])", "r": "[unixsocket1, unixsocket2]"}, {"p": "URI", "m": "DEFAULT_PARSER", "r": ""}, {"p": "URI", "m": "Parser", "r": ""}, {"p": "URI", "m": "REGEXP", "r": ""}, {"p": "URI", "m": "RFC3986_PARSER", "r": ""}, {"p": "Warning", "m": "warn(msg)", "r": "nil"}, {"p": "WEBrick", "m": "VERSION", "r": ""}, {"p": "WIN32OLE", "m": "WIN32OLE#_getproperty(dispid, args, types)", "r": ""}, {"p": "WIN32OLE", "m": "WIN32OLE#_invoke(dispid, args, types)", "r": ""}, {"p": "WIN32OLE", "m": "WIN32OLE#_setproperty(dispid, args, types)", "r": ""}, {"p": "WIN32OLE", "m": "WIN32OLE#each {|i|...}", "r": ""}, {"p": "WIN32OLE", "m": "WIN32OLE#invoke(method, [arg1,...])", "r": "return value of method."}, {"p": "WIN32OLE", "m": "WIN32OLE#method_missing(id [,arg1, arg2, ...])", "r": ""}, {"p": "WIN32OLE", "m": "WIN32OLE#ole_activex_initialize()", "r": "Qnil"}, {"p": "WIN32OLE", "m": "WIN32OLE#ole_free", "r": ""}, {"p": "WIN32OLE", "m": "WIN32OLE#ole_func_methods", "r": ""}, {"p": "WIN32OLE", "m": "WIN32OLE#ole_get_methods", "r": ""}, {"p": "WIN32OLE", "m": "WIN32OLE#ole_method_help(method)", "r": ""}, {"p": "WIN32OLE", "m": "WIN32OLE#ole_methods", "r": ""}, {"p": "WIN32OLE", "m": "WIN32OLE#ole_put_methods", "r": ""}, {"p": "WIN32OLE", "m": "WIN32OLE#ole_query_interface(iid)", "r": "WIN32OLE object"}, {"p": "WIN32OLE", "m": "WIN32OLE#ole_respond_to?(method)", "r": "true or false"}, {"p": "WIN32OLE", "m": "WIN32OLE#ole_type", "r": ""}, {"p": "WIN32OLE", "m": "WIN32OLE#ole_typelib", "r": "The WIN32OLE_TYPELIB object"}, {"p": "WIN32OLE", "m": "WIN32OLE[a1, a2, ...]=val", "r": ""}, {"p": "WIN32OLE", "m": "WIN32OLE[a1,a2,...]", "r": ""}, {"p": "WIN32OLE", "m": "codepage", "r": ""}, {"p": "WIN32OLE", "m": "codepage = CP", "r": ""}, {"p": "WIN32OLE", "m": "connect( ole ) -", "r": "aWIN32OLE"}, {"p": "WIN32OLE", "m": "const_load( ole, mod = WIN32OLE)", "r": ""}, {"p": "WIN32OLE", "m": "create_guid", "r": ""}, {"p": "WIN32OLE", "m": "locale = lcid", "r": ""}, {"p": "WIN32OLE", "m": "locale", "r": "locale id."}, {"p": "WIN32OLE", "m": "new(server, [host])", "r": "WIN32OLE object"}, {"p": "WIN32OLE", "m": "new(server, license: 'key')", "r": "WIN32OLE object"}, {"p": "WIN32OLE", "m": "ole_free(aWIN32OLE) -", "r": "number"}, {"p": "WIN32OLE", "m": "ole_reference_count(aWIN32OLE) -", "r": "number"}, {"p": "WIN32OLE", "m": "ole_show_help(obj [,helpcontext])", "r": ""}, {"p": "WIN32OLE", "m": "setproperty('property', [arg1, arg2,...] val)", "r": ""}, {"p": "WIN32OLE", "m": "ARGV", "r": ""}, {"p": "WIN32OLE", "m": "CP_ACP", "r": ""}, {"p": "WIN32OLE", "m": "CP_MACCP", "r": ""}, {"p": "WIN32OLE", "m": "CP_OEMCP", "r": ""}, {"p": "WIN32OLE", "m": "CP_SYMBOL", "r": ""}, {"p": "WIN32OLE", "m": "CP_THREAD_ACP", "r": ""}, {"p": "WIN32OLE", "m": "CP_UTF7", "r": ""}, {"p": "WIN32OLE", "m": "CP_UTF8", "r": ""}, {"p": "WIN32OLE", "m": "LOCALE_SYSTEM_DEFAULT", "r": ""}, {"p": "WIN32OLE", "m": "LOCALE_USER_DEFAULT", "r": ""}, {"p": "WIN32OLE", "m": "VERSION", "r": ""}, {"p": "WIN32OLE_EVENT", "m": "WIN32OLE_EVENT#handler", "r": ""}, {"p": "WIN32OLE_EVENT", "m": "WIN32OLE_EVENT#handler=", "r": ""}, {"p": "WIN32OLE_EVENT", "m": "WIN32OLE_EVENT#off_event([event])", "r": ""}, {"p": "WIN32OLE_EVENT", "m": "WIN32OLE_EVENT#on_event([event]){...}", "r": ""}, {"p": "WIN32OLE_EVENT", "m": "WIN32OLE_EVENT#on_event_with_outargs([event]){...}", "r": ""}, {"p": "WIN32OLE_EVENT", "m": "WIN32OLE_EVENT#unadvise", "r": "nil"}, {"p": "WIN32OLE_EVENT", "m": "message_loop", "r": ""}, {"p": "WIN32OLE_EVENT", "m": "new(ole, event) #", "r": "WIN32OLE_EVENT object."}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#dispid", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#event?", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#event_interface", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#helpcontext", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#helpfile", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#helpstring", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#inspect", "r": "String"}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#invoke_kind", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#offset_vtbl", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#params", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#return_type", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#return_type_detail", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#return_vtype", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#size_opt_params", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#size_params", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_METHOD#visible?", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "WIN32OLE_MTHOD#invkind", "r": ""}, {"p": "WIN32OLE_METHOD", "m": "new(ole_type,  method)", "r": "WIN32OLE_METHOD object"}, {"p": "WIN32OLE_PARAM", "m": "WIN32OLE#output?", "r": ""}, {"p": "WIN32OLE_PARAM", "m": "WIN32OLE_PARAM#default", "r": ""}, {"p": "WIN32OLE_PARAM", "m": "WIN32OLE_PARAM#input?", "r": ""}, {"p": "WIN32OLE_PARAM", "m": "WIN32OLE_PARAM#inspect", "r": "String"}, {"p": "WIN32OLE_PARAM", "m": "WIN32OLE_PARAM#name", "r": ""}, {"p": "WIN32OLE_PARAM", "m": "WIN32OLE_PARAM#ole_type", "r": ""}, {"p": "WIN32OLE_PARAM", "m": "WIN32OLE_PARAM#ole_type_detail", "r": ""}, {"p": "WIN32OLE_PARAM", "m": "WIN32OLE_PARAM#optional?", "r": ""}, {"p": "WIN32OLE_PARAM", "m": "WIN32OLE_PARAM#retval?", "r": ""}, {"p": "WIN32OLE_PARAM", "m": "new(method, n)", "r": "WIN32OLE_PARAM object"}, {"p": "WIN32OLE_RECORD", "m": "WIN32OLE_RECORD#inspect", "r": "String"}, {"p": "WIN32OLE_RECORD", "m": "WIN32OLE_RECORD#method_missing(name)", "r": ""}, {"p": "WIN32OLE_RECORD", "m": "WIN32OLE_RECORD#ole_instance_variable_get(name)", "r": ""}, {"p": "WIN32OLE_RECORD", "m": "WIN32OLE_RECORD#ole_instance_variable_set(name, val)", "r": ""}, {"p": "WIN32OLE_RECORD", "m": "WIN32OLE_RECORD#to_h #", "r": "Ruby Hash object."}, {"p": "WIN32OLE_RECORD", "m": "WIN32OLE_RECORD#typename #", "r": "String object"}, {"p": "WIN32OLE_RECORD", "m": "new(typename, obj)", "r": "WIN32OLE_RECORD object"}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#default_event_sources", "r": ""}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#default_ole_types", "r": ""}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#guid  #", "r": "GUID"}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#helpcontext", "r": ""}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#helpfile", "r": ""}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#helpstring #", "r": "help string."}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#implemented_ole_types", "r": ""}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#inspect", "r": "String"}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#major_version", "r": ""}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#minor_version #", "r": "OLE minor version"}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#name #", "r": "OLE type name"}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#ole_methods # the array of WIN32OLE_METHOD objects.", "r": ""}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#ole_type #", "r": "OLE type string."}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#ole_typelib", "r": ""}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#progid  #", "r": "ProgID"}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#source_ole_types", "r": ""}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#src_type #", "r": "OLE source class"}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#typekind #", "r": "number of type."}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#variables", "r": ""}, {"p": "WIN32OLE_TYPE", "m": "WIN32OLE_TYPE#visible?  #", "r": "true or false"}, {"p": "WIN32OLE_TYPE", "m": "new(typelib, ole_class)", "r": "WIN32OLE_TYPE object"}, {"p": "WIN32OLE_TYPE", "m": "ole_classes(typelib)", "r": ""}, {"p": "WIN32OLE_TYPE", "m": "progids", "r": ""}, {"p": "WIN32OLE_TYPE", "m": "typelibs", "r": ""}, {"p": "WIN32OLE_TYPELIB", "m": "WIN32OLE_TYPELIB#guid", "r": "The guid string."}, {"p": "WIN32OLE_TYPELIB", "m": "WIN32OLE_TYPELIB#inspect", "r": "String"}, {"p": "WIN32OLE_TYPELIB", "m": "WIN32OLE_TYPELIB#library_name", "r": ""}, {"p": "WIN32OLE_TYPELIB", "m": "WIN32OLE_TYPELIB#major_version", "r": "The type library major version."}, {"p": "WIN32OLE_TYPELIB", "m": "WIN32OLE_TYPELIB#minor_version", "r": "The type library minor version."}, {"p": "WIN32OLE_TYPELIB", "m": "WIN32OLE_TYPELIB#name", "r": "The type library name"}, {"p": "WIN32OLE_TYPELIB", "m": "WIN32OLE_TYPELIB#ole_types", "r": "The array of WIN32OLE_TYPE object included the type library."}, {"p": "WIN32OLE_TYPELIB", "m": "WIN32OLE_TYPELIB#path", "r": "The type library file path."}, {"p": "WIN32OLE_TYPELIB", "m": "WIN32OLE_TYPELIB#version", "r": "The type library version String object."}, {"p": "WIN32OLE_TYPELIB", "m": "WIN32OLE_TYPELIB#visible?", "r": ""}, {"p": "WIN32OLE_TYPELIB", "m": "new(typelib [, version1, version2])", "r": "WIN32OLE_TYPELIB object"}, {"p": "WIN32OLE_TYPELIB", "m": "typelibs", "r": ""}, {"p": "WIN32OLE_VARIABLE", "m": "WIN32OLE_VARIABLE#inspect", "r": "String"}, {"p": "WIN32OLE_VARIABLE", "m": "WIN32OLE_VARIABLE#name", "r": ""}, {"p": "WIN32OLE_VARIABLE", "m": "WIN32OLE_VARIABLE#ole_type", "r": ""}, {"p": "WIN32OLE_VARIABLE", "m": "WIN32OLE_VARIABLE#ole_type_detail", "r": ""}, {"p": "WIN32OLE_VARIABLE", "m": "WIN32OLE_VARIABLE#value", "r": ""}, {"p": "WIN32OLE_VARIABLE", "m": "WIN32OLE_VARIABLE#variable_kind", "r": ""}, {"p": "WIN32OLE_VARIABLE", "m": "WIN32OLE_VARIABLE#varkind", "r": ""}, {"p": "WIN32OLE_VARIABLE", "m": "WIN32OLE_VARIABLE#visible?", "r": ""}, {"p": "WIN32OLE_VARIANT", "m": "WIN32OLE_VARIANT[i,j,...] #", "r": "element of OLE array."}, {"p": "WIN32OLE_VARIANT", "m": "WIN32OLE_VARIANT[i,j,...] = val #", "r": "set the element of OLE array"}, {"p": "WIN32OLE_VARIANT", "m": "array(ary, vt)", "r": ""}, {"p": "WIN32OLE_VARIANT", "m": "new(val, vartype) #", "r": "WIN32OLE_VARIANT object."}, {"p": "WIN32OLE_VARIANT", "m": "value #", "r": "Ruby object."}, {"p": "WIN32OLE_VARIANT", "m": "value = val #", "r": "set WIN32OLE_VARIANT value to val."}, {"p": "WIN32OLE_VARIANT", "m": "vartype #", "r": "OLE variant type."}, {"p": "WIN32OLE_VARIANT", "m": "Empty", "r": ""}, {"p": "WIN32OLE_VARIANT", "m": "NoParam", "r": ""}, {"p": "WIN32OLE_VARIANT", "m": "Nothing", "r": ""}, {"p": "WIN32OLE_VARIANT", "m": "Null", "r": ""}, {"p": "Zlib", "m": "Zlib::Deflate.deflate(string[, level])", "r": ""}, {"p": "Zlib", "m": "Zlib::Inflate.inflate(string)", "r": ""}, {"p": "Zlib", "m": "adler32(string, adler)", "r": ""}, {"p": "Zlib", "m": "adler32_combine(adler1, adler2, len2)", "r": ""}, {"p": "Zlib", "m": "crc32(string, crc)", "r": ""}, {"p": "Zlib", "m": "crc32_combine(crc1, crc2, len2)", "r": ""}, {"p": "Zlib", "m": "deflate(string[, level])", "r": ""}, {"p": "Zlib", "m": "gunzip(src)", "r": "String"}, {"p": "Zlib", "m": "gzip(src, level: nil, strategy: nil)", "r": "String"}, {"p": "Zlib", "m": "inflate(string)", "r": ""}, {"p": "Zlib", "m": "ASCII", "r": ""}, {"p": "Zlib", "m": "BEST_COMPRESSION", "r": ""}, {"p": "Zlib", "m": "BEST_SPEED", "r": ""}, {"p": "Zlib", "m": "BINARY", "r": ""}, {"p": "Zlib", "m": "DEFAULT_COMPRESSION", "r": ""}, {"p": "Zlib", "m": "DEFAULT_STRATEGY", "r": ""}, {"p": "Zlib", "m": "DEF_MEM_LEVEL", "r": ""}, {"p": "Zlib", "m": "FILTERED", "r": ""}, {"p": "Zlib", "m": "FINISH", "r": ""}, {"p": "Zlib", "m": "FIXED", "r": ""}, {"p": "Zlib", "m": "FULL_FLUSH", "r": ""}, {"p": "Zlib", "m": "HUFFMAN_ONLY", "r": ""}, {"p": "Zlib", "m": "MAX_MEM_LEVEL", "r": ""}, {"p": "Zlib", "m": "MAX_WBITS", "r": ""}, {"p": "Zlib", "m": "NO_COMPRESSION", "r": ""}, {"p": "Zlib", "m": "NO_FLUSH", "r": ""}, {"p": "Zlib", "m": "OS_AMIGA", "r": ""}, {"p": "Zlib", "m": "OS_ATARI", "r": ""}, {"p": "Zlib", "m": "OS_CODE", "r": ""}, {"p": "Zlib", "m": "OS_CPM", "r": ""}, {"p": "Zlib", "m": "OS_MACOS", "r": ""}, {"p": "Zlib", "m": "OS_MSDOS", "r": ""}, {"p": "Zlib", "m": "OS_OS2", "r": ""}, {"p": "Zlib", "m": "OS_QDOS", "r": ""}, {"p": "Zlib", "m": "OS_RISCOS", "r": ""}, {"p": "Zlib", "m": "OS_TOPS20", "r": ""}, {"p": "Zlib", "m": "OS_UNIX", "r": ""}, {"p": "Zlib", "m": "OS_UNKNOWN", "r": ""}, {"p": "Zlib", "m": "OS_VMCMS", "r": ""}, {"p": "Zlib", "m": "OS_VMS", "r": ""}, {"p": "Zlib", "m": "OS_WIN32", "r": ""}, {"p": "Zlib", "m": "OS_ZSYSTEM", "r": ""}, {"p": "Zlib", "m": "RLE", "r": ""}, {"p": "Zlib", "m": "SYNC_FLUSH", "r": ""}, {"p": "Zlib", "m": "TEXT", "r": ""}, {"p": "Zlib", "m": "UNKNOWN", "r": ""}, {"p": "Zlib", "m": "VERSION", "r": ""}, {"p": "Zlib", "m": "ZLIB_VERSION", "r": ""}, {"p": "Benchmark::Tms", "m": "CAPTION", "r": ""}, {"p": "Benchmark::Tms", "m": "FORMAT", "r": ""}, {"p": "CGI::Cookie", "m": "new(name_string,*value)", "r": ""}, {"p": "CGI::Cookie", "m": "new(options_hash)", "r": ""}, {"p": "CGI::Util", "m": "RFC822_DAYS", "r": ""}, {"p": "CGI::Util", "m": "RFC822_MONTHS", "r": ""}, {"p": "CGI::Util", "m": "TABLE_FOR_ESCAPE_HTML__", "r": ""}, {"p": "CSV::Row", "m": "<<( field )", "r": ""}, {"p": "CSV::Row", "m": "<<( header_and_field_array )", "r": ""}, {"p": "CSV::Row", "m": "<<( header_and_field_hash )", "r": ""}, {"p": "CSV::Row", "m": "[]=( header, offset, value )", "r": ""}, {"p": "CSV::Row", "m": "[]=( header, value )", "r": ""}, {"p": "CSV::Row", "m": "[]=( index, value )", "r": ""}, {"p": "CSV::Row", "m": "delete( header )", "r": ""}, {"p": "CSV::Row", "m": "delete( header, offset )", "r": ""}, {"p": "CSV::Row", "m": "delete( index )", "r": ""}, {"p": "CSV::Row", "m": "fetch( header )", "r": ""}, {"p": "CSV::Row", "m": "fetch( header ) { |row| ... }", "r": ""}, {"p": "CSV::Row", "m": "fetch( header, default )", "r": ""}, {"p": "CSV::Row", "m": "field( header )", "r": ""}, {"p": "CSV::Row", "m": "field( header, offset )", "r": ""}, {"p": "CSV::Row", "m": "field( index )", "r": ""}, {"p": "CSV::Row", "m": "index( header )", "r": ""}, {"p": "CSV::Row", "m": "index( header, offset )", "r": ""}, {"p": "Digest::Base", "m": "block_length", "r": "Integer"}, {"p": "Digest::Base", "m": "digest_base << string", "r": "digest_base"}, {"p": "Digest::Base", "m": "digest_length", "r": "Integer"}, {"p": "Digest::Base", "m": "reset", "r": "digest_base"}, {"p": "Digest::Base", "m": "update(string)", "r": "digest_base"}, {"p": "Digest::Class", "m": "Digest::Class.bubblebabble(string, ...)", "r": "hash_string"}, {"p": "Digest::Class", "m": "Digest::Class.digest(string, *parameters)", "r": "hash_string"}, {"p": "Digest::Class", "m": "Digest::Class.hexdigest(string[, ...])", "r": "hash_string"}, {"p": "Digest::Instance", "m": "block_length", "r": "integer"}, {"p": "Digest::Instance", "m": "bubblebabble", "r": "hash_string"}, {"p": "Digest::Instance", "m": "digest", "r": "string"}, {"p": "Digest::Instance", "m": "digest!", "r": "string"}, {"p": "Digest::Instance", "m": "digest(string)", "r": "string"}, {"p": "Digest::Instance", "m": "digest_length", "r": "integer"}, {"p": "Digest::Instance", "m": "digest_obj << string", "r": "digest_obj"}, {"p": "Digest::Instance", "m": "digest_obj == another_digest_obj", "r": "boolean"}, {"p": "Digest::Instance", "m": "digest_obj == string", "r": "boolean"}, {"p": "Digest::Instance", "m": "hexdigest", "r": "string"}, {"p": "Digest::Instance", "m": "hexdigest!", "r": "string"}, {"p": "Digest::Instance", "m": "hexdigest(string)", "r": "string"}, {"p": "Digest::Instance", "m": "inspect", "r": "string"}, {"p": "Digest::Instance", "m": "instance_eval { finish }", "r": "digest_obj"}, {"p": "Digest::Instance", "m": "length", "r": "integer"}, {"p": "Digest::Instance", "m": "new", "r": "another_digest_obj"}, {"p": "Digest::Instance", "m": "reset", "r": "digest_obj"}, {"p": "Digest::Instance", "m": "size", "r": "integer"}, {"p": "Digest::Instance", "m": "to_s", "r": "string"}, {"p": "Digest::Instance", "m": "update(string)", "r": "digest_obj"}, {"p": "DRb::DRbServer", "m": "INSECURE_METHOD", "r": ""}, {"p": "DRb::DRbSSLSocket::SSLConfig", "m": "DEFAULT", "r": ""}, {"p": "Encoding::Converter", "m": "Encoding::Converter.asciicompat_encoding(encoding)", "r": "encoding or nil"}, {"p": "Encoding::Converter", "m": "Encoding::Converter.asciicompat_encoding(string)", "r": "encoding or nil"}, {"p": "Encoding::Converter", "m": "Encoding::Converter.new(convpath)", "r": ""}, {"p": "Encoding::Converter", "m": "Encoding::Converter.new(source_encoding, destination_encoding)", "r": ""}, {"p": "Encoding::Converter", "m": "Encoding::Converter.new(source_encoding, destination_encoding, opt)", "r": ""}, {"p": "Encoding::Converter", "m": "Encoding::Converter.search_convpath(source_encoding, destination_encoding)", "r": "ary"}, {"p": "Encoding::Converter", "m": "Encoding::Converter.search_convpath(source_encoding, destination_encoding, opt)", "r": "ary"}, {"p": "Encoding::Converter", "m": "convert(source_string)", "r": "destination_string"}, {"p": "Encoding::Converter", "m": "convpath", "r": "ary"}, {"p": "Encoding::Converter", "m": "destination_encoding", "r": "encoding"}, {"p": "Encoding::Converter", "m": "ec == other", "r": "true or false"}, {"p": "Encoding::Converter", "m": "finish", "r": "string"}, {"p": "Encoding::Converter", "m": "insert_output(string)", "r": "nil"}, {"p": "Encoding::Converter", "m": "inspect", "r": "string"}, {"p": "Encoding::Converter", "m": "last_error", "r": "exception or nil"}, {"p": "Encoding::Converter", "m": "primitive_convert(source_buffer, destination_buffer)", "r": "symbol"}, {"p": "Encoding::Converter", "m": "primitive_convert(source_buffer, destination_buffer, destination_byteoffset)", "r": "symbol"}, {"p": "Encoding::Converter", "m": "primitive_convert(source_buffer, destination_buffer, destination_byteoffset, destination_bytesize)", "r": "symbol"}, {"p": "Encoding::Converter", "m": "primitive_convert(source_buffer, destination_buffer, destination_byteoffset, destination_bytesize, opt)", "r": "symbol"}, {"p": "Encoding::Converter", "m": "primitive_errinfo", "r": "array"}, {"p": "Encoding::Converter", "m": "replacement = string", "r": ""}, {"p": "Encoding::Converter", "m": "replacement", "r": "string"}, {"p": "Encoding::Converter", "m": "source_encoding", "r": "encoding"}, {"p": "Encoding::Converter", "m": "AFTER_OUTPUT", "r": ""}, {"p": "Encoding::Converter", "m": "CRLF_NEWLINE_DECORATOR", "r": ""}, {"p": "Encoding::Converter", "m": "CR_NEWLINE_DECORATOR", "r": ""}, {"p": "Encoding::Converter", "m": "INVALID_MASK", "r": ""}, {"p": "Encoding::Converter", "m": "INVALID_REPLACE", "r": ""}, {"p": "Encoding::Converter", "m": "PARTIAL_INPUT", "r": ""}, {"p": "Encoding::Converter", "m": "UNDEF_HEX_CHARREF", "r": ""}, {"p": "Encoding::Converter", "m": "UNDEF_MASK", "r": ""}, {"p": "Encoding::Converter", "m": "UNDEF_REPLACE", "r": ""}, {"p": "Encoding::Converter", "m": "UNIVERSAL_NEWLINE_DECORATOR", "r": ""}, {"p": "Encoding::Converter", "m": "XML_ATTR_CONTENT_DECORATOR", "r": ""}, {"p": "Encoding::Converter", "m": "XML_ATTR_QUOTE_DECORATOR", "r": ""}, {"p": "Encoding::Converter", "m": "XML_TEXT_DECORATOR", "r": ""}, {"p": "Encoding::InvalidByteSequenceError", "m": "destination_encoding", "r": "string"}, {"p": "Encoding::InvalidByteSequenceError", "m": "destination_encoding_name", "r": "string"}, {"p": "Encoding::InvalidByteSequenceError", "m": "error_bytes", "r": "string"}, {"p": "Encoding::InvalidByteSequenceError", "m": "incomplete_input?", "r": "true or false"}, {"p": "Encoding::InvalidByteSequenceError", "m": "readagain_bytes", "r": "string"}, {"p": "Encoding::InvalidByteSequenceError", "m": "source_encoding", "r": "encoding"}, {"p": "Encoding::InvalidByteSequenceError", "m": "source_encoding_name", "r": "string"}, {"p": "Encoding::UndefinedConversionError", "m": "destination_encoding", "r": "string"}, {"p": "Encoding::UndefinedConversionError", "m": "destination_encoding_name", "r": "string"}, {"p": "Encoding::UndefinedConversionError", "m": "error_char", "r": "string"}, {"p": "Encoding::UndefinedConversionError", "m": "source_encoding", "r": "encoding"}, {"p": "Encoding::UndefinedConversionError", "m": "source_encoding_name", "r": "string"}, {"p": "Enumerator::Lazy", "m": "collect_concat { |obj| block }", "r": "a_lazy_enumerator"}, {"p": "Enumerator::Lazy", "m": "enum_for(method = :each, *args)", "r": "lazy_enum"}, {"p": "Enumerator::Lazy", "m": "enum_for(method = :each, *args){|*args| block}", "r": "lazy_enum"}, {"p": "Enumerator::Lazy", "m": "flat_map       { |obj| block }", "r": "a_lazy_enumerator"}, {"p": "Enumerator::Lazy", "m": "new(obj, size=nil) { |yielder, *values| ... }", "r": ""}, {"p": "Enumerator::Lazy", "m": "to_enum(method = :each, *args)", "r": "lazy_enum"}, {"p": "Enumerator::Lazy", "m": "to_enum(method = :each, *args) {|*args| block}", "r": "lazy_enum"}, {"p": "Fiddle::Closure", "m": "new(ret, args, abi = Fiddle::DEFAULT)", "r": ""}, {"p": "Fiddle::Function", "m": "new(ptr, args, ret_type, abi = DEFAULT)", "r": ""}, {"p": "Fiddle::Function", "m": "DEFAULT", "r": ""}, {"p": "Fiddle::Function", "m": "STDCALL", "r": ""}, {"p": "Fiddle::Handle", "m": "close", "r": ""}, {"p": "Fiddle::Handle", "m": "close_enabled?", "r": ""}, {"p": "Fiddle::Handle", "m": "disable_close", "r": ""}, {"p": "Fiddle::Handle", "m": "enable_close", "r": ""}, {"p": "Fiddle::Handle", "m": "new(library = nil, flags = Fiddle::RTLD_LAZY | Fiddle::RTLD_GLOBAL)", "r": ""}, {"p": "Fiddle::Handle", "m": "sym(name)", "r": ""}, {"p": "Fiddle::Handle", "m": "to_i", "r": ""}, {"p": "Fiddle::Handle", "m": "DEFAULT", "r": ""}, {"p": "Fiddle::Handle", "m": "NEXT", "r": ""}, {"p": "Fiddle::Handle", "m": "RTLD_GLOBAL", "r": ""}, {"p": "Fiddle::Handle", "m": "RTLD_LAZY", "r": ""}, {"p": "Fiddle::Handle", "m": "RTLD_NOW", "r": ""}, {"p": "Fiddle::Pointer", "m": "Fiddle::Pointer.malloc(size, freefunc = nil)", "r": "fiddle pointer instance"}, {"p": "Fiddle::Pointer", "m": "Fiddle::Pointer.new(address)", "r": "fiddle_cptr"}, {"p": "Fiddle::Pointer", "m": "Fiddle::Pointer[val]", "r": "cptr"}, {"p": "Fiddle::Pointer", "m": "eql?(other)", "r": "true or false"}, {"p": "Fiddle::Pointer", "m": "free", "r": "Fiddle::Function"}, {"p": "Fiddle::Pointer", "m": "free=(function)", "r": ""}, {"p": "Fiddle::Pointer", "m": "inspect", "r": ""}, {"p": "Fiddle::Pointer", "m": "new(address, size)", "r": "fiddle_cptr"}, {"p": "Fiddle::Pointer", "m": "new(address, size, freefunc)", "r": "fiddle_cptr"}, {"p": "Fiddle::Pointer", "m": "null?", "r": ""}, {"p": "Fiddle::Pointer", "m": "ptr", "r": ""}, {"p": "Fiddle::Pointer", "m": "ptr + n", "r": "new cptr"}, {"p": "Fiddle::Pointer", "m": "ptr - n", "r": "new cptr"}, {"p": "Fiddle::Pointer", "m": "ptr <=> other", "r": "-1, 0, 1, or nil"}, {"p": "Fiddle::Pointer", "m": "ptr == other", "r": "true or false"}, {"p": "Fiddle::Pointer", "m": "ptr[index]", "r": "an_integer"}, {"p": "Fiddle::Pointer", "m": "ptr[index]         = int", "r": "int"}, {"p": "Fiddle::Pointer", "m": "ptr[start, length]", "r": "a_string"}, {"p": "Fiddle::Pointer", "m": "ptr[start, length] = string or cptr or addr", "r": "string or dl_cptr or addr"}, {"p": "Fiddle::Pointer", "m": "ref", "r": ""}, {"p": "Fiddle::Pointer", "m": "size", "r": ""}, {"p": "Fiddle::Pointer", "m": "size=(size)", "r": ""}, {"p": "Fiddle::Pointer", "m": "to_i", "r": ""}, {"p": "Fiddle::Pointer", "m": "to_ptr(val)", "r": "cptr"}, {"p": "Fiddle::Pointer", "m": "to_s", "r": "string"}, {"p": "Fiddle::Pointer", "m": "to_s(len)", "r": "string"}, {"p": "Fiddle::Pointer", "m": "to_str", "r": "string"}, {"p": "Fiddle::Pointer", "m": "to_str(len)", "r": "string"}, {"p": "Fiddle::Pointer", "m": "to_value", "r": ""}, {"p": "File::Constants", "m": "APPEND", "r": ""}, {"p": "File::Constants", "m": "BINARY", "r": ""}, {"p": "File::Constants", "m": "CREAT", "r": ""}, {"p": "File::Constants", "m": "DIRECT", "r": ""}, {"p": "File::Constants", "m": "DSYNC", "r": ""}, {"p": "File::Constants", "m": "EXCL", "r": ""}, {"p": "File::Constants", "m": "FNM_CASEFOLD", "r": ""}, {"p": "File::Constants", "m": "FNM_DOTMATCH", "r": ""}, {"p": "File::Constants", "m": "FNM_EXTGLOB", "r": ""}, {"p": "File::Constants", "m": "FNM_NOESCAPE", "r": ""}, {"p": "File::Constants", "m": "FNM_PATHNAME", "r": ""}, {"p": "File::Constants", "m": "FNM_SHORTNAME", "r": ""}, {"p": "File::Constants", "m": "FNM_SYSCASE", "r": ""}, {"p": "File::Constants", "m": "LOCK_EX", "r": ""}, {"p": "File::Constants", "m": "LOCK_NB", "r": ""}, {"p": "File::Constants", "m": "LOCK_SH", "r": ""}, {"p": "File::Constants", "m": "LOCK_UN", "r": ""}, {"p": "File::Constants", "m": "NOATIME", "r": ""}, {"p": "File::Constants", "m": "NOCTTY", "r": ""}, {"p": "File::Constants", "m": "NOFOLLOW", "r": ""}, {"p": "File::Constants", "m": "NONBLOCK", "r": ""}, {"p": "File::Constants", "m": "NULL", "r": ""}, {"p": "File::Constants", "m": "RDONLY", "r": ""}, {"p": "File::Constants", "m": "RDWR", "r": ""}, {"p": "File::Constants", "m": "RSYNC", "r": ""}, {"p": "File::Constants", "m": "SHARE_DELETE", "r": ""}, {"p": "File::Constants", "m": "SYNC", "r": ""}, {"p": "File::Constants", "m": "TMPFILE", "r": ""}, {"p": "File::Constants", "m": "TRUNC", "r": ""}, {"p": "File::Constants", "m": "WRONLY", "r": ""}, {"p": "File::Stat", "m": "File::Stat.new(file_name)", "r": "stat"}, {"p": "File::Stat", "m": "atime", "r": "time"}, {"p": "File::Stat", "m": "birthtime", "r": "aTime"}, {"p": "File::Stat", "m": "blksize", "r": "integer or nil"}, {"p": "File::Stat", "m": "blockdev?", "r": "true or false"}, {"p": "File::Stat", "m": "blocks", "r": "integer or nil"}, {"p": "File::Stat", "m": "chardev?", "r": "true or false"}, {"p": "File::Stat", "m": "ctime", "r": "aTime"}, {"p": "File::Stat", "m": "dev", "r": "integer"}, {"p": "File::Stat", "m": "dev_major", "r": "integer"}, {"p": "File::Stat", "m": "dev_minor", "r": "integer"}, {"p": "File::Stat", "m": "directory?(file_name)", "r": "true or false"}, {"p": "File::Stat", "m": "executable?", "r": "true or false"}, {"p": "File::Stat", "m": "executable_real?", "r": "true or false"}, {"p": "File::Stat", "m": "file?", "r": "true or false"}, {"p": "File::Stat", "m": "ftype", "r": "string"}, {"p": "File::Stat", "m": "gid", "r": "integer"}, {"p": "File::Stat", "m": "grpowned?", "r": "true or false"}, {"p": "File::Stat", "m": "ino", "r": "integer"}, {"p": "File::Stat", "m": "inspect", "r": "string"}, {"p": "File::Stat", "m": "mode", "r": "integer"}, {"p": "File::Stat", "m": "mtime", "r": "aTime"}, {"p": "File::Stat", "m": "nlink", "r": "integer"}, {"p": "File::Stat", "m": "owned?", "r": "true or false"}, {"p": "File::Stat", "m": "pipe?", "r": "true or false"}, {"p": "File::Stat", "m": "rdev", "r": "integer or nil"}, {"p": "File::Stat", "m": "rdev_major", "r": "integer"}, {"p": "File::Stat", "m": "rdev_minor", "r": "integer"}, {"p": "File::Stat", "m": "readable?", "r": "true or false"}, {"p": "File::Stat", "m": "readable_real?", "r": "true or false"}, {"p": "File::Stat", "m": "setgid?", "r": "true or false"}, {"p": "File::Stat", "m": "setuid?", "r": "true or false"}, {"p": "File::Stat", "m": "size", "r": "integer"}, {"p": "File::Stat", "m": "socket?", "r": "true or false"}, {"p": "File::Stat", "m": "stat <=> other_stat", "r": "-1, 0, 1, nil"}, {"p": "File::Stat", "m": "sticky?", "r": "true or false"}, {"p": "File::Stat", "m": "symlink?", "r": "true or false"}, {"p": "File::Stat", "m": "uid", "r": "integer"}, {"p": "File::Stat", "m": "world_readable?", "r": "integer or nil"}, {"p": "File::Stat", "m": "world_writable?", "r": "integer or nil"}, {"p": "File::Stat", "m": "writable?", "r": "true or false"}, {"p": "File::Stat", "m": "writable_real?", "r": "true or false"}, {"p": "File::Stat", "m": "zero?", "r": "true or false"}, {"p": "GC::Profiler", "m": "GC::Profiler.clear", "r": "nil"}, {"p": "GC::Profiler", "m": "GC::Profiler.disable", "r": "nil"}, {"p": "GC::Profiler", "m": "GC::Profiler.enable", "r": "nil"}, {"p": "GC::Profiler", "m": "GC::Profiler.enabled?", "r": "true or false"}, {"p": "GC::Profiler", "m": "GC::Profiler.raw_data", "r": "[Hash, ...]"}, {"p": "GC::Profiler", "m": "GC::Profiler.report", "r": ""}, {"p": "GC::Profiler", "m": "GC::Profiler.report(io)", "r": ""}, {"p": "GC::Profiler", "m": "GC::Profiler.result", "r": "String"}, {"p": "GC::Profiler", "m": "GC::Profiler.total_time", "r": "float"}, {"p": "Gem::AvailableSet", "m": "Tuple", "r": ""}, {"p": "Gem::ConfigFile", "m": "DEFAULT_BACKTRACE", "r": ""}, {"p": "Gem::ConfigFile", "m": "DEFAULT_BULK_THRESHOLD", "r": ""}, {"p": "Gem::ConfigFile", "m": "DEFAULT_UPDATE_SOURCES", "r": ""}, {"p": "Gem::ConfigFile", "m": "DEFAULT_VERBOSITY", "r": ""}, {"p": "Gem::ConfigFile", "m": "OPERATING_SYSTEM_DEFAULTS", "r": ""}, {"p": "Gem::ConfigFile", "m": "PLATFORM_DEFAULTS", "r": ""}, {"p": "Gem::ConfigFile", "m": "SYSTEM_WIDE_CONFIG_FILE", "r": ""}, {"p": "Gem::Dependency", "m": "match? name", "r": "true or false"}, {"p": "Gem::Dependency", "m": "match? name, version", "r": "true or false"}, {"p": "Gem::Dependency", "m": "match? spec", "r": "true or false"}, {"p": "Gem::Dependency", "m": "TYPES", "r": ""}, {"p": "Gem::Installer", "m": "ENV_PATHS", "r": ""}, {"p": "Gem::Licenses", "m": "IDENTIFIERS", "r": ""}, {"p": "Gem::Licenses", "m": "NONSTANDARD", "r": ""}, {"p": "Gem::Licenses", "m": "REGEXP", "r": ""}, {"p": "Gem::Platform", "m": "CURRENT", "r": ""}, {"p": "Gem::Platform", "m": "RUBY", "r": ""}, {"p": "Gem::RemoteFetcher", "m": "BASE64_URI_TRANSLATE", "r": ""}, {"p": "Gem::Requirement", "m": "DefaultRequirement", "r": ""}, {"p": "Gem::Requirement", "m": "PATTERN", "r": ""}, {"p": "Gem::Resolver", "m": "DEBUG_RESOLVER", "r": ""}, {"p": "Gem::Resolver", "m": "SINGLE_POSSIBILITY_CONSTRAINT_PENALTY", "r": ""}, {"p": "Gem::SafeYAML", "m": "WHITELISTED_CLASSES", "r": ""}, {"p": "Gem::SafeYAML", "m": "WHITELISTED_SYMBOLS", "r": ""}, {"p": "Gem::Security", "m": "AlmostNoSecurity", "r": ""}, {"p": "Gem::Security", "m": "DIGEST_ALGORITHM", "r": ""}, {"p": "Gem::Security", "m": "EXTENSIONS", "r": ""}, {"p": "Gem::Security", "m": "HighSecurity", "r": ""}, {"p": "Gem::Security", "m": "KEY_ALGORITHM", "r": ""}, {"p": "Gem::Security", "m": "KEY_CIPHER", "r": ""}, {"p": "Gem::Security", "m": "KEY_LENGTH", "r": ""}, {"p": "Gem::Security", "m": "LowSecurity", "r": ""}, {"p": "Gem::Security", "m": "MediumSecurity", "r": ""}, {"p": "Gem::Security", "m": "NoSecurity", "r": ""}, {"p": "Gem::Security", "m": "ONE_DAY", "r": ""}, {"p": "Gem::Security", "m": "ONE_YEAR", "r": ""}, {"p": "Gem::Security", "m": "Policies", "r": ""}, {"p": "Gem::Security", "m": "SigningPolicy", "r": ""}, {"p": "Gem::Server", "m": "DOC_TEMPLATE", "r": ""}, {"p": "Gem::Server", "m": "RDOC_CSS", "r": ""}, {"p": "Gem::Server", "m": "RDOC_NO_DOCUMENTATION", "r": ""}, {"p": "Gem::Server", "m": "RDOC_SEARCH_TEMPLATE", "r": ""}, {"p": "Gem::Server", "m": "SEARCH", "r": ""}, {"p": "Gem::Specification", "m": "NONEXISTENT_SPECIFICATION_VERSION", "r": ""}, {"p": "Gem::Util", "m": "NULL_DEVICE", "r": ""}, {"p": "Gem::Commands::SetupCommand", "m": "HISTORY_HEADER", "r": ""}, {"p": "Gem::Commands::SetupCommand", "m": "VERSION_MATCHER", "r": ""}, {"p": "Gem::Package::TarHeader", "m": "FIELDS", "r": ""}, {"p": "Gem::Package::TarHeader", "m": "PACK_FORMAT", "r": ""}, {"p": "Gem::Package::TarHeader", "m": "UNPACK_FORMAT", "r": ""}, {"p": "Gem::RequestSet::GemDependencyAPI", "m": "gem(name)", "r": ""}, {"p": "Gem::RequestSet::GemDependencyAPI", "m": "gem(name, *requirements)", "r": ""}, {"p": "Gem::RequestSet::GemDependencyAPI", "m": "gem(name, *requirements, options)", "r": ""}, {"p": "Gem::RequestSet::Lockfile::Tokenizer", "m": "EOF", "r": ""}, {"p": "Gem::RequestSet::Lockfile::Tokenizer", "m": "Token", "r": ""}, {"p": "Gem::Resolver::Molinillo", "m": "ResolutionState", "r": ""}, {"p": "Gem::Resolver::Molinillo", "m": "VERSION", "r": ""}, {"p": "Gem::Resolver::Stats", "m": "PATTERN", "r": ""}, {"p": "Gem::Resolver::Molinillo::DependencyGraph", "m": "Edge", "r": ""}, {"p": "Gem::Resolver::Molinillo::Resolver::Resolution", "m": "Conflict", "r": ""}, {"p": "Gem::Security::TrustDir", "m": "DEFAULT_PERMISSIONS", "r": ""}, {"p": "IO::generic_readable", "m": "getch(min: nil, time: nil)", "r": "char"}, {"p": "IO::generic_readable", "m": "getpass(prompt=nil)", "r": "string"}, {"p": "IO::generic_readable", "m": "read_nonblock(integer[, outbuf [, opts]])", "r": "string"}, {"p": "IO::generic_readable", "m": "readbyte", "r": "fixnum"}, {"p": "IO::generic_readable", "m": "readchar", "r": "string"}, {"p": "IO::generic_readable", "m": "readline(limit)", "r": "string or nil"}, {"p": "IO::generic_readable", "m": "readline(sep, limit)", "r": "string or nil"}, {"p": "IO::generic_readable", "m": "readline(sep=$/)", "r": "string"}, {"p": "IO::generic_readable", "m": "readpartial(integer[, outbuf])", "r": "string"}, {"p": "IO::generic_readable", "m": "sysread(integer[, outbuf])", "r": "string"}, {"p": "IO::generic_writable", "m": "print()", "r": "nil"}, {"p": "IO::generic_writable", "m": "print(obj, ...)", "r": "nil"}, {"p": "IO::generic_writable", "m": "printf(format_string [, obj, ...] )", "r": "nil"}, {"p": "IO::generic_writable", "m": "puts(obj, ...)", "r": "nil"}, {"p": "IO::generic_writable", "m": "strio << obj", "r": "strio"}, {"p": "IRB::ExtendCommandBundle", "m": "NO_OVERRIDE", "r": ""}, {"p": "IRB::ExtendCommandBundle", "m": "OVERRIDE_ALL", "r": ""}, {"p": "IRB::ExtendCommandBundle", "m": "OVERRIDE_PRIVATE_ONLY", "r": ""}, {"p": "IRB::Frame", "m": "CALL_STACK_OFFSET", "r": ""}, {"p": "IRB::Frame", "m": "INIT_STACK_TIMES", "r": ""}, {"p": "IRB::Inspector", "m": "INSPECTORS", "r": ""}, {"p": "IRB::Irb", "m": "ATTR_PLAIN", "r": ""}, {"p": "IRB::Irb", "m": "ATTR_TTY", "r": ""}, {"p": "IRB::Locale", "m": "LOCALE_DIR", "r": ""}, {"p": "IRB::Locale", "m": "LOCALE_NAME_RE", "r": ""}, {"p": "JSON::Ext::Parser", "m": "new(source, opts", "r": "{})"}, {"p": "JSON::Ext::Parser", "m": "parse()", "r": ""}, {"p": "JSON::Ext::Parser", "m": "source()", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "[](name)", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "[]=(name, value)", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "allow_nan?", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "array_nl()", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "array_nl=(array_nl)", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "ascii_only?", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "buffer_initial_length", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "buffer_initial_length=(length)", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "check_circular?", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "configure(opts)", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "depth", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "depth=(depth)", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "from_state(opts)", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "generate(obj)", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "indent()", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "indent=(indent)", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "initialize_copy(orig)", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "max_nesting", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "max_nesting=(depth)", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "new(opts = {})", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "object_nl()", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "object_nl=(object_nl)", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "space()", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "space=(space)", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "space_before()", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "space_before=(space_before)", "r": ""}, {"p": "JSON::Ext::Generator::State", "m": "to_h", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::Array", "m": "to_json(state = nil)", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::Bignum", "m": "to_json(*)", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::FalseClass", "m": "to_json(*)", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::Fixnum", "m": "to_json(*)", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::Float", "m": "to_json(*)", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::Hash", "m": "to_json(state = nil)", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::Integer", "m": "to_json(*)", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::NilClass", "m": "to_json(*)", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::Object", "m": "to_json(*)", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::String", "m": "included(modul)", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::String", "m": "to_json(*)", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::String", "m": "to_json_raw(*args)", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::String", "m": "to_json_raw_object()", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::TrueClass", "m": "to_json(*)", "r": ""}, {"p": "JSON::Ext::Generator::GeneratorMethods::String::Extend", "m": "json_create(o)", "r": ""}, {"p": "Logger::Formatter", "m": "Format", "r": ""}, {"p": "Logger::Period", "m": "SiD", "r": ""}, {"p": "Logger::Severity", "m": "DEBUG", "r": ""}, {"p": "Logger::Severity", "m": "ERROR", "r": ""}, {"p": "Logger::Severity", "m": "FATAL", "r": ""}, {"p": "Logger::Severity", "m": "INFO", "r": ""}, {"p": "Logger::Severity", "m": "UNKNOWN", "r": ""}, {"p": "Logger::Severity", "m": "WARN", "r": ""}, {"p": "Net::FTP", "m": "Net::FTP.new(host = nil, options = {})", "r": ""}, {"p": "Net::FTP", "m": "CASE_DEPENDENT_PARSER", "r": ""}, {"p": "Net::FTP", "m": "CASE_INDEPENDENT_PARSER", "r": ""}, {"p": "Net::FTP", "m": "DECIMAL_PARSER", "r": ""}, {"p": "Net::FTP", "m": "FACT_PARSERS", "r": ""}, {"p": "Net::FTP", "m": "OCTAL_PARSER", "r": ""}, {"p": "Net::FTP", "m": "TIME_PARSER", "r": ""}, {"p": "Net::HTTP", "m": "start(address, port, p_addr, p_port, p_user, p_pass, &block)", "r": ""}, {"p": "Net::HTTP", "m": "start(address, port=nil, p_addr=:ENV, p_port=nil, p_user=nil, p_pass=nil, opt, &block)", "r": ""}, {"p": "Net::HTTP", "m": "ENVIRONMENT_VARIABLE_IS_MULTIUSER_SAFE", "r": ""}, {"p": "Net::HTTP", "m": "SSL_ATTRIBUTES", "r": ""}, {"p": "Net::HTTP", "m": "SSL_IVNAMES", "r": ""}, {"p": "Net::HTTP", "m": "STATUS_CODES", "r": ""}, {"p": "Net::HTTPAccepted", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPAlreadyReported", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPBadGateway", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPBadRequest", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPClientError", "m": "EXCEPTION_TYPE", "r": ""}, {"p": "Net::HTTPClientError", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPConflict", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPContinue", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPCreated", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPExpectationFailed", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPFailedDependency", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPForbidden", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPFound", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPGatewayTimeOut", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPGone", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPIMUsed", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPInformation", "m": "EXCEPTION_TYPE", "r": ""}, {"p": "Net::HTTPInformation", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPInsufficientStorage", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPInternalServerError", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPLengthRequired", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPLocked", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPLoopDetected", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPMethodNotAllowed", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPMisdirectedRequest", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPMovedPermanently", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPMultipleChoices", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPMultiStatus", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPNetworkAuthenticationRequired", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPNoContent", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPNonAuthoritativeInformation", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPNotAcceptable", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPNotExtended", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPNotFound", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPNotImplemented", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPNotModified", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPOK", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPPartialContent", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPPaymentRequired", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPPermanentRedirect", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPPreconditionFailed", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPPreconditionRequired", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPProcessing", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPProxyAuthenticationRequired", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPRedirection", "m": "EXCEPTION_TYPE", "r": ""}, {"p": "Net::HTTPRedirection", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPRequestedRangeNotSatisfiable", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPRequestEntityTooLarge", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPRequestHeaderFieldsTooLarge", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPRequestTimeOut", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPRequestURITooLong", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPResetContent", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPResponse", "m": "CODE_CLASS_TO_OBJ", "r": ""}, {"p": "Net::HTTPResponse", "m": "CODE_TO_OBJ", "r": ""}, {"p": "Net::HTTPSeeOther", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPServerError", "m": "EXCEPTION_TYPE", "r": ""}, {"p": "Net::HTTPServerError", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPServiceUnavailable", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPSuccess", "m": "EXCEPTION_TYPE", "r": ""}, {"p": "Net::HTTPSuccess", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPSwitchProtocol", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPTemporaryRedirect", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPTooManyRequests", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPUnauthorized", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPUnavailableForLegalReasons", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPUnknownResponse", "m": "EXCEPTION_TYPE", "r": ""}, {"p": "Net::HTTPUnknownResponse", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPUnprocessableEntity", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPUnsupportedMediaType", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPUpgradeRequired", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPUseProxy", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPVariantAlsoNegotiates", "m": "HAS_BODY", "r": ""}, {"p": "Net::HTTPVersionNotSupported", "m": "HAS_BODY", "r": ""}, {"p": "Net::IMAP", "m": "Net::IMAP.new(host, options = {})", "r": ""}, {"p": "Net::IMAP", "m": "ANSWERED", "r": ""}, {"p": "Net::IMAP", "m": "Address", "r": ""}, {"p": "Net::IMAP", "m": "ContentDisposition", "r": ""}, {"p": "Net::IMAP", "m": "ContinuationRequest", "r": ""}, {"p": "Net::IMAP", "m": "DATE_MONTH", "r": ""}, {"p": "Net::IMAP", "m": "DELETED", "r": ""}, {"p": "Net::IMAP", "m": "DRAFT", "r": ""}, {"p": "Net::IMAP", "m": "Envelope", "r": ""}, {"p": "Net::IMAP", "m": "FLAGGED", "r": ""}, {"p": "Net::IMAP", "m": "FetchData", "r": ""}, {"p": "Net::IMAP", "m": "MARKED", "r": ""}, {"p": "Net::IMAP", "m": "MailboxACLItem", "r": ""}, {"p": "Net::IMAP", "m": "MailboxList", "r": ""}, {"p": "Net::IMAP", "m": "MailboxQuota", "r": ""}, {"p": "Net::IMAP", "m": "MailboxQuotaRoot", "r": ""}, {"p": "Net::IMAP", "m": "NOINFERIORS", "r": ""}, {"p": "Net::IMAP", "m": "NOSELECT", "r": ""}, {"p": "Net::IMAP", "m": "RECENT", "r": ""}, {"p": "Net::IMAP", "m": "RESPONSE_ERRORS", "r": ""}, {"p": "Net::IMAP", "m": "ResponseCode", "r": ""}, {"p": "Net::IMAP", "m": "ResponseText", "r": ""}, {"p": "Net::IMAP", "m": "SEEN", "r": ""}, {"p": "Net::IMAP", "m": "StatusData", "r": ""}, {"p": "Net::IMAP", "m": "TaggedResponse", "r": ""}, {"p": "Net::IMAP", "m": "ThreadMember", "r": ""}, {"p": "Net::IMAP", "m": "UNMARKED", "r": ""}, {"p": "Net::IMAP", "m": "UntaggedResponse", "r": ""}, {"p": "Net::POP3", "m": "Net::POP#enable_ssl(params = {})", "r": ""}, {"p": "Net::POP3", "m": "Net::POP.enable_ssl(params = {})", "r": ""}, {"p": "Net::POP3", "m": "Revision", "r": ""}, {"p": "Net::SMTP", "m": "CRAM_BUFSIZE", "r": ""}, {"p": "Net::SMTP", "m": "DEFAULT_AUTH_TYPE", "r": ""}, {"p": "Net::SMTP", "m": "IMASK", "r": ""}, {"p": "Net::SMTP", "m": "OMASK", "r": ""}, {"p": "Net::SMTP", "m": "Revision", "r": ""}, {"p": "Net::HTTP::Copy", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Copy", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Copy", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Delete", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Delete", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Delete", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Get", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Get", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Get", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Head", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Head", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Head", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Lock", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Lock", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Lock", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Mkcol", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Mkcol", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Mkcol", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Move", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Move", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Move", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Options", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Options", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Options", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Patch", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Patch", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Patch", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Post", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Post", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Post", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Propfind", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Propfind", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Propfind", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Proppatch", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Proppatch", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Proppatch", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Put", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Put", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Put", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Trace", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Trace", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Trace", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Unlock", "m": "METHOD", "r": ""}, {"p": "Net::HTTP::Unlock", "m": "REQUEST_HAS_BODY", "r": ""}, {"p": "Net::HTTP::Unlock", "m": "RESPONSE_HAS_BODY", "r": ""}, {"p": "Net::IMAP::DigestMD5Authenticator", "m": "STAGE_ONE", "r": ""}, {"p": "Net::IMAP::DigestMD5Authenticator", "m": "STAGE_TWO", "r": ""}, {"p": "Net::IMAP::LoginAuthenticator", "m": "STATE_PASSWORD", "r": ""}, {"p": "Net::IMAP::LoginAuthenticator", "m": "STATE_USER", "r": ""}, {"p": "OpenSSL::ASN1", "m": "OpenSSL::ASN1.decode(der)", "r": "ASN1Data"}, {"p": "OpenSSL::ASN1", "m": "OpenSSL::ASN1.decode_all(der)", "r": "Array of ASN1Data"}, {"p": "OpenSSL::ASN1", "m": "OpenSSL::ASN1.traverse(asn1)", "r": "nil"}, {"p": "OpenSSL::ASN1", "m": "UNIVERSAL_TAG_NAME", "r": ""}, {"p": "OpenSSL::BN", "m": "+bn", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "-bn", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "OpenSSL::BN.new", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "OpenSSL::BN.new(bn)", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "OpenSSL::BN.new(integer)", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "OpenSSL::BN.new(string)", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "OpenSSL::BN.new(string, 0 | 2 | 10 | 16)", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "bit_set?(bit)", "r": "true | false"}, {"p": "OpenSSL::BN", "m": "bn % bn2", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "bn * bn2", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "bn ** bn2", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "bn + bn2", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "bn - bn2", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "bn << bits", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "bn == obj", "r": "true or false"}, {"p": "OpenSSL::BN", "m": "bn >> bits", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "bn1 / bn2", "r": "[result, remainder]"}, {"p": "OpenSSL::BN", "m": "clear_bit!(bit)", "r": "self"}, {"p": "OpenSSL::BN", "m": "cmp(bn2)", "r": "integer"}, {"p": "OpenSSL::BN", "m": "eql?(obj)", "r": "true or false"}, {"p": "OpenSSL::BN", "m": "gcd(bn2)", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "generate_prime(bits, [, safe [, add [, rem]]])", "r": "bn"}, {"p": "OpenSSL::BN", "m": "hash", "r": "Integer"}, {"p": "OpenSSL::BN", "m": "lshift!(bits)", "r": "self"}, {"p": "OpenSSL::BN", "m": "mod_add(bn1, bn2)", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "mod_exp(bn1, bn2)", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "mod_inverse(bn2)", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "mod_mul(bn1, bn2)", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "mod_sqr(bn2)", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "mod_sub(bn1, bn2)", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "negative?", "r": "true | false"}, {"p": "OpenSSL::BN", "m": "num_bits", "r": "integer"}, {"p": "OpenSSL::BN", "m": "num_bytes", "r": "integer"}, {"p": "OpenSSL::BN", "m": "odd?", "r": "true | false"}, {"p": "OpenSSL::BN", "m": "one?", "r": "true | false"}, {"p": "OpenSSL::BN", "m": "prime?", "r": "true | false"}, {"p": "OpenSSL::BN", "m": "prime?(checks)", "r": "true | false"}, {"p": "OpenSSL::BN", "m": "prime_fasttest?", "r": "true | false"}, {"p": "OpenSSL::BN", "m": "prime_fasttest?(checks)", "r": "true | false"}, {"p": "OpenSSL::BN", "m": "prime_fasttest?(checks, trial_div)", "r": "true | false"}, {"p": "OpenSSL::BN", "m": "rshift!(bits)", "r": "self"}, {"p": "OpenSSL::BN", "m": "set_bit!(bit)", "r": "self"}, {"p": "OpenSSL::BN", "m": "sqr", "r": "aBN"}, {"p": "OpenSSL::BN", "m": "to_i", "r": "integer"}, {"p": "OpenSSL::BN", "m": "to_s", "r": "string"}, {"p": "OpenSSL::BN", "m": "to_s(base)", "r": "string"}, {"p": "OpenSSL::BN", "m": "ucmp(bn2)", "r": "integer"}, {"p": "OpenSSL::BN", "m": "zero?", "r": "true | false"}, {"p": "OpenSSL::Buffering", "m": "BLOCK_SIZE", "r": ""}, {"p": "OpenSSL::Cipher", "m": "OpenSSL::Cipher.ciphers", "r": "array[string...]"}, {"p": "OpenSSL::Cipher", "m": "auth_data = string", "r": "string"}, {"p": "OpenSSL::Cipher", "m": "auth_tag = string", "r": "string"}, {"p": "OpenSSL::Cipher", "m": "auth_tag(tag_len = 16)", "r": "String"}, {"p": "OpenSSL::Cipher", "m": "auth_tag_len = Integer", "r": "Integer"}, {"p": "OpenSSL::Cipher", "m": "authenticated?", "r": "true | false"}, {"p": "OpenSSL::Cipher", "m": "block_size", "r": "integer"}, {"p": "OpenSSL::Cipher", "m": "decrypt", "r": "self"}, {"p": "OpenSSL::Cipher", "m": "encrypt", "r": "self"}, {"p": "OpenSSL::Cipher", "m": "final", "r": "string"}, {"p": "OpenSSL::Cipher", "m": "iv = string", "r": "string"}, {"p": "OpenSSL::Cipher", "m": "iv_len = integer", "r": "integer"}, {"p": "OpenSSL::Cipher", "m": "iv_len", "r": "integer"}, {"p": "OpenSSL::Cipher", "m": "key = string", "r": "string"}, {"p": "OpenSSL::Cipher", "m": "key_len = integer", "r": "integer"}, {"p": "OpenSSL::Cipher", "m": "key_len", "r": "integer"}, {"p": "OpenSSL::Cipher", "m": "name", "r": "string"}, {"p": "OpenSSL::Cipher", "m": "new(string)", "r": "cipher"}, {"p": "OpenSSL::Cipher", "m": "padding = integer", "r": "integer"}, {"p": "OpenSSL::Cipher", "m": "pkcs5_keyivgen(pass, salt = nil, iterations = 2048, digest = \"MD5\")", "r": "nil"}, {"p": "OpenSSL::Cipher", "m": "random_iv", "r": "iv"}, {"p": "OpenSSL::Cipher", "m": "random_key", "r": "key"}, {"p": "OpenSSL::Cipher", "m": "reset", "r": "self"}, {"p": "OpenSSL::Cipher", "m": "update(data [, buffer])", "r": "string or buffer"}, {"p": "OpenSSL::Config", "m": "DEFAULT_CONFIG_FILE", "r": ""}, {"p": "OpenSSL::Config", "m": "ESCAPE_MAP", "r": ""}, {"p": "OpenSSL::Config", "m": "QUOTE_REGEXP_DQ", "r": ""}, {"p": "OpenSSL::Config", "m": "QUOTE_REGEXP_SQ", "r": ""}, {"p": "OpenSSL::Digest", "m": "block_length", "r": "integer"}, {"p": "OpenSSL::Digest", "m": "digest_length", "r": "integer"}, {"p": "OpenSSL::Digest", "m": "finish", "r": "aString"}, {"p": "OpenSSL::Digest", "m": "name", "r": "string"}, {"p": "OpenSSL::Digest", "m": "new(string [, data])", "r": "Digest"}, {"p": "OpenSSL::Digest", "m": "reset", "r": "self"}, {"p": "OpenSSL::Digest", "m": "update(string)", "r": "aString"}, {"p": "OpenSSL::Engine", "m": "OpenSSL::Engine.by_id(name)", "r": "engine"}, {"p": "OpenSSL::Engine", "m": "OpenSSL::Engine.cleanup", "r": ""}, {"p": "OpenSSL::Engine", "m": "OpenSSL::Engine.engines", "r": "[engine, ...]"}, {"p": "OpenSSL::Engine", "m": "OpenSSL::Engine.load(name = nil)", "r": ""}, {"p": "OpenSSL::Engine", "m": "cipher(name)", "r": "OpenSSL::Cipher"}, {"p": "OpenSSL::Engine", "m": "cmds", "r": "[[\"name\", \"description\", \"flags\"], ...]"}, {"p": "OpenSSL::Engine", "m": "ctrl_cmd(command, value = nil)", "r": "engine"}, {"p": "OpenSSL::Engine", "m": "digest(name)", "r": "OpenSSL::Digest"}, {"p": "OpenSSL::Engine", "m": "finish", "r": "nil"}, {"p": "OpenSSL::Engine", "m": "id", "r": "string"}, {"p": "OpenSSL::Engine", "m": "inspect", "r": "string"}, {"p": "OpenSSL::Engine", "m": "load_private_key(id = nil, data = nil)", "r": "OpenSSL::PKey"}, {"p": "OpenSSL::Engine", "m": "load_public_key(id = nil, data = nil)", "r": "OpenSSL::PKey"}, {"p": "OpenSSL::Engine", "m": "name", "r": "string"}, {"p": "OpenSSL::Engine", "m": "set_default(flag)", "r": ""}, {"p": "OpenSSL::ExtConfig", "m": "HAVE_TLSEXT_HOST_NAME", "r": ""}, {"p": "OpenSSL::ExtConfig", "m": "OPENSSL_NO_SOCK", "r": ""}, {"p": "OpenSSL::HMAC", "m": "digest", "r": "string"}, {"p": "OpenSSL::HMAC", "m": "digest(digest, key, data)", "r": "aString"}, {"p": "OpenSSL::HMAC", "m": "hexdigest", "r": "string"}, {"p": "OpenSSL::HMAC", "m": "hexdigest(digest, key, data)", "r": "aString"}, {"p": "OpenSSL::HMAC", "m": "new(key, digest)", "r": "hmac"}, {"p": "OpenSSL::HMAC", "m": "reset", "r": "self"}, {"p": "OpenSSL::HMAC", "m": "update(string)", "r": "self"}, {"p": "OpenSSL::KDF", "m": "hkdf(ikm, salt:, info:, length:, hash:)", "r": "String"}, {"p": "OpenSSL::KDF", "m": "pbkdf2_hmac(pass, salt:, iterations:, length:, hash:)", "r": "aString"}, {"p": "OpenSSL::KDF", "m": "scrypt(pass, salt:, N:, r:, p:, length:)", "r": "aString"}, {"p": "OpenSSL::OCSP", "m": "NOCASIGN", "r": ""}, {"p": "OpenSSL::OCSP", "m": "NOCERTS", "r": ""}, {"p": "OpenSSL::OCSP", "m": "NOCHAIN", "r": ""}, {"p": "OpenSSL::OCSP", "m": "NOCHECKS", "r": ""}, {"p": "OpenSSL::OCSP", "m": "NODELEGATED", "r": ""}, {"p": "OpenSSL::OCSP", "m": "NOEXPLICIT", "r": ""}, {"p": "OpenSSL::OCSP", "m": "NOINTERN", "r": ""}, {"p": "OpenSSL::OCSP", "m": "NOSIGS", "r": ""}, {"p": "OpenSSL::OCSP", "m": "NOTIME", "r": ""}, {"p": "OpenSSL::OCSP", "m": "NOVERIFY", "r": ""}, {"p": "OpenSSL::OCSP", "m": "RESPID_KEY", "r": ""}, {"p": "OpenSSL::OCSP", "m": "RESPONSE_STATUS_INTERNALERROR", "r": ""}, {"p": "OpenSSL::OCSP", "m": "RESPONSE_STATUS_MALFORMEDREQUEST", "r": ""}, {"p": "OpenSSL::OCSP", "m": "RESPONSE_STATUS_SIGREQUIRED", "r": ""}, {"p": "OpenSSL::OCSP", "m": "RESPONSE_STATUS_SUCCESSFUL", "r": ""}, {"p": "OpenSSL::OCSP", "m": "RESPONSE_STATUS_TRYLATER", "r": ""}, {"p": "OpenSSL::OCSP", "m": "RESPONSE_STATUS_UNAUTHORIZED", "r": ""}, {"p": "OpenSSL::OCSP", "m": "REVOKED_STATUS_AFFILIATIONCHANGED", "r": ""}, {"p": "OpenSSL::OCSP", "m": "REVOKED_STATUS_CACOMPROMISE", "r": ""}, {"p": "OpenSSL::OCSP", "m": "REVOKED_STATUS_CERTIFICATEHOLD", "r": ""}, {"p": "OpenSSL::OCSP", "m": "REVOKED_STATUS_CESSATIONOFOPERATION", "r": ""}, {"p": "OpenSSL::OCSP", "m": "REVOKED_STATUS_KEYCOMPROMISE", "r": ""}, {"p": "OpenSSL::OCSP", "m": "REVOKED_STATUS_NOSTATUS", "r": ""}, {"p": "OpenSSL::OCSP", "m": "REVOKED_STATUS_REMOVEFROMCRL", "r": ""}, {"p": "OpenSSL::OCSP", "m": "REVOKED_STATUS_SUPERSEDED", "r": ""}, {"p": "OpenSSL::OCSP", "m": "REVOKED_STATUS_UNSPECIFIED", "r": ""}, {"p": "OpenSSL::OCSP", "m": "TRUSTOTHER", "r": ""}, {"p": "OpenSSL::OCSP", "m": "V_CERTSTATUS_GOOD", "r": ""}, {"p": "OpenSSL::OCSP", "m": "V_CERTSTATUS_REVOKED", "r": ""}, {"p": "OpenSSL::OCSP", "m": "V_CERTSTATUS_UNKNOWN", "r": ""}, {"p": "OpenSSL::OCSP", "m": "V_RESPID_KEY", "r": ""}, {"p": "OpenSSL::OCSP", "m": "V_RESPID_NAME", "r": ""}, {"p": "OpenSSL::PKCS12", "m": "create(pass, name, key, cert [, ca, [, key_pbe [, cert_pbe [, key_iter [, mac_iter [, keytype]]]]]])", "r": ""}, {"p": "OpenSSL::PKCS12", "m": "new", "r": "pkcs12"}, {"p": "OpenSSL::PKCS12", "m": "new(str)", "r": "pkcs12"}, {"p": "OpenSSL::PKCS12", "m": "new(str, pass)", "r": "pkcs12"}, {"p": "OpenSSL::PKCS7", "m": "encrypt(certs, data, [, cipher [, flags]])", "r": "pkcs7"}, {"p": "OpenSSL::PKCS7", "m": "new", "r": "pkcs7"}, {"p": "OpenSSL::PKCS7", "m": "new(string)", "r": "pkcs7"}, {"p": "OpenSSL::PKCS7", "m": "read_smime(string)", "r": "pkcs7"}, {"p": "OpenSSL::PKCS7", "m": "sign(cert, key, data, [, certs [, flags]])", "r": "pkcs7"}, {"p": "OpenSSL::PKCS7", "m": "type = type", "r": "type"}, {"p": "OpenSSL::PKCS7", "m": "type", "r": "string or nil"}, {"p": "OpenSSL::PKCS7", "m": "write_smime(pkcs7 [, data [, flags]])", "r": "string"}, {"p": "OpenSSL::PKCS7", "m": "Signer", "r": ""}, {"p": "OpenSSL::PKey", "m": "OpenSSL::PKey.read(io [, pwd ])", "r": "PKey"}, {"p": "OpenSSL::PKey", "m": "OpenSSL::PKey.read(string [, pwd ])", "r": "PKey"}, {"p": "OpenSSL::Random", "m": "add(str, entropy)", "r": "self"}, {"p": "OpenSSL::Random", "m": "egd(filename)", "r": "true"}, {"p": "OpenSSL::Random", "m": "egd_bytes(filename, length)", "r": "true"}, {"p": "OpenSSL::Random", "m": "load_random_file(filename)", "r": "true"}, {"p": "OpenSSL::Random", "m": "pseudo_bytes(length)", "r": "string"}, {"p": "OpenSSL::Random", "m": "random_bytes(length)", "r": "string"}, {"p": "OpenSSL::Random", "m": "seed(str)", "r": "str"}, {"p": "OpenSSL::Random", "m": "status?", "r": "true | false"}, {"p": "OpenSSL::Random", "m": "write_random_file(filename)", "r": "true"}, {"p": "OpenSSL::SSL", "m": "OP_ALL", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_ALLOW_NO_DHE_KEX", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_CIPHER_SERVER_PREFERENCE", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_CISCO_ANYCONNECT", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_COOKIE_EXCHANGE", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_CRYPTOPRO_TLSEXT_BUG", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_DONT_INSERT_EMPTY_FRAGMENTS", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_EPHEMERAL_RSA", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_LEGACY_SERVER_CONNECT", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_MICROSOFT_BIG_SSLV3_BUFFER", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_MICROSOFT_SESS_ID_BUG", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_MSIE_SSLV2_RSA_PADDING", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NETSCAPE_CA_DN_BUG", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NETSCAPE_CHALLENGE_BUG", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NO_COMPRESSION", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NO_ENCRYPT_THEN_MAC", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NO_QUERY_MTU", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NO_RENEGOTIATION", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NO_SSLv2", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NO_SSLv3", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NO_TICKET", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NO_TLSv1", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NO_TLSv1_1", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NO_TLSv1_2", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_NO_TLSv1_3", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_PKCS1_CHECK_1", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_PKCS1_CHECK_2", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_SAFARI_ECDHE_ECDSA_BUG", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_SINGLE_DH_USE", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_SINGLE_ECDH_USE", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_SSLEAY_080_CLIENT_DH_BUG", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_SSLREF2_REUSE_CERT_TYPE_BUG", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_TLSEXT_PADDING", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_TLS_BLOCK_PADDING_BUG", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_TLS_D5_BUG", "r": ""}, {"p": "OpenSSL::SSL", "m": "OP_TLS_ROLLBACK_BUG", "r": ""}, {"p": "OpenSSL::SSL", "m": "SSL2_VERSION", "r": ""}, {"p": "OpenSSL::SSL", "m": "SSL3_VERSION", "r": ""}, {"p": "OpenSSL::SSL", "m": "TLS1_1_VERSION", "r": ""}, {"p": "OpenSSL::SSL", "m": "TLS1_2_VERSION", "r": ""}, {"p": "OpenSSL::SSL", "m": "TLS1_3_VERSION", "r": ""}, {"p": "OpenSSL::SSL", "m": "TLS1_VERSION", "r": ""}, {"p": "OpenSSL::SSL", "m": "VERIFY_CLIENT_ONCE", "r": ""}, {"p": "OpenSSL::SSL", "m": "VERIFY_FAIL_IF_NO_PEER_CERT", "r": ""}, {"p": "OpenSSL::SSL", "m": "VERIFY_NONE", "r": ""}, {"p": "OpenSSL::SSL", "m": "VERIFY_PEER", "r": ""}, {"p": "OpenSSL::ASN1::ASN1Data", "m": "OpenSSL::ASN1::ASN1Data.new(value, tag, tag_class)", "r": "ASN1Data"}, {"p": "OpenSSL::ASN1::ASN1Data", "m": "to_der", "r": "DER-encoded String"}, {"p": "OpenSSL::ASN1::Constructive", "m": "OpenSSL::ASN1::Primitive.new(value [, tag, tagging, tag_class ])", "r": "Primitive"}, {"p": "OpenSSL::ASN1::Constructive", "m": "each { |asn1| block }", "r": "asn1_ary"}, {"p": "OpenSSL::ASN1::Constructive", "m": "to_der", "r": "DER-encoded String"}, {"p": "OpenSSL::ASN1::ObjectId", "m": "OpenSSL::ASN1::ObjectId.register(object_id, short_name, long_name)", "r": ""}, {"p": "OpenSSL::ASN1::ObjectId", "m": "ln", "r": "string"}, {"p": "OpenSSL::ASN1::ObjectId", "m": "long_name", "r": "string"}, {"p": "OpenSSL::ASN1::ObjectId", "m": "oid", "r": "string"}, {"p": "OpenSSL::ASN1::ObjectId", "m": "short_name", "r": "string"}, {"p": "OpenSSL::ASN1::ObjectId", "m": "sn", "r": "string"}, {"p": "OpenSSL::ASN1::Primitive", "m": "OpenSSL::ASN1::Primitive.new(value [, tag, tagging, tag_class ])", "r": "Primitive"}, {"p": "OpenSSL::ASN1::Primitive", "m": "to_der", "r": "DER-encoded String"}, {"p": "OpenSSL::Netscape::SPKI", "m": "challenge = str", "r": "string"}, {"p": "OpenSSL::Netscape::SPKI", "m": "challenge", "r": "string"}, {"p": "OpenSSL::Netscape::SPKI", "m": "new([request])", "r": "spki"}, {"p": "OpenSSL::Netscape::SPKI", "m": "public_key = pub", "r": "pkey"}, {"p": "OpenSSL::Netscape::SPKI", "m": "public_key", "r": "pkey"}, {"p": "OpenSSL::Netscape::SPKI", "m": "sign(key, digest)", "r": "spki"}, {"p": "OpenSSL::Netscape::SPKI", "m": "to_der", "r": "DER-encoded string"}, {"p": "OpenSSL::Netscape::SPKI", "m": "to_pem", "r": "PEM-encoded string"}, {"p": "OpenSSL::Netscape::SPKI", "m": "to_text", "r": "string"}, {"p": "OpenSSL::Netscape::SPKI", "m": "verify(key)", "r": "boolean"}, {"p": "OpenSSL::OCSP::BasicResponse", "m": "OpenSSL::OCSP::BasicResponse.new(der_string = nil)", "r": "basic_response"}, {"p": "OpenSSL::OCSP::BasicResponse", "m": "add_nonce(nonce = nil)", "r": ""}, {"p": "OpenSSL::OCSP::BasicResponse", "m": "add_status(certificate_id, status, reason, revocation_time, this_update, next_update, extensions)", "r": "basic_response"}, {"p": "OpenSSL::OCSP::BasicResponse", "m": "copy_nonce(request)", "r": "Integer"}, {"p": "OpenSSL::OCSP::BasicResponse", "m": "find_response(certificate_id)", "r": "SingleResponse | nil"}, {"p": "OpenSSL::OCSP::BasicResponse", "m": "responses", "r": "Array of SingleResponse"}, {"p": "OpenSSL::OCSP::BasicResponse", "m": "sign(cert, key, certs = nil, flags = 0, digest = nil)", "r": "self"}, {"p": "OpenSSL::OCSP::BasicResponse", "m": "status", "r": "statuses"}, {"p": "OpenSSL::OCSP::BasicResponse", "m": "to_der", "r": "String"}, {"p": "OpenSSL::OCSP::BasicResponse", "m": "verify(certificates, store, flags = 0)", "r": "true or false"}, {"p": "OpenSSL::OCSP::CertificateId", "m": "OpenSSL::OCSP::CertificateId.new(der_string)", "r": "certificate_id"}, {"p": "OpenSSL::OCSP::CertificateId", "m": "OpenSSL::OCSP::CertificateId.new(subject, issuer, digest = nil)", "r": "certificate_id"}, {"p": "OpenSSL::OCSP::CertificateId", "m": "cmp(other)", "r": "true or false"}, {"p": "OpenSSL::OCSP::CertificateId", "m": "cmp_issuer(other)", "r": "true or false"}, {"p": "OpenSSL::OCSP::CertificateId", "m": "hash_algorithm", "r": "String"}, {"p": "OpenSSL::OCSP::CertificateId", "m": "issuer_key_hash", "r": "String"}, {"p": "OpenSSL::OCSP::CertificateId", "m": "issuer_name_hash", "r": "String"}, {"p": "OpenSSL::OCSP::CertificateId", "m": "serial", "r": "Integer"}, {"p": "OpenSSL::OCSP::CertificateId", "m": "to_der", "r": "String"}, {"p": "OpenSSL::OCSP::Request", "m": "OpenSSL::OCSP::Request.new", "r": "request"}, {"p": "OpenSSL::OCSP::Request", "m": "OpenSSL::OCSP::Request.new(request_der)", "r": "request"}, {"p": "OpenSSL::OCSP::Request", "m": "add_certid(certificate_id)", "r": "request"}, {"p": "OpenSSL::OCSP::Request", "m": "add_nonce(nonce = nil)", "r": "request"}, {"p": "OpenSSL::OCSP::Request", "m": "certid", "r": "[certificate_id, ...]"}, {"p": "OpenSSL::OCSP::Request", "m": "check_nonce(response)", "r": "result"}, {"p": "OpenSSL::OCSP::Request", "m": "sign(cert, key, certs = nil, flags = 0, digest = nil)", "r": "self"}, {"p": "OpenSSL::OCSP::Request", "m": "signed?", "r": "true or false"}, {"p": "OpenSSL::OCSP::Request", "m": "verify(certificates, store, flags = 0)", "r": "true or false"}, {"p": "OpenSSL::OCSP::Response", "m": "OpenSSL::OCSP::Response.create(status, basic_response = nil)", "r": "response"}, {"p": "OpenSSL::OCSP::Response", "m": "OpenSSL::OCSP::Response.new", "r": "response"}, {"p": "OpenSSL::OCSP::Response", "m": "OpenSSL::OCSP::Response.new(response_der)", "r": "response"}, {"p": "OpenSSL::OCSP::Response", "m": "basic", "r": ""}, {"p": "OpenSSL::OCSP::Response", "m": "status", "r": "Integer"}, {"p": "OpenSSL::OCSP::Response", "m": "status_string", "r": "String"}, {"p": "OpenSSL::OCSP::Response", "m": "to_der", "r": "String"}, {"p": "OpenSSL::OCSP::SingleResponse", "m": "OpenSSL::OCSP::SingleResponse.new(der_string)", "r": "SingleResponse"}, {"p": "OpenSSL::OCSP::SingleResponse", "m": "cert_status", "r": "Integer"}, {"p": "OpenSSL::OCSP::SingleResponse", "m": "certid", "r": "CertificateId"}, {"p": "OpenSSL::OCSP::SingleResponse", "m": "check_validity(nsec = 0, maxsec = -1)", "r": "true | false"}, {"p": "OpenSSL::OCSP::SingleResponse", "m": "extensions", "r": "Array of X509::Extension"}, {"p": "OpenSSL::OCSP::SingleResponse", "m": "next_update", "r": "Time | nil"}, {"p": "OpenSSL::OCSP::SingleResponse", "m": "revocation_reason", "r": "Integer | nil"}, {"p": "OpenSSL::OCSP::SingleResponse", "m": "revocation_time", "r": "Time | nil"}, {"p": "OpenSSL::OCSP::SingleResponse", "m": "this_update", "r": "Time"}, {"p": "OpenSSL::OCSP::SingleResponse", "m": "to_der", "r": "String"}, {"p": "OpenSSL::PKey::DH", "m": "compute_key(pub_bn)", "r": "aString"}, {"p": "OpenSSL::PKey::DH", "m": "export", "r": "aString"}, {"p": "OpenSSL::PKey::DH", "m": "generate(size [, generator])", "r": "dh"}, {"p": "OpenSSL::PKey::DH", "m": "generate_key!", "r": "self"}, {"p": "OpenSSL::PKey::DH", "m": "new", "r": "dh"}, {"p": "OpenSSL::PKey::DH", "m": "new(size [, generator])", "r": "dh"}, {"p": "OpenSSL::PKey::DH", "m": "new(string)", "r": "dh"}, {"p": "OpenSSL::PKey::DH", "m": "params", "r": "hash"}, {"p": "OpenSSL::PKey::DH", "m": "params_ok?", "r": "true | false"}, {"p": "OpenSSL::PKey::DH", "m": "private?", "r": "true | false"}, {"p": "OpenSSL::PKey::DH", "m": "public?", "r": "true | false"}, {"p": "OpenSSL::PKey::DH", "m": "public_key", "r": "aDH"}, {"p": "OpenSSL::PKey::DH", "m": "set_key(pub_key, priv_key)", "r": "self"}, {"p": "OpenSSL::PKey::DH", "m": "set_pqg(p, q, g)", "r": "self"}, {"p": "OpenSSL::PKey::DH", "m": "to_der", "r": "aString"}, {"p": "OpenSSL::PKey::DH", "m": "to_pem", "r": "aString"}, {"p": "OpenSSL::PKey::DH", "m": "to_s", "r": "aString"}, {"p": "OpenSSL::PKey::DH", "m": "to_text", "r": "aString"}, {"p": "OpenSSL::PKey::DSA", "m": "export([cipher, password])", "r": "aString"}, {"p": "OpenSSL::PKey::DSA", "m": "generate(size)", "r": "dsa"}, {"p": "OpenSSL::PKey::DSA", "m": "new", "r": "dsa"}, {"p": "OpenSSL::PKey::DSA", "m": "new(size)", "r": "dsa"}, {"p": "OpenSSL::PKey::DSA", "m": "new(string [, pass])", "r": "dsa"}, {"p": "OpenSSL::PKey::DSA", "m": "params", "r": "hash"}, {"p": "OpenSSL::PKey::DSA", "m": "private?", "r": "true | false"}, {"p": "OpenSSL::PKey::DSA", "m": "public?", "r": "true | false"}, {"p": "OpenSSL::PKey::DSA", "m": "public_key", "r": "aDSA"}, {"p": "OpenSSL::PKey::DSA", "m": "set_key(pub_key, priv_key)", "r": "self"}, {"p": "OpenSSL::PKey::DSA", "m": "set_pqg(p, q, g)", "r": "self"}, {"p": "OpenSSL::PKey::DSA", "m": "syssign(string)", "r": "aString"}, {"p": "OpenSSL::PKey::DSA", "m": "sysverify(digest, sig)", "r": "true | false"}, {"p": "OpenSSL::PKey::DSA", "m": "to_der", "r": "aString"}, {"p": "OpenSSL::PKey::DSA", "m": "to_pem([cipher, password])", "r": "aString"}, {"p": "OpenSSL::PKey::DSA", "m": "to_s([cipher, password])", "r": "aString"}, {"p": "OpenSSL::PKey::DSA", "m": "to_text", "r": "aString"}, {"p": "OpenSSL::PKey::EC", "m": "OpenSSL::PKey::EC.new", "r": ""}, {"p": "OpenSSL::PKey::EC", "m": "OpenSSL::PKey::EC.new(\"secp112r1\")", "r": ""}, {"p": "OpenSSL::PKey::EC", "m": "OpenSSL::PKey::EC.new(der_string)", "r": ""}, {"p": "OpenSSL::PKey::EC", "m": "OpenSSL::PKey::EC.new(ec_group)", "r": ""}, {"p": "OpenSSL::PKey::EC", "m": "OpenSSL::PKey::EC.new(ec_key)", "r": ""}, {"p": "OpenSSL::PKey::EC", "m": "OpenSSL::PKey::EC.new(pem_string [, pwd])", "r": ""}, {"p": "OpenSSL::PKey::EC", "m": "builtin_curves", "r": "[[sn, comment], ...]"}, {"p": "OpenSSL::PKey::EC", "m": "check_key", "r": "true"}, {"p": "OpenSSL::PKey::EC", "m": "dh_compute_key(pubkey)", "r": "String"}, {"p": "OpenSSL::PKey::EC", "m": "dsa_sign_asn1(data)", "r": "String"}, {"p": "OpenSSL::PKey::EC", "m": "dsa_verify_asn1(data, sig)", "r": "true or false"}, {"p": "OpenSSL::PKey::EC", "m": "export([cipher, pass_phrase])", "r": "String"}, {"p": "OpenSSL::PKey::EC", "m": "generate(ec_group)", "r": "ec"}, {"p": "OpenSSL::PKey::EC", "m": "generate(string)", "r": "ec"}, {"p": "OpenSSL::PKey::EC", "m": "generate_key!", "r": "self"}, {"p": "OpenSSL::PKey::EC", "m": "group", "r": "group"}, {"p": "OpenSSL::PKey::EC", "m": "group = group", "r": ""}, {"p": "OpenSSL::PKey::EC", "m": "private?", "r": "true or false"}, {"p": "OpenSSL::PKey::EC", "m": "private_key", "r": "OpenSSL::BN"}, {"p": "OpenSSL::PKey::EC", "m": "private_key = openssl_bn", "r": ""}, {"p": "OpenSSL::PKey::EC", "m": "public?", "r": "true or false"}, {"p": "OpenSSL::PKey::EC", "m": "public_key", "r": "OpenSSL::PKey::EC::Point"}, {"p": "OpenSSL::PKey::EC", "m": "public_key = ec_point", "r": ""}, {"p": "OpenSSL::PKey::EC", "m": "to_der", "r": "String"}, {"p": "OpenSSL::PKey::EC", "m": "to_pem([cipher, pass_phrase])", "r": "String"}, {"p": "OpenSSL::PKey::EC", "m": "to_text", "r": "String"}, {"p": "OpenSSL::PKey::EC", "m": "EXPLICIT_CURVE", "r": ""}, {"p": "OpenSSL::PKey::EC", "m": "NAMED_CURVE", "r": ""}, {"p": "OpenSSL::PKey::PKey", "m": "new", "r": "self"}, {"p": "OpenSSL::PKey::PKey", "m": "sign(digest, data)", "r": "String"}, {"p": "OpenSSL::PKey::PKey", "m": "verify(digest, signature, data)", "r": "String"}, {"p": "OpenSSL::PKey::RSA", "m": "export([cipher, pass_phrase])", "r": "PEM-format String"}, {"p": "OpenSSL::PKey::RSA", "m": "generate(size)", "r": "RSA instance"}, {"p": "OpenSSL::PKey::RSA", "m": "generate(size, exponent)", "r": "RSA instance"}, {"p": "OpenSSL::PKey::RSA", "m": "new(encoded_key)", "r": "RSA instance"}, {"p": "OpenSSL::PKey::RSA", "m": "new(encoded_key, pass_phrase)", "r": "RSA instance"}, {"p": "OpenSSL::PKey::RSA", "m": "new(key_size)", "r": "RSA instance"}, {"p": "OpenSSL::PKey::RSA", "m": "params", "r": "hash"}, {"p": "OpenSSL::PKey::RSA", "m": "private?", "r": "true | false"}, {"p": "OpenSSL::PKey::RSA", "m": "private_decrypt(string)", "r": "String"}, {"p": "OpenSSL::PKey::RSA", "m": "private_decrypt(string, padding)", "r": "String"}, {"p": "OpenSSL::PKey::RSA", "m": "private_encrypt(string)", "r": "String"}, {"p": "OpenSSL::PKey::RSA", "m": "private_encrypt(string, padding)", "r": "String"}, {"p": "OpenSSL::PKey::RSA", "m": "public?", "r": "true"}, {"p": "OpenSSL::PKey::RSA", "m": "public_decrypt(string)", "r": "String"}, {"p": "OpenSSL::PKey::RSA", "m": "public_decrypt(string, padding)", "r": "String"}, {"p": "OpenSSL::PKey::RSA", "m": "public_encrypt(string)", "r": "String"}, {"p": "OpenSSL::PKey::RSA", "m": "public_encrypt(string, padding)", "r": "String"}, {"p": "OpenSSL::PKey::RSA", "m": "public_key", "r": "RSA"}, {"p": "OpenSSL::PKey::RSA", "m": "set_crt_params(dmp1, dmq1, iqmp)", "r": "self"}, {"p": "OpenSSL::PKey::RSA", "m": "set_factors(p, q)", "r": "self"}, {"p": "OpenSSL::PKey::RSA", "m": "set_key(n, e, d)", "r": "self"}, {"p": "OpenSSL::PKey::RSA", "m": "sign_pss(digest, data, salt_length:, mgf1_hash:)", "r": "String"}, {"p": "OpenSSL::PKey::RSA", "m": "to_der", "r": "DER-format String"}, {"p": "OpenSSL::PKey::RSA", "m": "to_pem([cipher, pass_phrase])", "r": "PEM-format String"}, {"p": "OpenSSL::PKey::RSA", "m": "to_s([cipher, pass_phrase])", "r": "PEM-format String"}, {"p": "OpenSSL::PKey::RSA", "m": "to_text", "r": "String"}, {"p": "OpenSSL::PKey::RSA", "m": "verify_pss(digest, signature, data, salt_length:, mgf1_hash:)", "r": "true | false"}, {"p": "OpenSSL::PKey::EC::Group", "m": "OpenSSL::PKey::EC::Group.new(:GF2m, bignum_p, bignum_a, bignum_b)", "r": ""}, {"p": "OpenSSL::PKey::EC::Group", "m": "OpenSSL::PKey::EC::Group.new(:GFp, bignum_p, bignum_a, bignum_b)", "r": ""}, {"p": "OpenSSL::PKey::EC::Group", "m": "OpenSSL::PKey::EC::Group.new(ec_group)", "r": ""}, {"p": "OpenSSL::PKey::EC::Group", "m": "OpenSSL::PKey::EC::Group.new(ec_method)", "r": ""}, {"p": "OpenSSL::PKey::EC::Group", "m": "OpenSSL::PKey::EC::Group.new(pem_or_der_encoded)", "r": ""}, {"p": "OpenSSL::PKey::EC::Group", "m": "asn1_flag = flags", "r": ""}, {"p": "OpenSSL::PKey::EC::Group", "m": "asn1_flag", "r": "Integer"}, {"p": "OpenSSL::PKey::EC::Group", "m": "curve_name", "r": "String"}, {"p": "OpenSSL::PKey::EC::Group", "m": "degree", "r": "integer"}, {"p": "OpenSSL::PKey::EC::Group", "m": "eql?(group2)", "r": "true | false"}, {"p": "OpenSSL::PKey::EC::Group", "m": "generator", "r": "ec_point"}, {"p": "OpenSSL::PKey::EC::Group", "m": "get_cofactor", "r": "cofactor_bn"}, {"p": "OpenSSL::PKey::EC::Group", "m": "get_order", "r": "order_bn"}, {"p": "OpenSSL::PKey::EC::Group", "m": "group1 == group2", "r": "true | false"}, {"p": "OpenSSL::PKey::EC::Group", "m": "point_conversion_form = form", "r": ""}, {"p": "OpenSSL::PKey::EC::Group", "m": "point_conversion_form", "r": "Symbol"}, {"p": "OpenSSL::PKey::EC::Group", "m": "seed", "r": "String or nil"}, {"p": "OpenSSL::PKey::EC::Group", "m": "seed = seed", "r": "seed"}, {"p": "OpenSSL::PKey::EC::Group", "m": "set_generator(generator, order, cofactor)", "r": "self"}, {"p": "OpenSSL::PKey::EC::Group", "m": "to_der", "r": "String"}, {"p": "OpenSSL::PKey::EC::Group", "m": "to_pem", "r": "String"}, {"p": "OpenSSL::PKey::EC::Group", "m": "to_text", "r": "String"}, {"p": "OpenSSL::PKey::EC::Point", "m": "OpenSSL::PKey::EC::Point.new(group [, encoded_point])", "r": ""}, {"p": "OpenSSL::PKey::EC::Point", "m": "OpenSSL::PKey::EC::Point.new(point)", "r": ""}, {"p": "OpenSSL::PKey::EC::Point", "m": "eql?(point2)", "r": "true | false"}, {"p": "OpenSSL::PKey::EC::Point", "m": "infinity?", "r": "true | false"}, {"p": "OpenSSL::PKey::EC::Point", "m": "invert!", "r": "self"}, {"p": "OpenSSL::PKey::EC::Point", "m": "make_affine!", "r": "self"}, {"p": "OpenSSL::PKey::EC::Point", "m": "mul(bn1 [, bn2])", "r": "point"}, {"p": "OpenSSL::PKey::EC::Point", "m": "mul(bns, points [, bn2])", "r": "point"}, {"p": "OpenSSL::PKey::EC::Point", "m": "on_curve?", "r": "true | false"}, {"p": "OpenSSL::PKey::EC::Point", "m": "point1 == point2", "r": "true | false"}, {"p": "OpenSSL::PKey::EC::Point", "m": "set_to_infinity!", "r": "self"}, {"p": "OpenSSL::PKey::EC::Point", "m": "to_bn([conversion_form])", "r": "OpenSSL::BN"}, {"p": "OpenSSL::PKey::EC::Point", "m": "to_octet_string(conversion_form)", "r": "String"}, {"p": "OpenSSL::SSL::Session", "m": "id", "r": "String"}, {"p": "OpenSSL::SSL::Session", "m": "new(ssl_socket)", "r": "Session"}, {"p": "OpenSSL::SSL::Session", "m": "new(string)", "r": "Session"}, {"p": "OpenSSL::SSL::Session", "m": "session1 == session2", "r": "boolean"}, {"p": "OpenSSL::SSL::Session", "m": "time = integer", "r": ""}, {"p": "OpenSSL::SSL::Session", "m": "time = time", "r": ""}, {"p": "OpenSSL::SSL::Session", "m": "time", "r": "Time"}, {"p": "OpenSSL::SSL::Session", "m": "timeout = integer", "r": ""}, {"p": "OpenSSL::SSL::Session", "m": "timeout", "r": "Integer"}, {"p": "OpenSSL::SSL::Session", "m": "to_der", "r": "String"}, {"p": "OpenSSL::SSL::Session", "m": "to_pem", "r": "String"}, {"p": "OpenSSL::SSL::Session", "m": "to_text", "r": "String"}, {"p": "OpenSSL::SSL::SSLContext", "m": "add_certificate(certiticate, pkey [, extra_certs])", "r": "self"}, {"p": "OpenSSL::SSL::SSLContext", "m": "ciphers = \"cipher1:cipher2:...\"", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "ciphers = [[name, version, bits, alg_bits], ...]", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "ciphers = [name, ...]", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "ciphers", "r": "[[name, version, bits, alg_bits], ...]"}, {"p": "OpenSSL::SSL::SSLContext", "m": "ecdh_curves = curve_list", "r": "curve_list"}, {"p": "OpenSSL::SSL::SSLContext", "m": "enable_fallback_scsv()", "r": "nil"}, {"p": "OpenSSL::SSL::SSLContext", "m": "flush_sessions(time)", "r": "self"}, {"p": "OpenSSL::SSL::SSLContext", "m": "max_version = :TLS1_2", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "max_version = OpenSSL::SSL::TLS1_2_VERSION", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "max_version = nil", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "min_version = :TLS1_2", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "min_version = OpenSSL::SSL::TLS1_2_VERSION", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "min_version = nil", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "new", "r": "ctx"}, {"p": "OpenSSL::SSL::SSLContext", "m": "new(\"SSLv23\")", "r": "ctx"}, {"p": "OpenSSL::SSL::SSLContext", "m": "new(:TLSv1)", "r": "ctx"}, {"p": "OpenSSL::SSL::SSLContext", "m": "security_level = integer", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "security_level", "r": "Integer"}, {"p": "OpenSSL::SSL::SSLContext", "m": "session_add(session)", "r": "true | false"}, {"p": "OpenSSL::SSL::SSLContext", "m": "session_cache_mode", "r": "Integer"}, {"p": "OpenSSL::SSL::SSLContext", "m": "session_cache_mode=(integer)", "r": "Integer"}, {"p": "OpenSSL::SSL::SSLContext", "m": "session_cache_size", "r": "Integer"}, {"p": "OpenSSL::SSL::SSLContext", "m": "session_cache_size=(integer)", "r": "Integer"}, {"p": "OpenSSL::SSL::SSLContext", "m": "session_cache_stats", "r": "Hash"}, {"p": "OpenSSL::SSL::SSLContext", "m": "session_remove(session)", "r": "true | false"}, {"p": "OpenSSL::SSL::SSLContext", "m": "set_minmax_proto_version(min, max)", "r": "nil"}, {"p": "OpenSSL::SSL::SSLContext", "m": "set_params(params = {})", "r": "params"}, {"p": "OpenSSL::SSL::SSLContext", "m": "setup", "r": "Qtrue # first time"}, {"p": "OpenSSL::SSL::SSLContext", "m": "setup", "r": "nil # thereafter"}, {"p": "OpenSSL::SSL::SSLContext", "m": "ssl_version = \"SSLv23\"", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "ssl_version = :TLSv1", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "DEFAULT_2048", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "METHODS", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "METHODS_MAP", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "SESSION_CACHE_BOTH", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "SESSION_CACHE_CLIENT", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "SESSION_CACHE_NO_AUTO_CLEAR", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "SESSION_CACHE_NO_INTERNAL", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "SESSION_CACHE_NO_INTERNAL_LOOKUP", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "SESSION_CACHE_NO_INTERNAL_STORE", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "SESSION_CACHE_OFF", "r": ""}, {"p": "OpenSSL::SSL::SSLContext", "m": "SESSION_CACHE_SERVER", "r": ""}, {"p": "OpenSSL::SSL::SSLSocket", "m": "accept", "r": "self"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "accept_nonblock([options])", "r": "self"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "alpn_protocol", "r": "String | nil"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "cert", "r": "cert or nil"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "cipher", "r": "nil or [name, version, bits, alg_bits]"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "client_ca", "r": "[x509name, ...]"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "connect", "r": "self"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "connect_nonblock([options])", "r": "self"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "hostname = hostname", "r": "hostname"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "new(io)", "r": "aSSLSocket"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "new(io, ctx)", "r": "aSSLSocket"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "npn_protocol", "r": "String | nil"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "peer_cert", "r": "cert or nil"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "peer_cert_chain", "r": "[cert, ...] or nil"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "pending", "r": "Integer"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "post_connection_check(hostname)", "r": "true"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "session = session", "r": "session"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "session", "r": "aSession"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "session_reused?", "r": "true | false"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "ssl_version", "r": "String"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "state", "r": "string"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "stop", "r": "nil"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "sysclose", "r": "nil"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "sysread(length)", "r": "string"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "sysread(length, buffer)", "r": "buffer"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "sysread_nonblock(length)", "r": "string"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "sysread_nonblock(length, buffer)", "r": "buffer"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "sysread_nonblock(length[, buffer [, opts])", "r": "buffer"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "syswrite(string)", "r": "Integer"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "syswrite_nonblock(string)", "r": "Integer"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "tmp_key", "r": "PKey or nil"}, {"p": "OpenSSL::SSL::SSLSocket", "m": "verify_result", "r": "Integer"}, {"p": "OpenSSL::X509::Attribute", "m": "new(oid [, value])", "r": "attr"}, {"p": "OpenSSL::X509::Attribute", "m": "oid = string", "r": "string"}, {"p": "OpenSSL::X509::Attribute", "m": "oid", "r": "string"}, {"p": "OpenSSL::X509::Attribute", "m": "to_der", "r": "string"}, {"p": "OpenSSL::X509::Attribute", "m": "value = asn1", "r": "asn1"}, {"p": "OpenSSL::X509::Attribute", "m": "value", "r": "asn1"}, {"p": "OpenSSL::X509::Certificate", "m": "add_extension(extension)", "r": "extension"}, {"p": "OpenSSL::X509::Certificate", "m": "cert1 == cert2", "r": "true | false"}, {"p": "OpenSSL::X509::Certificate", "m": "check_private_key(key)", "r": "true | false"}, {"p": "OpenSSL::X509::Certificate", "m": "extensions = [ext...]", "r": "[ext...]"}, {"p": "OpenSSL::X509::Certificate", "m": "extensions", "r": "[extension...]"}, {"p": "OpenSSL::X509::Certificate", "m": "issuer = name", "r": "name"}, {"p": "OpenSSL::X509::Certificate", "m": "issuer", "r": "name"}, {"p": "OpenSSL::X509::Certificate", "m": "new", "r": "cert"}, {"p": "OpenSSL::X509::Certificate", "m": "new(string)", "r": "cert"}, {"p": "OpenSSL::X509::Certificate", "m": "not_after = time", "r": "time"}, {"p": "OpenSSL::X509::Certificate", "m": "not_after", "r": "time"}, {"p": "OpenSSL::X509::Certificate", "m": "not_before = time", "r": "time"}, {"p": "OpenSSL::X509::Certificate", "m": "not_before", "r": "time"}, {"p": "OpenSSL::X509::Certificate", "m": "public_key = key", "r": ""}, {"p": "OpenSSL::X509::Certificate", "m": "public_key", "r": "key"}, {"p": "OpenSSL::X509::Certificate", "m": "serial = integer", "r": "integer"}, {"p": "OpenSSL::X509::Certificate", "m": "serial", "r": "integer"}, {"p": "OpenSSL::X509::Certificate", "m": "sign(key, digest)", "r": "self"}, {"p": "OpenSSL::X509::Certificate", "m": "signature_algorithm", "r": "string"}, {"p": "OpenSSL::X509::Certificate", "m": "subject = name", "r": "name"}, {"p": "OpenSSL::X509::Certificate", "m": "subject", "r": "name"}, {"p": "OpenSSL::X509::Certificate", "m": "to_der", "r": "string"}, {"p": "OpenSSL::X509::Certificate", "m": "to_pem", "r": "string"}, {"p": "OpenSSL::X509::Certificate", "m": "to_text", "r": "string"}, {"p": "OpenSSL::X509::Certificate", "m": "verify(key)", "r": "true | false"}, {"p": "OpenSSL::X509::Certificate", "m": "version = integer", "r": "integer"}, {"p": "OpenSSL::X509::Certificate", "m": "version", "r": "integer"}, {"p": "OpenSSL::X509::Extension", "m": "OpenSSL::X509::Extension.new(der)", "r": ""}, {"p": "OpenSSL::X509::Extension", "m": "OpenSSL::X509::Extension.new(oid, value)", "r": ""}, {"p": "OpenSSL::X509::Extension", "m": "OpenSSL::X509::Extension.new(oid, value, critical)", "r": ""}, {"p": "OpenSSL::X509::ExtensionFactory", "m": "create_ext(ln_or_sn, \"critical,value\")", "r": "X509::Extension"}, {"p": "OpenSSL::X509::ExtensionFactory", "m": "create_ext(ln_or_sn, \"value\", critical = false)", "r": "X509::Extension"}, {"p": "OpenSSL::X509::Name", "m": "X509::Name.new", "r": "name"}, {"p": "OpenSSL::X509::Name", "m": "X509::Name.new(der)", "r": "name"}, {"p": "OpenSSL::X509::Name", "m": "X509::Name.new(distinguished_name)", "r": "name"}, {"p": "OpenSSL::X509::Name", "m": "X509::Name.new(distinguished_name, template)", "r": "name"}, {"p": "OpenSSL::X509::Name", "m": "add_entry(oid, value [, type], loc: -1, set: 0)", "r": "self"}, {"p": "OpenSSL::X509::Name", "m": "cmp(other)", "r": "-1 | 0 | 1"}, {"p": "OpenSSL::X509::Name", "m": "eql?(other)", "r": "true | false"}, {"p": "OpenSSL::X509::Name", "m": "hash", "r": "integer"}, {"p": "OpenSSL::X509::Name", "m": "hash_old", "r": "integer"}, {"p": "OpenSSL::X509::Name", "m": "name <=> other", "r": "-1 | 0 | 1"}, {"p": "OpenSSL::X509::Name", "m": "to_a", "r": "[[name, data, type], ...]"}, {"p": "OpenSSL::X509::Name", "m": "to_der", "r": "string"}, {"p": "OpenSSL::X509::Name", "m": "to_s", "r": "string"}, {"p": "OpenSSL::X509::Name", "m": "to_s(format)", "r": "string"}, {"p": "OpenSSL::X509::Name", "m": "to_utf8", "r": "string"}, {"p": "OpenSSL::X509::Name", "m": "COMPAT", "r": ""}, {"p": "OpenSSL::X509::Name", "m": "DEFAULT_OBJECT_TYPE", "r": ""}, {"p": "OpenSSL::X509::Name", "m": "MULTILINE", "r": ""}, {"p": "OpenSSL::X509::Name", "m": "OBJECT_TYPE_TEMPLATE", "r": ""}, {"p": "OpenSSL::X509::Name", "m": "ONELINE", "r": ""}, {"p": "OpenSSL::X509::Name", "m": "RFC2253", "r": ""}, {"p": "OpenSSL::X509::Store", "m": "X509::Store.new", "r": "store"}, {"p": "OpenSSL::X509::Store", "m": "add_cert(cert)", "r": ""}, {"p": "OpenSSL::X509::Store", "m": "add_crl(crl)", "r": "self"}, {"p": "OpenSSL::X509::Store", "m": "add_file(file)", "r": "self"}, {"p": "OpenSSL::X509::Store", "m": "add_path(path)", "r": "self"}, {"p": "OpenSSL::X509::Store", "m": "flags = flags", "r": ""}, {"p": "OpenSSL::X509::Store", "m": "purpose = purpose", "r": ""}, {"p": "OpenSSL::X509::Store", "m": "set_default_paths", "r": ""}, {"p": "OpenSSL::X509::Store", "m": "time = time", "r": ""}, {"p": "OpenSSL::X509::Store", "m": "trust = trust", "r": ""}, {"p": "OpenSSL::X509::Store", "m": "verify(cert, chain = nil)", "r": "true | false"}, {"p": "OpenSSL::X509::StoreContext", "m": "chain", "r": "Array of X509::Certificate"}, {"p": "OpenSSL::X509::StoreContext", "m": "current_cert", "r": "X509::Certificate"}, {"p": "OpenSSL::X509::StoreContext", "m": "current_crl", "r": "X509::CRL"}, {"p": "OpenSSL::X509::StoreContext", "m": "error = error_code", "r": ""}, {"p": "OpenSSL::X509::StoreContext", "m": "error", "r": "Integer"}, {"p": "OpenSSL::X509::StoreContext", "m": "error_depth", "r": "Integer"}, {"p": "OpenSSL::X509::StoreContext", "m": "error_string", "r": "String"}, {"p": "OpenSSL::X509::StoreContext", "m": "flags = flags", "r": ""}, {"p": "OpenSSL::X509::StoreContext", "m": "new(store, cert = nil, chain = nil)", "r": ""}, {"p": "OpenSSL::X509::StoreContext", "m": "purpose = purpose", "r": ""}, {"p": "OpenSSL::X509::StoreContext", "m": "time = time", "r": ""}, {"p": "OpenSSL::X509::StoreContext", "m": "trust = trust", "r": ""}, {"p": "OpenSSL::X509::StoreContext", "m": "verify", "r": "true | false"}, {"p": "OpenSSL::X509::Name::RFC2253DN", "m": "AttributeType", "r": ""}, {"p": "OpenSSL::X509::Name::RFC2253DN", "m": "AttributeValue", "r": ""}, {"p": "OpenSSL::X509::Name::RFC2253DN", "m": "HexChar", "r": ""}, {"p": "OpenSSL::X509::Name::RFC2253DN", "m": "HexPair", "r": ""}, {"p": "OpenSSL::X509::Name::RFC2253DN", "m": "HexString", "r": ""}, {"p": "OpenSSL::X509::Name::RFC2253DN", "m": "Pair", "r": ""}, {"p": "OpenSSL::X509::Name::RFC2253DN", "m": "QuoteChar", "r": ""}, {"p": "OpenSSL::X509::Name::RFC2253DN", "m": "Special", "r": ""}, {"p": "OpenSSL::X509::Name::RFC2253DN", "m": "StringChar", "r": ""}, {"p": "OpenSSL::X509::Name::RFC2253DN", "m": "TypeAndValue", "r": ""}, {"p": "OptionParser::ParseError", "m": "Reason", "r": ""}, {"p": "Process::GID", "m": "Process::GID.change_privilege(group)", "r": "integer"}, {"p": "Process::GID", "m": "Process::GID.eid", "r": "integer"}, {"p": "Process::GID", "m": "Process::GID.eid = group", "r": "integer"}, {"p": "Process::GID", "m": "Process::GID.from_name(name)", "r": "gid"}, {"p": "Process::GID", "m": "Process::GID.grant_privilege(group)", "r": "integer"}, {"p": "Process::GID", "m": "Process::GID.re_exchange", "r": "integer"}, {"p": "Process::GID", "m": "Process::GID.re_exchangeable?", "r": "true or false"}, {"p": "Process::GID", "m": "Process::GID.rid", "r": "integer"}, {"p": "Process::GID", "m": "Process::GID.sid_available?", "r": "true or false"}, {"p": "Process::GID", "m": "Process::GID.switch", "r": "integer"}, {"p": "Process::GID", "m": "Process::GID.switch {|| block}", "r": "object"}, {"p": "Process::GID", "m": "Process::Sys.geteid", "r": "integer"}, {"p": "Process::GID", "m": "Process::Sys.getgid", "r": "integer"}, {"p": "Process::GID", "m": "egid", "r": "integer"}, {"p": "Process::GID", "m": "gid", "r": "integer"}, {"p": "Process::Status", "m": "coredump?", "r": "true or false"}, {"p": "Process::Status", "m": "exited?", "r": "true or false"}, {"p": "Process::Status", "m": "exitstatus", "r": "integer or nil"}, {"p": "Process::Status", "m": "inspect", "r": "string"}, {"p": "Process::Status", "m": "pid", "r": "integer"}, {"p": "Process::Status", "m": "signaled?", "r": "true or false"}, {"p": "Process::Status", "m": "stat & num", "r": "integer"}, {"p": "Process::Status", "m": "stat == other", "r": "true or false"}, {"p": "Process::Status", "m": "stat >> num", "r": "integer"}, {"p": "Process::Status", "m": "stopped?", "r": "true or false"}, {"p": "Process::Status", "m": "stopsig", "r": "integer or nil"}, {"p": "Process::Status", "m": "success?", "r": "true, false or nil"}, {"p": "Process::Status", "m": "termsig", "r": "integer or nil"}, {"p": "Process::Status", "m": "to_i", "r": "integer"}, {"p": "Process::Status", "m": "to_int", "r": "integer"}, {"p": "Process::Status", "m": "to_s", "r": "string"}, {"p": "Process::Sys", "m": "Process::GID.eid", "r": "integer"}, {"p": "Process::Sys", "m": "Process::GID.rid", "r": "integer"}, {"p": "Process::Sys", "m": "Process::Sys.geteid", "r": "integer"}, {"p": "Process::Sys", "m": "Process::Sys.geteuid", "r": "integer"}, {"p": "Process::Sys", "m": "Process::Sys.getgid", "r": "integer"}, {"p": "Process::Sys", "m": "Process::Sys.getuid", "r": "integer"}, {"p": "Process::Sys", "m": "Process::Sys.issetugid", "r": "true or false"}, {"p": "Process::Sys", "m": "Process::Sys.setegid(group)", "r": "nil"}, {"p": "Process::Sys", "m": "Process::Sys.seteuid(user)", "r": "nil"}, {"p": "Process::Sys", "m": "Process::Sys.setgid(group)", "r": "nil"}, {"p": "Process::Sys", "m": "Process::Sys.setregid(rid, eid)", "r": "nil"}, {"p": "Process::Sys", "m": "Process::Sys.setresgid(rid, eid, sid)", "r": "nil"}, {"p": "Process::Sys", "m": "Process::Sys.setresuid(rid, eid, sid)", "r": "nil"}, {"p": "Process::Sys", "m": "Process::Sys.setreuid(rid, eid)", "r": "nil"}, {"p": "Process::Sys", "m": "Process::Sys.setrgid(group)", "r": "nil"}, {"p": "Process::Sys", "m": "Process::Sys.setruid(user)", "r": "nil"}, {"p": "Process::Sys", "m": "Process::Sys.setuid(user)", "r": "nil"}, {"p": "Process::Sys", "m": "Process::UID.eid", "r": "integer"}, {"p": "Process::Sys", "m": "Process::UID.rid", "r": "integer"}, {"p": "Process::Sys", "m": "egid", "r": "integer"}, {"p": "Process::Sys", "m": "euid", "r": "integer"}, {"p": "Process::Sys", "m": "gid", "r": "integer"}, {"p": "Process::Sys", "m": "uid", "r": "integer"}, {"p": "Process::UID", "m": "Process::Sys.geteuid", "r": "integer"}, {"p": "Process::UID", "m": "Process::Sys.getuid", "r": "integer"}, {"p": "Process::UID", "m": "Process::UID.change_privilege(user)", "r": "integer"}, {"p": "Process::UID", "m": "Process::UID.eid", "r": "integer"}, {"p": "Process::UID", "m": "Process::UID.eid= user", "r": "integer"}, {"p": "Process::UID", "m": "Process::UID.from_name(name)", "r": "uid"}, {"p": "Process::UID", "m": "Process::UID.grant_privilege(user)", "r": "integer"}, {"p": "Process::UID", "m": "Process::UID.re_exchange", "r": "integer"}, {"p": "Process::UID", "m": "Process::UID.re_exchangeable?", "r": "true or false"}, {"p": "Process::UID", "m": "Process::UID.rid", "r": "integer"}, {"p": "Process::UID", "m": "Process::UID.sid_available?", "r": "true or false"}, {"p": "Process::UID", "m": "Process::UID.switch", "r": "integer"}, {"p": "Process::UID", "m": "Process::UID.switch {|| block}", "r": "object"}, {"p": "Process::UID", "m": "euid", "r": "integer"}, {"p": "Process::UID", "m": "uid", "r": "integer"}, {"p": "Psych::ClassLoader", "m": "path2class(path)", "r": ""}, {"p": "Psych::Emitter", "m": "Psych::Emitter.new(io, options = Psych::Emitter::OPTIONS)", "r": ""}, {"p": "Psych::Emitter", "m": "alias(anchor)", "r": ""}, {"p": "Psych::Emitter", "m": "canonical", "r": ""}, {"p": "Psych::Emitter", "m": "canonical = true", "r": ""}, {"p": "Psych::Emitter", "m": "end_document(implicit)", "r": ""}, {"p": "Psych::Emitter", "m": "end_mapping", "r": ""}, {"p": "Psych::Emitter", "m": "end_sequence", "r": ""}, {"p": "Psych::Emitter", "m": "end_stream", "r": ""}, {"p": "Psych::Emitter", "m": "indentation", "r": ""}, {"p": "Psych::Emitter", "m": "indentation = level", "r": ""}, {"p": "Psych::Emitter", "m": "line_width", "r": ""}, {"p": "Psych::Emitter", "m": "line_width = width", "r": ""}, {"p": "Psych::Emitter", "m": "scalar(value, anchor, tag, plain, quoted, style)", "r": ""}, {"p": "Psych::Emitter", "m": "start_document(version, tags, implicit)", "r": ""}, {"p": "Psych::Emitter", "m": "start_mapping(anchor, tag, implicit, style)", "r": ""}, {"p": "Psych::Emitter", "m": "start_sequence(anchor, tag, implicit, style)", "r": ""}, {"p": "Psych::Emitter", "m": "start_stream(encoding)", "r": ""}, {"p": "Psych::Handler", "m": "EVENTS", "r": ""}, {"p": "Psych::Handler", "m": "OPTIONS", "r": ""}, {"p": "Psych::Parser", "m": "mark #", "r": "#<Psych::Parser::Mark>"}, {"p": "Psych::Parser", "m": "parse(yaml)", "r": ""}, {"p": "Psych::Parser", "m": "ANY", "r": ""}, {"p": "Psych::Parser", "m": "UTF16BE", "r": ""}, {"p": "Psych::Parser", "m": "UTF16LE", "r": ""}, {"p": "Psych::Parser", "m": "UTF8", "r": ""}, {"p": "Psych::ScalarScanner", "m": "FLOAT", "r": ""}, {"p": "Psych::ScalarScanner", "m": "INTEGER", "r": ""}, {"p": "Psych::ScalarScanner", "m": "TIME", "r": ""}, {"p": "Psych::Nodes::Mapping", "m": "ANY", "r": ""}, {"p": "Psych::Nodes::Mapping", "m": "BLOCK", "r": ""}, {"p": "Psych::Nodes::Mapping", "m": "FLOW", "r": ""}, {"p": "Psych::Nodes::Scalar", "m": "ANY", "r": ""}, {"p": "Psych::Nodes::Scalar", "m": "DOUBLE_QUOTED", "r": ""}, {"p": "Psych::Nodes::Scalar", "m": "FOLDED", "r": ""}, {"p": "Psych::Nodes::Scalar", "m": "LITERAL", "r": ""}, {"p": "Psych::Nodes::Scalar", "m": "PLAIN", "r": ""}, {"p": "Psych::Nodes::Scalar", "m": "SINGLE_QUOTED", "r": ""}, {"p": "Psych::Nodes::Sequence", "m": "ANY", "r": ""}, {"p": "Psych::Nodes::Sequence", "m": "BLOCK", "r": ""}, {"p": "Psych::Nodes::Sequence", "m": "FLOW", "r": ""}, {"p": "Psych::Nodes::Stream", "m": "ANY", "r": ""}, {"p": "Psych::Nodes::Stream", "m": "UTF16BE", "r": ""}, {"p": "Psych::Nodes::Stream", "m": "UTF16LE", "r": ""}, {"p": "Psych::Nodes::Stream", "m": "UTF8", "r": ""}, {"p": "Psych::Visitors::ToRuby", "m": "build_exception(klass, message)", "r": ""}, {"p": "Psych::Visitors::ToRuby", "m": "SHOVEL", "r": ""}, {"p": "Psych::Visitors::Visitor", "m": "DISPATCH", "r": ""}, {"p": "Psych::Visitors::YAMLTree", "m": "private_iv_get(target, prop)", "r": ""}, {"p": "Racc::Parser", "m": "Racc_Runtime_Core_Id_C", "r": ""}, {"p": "Racc::Parser", "m": "Racc_Runtime_Core_Revision_C", "r": ""}, {"p": "Racc::Parser", "m": "Racc_Runtime_Core_Revision_R", "r": ""}, {"p": "Racc::Parser", "m": "Racc_Runtime_Core_Version_C", "r": ""}, {"p": "Racc::Parser", "m": "Racc_Runtime_Core_Version_R", "r": ""}, {"p": "Racc::Parser", "m": "Racc_Runtime_Revision", "r": ""}, {"p": "Racc::Parser", "m": "Racc_Runtime_Version", "r": ""}, {"p": "Random::Formatter", "m": "ALPHANUMERIC", "r": ""}, {"p": "RDoc::Context", "m": "TYPES", "r": ""}, {"p": "RDoc::CrossReference", "m": "ALL_CROSSREF_REGEXP", "r": ""}, {"p": "RDoc::CrossReference", "m": "CLASS_REGEXP_STR", "r": ""}, {"p": "RDoc::CrossReference", "m": "CROSSREF_REGEXP", "r": ""}, {"p": "RDoc::CrossReference", "m": "METHOD_REGEXP_STR", "r": ""}, {"p": "RDoc::Markdown", "m": "DEFAULT_EXTENSIONS", "r": ""}, {"p": "RDoc::Markdown", "m": "EXTENSIONS", "r": ""}, {"p": "RDoc::Options", "m": "DEPRECATED", "r": ""}, {"p": "RDoc::Options", "m": "Directory", "r": ""}, {"p": "RDoc::Options", "m": "Path", "r": ""}, {"p": "RDoc::Options", "m": "PathArray", "r": ""}, {"p": "RDoc::Options", "m": "SPECIAL", "r": ""}, {"p": "RDoc::Options", "m": "Template", "r": ""}, {"p": "RDoc::RDoc", "m": "GENERATORS", "r": ""}, {"p": "RDoc::Text", "m": "MARKUP_FORMAT", "r": ""}, {"p": "RDoc::Text", "m": "TO_HTML_CHARACTERS", "r": ""}, {"p": "Resolv::DNS", "m": "Port", "r": ""}, {"p": "Resolv::DNS", "m": "UDPSize", "r": ""}, {"p": "Resolv::Hosts", "m": "DefaultFileName", "r": ""}, {"p": "Resolv::IPv4", "m": "Regex", "r": ""}, {"p": "Resolv::IPv4", "m": "Regex256", "r": ""}, {"p": "Resolv::IPv6", "m": "Regex", "r": ""}, {"p": "Resolv::IPv6", "m": "Regex_6Hex4Dec", "r": ""}, {"p": "Resolv::IPv6", "m": "Regex_8Hex", "r": ""}, {"p": "Resolv::IPv6", "m": "Regex_CompressedHex", "r": ""}, {"p": "Resolv::IPv6", "m": "Regex_CompressedHex4Dec", "r": ""}, {"p": "Resolv::MDNS", "m": "AddressV4", "r": ""}, {"p": "Resolv::MDNS", "m": "AddressV6", "r": ""}, {"p": "Resolv::MDNS", "m": "Addresses", "r": ""}, {"p": "Resolv::MDNS", "m": "Port", "r": ""}, {"p": "Resolv::DNS::Resource::IN::A", "m": "ClassValue", "r": ""}, {"p": "Resolv::DNS::Resource::IN::A", "m": "TypeValue", "r": ""}, {"p": "Resolv::DNS::Resource::IN::AAAA", "m": "ClassValue", "r": ""}, {"p": "Resolv::DNS::Resource::IN::AAAA", "m": "TypeValue", "r": ""}, {"p": "Resolv::DNS::Resource::IN::SRV", "m": "ClassValue", "r": ""}, {"p": "Resolv::DNS::Resource::IN::SRV", "m": "TypeValue", "r": ""}, {"p": "Resolv::DNS::Resource::IN::WKS", "m": "ClassValue", "r": ""}, {"p": "Resolv::DNS::Resource::IN::WKS", "m": "TypeValue", "r": ""}, {"p": "Resolv::LOC::Alt", "m": "Regex", "r": ""}, {"p": "Resolv::LOC::Coord", "m": "Regex", "r": ""}, {"p": "Resolv::LOC::Size", "m": "Regex", "r": ""}, {"p": "REXML::Attribute", "m": "NEEDS_A_SECOND_CHECK", "r": ""}, {"p": "REXML::Attribute", "m": "PATTERN", "r": ""}, {"p": "REXML::CData", "m": "ILLEGAL", "r": ""}, {"p": "REXML::CData", "m": "START", "r": ""}, {"p": "REXML::CData", "m": "STOP", "r": ""}, {"p": "REXML::Comment", "m": "START", "r": ""}, {"p": "REXML::Comment", "m": "STOP", "r": ""}, {"p": "REXML::DocType", "m": "DEFAULT_ENTITIES", "r": ""}, {"p": "REXML::DocType", "m": "PUBLIC", "r": ""}, {"p": "REXML::DocType", "m": "START", "r": ""}, {"p": "REXML::DocType", "m": "STOP", "r": ""}, {"p": "REXML::DocType", "m": "SYSTEM", "r": ""}, {"p": "REXML::Document", "m": "write(options={:output => $stdout, :indent => -1, :transtive => false, :ie_hack => false, :encoding", "r": "nil})"}, {"p": "REXML::Document", "m": "write(output=$stdout, indent=-1, transtive=false, ie_hack=false, encoding=nil)", "r": ""}, {"p": "REXML::Document", "m": "DECLARATION", "r": ""}, {"p": "REXML::Element", "m": "UNDEFINED", "r": ""}, {"p": "REXML::Entity", "m": "ENTITYDECL", "r": ""}, {"p": "REXML::Entity", "m": "ENTITYDEF", "r": ""}, {"p": "REXML::Entity", "m": "ENTITYVALUE", "r": ""}, {"p": "REXML::Entity", "m": "EXTERNALID", "r": ""}, {"p": "REXML::Entity", "m": "GEDECL", "r": ""}, {"p": "REXML::Entity", "m": "NDATADECL", "r": ""}, {"p": "REXML::Entity", "m": "PEDECL", "r": ""}, {"p": "REXML::Entity", "m": "PEDEF", "r": ""}, {"p": "REXML::Entity", "m": "PEREFERENCE", "r": ""}, {"p": "REXML::Entity", "m": "PEREFERENCE_RE", "r": ""}, {"p": "REXML::Entity", "m": "PUBIDCHAR", "r": ""}, {"p": "REXML::Entity", "m": "PUBIDLITERAL", "r": ""}, {"p": "REXML::Entity", "m": "SYSTEMLITERAL", "r": ""}, {"p": "REXML::EntityConst", "m": "AMP", "r": ""}, {"p": "REXML::EntityConst", "m": "APOS", "r": ""}, {"p": "REXML::EntityConst", "m": "GT", "r": ""}, {"p": "REXML::EntityConst", "m": "LT", "r": ""}, {"p": "REXML::EntityConst", "m": "QUOT", "r": ""}, {"p": "REXML::Functions", "m": "INTERNAL_METHODS", "r": ""}, {"p": "REXML::Functions", "m": "namespace_context", "r": ""}, {"p": "REXML::Functions", "m": "variables", "r": ""}, {"p": "REXML::Instruction", "m": "START", "r": ""}, {"p": "REXML::Instruction", "m": "STOP", "r": ""}, {"p": "REXML::Namespace", "m": "NAMESPLIT", "r": ""}, {"p": "REXML::QuickPath", "m": "EMPTY_HASH", "r": ""}, {"p": "REXML::QuickPath", "m": "OPERAND_", "r": ""}, {"p": "REXML::Text", "m": "EREFERENCE", "r": ""}, {"p": "REXML::Text", "m": "NEEDS_A_SECOND_CHECK", "r": ""}, {"p": "REXML::Text", "m": "NUMERICENTITY", "r": ""}, {"p": "REXML::Text", "m": "REFERENCE", "r": ""}, {"p": "REXML::Text", "m": "SETUTITSBUS", "r": ""}, {"p": "REXML::Text", "m": "SLAICEPS", "r": ""}, {"p": "REXML::Text", "m": "SPECIALS", "r": ""}, {"p": "REXML::Text", "m": "SUBSTITUTES", "r": ""}, {"p": "REXML::Text", "m": "VALID_CHAR", "r": ""}, {"p": "REXML::Text", "m": "VALID_XML_CHARS", "r": ""}, {"p": "REXML::XMLDecl", "m": "DEFAULT_ENCODING", "r": ""}, {"p": "REXML::XMLDecl", "m": "DEFAULT_STANDALONE", "r": ""}, {"p": "REXML::XMLDecl", "m": "DEFAULT_VERSION", "r": ""}, {"p": "REXML::XMLDecl", "m": "START", "r": ""}, {"p": "REXML::XMLDecl", "m": "STOP", "r": ""}, {"p": "REXML::XMLTokens", "m": "NAME", "r": ""}, {"p": "REXML::XMLTokens", "m": "NAMECHAR", "r": ""}, {"p": "REXML::XMLTokens", "m": "NAME_CHAR", "r": ""}, {"p": "REXML::XMLTokens", "m": "NAME_START_CHAR", "r": ""}, {"p": "REXML::XMLTokens", "m": "NAME_STR", "r": ""}, {"p": "REXML::XMLTokens", "m": "NCNAME_STR", "r": ""}, {"p": "REXML::XMLTokens", "m": "NMTOKEN", "r": ""}, {"p": "REXML::XMLTokens", "m": "NMTOKENS", "r": ""}, {"p": "REXML::XMLTokens", "m": "REFERENCE", "r": ""}, {"p": "REXML::XPath", "m": "EMPTY_HASH", "r": ""}, {"p": "REXML::XPathParser", "m": "ALL", "r": ""}, {"p": "REXML::XPathParser", "m": "ELEMENTS", "r": ""}, {"p": "REXML::XPathParser", "m": "LITERAL", "r": ""}, {"p": "REXML::DTD::AttlistDecl", "m": "PATTERN_RE", "r": ""}, {"p": "REXML::DTD::AttlistDecl", "m": "START", "r": ""}, {"p": "REXML::DTD::AttlistDecl", "m": "START_RE", "r": ""}, {"p": "REXML::DTD::ElementDecl", "m": "PATTERN_RE", "r": ""}, {"p": "REXML::DTD::ElementDecl", "m": "START", "r": ""}, {"p": "REXML::DTD::ElementDecl", "m": "START_RE", "r": ""}, {"p": "REXML::DTD::EntityDecl", "m": "PERCENT", "r": ""}, {"p": "REXML::DTD::EntityDecl", "m": "PLAIN", "r": ""}, {"p": "REXML::DTD::EntityDecl", "m": "PUBLIC", "r": ""}, {"p": "REXML::DTD::EntityDecl", "m": "START", "r": ""}, {"p": "REXML::DTD::EntityDecl", "m": "START_RE", "r": ""}, {"p": "REXML::DTD::EntityDecl", "m": "SYSTEM", "r": ""}, {"p": "REXML::DTD::NotationDecl", "m": "PUBLIC", "r": ""}, {"p": "REXML::DTD::NotationDecl", "m": "START", "r": ""}, {"p": "REXML::DTD::NotationDecl", "m": "START_RE", "r": ""}, {"p": "REXML::DTD::NotationDecl", "m": "SYSTEM", "r": ""}, {"p": "REXML::Light::Node", "m": "NAMESPLIT", "r": ""}, {"p": "REXML::Light::Node", "m": "PARENTS", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ATTDEF", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ATTDEF_RE", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ATTLISTDECL_PATTERN", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ATTLISTDECL_START", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ATTRIBUTE_PATTERN", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ATTTYPE", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ATTVALUE", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "CDATA_END", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "CDATA_PATTERN", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "CDATA_START", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "CLOSE_MATCH", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "COMBININGCHAR", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "COMMENT_PATTERN", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "COMMENT_START", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "DEFAULTDECL", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "DEFAULT_ENTITIES", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "DIGIT", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "DOCTYPE_END", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "DOCTYPE_PATTERN", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "DOCTYPE_START", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ELEMENTDECL_PATTERN", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ELEMENTDECL_START", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ENCODING", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ENTITYDECL", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ENTITYDEF", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ENTITYVALUE", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ENTITY_START", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ENUMERATEDTYPE", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "ENUMERATION", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "EREFERENCE", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "EXTENDER", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "EXTERNALID", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "GEDECL", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "IDENTITY", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "INSTRUCTION_PATTERN", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "INSTRUCTION_START", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "LETTER", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "MISSING_ATTRIBUTE_QUOTES", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "NAME", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "NAMECHAR", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "NAME_STR", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "NCNAME_STR", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "NDATADECL", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "NMTOKEN", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "NMTOKENS", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "NOTATIONDECL_START", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "NOTATIONTYPE", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "PEDECL", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "PEDEF", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "PEREFERENCE", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "PUBIDCHAR", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "PUBIDLITERAL", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "PUBLIC", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "REFERENCE", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "REFERENCE_RE", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "STANDALONE", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "SYSTEM", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "SYSTEMENTITY", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "SYSTEMLITERAL", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "TAG_MATCH", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "TEXT_PATTERN", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "UNAME_STR", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "VERSION", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "XMLDECL_PATTERN", "r": ""}, {"p": "REXML::Parsers::BaseParser", "m": "XMLDECL_START", "r": ""}, {"p": "REXML::Parsers::XPathParser", "m": "AXIS", "r": ""}, {"p": "REXML::Parsers::XPathParser", "m": "LITERAL", "r": ""}, {"p": "REXML::Parsers::XPathParser", "m": "NCNAMETEST", "r": ""}, {"p": "REXML::Parsers::XPathParser", "m": "NODE_TYPE", "r": ""}, {"p": "REXML::Parsers::XPathParser", "m": "NT", "r": ""}, {"p": "REXML::Parsers::XPathParser", "m": "NUMBER", "r": ""}, {"p": "REXML::Parsers::XPathParser", "m": "PI", "r": ""}, {"p": "REXML::Parsers::XPathParser", "m": "QNAME", "r": ""}, {"p": "REXML::Parsers::XPathParser", "m": "VARIABLE_REFERENCE", "r": ""}, {"p": "REXML::Validation::RelaxNG", "m": "EMPTY", "r": ""}, {"p": "REXML::Validation::RelaxNG", "m": "INFINITY", "r": ""}, {"p": "REXML::Validation::RelaxNG", "m": "TEXT", "r": ""}, {"p": "REXML::Validation::Validator", "m": "NILEVENT", "r": ""}, {"p": "RSS::Atom", "m": "URI", "r": ""}, {"p": "RSS::Atom", "m": "XHTML_URI", "r": ""}, {"p": "RSS::ContentModel", "m": "ELEMENTS", "r": ""}, {"p": "RSS::DublincoreModel", "m": "DATE_ELEMENTS", "r": ""}, {"p": "RSS::DublincoreModel", "m": "ELEMENTS", "r": ""}, {"p": "RSS::DublincoreModel", "m": "ELEMENT_NAME_INFOS", "r": ""}, {"p": "RSS::DublincoreModel", "m": "TEXT_ELEMENTS", "r": ""}, {"p": "RSS::Element", "m": "GET_ATTRIBUTES", "r": ""}, {"p": "RSS::Element", "m": "HAVE_CHILDREN_ELEMENTS", "r": ""}, {"p": "RSS::Element", "m": "INDENT", "r": ""}, {"p": "RSS::Element", "m": "MODELS", "r": ""}, {"p": "RSS::Element", "m": "MUST_CALL_VALIDATORS", "r": ""}, {"p": "RSS::Element", "m": "NEED_INITIALIZE_VARIABLES", "r": ""}, {"p": "RSS::Element", "m": "PLURAL_FORMS", "r": ""}, {"p": "RSS::Element", "m": "TO_ELEMENT_METHODS", "r": ""}, {"p": "RSS::ITunesBaseModel", "m": "ELEMENTS", "r": ""}, {"p": "RSS::ITunesBaseModel", "m": "ELEMENT_INFOS", "r": ""}, {"p": "RSS::ITunesChannelModel", "m": "ELEMENTS", "r": ""}, {"p": "RSS::ITunesChannelModel", "m": "ELEMENT_INFOS", "r": ""}, {"p": "RSS::ITunesItemModel", "m": "ELEMENT_INFOS", "r": ""}, {"p": "RSS::ListenerMixin", "m": "CONTENT_PATTERN", "r": ""}, {"p": "RSS::ListenerMixin", "m": "NAMESPLIT", "r": ""}, {"p": "RSS::Maker", "m": "MAKERS", "r": ""}, {"p": "RSS::RDF", "m": "PREFIX", "r": ""}, {"p": "RSS::RDF", "m": "URI", "r": ""}, {"p": "RSS::RSS09", "m": "ELEMENTS", "r": ""}, {"p": "RSS::RSS09", "m": "NSPOOL", "r": ""}, {"p": "RSS::RSS10", "m": "ELEMENTS", "r": ""}, {"p": "RSS::RSS10", "m": "NSPOOL", "r": ""}, {"p": "RSS::SlashModel", "m": "ELEMENT_INFOS", "r": ""}, {"p": "RSS::SyndicationModel", "m": "ELEMENTS", "r": ""}, {"p": "RSS::SyndicationModel", "m": "SY_UPDATEPERIOD_AVAILABLE_VALUES", "r": ""}, {"p": "RSS::XMLScanListener", "m": "ENTITIES", "r": ""}, {"p": "RSS::XMLStyleSheet", "m": "ATTRIBUTES", "r": ""}, {"p": "RSS::XMLStyleSheet", "m": "GUESS_TABLE", "r": ""}, {"p": "RSS::Atom::CommonModel", "m": "ELEMENTS", "r": ""}, {"p": "RSS::Atom::CommonModel", "m": "NSPOOL", "r": ""}, {"p": "RSS::Atom::Entry", "m": "Author", "r": ""}, {"p": "RSS::Atom::Entry", "m": "Category", "r": ""}, {"p": "RSS::Atom::Entry", "m": "Content", "r": ""}, {"p": "RSS::Atom::Entry", "m": "Contributor", "r": ""}, {"p": "RSS::Atom::Entry", "m": "Id", "r": ""}, {"p": "RSS::Atom::Entry", "m": "Link", "r": ""}, {"p": "RSS::Atom::Entry", "m": "Published", "r": ""}, {"p": "RSS::Atom::Entry", "m": "Rights", "r": ""}, {"p": "RSS::Atom::Entry", "m": "Source", "r": ""}, {"p": "RSS::Atom::Entry", "m": "Summary", "r": ""}, {"p": "RSS::Atom::Entry", "m": "Title", "r": ""}, {"p": "RSS::Atom::Entry", "m": "Updated", "r": ""}, {"p": "RSS::Atom::Feed::Entry", "m": "Author", "r": ""}, {"p": "RSS::Atom::Feed::Entry", "m": "Category", "r": ""}, {"p": "RSS::Atom::Feed::Entry", "m": "Contributor", "r": ""}, {"p": "RSS::Atom::Feed::Entry", "m": "Id", "r": ""}, {"p": "RSS::Atom::Feed::Entry", "m": "Link", "r": ""}, {"p": "RSS::Atom::Feed::Entry", "m": "Rights", "r": ""}, {"p": "RSS::Atom::Feed::Entry", "m": "Title", "r": ""}, {"p": "RSS::Atom::Feed::Entry", "m": "Updated", "r": ""}, {"p": "RSS::Atom::Feed::Entry::Source", "m": "Author", "r": ""}, {"p": "RSS::Atom::Feed::Entry::Source", "m": "Category", "r": ""}, {"p": "RSS::Atom::Feed::Entry::Source", "m": "Contributor", "r": ""}, {"p": "RSS::Atom::Feed::Entry::Source", "m": "Generator", "r": ""}, {"p": "RSS::Atom::Feed::Entry::Source", "m": "Icon", "r": ""}, {"p": "RSS::Atom::Feed::Entry::Source", "m": "Id", "r": ""}, {"p": "RSS::Atom::Feed::Entry::Source", "m": "Link", "r": ""}, {"p": "RSS::Atom::Feed::Entry::Source", "m": "Logo", "r": ""}, {"p": "RSS::Atom::Feed::Entry::Source", "m": "Rights", "r": ""}, {"p": "RSS::Atom::Feed::Entry::Source", "m": "Subtitle", "r": ""}, {"p": "RSS::Atom::Feed::Entry::Source", "m": "Title", "r": ""}, {"p": "RSS::Atom::Feed::Entry::Source", "m": "Updated", "r": ""}, {"p": "RSS::ImageFaviconModel::ImageFavicon", "m": "AVAILABLE_SIZES", "r": ""}, {"p": "RSS::ITunesChannelModel::ITunesCategory", "m": "ITunesCategory", "r": ""}, {"p": "RSS::Maker::Base", "m": "NEED_INITIALIZE_VARIABLES", "r": ""}, {"p": "RSS::Maker::Base", "m": "OTHER_ELEMENTS", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Channel", "m": "Authors", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Channel", "m": "Categories", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Channel", "m": "Contributors", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Channel", "m": "Copyright", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Channel", "m": "Links", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Channel", "m": "Title", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Items::Item", "m": "Authors", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Items::Item", "m": "Categories", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Items::Item", "m": "Content", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Items::Item", "m": "Contributors", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Items::Item", "m": "Description", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Items::Item", "m": "Enclosure", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Items::Item", "m": "Guid", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Items::Item", "m": "Links", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Items::Item", "m": "Rights", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Items::Item", "m": "Source", "r": ""}, {"p": "RSS::Maker::Atom::Entry::Items::Item", "m": "Title", "r": ""}, {"p": "RSS::Maker::ChannelBase::ITunesCategories::ITunesCategory", "m": "ITunesCategory", "r": ""}, {"p": "RSS::Maker::ItemsBase::ItemBase", "m": "AuthorsBase", "r": ""}, {"p": "RSS::Maker::ItemsBase::ItemBase", "m": "CategoriesBase", "r": ""}, {"p": "RSS::Maker::ItemsBase::ItemBase", "m": "ContributorsBase", "r": ""}, {"p": "RSS::Maker::ItemsBase::ItemBase", "m": "LinksBase", "r": ""}, {"p": "RSS::Maker::ItemsBase::ItemBase::SourceBase", "m": "AuthorsBase", "r": ""}, {"p": "RSS::Maker::ItemsBase::ItemBase::SourceBase", "m": "CategoriesBase", "r": ""}, {"p": "RSS::Maker::ItemsBase::ItemBase::SourceBase", "m": "ContributorsBase", "r": ""}, {"p": "RSS::Maker::ItemsBase::ItemBase::SourceBase", "m": "GeneratorBase", "r": ""}, {"p": "RSS::Maker::ItemsBase::ItemBase::SourceBase", "m": "LinksBase", "r": ""}, {"p": "RSS::TaxonomyTopicsModel::TaxonomyTopics::Bag", "m": "Li", "r": ""}, {"p": "RSS::RDF::Seq", "m": "Li", "r": ""}, {"p": "RSS::RDF::Channel::Items", "m": "Seq", "r": ""}, {"p": "RSS::Rss::Channel", "m": "Category", "r": ""}, {"p": "RSS::TaxonomyTopicsModel::TaxonomyTopics", "m": "Bag", "r": ""}, {"p": "RubyVM::InstructionSequence", "m": "RubyVM::InstructionSequence.load_from_binary(binary)", "r": "iseq"}, {"p": "RubyVM::InstructionSequence", "m": "RubyVM::InstructionSequence.load_from_binary_extra_data(binary)", "r": "str"}, {"p": "RubyVM::InstructionSequence", "m": "compile(source[, file[, path[, line[, options]]]])", "r": "iseq"}, {"p": "RubyVM::InstructionSequence", "m": "compile_file(file[, options])", "r": "iseq"}, {"p": "RubyVM::InstructionSequence", "m": "compile_option = options", "r": ""}, {"p": "RubyVM::InstructionSequence", "m": "compile_option", "r": "options"}, {"p": "RubyVM::InstructionSequence", "m": "disasm", "r": "str"}, {"p": "RubyVM::InstructionSequence", "m": "disasm(body)", "r": "str"}, {"p": "RubyVM::InstructionSequence", "m": "disassemble", "r": "str"}, {"p": "RubyVM::InstructionSequence", "m": "disassemble(body)", "r": "str"}, {"p": "RubyVM::InstructionSequence", "m": "each_child{|child_iseq| ...}", "r": "iseq"}, {"p": "RubyVM::InstructionSequence", "m": "eval", "r": "obj"}, {"p": "RubyVM::InstructionSequence", "m": "new(source[, file[, path[, line[, options]]]])", "r": "iseq"}, {"p": "RubyVM::InstructionSequence", "m": "to_a", "r": "ary"}, {"p": "RubyVM::InstructionSequence", "m": "to_binary(extra_data = nil)", "r": "binary str"}, {"p": "RubyVM::InstructionSequence", "m": "trace_points", "r": "ary"}, {"p": "Shell::CommandProcessor", "m": "[command, file1, file2]", "r": "true or false"}, {"p": "Shell::CommandProcessor", "m": "alias_command(alias, command, *options)", "r": "self"}, {"p": "Shell::CommandProcessor", "m": "cat(*filename)", "r": "Cat"}, {"p": "Shell::CommandProcessor", "m": "concat(*jobs)", "r": "Concat"}, {"p": "Shell::CommandProcessor", "m": "def_system_command(command, path)", "r": "Shell::SystemCommand"}, {"p": "Shell::CommandProcessor", "m": "echo(*strings)", "r": "Echo"}, {"p": "Shell::CommandProcessor", "m": "foreach(path, record_separator) { block }", "r": ""}, {"p": "Shell::CommandProcessor", "m": "foreach(path, record_separator)", "r": "Enumerator"}, {"p": "Shell::CommandProcessor", "m": "glob(pattern)", "r": "Glob"}, {"p": "Shell::CommandProcessor", "m": "mkdir(path)", "r": ""}, {"p": "Shell::CommandProcessor", "m": "open(path, mode, permissions) { block }", "r": ""}, {"p": "Shell::CommandProcessor", "m": "open(path, mode, permissions)", "r": "Enumerator"}, {"p": "Shell::CommandProcessor", "m": "out(device) { block }", "r": ""}, {"p": "Shell::CommandProcessor", "m": "rehash", "r": ""}, {"p": "Shell::CommandProcessor", "m": "rmdir(path)", "r": ""}, {"p": "Shell::CommandProcessor", "m": "system(command, *options)", "r": "SystemCommand"}, {"p": "Shell::CommandProcessor", "m": "tee(file)", "r": "Tee"}, {"p": "Shell::CommandProcessor", "m": "test(command, file1, file2)", "r": "true or false"}, {"p": "Shell::CommandProcessor", "m": "transact { block }", "r": ""}, {"p": "Shell::CommandProcessor", "m": "unalias_command(alias)", "r": "self"}, {"p": "Shell::CommandProcessor", "m": "undef_system_command(command)", "r": "self"}, {"p": "Shell::CommandProcessor", "m": "unlink(path)", "r": ""}, {"p": "Shell::CommandProcessor", "m": "NoDelegateMethods", "r": ""}, {"p": "Shell::Filter", "m": "< source", "r": ""}, {"p": "Shell::Filter", "m": "> source", "r": ""}, {"p": "Shell::Filter", "m": ">> source", "r": ""}, {"p": "Shell::Filter", "m": "each(record_separator=nil) { block }", "r": ""}, {"p": "Shell::Filter", "m": "filter1 + filter2", "r": ""}, {"p": "Shell::Filter", "m": "| filter", "r": ""}, {"p": "Shell::ProcessController", "m": "USING_AT_EXIT_WHEN_PROCESS_EXIT", "r": ""}, {"p": "Socket::AncillaryData", "m": "Socket::AncillaryData.int(family, cmsg_level, cmsg_type, integer)", "r": "ancillarydata"}, {"p": "Socket::AncillaryData", "m": "Socket::AncillaryData.ip_pktinfo(addr, ifindex)", "r": "ancdata"}, {"p": "Socket::AncillaryData", "m": "Socket::AncillaryData.ip_pktinfo(addr, ifindex, spec_dst)", "r": "ancdata"}, {"p": "Socket::AncillaryData", "m": "Socket::AncillaryData.ipv6_pktinfo(addr, ifindex)", "r": "ancdata"}, {"p": "Socket::AncillaryData", "m": "Socket::AncillaryData.new(family, cmsg_level, cmsg_type, cmsg_data)", "r": "ancillarydata"}, {"p": "Socket::AncillaryData", "m": "Socket::AncillaryData.unix_rights(io1, io2, ...)", "r": "ancillarydata"}, {"p": "Socket::AncillaryData", "m": "cmsg_is?(level, type)", "r": "true or false"}, {"p": "Socket::AncillaryData", "m": "data", "r": "string"}, {"p": "Socket::AncillaryData", "m": "family", "r": "integer"}, {"p": "Socket::AncillaryData", "m": "inspect", "r": "string"}, {"p": "Socket::AncillaryData", "m": "int", "r": "integer"}, {"p": "Socket::AncillaryData", "m": "ip_pktinfo", "r": "[addr, ifindex, spec_dst]"}, {"p": "Socket::AncillaryData", "m": "ipv6_pktinfo", "r": "[addr, ifindex]"}, {"p": "Socket::AncillaryData", "m": "ipv6_pktinfo_addr", "r": "addr"}, {"p": "Socket::AncillaryData", "m": "ipv6_pktinfo_ifindex", "r": "addr"}, {"p": "Socket::AncillaryData", "m": "level", "r": "integer"}, {"p": "Socket::AncillaryData", "m": "timestamp", "r": "time"}, {"p": "Socket::AncillaryData", "m": "type", "r": "integer"}, {"p": "Socket::AncillaryData", "m": "unix_rights", "r": "array-of-IOs or nil"}, {"p": "Socket::Constants", "m": "AF_APPLETALK", "r": ""}, {"p": "Socket::Constants", "m": "AF_ATM", "r": ""}, {"p": "Socket::Constants", "m": "AF_AX25", "r": ""}, {"p": "Socket::Constants", "m": "AF_CCITT", "r": ""}, {"p": "Socket::Constants", "m": "AF_CHAOS", "r": ""}, {"p": "Socket::Constants", "m": "AF_CNT", "r": ""}, {"p": "Socket::Constants", "m": "AF_COIP", "r": ""}, {"p": "Socket::Constants", "m": "AF_DATAKIT", "r": ""}, {"p": "Socket::Constants", "m": "AF_DEC", "r": ""}, {"p": "Socket::Constants", "m": "AF_DLI", "r": ""}, {"p": "Socket::Constants", "m": "AF_E164", "r": ""}, {"p": "Socket::Constants", "m": "AF_ECMA", "r": ""}, {"p": "Socket::Constants", "m": "AF_HYLINK", "r": ""}, {"p": "Socket::Constants", "m": "AF_IMPLINK", "r": ""}, {"p": "Socket::Constants", "m": "AF_INET", "r": ""}, {"p": "Socket::Constants", "m": "AF_INET6", "r": ""}, {"p": "Socket::Constants", "m": "AF_IPX", "r": ""}, {"p": "Socket::Constants", "m": "AF_ISDN", "r": ""}, {"p": "Socket::Constants", "m": "AF_ISO", "r": ""}, {"p": "Socket::Constants", "m": "AF_LAT", "r": ""}, {"p": "Socket::Constants", "m": "AF_LINK", "r": ""}, {"p": "Socket::Constants", "m": "AF_LOCAL", "r": ""}, {"p": "Socket::Constants", "m": "AF_MAX", "r": ""}, {"p": "Socket::Constants", "m": "AF_NATM", "r": ""}, {"p": "Socket::Constants", "m": "AF_NDRV", "r": ""}, {"p": "Socket::Constants", "m": "AF_NETBIOS", "r": ""}, {"p": "Socket::Constants", "m": "AF_NETGRAPH", "r": ""}, {"p": "Socket::Constants", "m": "AF_NS", "r": ""}, {"p": "Socket::Constants", "m": "AF_OSI", "r": ""}, {"p": "Socket::Constants", "m": "AF_PACKET", "r": ""}, {"p": "Socket::Constants", "m": "AF_PPP", "r": ""}, {"p": "Socket::Constants", "m": "AF_PUP", "r": ""}, {"p": "Socket::Constants", "m": "AF_ROUTE", "r": ""}, {"p": "Socket::Constants", "m": "AF_SIP", "r": ""}, {"p": "Socket::Constants", "m": "AF_SNA", "r": ""}, {"p": "Socket::Constants", "m": "AF_SYSTEM", "r": ""}, {"p": "Socket::Constants", "m": "AF_UNIX", "r": ""}, {"p": "Socket::Constants", "m": "AF_UNSPEC", "r": ""}, {"p": "Socket::Constants", "m": "AI_ADDRCONFIG", "r": ""}, {"p": "Socket::Constants", "m": "AI_ALL", "r": ""}, {"p": "Socket::Constants", "m": "AI_CANONNAME", "r": ""}, {"p": "Socket::Constants", "m": "AI_DEFAULT", "r": ""}, {"p": "Socket::Constants", "m": "AI_MASK", "r": ""}, {"p": "Socket::Constants", "m": "AI_NUMERICHOST", "r": ""}, {"p": "Socket::Constants", "m": "AI_NUMERICSERV", "r": ""}, {"p": "Socket::Constants", "m": "AI_PASSIVE", "r": ""}, {"p": "Socket::Constants", "m": "AI_V4MAPPED", "r": ""}, {"p": "Socket::Constants", "m": "AI_V4MAPPED_CFG", "r": ""}, {"p": "Socket::Constants", "m": "EAI_ADDRFAMILY", "r": ""}, {"p": "Socket::Constants", "m": "EAI_AGAIN", "r": ""}, {"p": "Socket::Constants", "m": "EAI_BADFLAGS", "r": ""}, {"p": "Socket::Constants", "m": "EAI_BADHINTS", "r": ""}, {"p": "Socket::Constants", "m": "EAI_FAIL", "r": ""}, {"p": "Socket::Constants", "m": "EAI_FAMILY", "r": ""}, {"p": "Socket::Constants", "m": "EAI_MAX", "r": ""}, {"p": "Socket::Constants", "m": "EAI_MEMORY", "r": ""}, {"p": "Socket::Constants", "m": "EAI_NODATA", "r": ""}, {"p": "Socket::Constants", "m": "EAI_NONAME", "r": ""}, {"p": "Socket::Constants", "m": "EAI_OVERFLOW", "r": ""}, {"p": "Socket::Constants", "m": "EAI_PROTOCOL", "r": ""}, {"p": "Socket::Constants", "m": "EAI_SERVICE", "r": ""}, {"p": "Socket::Constants", "m": "EAI_SOCKTYPE", "r": ""}, {"p": "Socket::Constants", "m": "EAI_SYSTEM", "r": ""}, {"p": "Socket::Constants", "m": "IFF_802_1Q_VLAN", "r": ""}, {"p": "Socket::Constants", "m": "IFF_ALLMULTI", "r": ""}, {"p": "Socket::Constants", "m": "IFF_ALTPHYS", "r": ""}, {"p": "Socket::Constants", "m": "IFF_AUTOMEDIA", "r": ""}, {"p": "Socket::Constants", "m": "IFF_BONDING", "r": ""}, {"p": "Socket::Constants", "m": "IFF_BRIDGE_PORT", "r": ""}, {"p": "Socket::Constants", "m": "IFF_BROADCAST", "r": ""}, {"p": "Socket::Constants", "m": "IFF_CANTCHANGE", "r": ""}, {"p": "Socket::Constants", "m": "IFF_CANTCONFIG", "r": ""}, {"p": "Socket::Constants", "m": "IFF_DEBUG", "r": ""}, {"p": "Socket::Constants", "m": "IFF_DISABLE_NETPOLL", "r": ""}, {"p": "Socket::Constants", "m": "IFF_DONT_BRIDGE", "r": ""}, {"p": "Socket::Constants", "m": "IFF_DORMANT", "r": ""}, {"p": "Socket::Constants", "m": "IFF_DRV_OACTIVE", "r": ""}, {"p": "Socket::Constants", "m": "IFF_DRV_RUNNING", "r": ""}, {"p": "Socket::Constants", "m": "IFF_DYING", "r": ""}, {"p": "Socket::Constants", "m": "IFF_DYNAMIC", "r": ""}, {"p": "Socket::Constants", "m": "IFF_EBRIDGE", "r": ""}, {"p": "Socket::Constants", "m": "IFF_ECHO", "r": ""}, {"p": "Socket::Constants", "m": "IFF_ISATAP", "r": ""}, {"p": "Socket::Constants", "m": "IFF_LINK0", "r": ""}, {"p": "Socket::Constants", "m": "IFF_LINK1", "r": ""}, {"p": "Socket::Constants", "m": "IFF_LINK2", "r": ""}, {"p": "Socket::Constants", "m": "IFF_LIVE_ADDR_CHANGE", "r": ""}, {"p": "Socket::Constants", "m": "IFF_LOOPBACK", "r": ""}, {"p": "Socket::Constants", "m": "IFF_LOWER_UP", "r": ""}, {"p": "Socket::Constants", "m": "IFF_MACVLAN_PORT", "r": ""}, {"p": "Socket::Constants", "m": "IFF_MASTER", "r": ""}, {"p": "Socket::Constants", "m": "IFF_MASTER_8023AD", "r": ""}, {"p": "Socket::Constants", "m": "IFF_MASTER_ALB", "r": ""}, {"p": "Socket::Constants", "m": "IFF_MASTER_ARPMON", "r": ""}, {"p": "Socket::Constants", "m": "IFF_MONITOR", "r": ""}, {"p": "Socket::Constants", "m": "IFF_MULTICAST", "r": ""}, {"p": "Socket::Constants", "m": "IFF_NOARP", "r": ""}, {"p": "Socket::Constants", "m": "IFF_NOTRAILERS", "r": ""}, {"p": "Socket::Constants", "m": "IFF_OACTIVE", "r": ""}, {"p": "Socket::Constants", "m": "IFF_OVS_DATAPATH", "r": ""}, {"p": "Socket::Constants", "m": "IFF_POINTOPOINT", "r": ""}, {"p": "Socket::Constants", "m": "IFF_PORTSEL", "r": ""}, {"p": "Socket::Constants", "m": "IFF_PPROMISC", "r": ""}, {"p": "Socket::Constants", "m": "IFF_PROMISC", "r": ""}, {"p": "Socket::Constants", "m": "IFF_RENAMING", "r": ""}, {"p": "Socket::Constants", "m": "IFF_ROUTE", "r": ""}, {"p": "Socket::Constants", "m": "IFF_RUNNING", "r": ""}, {"p": "Socket::Constants", "m": "IFF_SIMPLEX", "r": ""}, {"p": "Socket::Constants", "m": "IFF_SLAVE", "r": ""}, {"p": "Socket::Constants", "m": "IFF_SLAVE_INACTIVE", "r": ""}, {"p": "Socket::Constants", "m": "IFF_SLAVE_NEEDARP", "r": ""}, {"p": "Socket::Constants", "m": "IFF_SMART", "r": ""}, {"p": "Socket::Constants", "m": "IFF_STATICARP", "r": ""}, {"p": "Socket::Constants", "m": "IFF_SUPP_NOFCS", "r": ""}, {"p": "Socket::Constants", "m": "IFF_TEAM_PORT", "r": ""}, {"p": "Socket::Constants", "m": "IFF_TX_SKB_SHARING", "r": ""}, {"p": "Socket::Constants", "m": "IFF_UNICAST_FLT", "r": ""}, {"p": "Socket::Constants", "m": "IFF_UP", "r": ""}, {"p": "Socket::Constants", "m": "IFF_VOLATILE", "r": ""}, {"p": "Socket::Constants", "m": "IFF_WAN_HDLC", "r": ""}, {"p": "Socket::Constants", "m": "IFF_XMIT_DST_RELEASE", "r": ""}, {"p": "Socket::Constants", "m": "IFNAMSIZ", "r": ""}, {"p": "Socket::Constants", "m": "IF_NAMESIZE", "r": ""}, {"p": "Socket::Constants", "m": "INADDR_ALLHOSTS_GROUP", "r": ""}, {"p": "Socket::Constants", "m": "INADDR_ANY", "r": ""}, {"p": "Socket::Constants", "m": "INADDR_BROADCAST", "r": ""}, {"p": "Socket::Constants", "m": "INADDR_LOOPBACK", "r": ""}, {"p": "Socket::Constants", "m": "INADDR_MAX_LOCAL_GROUP", "r": ""}, {"p": "Socket::Constants", "m": "INADDR_NONE", "r": ""}, {"p": "Socket::Constants", "m": "INADDR_UNSPEC_GROUP", "r": ""}, {"p": "Socket::Constants", "m": "INET6_ADDRSTRLEN", "r": ""}, {"p": "Socket::Constants", "m": "INET_ADDRSTRLEN", "r": ""}, {"p": "Socket::Constants", "m": "IPPORT_RESERVED", "r": ""}, {"p": "Socket::Constants", "m": "IPPORT_USERRESERVED", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_AH", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_BIP", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_DSTOPTS", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_EGP", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_EON", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_ESP", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_FRAGMENT", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_GGP", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_HELLO", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_HOPOPTS", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_ICMP", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_ICMPV6", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_IDP", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_IGMP", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_IP", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_IPV6", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_MAX", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_ND", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_NONE", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_PUP", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_RAW", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_ROUTING", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_TCP", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_TP", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_UDP", "r": ""}, {"p": "Socket::Constants", "m": "IPPROTO_XTP", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_CHECKSUM", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_DONTFRAG", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_DSTOPTS", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_HOPLIMIT", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_HOPOPTS", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_JOIN_GROUP", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_LEAVE_GROUP", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_MULTICAST_HOPS", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_MULTICAST_IF", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_MULTICAST_LOOP", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_NEXTHOP", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_PATHMTU", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_PKTINFO", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_RECVDSTOPTS", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_RECVHOPLIMIT", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_RECVHOPOPTS", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_RECVPATHMTU", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_RECVPKTINFO", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_RECVRTHDR", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_RECVTCLASS", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_RTHDR", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_RTHDRDSTOPTS", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_RTHDR_TYPE_0", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_TCLASS", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_UNICAST_HOPS", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_USE_MIN_MTU", "r": ""}, {"p": "Socket::Constants", "m": "IPV6_V6ONLY", "r": ""}, {"p": "Socket::Constants", "m": "IPX_TYPE", "r": ""}, {"p": "Socket::Constants", "m": "IP_ADD_MEMBERSHIP", "r": ""}, {"p": "Socket::Constants", "m": "IP_ADD_SOURCE_MEMBERSHIP", "r": ""}, {"p": "Socket::Constants", "m": "IP_BLOCK_SOURCE", "r": ""}, {"p": "Socket::Constants", "m": "IP_DEFAULT_MULTICAST_LOOP", "r": ""}, {"p": "Socket::Constants", "m": "IP_DEFAULT_MULTICAST_TTL", "r": ""}, {"p": "Socket::Constants", "m": "IP_DONTFRAG", "r": ""}, {"p": "Socket::Constants", "m": "IP_DROP_MEMBERSHIP", "r": ""}, {"p": "Socket::Constants", "m": "IP_DROP_SOURCE_MEMBERSHIP", "r": ""}, {"p": "Socket::Constants", "m": "IP_FREEBIND", "r": ""}, {"p": "Socket::Constants", "m": "IP_HDRINCL", "r": ""}, {"p": "Socket::Constants", "m": "IP_IPSEC_POLICY", "r": ""}, {"p": "Socket::Constants", "m": "IP_MAX_MEMBERSHIPS", "r": ""}, {"p": "Socket::Constants", "m": "IP_MINTTL", "r": ""}, {"p": "Socket::Constants", "m": "IP_MSFILTER", "r": ""}, {"p": "Socket::Constants", "m": "IP_MTU", "r": ""}, {"p": "Socket::Constants", "m": "IP_MTU_DISCOVER", "r": ""}, {"p": "Socket::Constants", "m": "IP_MULTICAST_IF", "r": ""}, {"p": "Socket::Constants", "m": "IP_MULTICAST_LOOP", "r": ""}, {"p": "Socket::Constants", "m": "IP_MULTICAST_TTL", "r": ""}, {"p": "Socket::Constants", "m": "IP_ONESBCAST", "r": ""}, {"p": "Socket::Constants", "m": "IP_OPTIONS", "r": ""}, {"p": "Socket::Constants", "m": "IP_PASSSEC", "r": ""}, {"p": "Socket::Constants", "m": "IP_PKTINFO", "r": ""}, {"p": "Socket::Constants", "m": "IP_PKTOPTIONS", "r": ""}, {"p": "Socket::Constants", "m": "IP_PMTUDISC_DO", "r": ""}, {"p": "Socket::Constants", "m": "IP_PMTUDISC_DONT", "r": ""}, {"p": "Socket::Constants", "m": "IP_PMTUDISC_WANT", "r": ""}, {"p": "Socket::Constants", "m": "IP_PORTRANGE", "r": ""}, {"p": "Socket::Constants", "m": "IP_RECVDSTADDR", "r": ""}, {"p": "Socket::Constants", "m": "IP_RECVERR", "r": ""}, {"p": "Socket::Constants", "m": "IP_RECVIF", "r": ""}, {"p": "Socket::Constants", "m": "IP_RECVOPTS", "r": ""}, {"p": "Socket::Constants", "m": "IP_RECVRETOPTS", "r": ""}, {"p": "Socket::Constants", "m": "IP_RECVSLLA", "r": ""}, {"p": "Socket::Constants", "m": "IP_RECVTOS", "r": ""}, {"p": "Socket::Constants", "m": "IP_RECVTTL", "r": ""}, {"p": "Socket::Constants", "m": "IP_RETOPTS", "r": ""}, {"p": "Socket::Constants", "m": "IP_ROUTER_ALERT", "r": ""}, {"p": "Socket::Constants", "m": "IP_SENDSRCADDR", "r": ""}, {"p": "Socket::Constants", "m": "IP_TOS", "r": ""}, {"p": "Socket::Constants", "m": "IP_TRANSPARENT", "r": ""}, {"p": "Socket::Constants", "m": "IP_TTL", "r": ""}, {"p": "Socket::Constants", "m": "IP_UNBLOCK_SOURCE", "r": ""}, {"p": "Socket::Constants", "m": "IP_XFRM_POLICY", "r": ""}, {"p": "Socket::Constants", "m": "LOCAL_CONNWAIT", "r": ""}, {"p": "Socket::Constants", "m": "LOCAL_CREDS", "r": ""}, {"p": "Socket::Constants", "m": "LOCAL_PEERCRED", "r": ""}, {"p": "Socket::Constants", "m": "MCAST_BLOCK_SOURCE", "r": ""}, {"p": "Socket::Constants", "m": "MCAST_EXCLUDE", "r": ""}, {"p": "Socket::Constants", "m": "MCAST_INCLUDE", "r": ""}, {"p": "Socket::Constants", "m": "MCAST_JOIN_GROUP", "r": ""}, {"p": "Socket::Constants", "m": "MCAST_JOIN_SOURCE_GROUP", "r": ""}, {"p": "Socket::Constants", "m": "MCAST_LEAVE_GROUP", "r": ""}, {"p": "Socket::Constants", "m": "MCAST_LEAVE_SOURCE_GROUP", "r": ""}, {"p": "Socket::Constants", "m": "MCAST_MSFILTER", "r": ""}, {"p": "Socket::Constants", "m": "MCAST_UNBLOCK_SOURCE", "r": ""}, {"p": "Socket::Constants", "m": "MSG_COMPAT", "r": ""}, {"p": "Socket::Constants", "m": "MSG_CONFIRM", "r": ""}, {"p": "Socket::Constants", "m": "MSG_CTRUNC", "r": ""}, {"p": "Socket::Constants", "m": "MSG_DONTROUTE", "r": ""}, {"p": "Socket::Constants", "m": "MSG_DONTWAIT", "r": ""}, {"p": "Socket::Constants", "m": "MSG_EOF", "r": ""}, {"p": "Socket::Constants", "m": "MSG_EOR", "r": ""}, {"p": "Socket::Constants", "m": "MSG_ERRQUEUE", "r": ""}, {"p": "Socket::Constants", "m": "MSG_FASTOPEN", "r": ""}, {"p": "Socket::Constants", "m": "MSG_FIN", "r": ""}, {"p": "Socket::Constants", "m": "MSG_FLUSH", "r": ""}, {"p": "Socket::Constants", "m": "MSG_HAVEMORE", "r": ""}, {"p": "Socket::Constants", "m": "MSG_HOLD", "r": ""}, {"p": "Socket::Constants", "m": "MSG_MORE", "r": ""}, {"p": "Socket::Constants", "m": "MSG_NOSIGNAL", "r": ""}, {"p": "Socket::Constants", "m": "MSG_OOB", "r": ""}, {"p": "Socket::Constants", "m": "MSG_PEEK", "r": ""}, {"p": "Socket::Constants", "m": "MSG_PROXY", "r": ""}, {"p": "Socket::Constants", "m": "MSG_RCVMORE", "r": ""}, {"p": "Socket::Constants", "m": "MSG_RST", "r": ""}, {"p": "Socket::Constants", "m": "MSG_SEND", "r": ""}, {"p": "Socket::Constants", "m": "MSG_SYN", "r": ""}, {"p": "Socket::Constants", "m": "MSG_TRUNC", "r": ""}, {"p": "Socket::Constants", "m": "MSG_WAITALL", "r": ""}, {"p": "Socket::Constants", "m": "NI_DGRAM", "r": ""}, {"p": "Socket::Constants", "m": "NI_MAXHOST", "r": ""}, {"p": "Socket::Constants", "m": "NI_MAXSERV", "r": ""}, {"p": "Socket::Constants", "m": "NI_NAMEREQD", "r": ""}, {"p": "Socket::Constants", "m": "NI_NOFQDN", "r": ""}, {"p": "Socket::Constants", "m": "NI_NUMERICHOST", "r": ""}, {"p": "Socket::Constants", "m": "NI_NUMERICSERV", "r": ""}, {"p": "Socket::Constants", "m": "PF_APPLETALK", "r": ""}, {"p": "Socket::Constants", "m": "PF_ATM", "r": ""}, {"p": "Socket::Constants", "m": "PF_AX25", "r": ""}, {"p": "Socket::Constants", "m": "PF_CCITT", "r": ""}, {"p": "Socket::Constants", "m": "PF_CHAOS", "r": ""}, {"p": "Socket::Constants", "m": "PF_CNT", "r": ""}, {"p": "Socket::Constants", "m": "PF_COIP", "r": ""}, {"p": "Socket::Constants", "m": "PF_DATAKIT", "r": ""}, {"p": "Socket::Constants", "m": "PF_DEC", "r": ""}, {"p": "Socket::Constants", "m": "PF_DLI", "r": ""}, {"p": "Socket::Constants", "m": "PF_ECMA", "r": ""}, {"p": "Socket::Constants", "m": "PF_HYLINK", "r": ""}, {"p": "Socket::Constants", "m": "PF_IMPLINK", "r": ""}, {"p": "Socket::Constants", "m": "PF_INET", "r": ""}, {"p": "Socket::Constants", "m": "PF_INET6", "r": ""}, {"p": "Socket::Constants", "m": "PF_IPX", "r": ""}, {"p": "Socket::Constants", "m": "PF_ISDN", "r": ""}, {"p": "Socket::Constants", "m": "PF_ISO", "r": ""}, {"p": "Socket::Constants", "m": "PF_KEY", "r": ""}, {"p": "Socket::Constants", "m": "PF_LAT", "r": ""}, {"p": "Socket::Constants", "m": "PF_LINK", "r": ""}, {"p": "Socket::Constants", "m": "PF_LOCAL", "r": ""}, {"p": "Socket::Constants", "m": "PF_MAX", "r": ""}, {"p": "Socket::Constants", "m": "PF_NATM", "r": ""}, {"p": "Socket::Constants", "m": "PF_NDRV", "r": ""}, {"p": "Socket::Constants", "m": "PF_NETBIOS", "r": ""}, {"p": "Socket::Constants", "m": "PF_NETGRAPH", "r": ""}, {"p": "Socket::Constants", "m": "PF_NS", "r": ""}, {"p": "Socket::Constants", "m": "PF_OSI", "r": ""}, {"p": "Socket::Constants", "m": "PF_PACKET", "r": ""}, {"p": "Socket::Constants", "m": "PF_PIP", "r": ""}, {"p": "Socket::Constants", "m": "PF_PPP", "r": ""}, {"p": "Socket::Constants", "m": "PF_PUP", "r": ""}, {"p": "Socket::Constants", "m": "PF_ROUTE", "r": ""}, {"p": "Socket::Constants", "m": "PF_RTIP", "r": ""}, {"p": "Socket::Constants", "m": "PF_SIP", "r": ""}, {"p": "Socket::Constants", "m": "PF_SNA", "r": ""}, {"p": "Socket::Constants", "m": "PF_SYSTEM", "r": ""}, {"p": "Socket::Constants", "m": "PF_UNIX", "r": ""}, {"p": "Socket::Constants", "m": "PF_UNSPEC", "r": ""}, {"p": "Socket::Constants", "m": "PF_XTP", "r": ""}, {"p": "Socket::Constants", "m": "SCM_BINTIME", "r": ""}, {"p": "Socket::Constants", "m": "SCM_CREDENTIALS", "r": ""}, {"p": "Socket::Constants", "m": "SCM_CREDS", "r": ""}, {"p": "Socket::Constants", "m": "SCM_RIGHTS", "r": ""}, {"p": "Socket::Constants", "m": "SCM_TIMESTAMP", "r": ""}, {"p": "Socket::Constants", "m": "SCM_TIMESTAMPING", "r": ""}, {"p": "Socket::Constants", "m": "SCM_TIMESTAMPNS", "r": ""}, {"p": "Socket::Constants", "m": "SCM_UCRED", "r": ""}, {"p": "Socket::Constants", "m": "SCM_WIFI_STATUS", "r": ""}, {"p": "Socket::Constants", "m": "SHUT_RD", "r": ""}, {"p": "Socket::Constants", "m": "SHUT_RDWR", "r": ""}, {"p": "Socket::Constants", "m": "SHUT_WR", "r": ""}, {"p": "Socket::Constants", "m": "SOCK_DGRAM", "r": ""}, {"p": "Socket::Constants", "m": "SOCK_PACKET", "r": ""}, {"p": "Socket::Constants", "m": "SOCK_RAW", "r": ""}, {"p": "Socket::Constants", "m": "SOCK_RDM", "r": ""}, {"p": "Socket::Constants", "m": "SOCK_SEQPACKET", "r": ""}, {"p": "Socket::Constants", "m": "SOCK_STREAM", "r": ""}, {"p": "Socket::Constants", "m": "SOL_ATALK", "r": ""}, {"p": "Socket::Constants", "m": "SOL_AX25", "r": ""}, {"p": "Socket::Constants", "m": "SOL_IP", "r": ""}, {"p": "Socket::Constants", "m": "SOL_IPX", "r": ""}, {"p": "Socket::Constants", "m": "SOL_SOCKET", "r": ""}, {"p": "Socket::Constants", "m": "SOL_TCP", "r": ""}, {"p": "Socket::Constants", "m": "SOL_UDP", "r": ""}, {"p": "Socket::Constants", "m": "SOMAXCONN", "r": ""}, {"p": "Socket::Constants", "m": "SOPRI_BACKGROUND", "r": ""}, {"p": "Socket::Constants", "m": "SOPRI_INTERACTIVE", "r": ""}, {"p": "Socket::Constants", "m": "SOPRI_NORMAL", "r": ""}, {"p": "Socket::Constants", "m": "SO_ACCEPTCONN", "r": ""}, {"p": "Socket::Constants", "m": "SO_ACCEPTFILTER", "r": ""}, {"p": "Socket::Constants", "m": "SO_ALLZONES", "r": ""}, {"p": "Socket::Constants", "m": "SO_ATTACH_FILTER", "r": ""}, {"p": "Socket::Constants", "m": "SO_BINDTODEVICE", "r": ""}, {"p": "Socket::Constants", "m": "SO_BINTIME", "r": ""}, {"p": "Socket::Constants", "m": "SO_BPF_EXTENSIONS", "r": ""}, {"p": "Socket::Constants", "m": "SO_BROADCAST", "r": ""}, {"p": "Socket::Constants", "m": "SO_BUSY_POLL", "r": ""}, {"p": "Socket::Constants", "m": "SO_DEBUG", "r": ""}, {"p": "Socket::Constants", "m": "SO_DETACH_FILTER", "r": ""}, {"p": "Socket::Constants", "m": "SO_DOMAIN", "r": ""}, {"p": "Socket::Constants", "m": "SO_DONTROUTE", "r": ""}, {"p": "Socket::Constants", "m": "SO_DONTTRUNC", "r": ""}, {"p": "Socket::Constants", "m": "SO_ERROR", "r": ""}, {"p": "Socket::Constants", "m": "SO_GET_FILTER", "r": ""}, {"p": "Socket::Constants", "m": "SO_KEEPALIVE", "r": ""}, {"p": "Socket::Constants", "m": "SO_LINGER", "r": ""}, {"p": "Socket::Constants", "m": "SO_LOCK_FILTER", "r": ""}, {"p": "Socket::Constants", "m": "SO_MAC_EXEMPT", "r": ""}, {"p": "Socket::Constants", "m": "SO_MARK", "r": ""}, {"p": "Socket::Constants", "m": "SO_MAX_PACING_RATE", "r": ""}, {"p": "Socket::Constants", "m": "SO_NKE", "r": ""}, {"p": "Socket::Constants", "m": "SO_NOFCS", "r": ""}, {"p": "Socket::Constants", "m": "SO_NOSIGPIPE", "r": ""}, {"p": "Socket::Constants", "m": "SO_NO_CHECK", "r": ""}, {"p": "Socket::Constants", "m": "SO_NREAD", "r": ""}, {"p": "Socket::Constants", "m": "SO_OOBINLINE", "r": ""}, {"p": "Socket::Constants", "m": "SO_PASSCRED", "r": ""}, {"p": "Socket::Constants", "m": "SO_PASSSEC", "r": ""}, {"p": "Socket::Constants", "m": "SO_PEEK_OFF", "r": ""}, {"p": "Socket::Constants", "m": "SO_PEERCRED", "r": ""}, {"p": "Socket::Constants", "m": "SO_PEERNAME", "r": ""}, {"p": "Socket::Constants", "m": "SO_PEERSEC", "r": ""}, {"p": "Socket::Constants", "m": "SO_PRIORITY", "r": ""}, {"p": "Socket::Constants", "m": "SO_PROTOCOL", "r": ""}, {"p": "Socket::Constants", "m": "SO_RCVBUF", "r": ""}, {"p": "Socket::Constants", "m": "SO_RCVBUFFORCE", "r": ""}, {"p": "Socket::Constants", "m": "SO_RCVLOWAT", "r": ""}, {"p": "Socket::Constants", "m": "SO_RCVTIMEO", "r": ""}, {"p": "Socket::Constants", "m": "SO_RECVUCRED", "r": ""}, {"p": "Socket::Constants", "m": "SO_REUSEADDR", "r": ""}, {"p": "Socket::Constants", "m": "SO_REUSEPORT", "r": ""}, {"p": "Socket::Constants", "m": "SO_RXQ_OVFL", "r": ""}, {"p": "Socket::Constants", "m": "SO_SECURITY_AUTHENTICATION", "r": ""}, {"p": "Socket::Constants", "m": "SO_SECURITY_ENCRYPTION_NETWORK", "r": ""}, {"p": "Socket::Constants", "m": "SO_SECURITY_ENCRYPTION_TRANSPORT", "r": ""}, {"p": "Socket::Constants", "m": "SO_SELECT_ERR_QUEUE", "r": ""}, {"p": "Socket::Constants", "m": "SO_SNDBUF", "r": ""}, {"p": "Socket::Constants", "m": "SO_SNDBUFFORCE", "r": ""}, {"p": "Socket::Constants", "m": "SO_SNDLOWAT", "r": ""}, {"p": "Socket::Constants", "m": "SO_SNDTIMEO", "r": ""}, {"p": "Socket::Constants", "m": "SO_TIMESTAMP", "r": ""}, {"p": "Socket::Constants", "m": "SO_TIMESTAMPING", "r": ""}, {"p": "Socket::Constants", "m": "SO_TIMESTAMPNS", "r": ""}, {"p": "Socket::Constants", "m": "SO_TYPE", "r": ""}, {"p": "Socket::Constants", "m": "SO_USELOOPBACK", "r": ""}, {"p": "Socket::Constants", "m": "SO_WANTMORE", "r": ""}, {"p": "Socket::Constants", "m": "SO_WANTOOBFLAG", "r": ""}, {"p": "Socket::Constants", "m": "SO_WIFI_STATUS", "r": ""}, {"p": "Socket::Constants", "m": "TCP_CONGESTION", "r": ""}, {"p": "Socket::Constants", "m": "TCP_COOKIE_TRANSACTIONS", "r": ""}, {"p": "Socket::Constants", "m": "TCP_CORK", "r": ""}, {"p": "Socket::Constants", "m": "TCP_DEFER_ACCEPT", "r": ""}, {"p": "Socket::Constants", "m": "TCP_FASTOPEN", "r": ""}, {"p": "Socket::Constants", "m": "TCP_INFO", "r": ""}, {"p": "Socket::Constants", "m": "TCP_KEEPCNT", "r": ""}, {"p": "Socket::Constants", "m": "TCP_KEEPIDLE", "r": ""}, {"p": "Socket::Constants", "m": "TCP_KEEPINTVL", "r": ""}, {"p": "Socket::Constants", "m": "TCP_LINGER2", "r": ""}, {"p": "Socket::Constants", "m": "TCP_MAXSEG", "r": ""}, {"p": "Socket::Constants", "m": "TCP_MD5SIG", "r": ""}, {"p": "Socket::Constants", "m": "TCP_NODELAY", "r": ""}, {"p": "Socket::Constants", "m": "TCP_NOOPT", "r": ""}, {"p": "Socket::Constants", "m": "TCP_NOPUSH", "r": ""}, {"p": "Socket::Constants", "m": "TCP_QUEUE_SEQ", "r": ""}, {"p": "Socket::Constants", "m": "TCP_QUICKACK", "r": ""}, {"p": "Socket::Constants", "m": "TCP_REPAIR", "r": ""}, {"p": "Socket::Constants", "m": "TCP_REPAIR_OPTIONS", "r": ""}, {"p": "Socket::Constants", "m": "TCP_REPAIR_QUEUE", "r": ""}, {"p": "Socket::Constants", "m": "TCP_SYNCNT", "r": ""}, {"p": "Socket::Constants", "m": "TCP_THIN_DUPACK", "r": ""}, {"p": "Socket::Constants", "m": "TCP_THIN_LINEAR_TIMEOUTS", "r": ""}, {"p": "Socket::Constants", "m": "TCP_TIMESTAMP", "r": ""}, {"p": "Socket::Constants", "m": "TCP_USER_TIMEOUT", "r": ""}, {"p": "Socket::Constants", "m": "TCP_WINDOW_CLAMP", "r": ""}, {"p": "Socket::Constants", "m": "UDP_CORK", "r": ""}, {"p": "Socket::Ifaddr", "m": "addr", "r": "addrinfo"}, {"p": "Socket::Ifaddr", "m": "broadaddr", "r": "addrinfo"}, {"p": "Socket::Ifaddr", "m": "dstaddr", "r": "addrinfo"}, {"p": "Socket::Ifaddr", "m": "flags", "r": "integer"}, {"p": "Socket::Ifaddr", "m": "ifindex", "r": "integer"}, {"p": "Socket::Ifaddr", "m": "inspect", "r": "string"}, {"p": "Socket::Ifaddr", "m": "name", "r": "string"}, {"p": "Socket::Ifaddr", "m": "netmask", "r": "addrinfo"}, {"p": "Socket::Ifaddr", "m": "vhid", "r": "Integer"}, {"p": "Socket::Option", "m": "Socket::Option.bool(family, level, optname, bool)", "r": "sockopt"}, {"p": "Socket::Option", "m": "Socket::Option.byte(family, level, optname, integer)", "r": "sockopt"}, {"p": "Socket::Option", "m": "Socket::Option.int(family, level, optname, integer)", "r": "sockopt"}, {"p": "Socket::Option", "m": "Socket::Option.ipv4_multicast_loop(integer)", "r": "sockopt"}, {"p": "Socket::Option", "m": "Socket::Option.ipv4_multicast_ttl(integer)", "r": "sockopt"}, {"p": "Socket::Option", "m": "Socket::Option.linger(onoff, secs)", "r": "sockopt"}, {"p": "Socket::Option", "m": "Socket::Option.new(family, level, optname, data)", "r": "sockopt"}, {"p": "Socket::Option", "m": "bool", "r": "true or false"}, {"p": "Socket::Option", "m": "byte", "r": "integer"}, {"p": "Socket::Option", "m": "data", "r": "string"}, {"p": "Socket::Option", "m": "family", "r": "integer"}, {"p": "Socket::Option", "m": "inspect", "r": "string"}, {"p": "Socket::Option", "m": "int", "r": "integer"}, {"p": "Socket::Option", "m": "ipv4_multicast_loop", "r": "integer"}, {"p": "Socket::Option", "m": "ipv4_multicast_ttl", "r": "integer"}, {"p": "Socket::Option", "m": "level", "r": "integer"}, {"p": "Socket::Option", "m": "linger", "r": "[bool, seconds]"}, {"p": "Socket::Option", "m": "optname", "r": "integer"}, {"p": "Socket::Option", "m": "to_s", "r": "string"}, {"p": "Socket::Option", "m": "unpack(template)", "r": "array"}, {"p": "Sync_m::Err::LockModeFailer", "m": "Message", "r": ""}, {"p": "Sync_m::Err::UnknownLocker", "m": "Message", "r": ""}, {"p": "Syslog::Logger", "m": "LEVEL_MAP", "r": ""}, {"p": "Syslog::Logger", "m": "VERSION", "r": ""}, {"p": "Syslog::Macros", "m": "LOG_MASK(priority_level)", "r": "priority_mask"}, {"p": "Syslog::Macros", "m": "LOG_UPTO(priority_level)", "r": "priority_mask"}, {"p": "URI::FTP", "m": "COMPONENT", "r": ""}, {"p": "URI::FTP", "m": "DEFAULT_PORT", "r": ""}, {"p": "URI::FTP", "m": "TYPECODE", "r": ""}, {"p": "URI::FTP", "m": "TYPECODE_PREFIX", "r": ""}, {"p": "URI::Generic", "m": "COMPONENT", "r": ""}, {"p": "URI::Generic", "m": "DEFAULT_PORT", "r": ""}, {"p": "URI::HTTP", "m": "COMPONENT", "r": ""}, {"p": "URI::HTTP", "m": "DEFAULT_PORT", "r": ""}, {"p": "URI::HTTPS", "m": "DEFAULT_PORT", "r": ""}, {"p": "URI::LDAP", "m": "COMPONENT", "r": ""}, {"p": "URI::LDAP", "m": "DEFAULT_PORT", "r": ""}, {"p": "URI::LDAP", "m": "SCOPE", "r": ""}, {"p": "URI::LDAPS", "m": "DEFAULT_PORT", "r": ""}, {"p": "URI::MailTo", "m": "COMPONENT", "r": ""}, {"p": "URI::MailTo", "m": "DEFAULT_PORT", "r": ""}, {"p": "URI::RFC2396_Parser", "m": "escape( str )", "r": ""}, {"p": "URI::RFC2396_Parser", "m": "escape( str, unsafe )", "r": ""}, {"p": "URI::RFC2396_Parser", "m": "extract( str )", "r": ""}, {"p": "URI::RFC2396_Parser", "m": "extract( str, schemes )", "r": ""}, {"p": "URI::RFC2396_Parser", "m": "extract( str, schemes ) {|item| block }", "r": ""}, {"p": "URI::RFC2396_Parser", "m": "unescape( str )", "r": ""}, {"p": "URI::RFC2396_Parser", "m": "unescape( str, unsafe )", "r": ""}, {"p": "WEBrick::AccessLog", "m": "AGENT_LOG_FORMAT", "r": ""}, {"p": "WEBrick::AccessLog", "m": "CLF", "r": ""}, {"p": "WEBrick::AccessLog", "m": "CLF_TIME_FORMAT", "r": ""}, {"p": "WEBrick::AccessLog", "m": "COMBINED_LOG_FORMAT", "r": ""}, {"p": "WEBrick::AccessLog", "m": "COMMON_LOG_FORMAT", "r": ""}, {"p": "WEBrick::AccessLog", "m": "REFERER_LOG_FORMAT", "r": ""}, {"p": "WEBrick::BasicLog", "m": "DEBUG", "r": ""}, {"p": "WEBrick::BasicLog", "m": "ERROR", "r": ""}, {"p": "WEBrick::BasicLog", "m": "FATAL", "r": ""}, {"p": "WEBrick::BasicLog", "m": "INFO", "r": ""}, {"p": "WEBrick::BasicLog", "m": "WARN", "r": ""}, {"p": "WEBrick::CGI", "m": "CGIError", "r": ""}, {"p": "WEBrick::Config", "m": "BasicAuth", "r": ""}, {"p": "WEBrick::Config", "m": "DigestAuth", "r": ""}, {"p": "WEBrick::Config", "m": "FileHandler", "r": ""}, {"p": "WEBrick::Config", "m": "General", "r": ""}, {"p": "WEBrick::Config", "m": "HTTP", "r": ""}, {"p": "WEBrick::Config", "m": "SSL", "r": ""}, {"p": "WEBrick::HTTPUtils", "m": "DefaultMimeTypes", "r": ""}, {"p": "WEBrick::Utils", "m": "RAND_CHARS", "r": ""}, {"p": "WEBrick::HTTPAuth::Authenticator", "m": "AuthScheme", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_ARRAY", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_BOOL", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_BSTR", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_BYREF", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_CY", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_DATE", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_DISPATCH", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_EMPTY", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_ERROR", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_I1", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_I2", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_I4", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_I8", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_INT", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_NULL", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_PTR", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_R4", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_R8", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_UI1", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_UI2", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_UI4", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_UI8", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_UINT", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_UNKNOWN", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_USERDEFINED", "r": ""}, {"p": "WIN32OLE::VARIANT", "m": "VT_VARIANT", "r": ""}, {"p": "YAML::DBM", "m": "delete(key)", "r": ""}, {"p": "YAML::DBM", "m": "delete_if { |key, value| ... }", "r": ""}, {"p": "YAML::DBM", "m": "each_pair { |key, value| ... }", "r": ""}, {"p": "YAML::DBM", "m": "each_value { |value| ... }", "r": ""}, {"p": "YAML::DBM", "m": "fetch( key ) { |key| ... }", "r": ""}, {"p": "YAML::DBM", "m": "fetch( key, ifnone = nil )", "r": ""}, {"p": "YAML::DBM", "m": "has_value?(value)", "r": ""}, {"p": "YAML::DBM", "m": "invert", "r": "hash"}, {"p": "YAML::DBM", "m": "key(value)", "r": "string"}, {"p": "YAML::DBM", "m": "reject { |key, value| ... }", "r": ""}, {"p": "YAML::DBM", "m": "replace(hash)", "r": "ydbm"}, {"p": "YAML::DBM", "m": "select { |key, value| ... }", "r": ""}, {"p": "YAML::DBM", "m": "select(*keys)", "r": ""}, {"p": "YAML::DBM", "m": "shift", "r": "[key, value]"}, {"p": "YAML::DBM", "m": "store(key, value)", "r": "value"}, {"p": "YAML::DBM", "m": "to_a", "r": "array"}, {"p": "YAML::DBM", "m": "to_hash", "r": "hash"}, {"p": "YAML::DBM", "m": "update(hash)", "r": "ydbm"}, {"p": "YAML::DBM", "m": "values", "r": ""}, {"p": "YAML::DBM", "m": "values_at(*keys)", "r": ""}, {"p": "YAML::DBM", "m": "ydbm[key] = value", "r": ""}, {"p": "YAML::DBM", "m": "ydbm[key]", "r": "value"}, {"p": "YAML::Store", "m": "initialize( file_name, thread_safe = false, yaml_opts = {} )", "r": ""}, {"p": "YAML::Store", "m": "initialize( file_name, yaml_opts = {} )", "r": ""}, {"p": "Zlib::Deflate", "m": "<< string", "r": ""}, {"p": "Zlib::Deflate", "m": "Zlib::Deflate.deflate(string[, level])", "r": ""}, {"p": "Zlib::Deflate", "m": "Zlib::Deflate.new(level=DEFAULT_COMPRESSION, window_bits=MAX_WBITS, mem_level=DEF_MEM_LEVEL, strategy=DEFAULT_STRATEGY)", "r": ""}, {"p": "Zlib::Deflate", "m": "deflate(string, flush = Zlib::NO_FLUSH)", "r": "String"}, {"p": "Zlib::Deflate", "m": "deflate(string, flush = Zlib::NO_FLUSH) { |chunk| ... }", "r": "nil"}, {"p": "Zlib::Deflate", "m": "deflate(string[, level])", "r": ""}, {"p": "Zlib::Deflate", "m": "flush(flush = Zlib::SYNC_FLUSH)", "r": "String"}, {"p": "Zlib::Deflate", "m": "flush(flush = Zlib::SYNC_FLUSH) { |chunk| ... }", "r": "nil"}, {"p": "Zlib::Deflate", "m": "params(level, strategy)", "r": ""}, {"p": "Zlib::Deflate", "m": "set_dictionary(string)", "r": ""}, {"p": "Zlib::GzipFile", "m": "Zlib::GzipReader.wrap(io, ...) { |gz| ... }", "r": ""}, {"p": "Zlib::GzipFile", "m": "Zlib::GzipWriter.wrap(io, ...) { |gz| ... }", "r": ""}, {"p": "Zlib::GzipFile", "m": "sync = flag", "r": ""}, {"p": "Zlib::GzipReader", "m": "Zlib::GzipReader.new(io, options = {})", "r": ""}, {"p": "Zlib::GzipReader", "m": "Zlib::GzipReader.open(filename) {|gz| ... }", "r": ""}, {"p": "Zlib::GzipReader", "m": "readpartial(maxlen [, outbuf])", "r": "string, outbuf"}, {"p": "Zlib::GzipWriter", "m": "Zlib::GzipWriter.new(io, level = nil, strategy = nil, options = {})", "r": ""}, {"p": "Zlib::GzipWriter", "m": "Zlib::GzipWriter.open(filename, level=nil, strategy=nil) { |gz| ... }", "r": ""}, {"p": "Zlib::GzipWriter", "m": "flush(flush=nil)", "r": ""}, {"p": "Zlib::Inflate", "m": "Zlib::Inflate.inflate(string)", "r": ""}, {"p": "Zlib::Inflate", "m": "Zlib::Inflate.new(window_bits = Zlib::MAX_WBITS)", "r": ""}, {"p": "Zlib::Inflate", "m": "add_dictionary(string)", "r": ""}, {"p": "Zlib::Inflate", "m": "inflate(deflate_string)", "r": "String"}, {"p": "Zlib::Inflate", "m": "inflate(deflate_string) { |chunk| ... }", "r": "nil"}, {"p": "Zlib::Inflate", "m": "inflate(string)", "r": ""}, {"p": "Zlib::Inflate", "m": "sync(string)", "r": ""}, {"p": "Zlib::ZStream", "m": "finish", "r": "String"}, {"p": "Zlib::ZStream", "m": "finish { |chunk| ... }", "r": "nil"}, {"p": "Zlib::ZStream", "m": "flush_next_in", "r": "input"}, {"p": "Zlib::ZStream", "m": "flush_next_out", "r": "String"}, {"p": "Zlib::ZStream", "m": "flush_next_out { |chunk| ... }", "r": "nil"}]